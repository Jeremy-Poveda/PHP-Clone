Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    number_values -> INTEGER
Rule 43    number_values -> FLOAT
Rule 44    operator_aritmetic -> PLUS
Rule 45    operator_aritmetic -> MINUS
Rule 46    operator_aritmetic -> MULTIPLY
Rule 47    operator_aritmetic -> DIVIDE
Rule 48    operator_aritmetic -> MODULE
Rule 49    operator_aritmetic -> POW
Rule 50    conditional -> boolean_expression
Rule 51    conditional -> boolean_expression logic_operator boolean_expression
Rule 52    logic_operator -> LOGIC_AND
Rule 53    logic_operator -> LOGIC_OR
Rule 54    logic_operator -> LOGIC_XOR
Rule 55    boolean_expression -> comparation
Rule 56    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 57    boolean_expression -> logic_not_sentence
Rule 58    boolean_expression -> logic_expression
Rule 59    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 60    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 61    true_boolean_types -> TRUE
Rule 62    true_boolean_types -> STRING
Rule 63    true_boolean_types -> INTEGER
Rule 64    true_boolean_types -> FLOAT
Rule 65    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 66    false_boolean_types -> FALSE
Rule 67    false_boolean_types -> STRING
Rule 68    false_boolean_types -> INTEGER
Rule 69    false_boolean_types -> FLOAT
Rule 70    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 71    false_boolean_types -> NULL
Rule 72    logic_not_sentence -> LOGIC_NOT conditional
Rule 73    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 74    comparation -> values comparator_operator values
Rule 75    comparation -> values comparator_operator expression
Rule 76    comparation -> expression comparator_operator expression
Rule 77    comparation -> VARIABLE EQUALS_EQUALS values
Rule 78    comparation -> access_array_element EQUALS_EQUALS values
Rule 79    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 80    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 81    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 82    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 83    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 84    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 85    comparator_operator -> EQUALS_EQUALS
Rule 86    comparator_operator -> IDENTICAL
Rule 87    comparator_operator -> NOT_EQUALS
Rule 88    comparator_operator -> NOT_IDENTICAL
Rule 89    comparator_operator -> SMALL_THAN
Rule 90    comparator_operator -> GREATER_THAN
Rule 91    comparator_operator -> SMALL_EQUALS_TO
Rule 92    comparator_operator -> GREATER_EQUALS_TO
Rule 93    comparator_operator -> SPACECRAFT
Rule 94    comparator_operator -> NULL_FUSION
Rule 95    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 96    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 97    print_statement -> ECHO printable_values
Rule 98    print_statement -> PRINT printable_values
Rule 99    printable_values -> values
Rule 100   printable_values -> values COMMA printable_values
Rule 101   printable_values -> VARIABLE
Rule 102   printable_values -> VARIABLE COMMA printable_values
Rule 103   printable_values -> STRING STRING_CONCATENATION STRING
Rule 104   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 105   printable_values -> conditional
Rule 106   printable_values -> conditional COMMA printable_values
Rule 107   printable_values -> structure_object_principal
Rule 108   printable_values -> structure_object_principal COMMA printable_values
Rule 109   printable_values -> function_invocation
Rule 110   printable_values -> function_invocation COMMA printable_values
Rule 111   printable_values -> string_special_function
Rule 112   printable_values -> string_special_function COMMA printable_values
Rule 113   values -> INTEGER
Rule 114   values -> STRING
Rule 115   values -> FLOAT
Rule 116   values -> boolean
Rule 117   boolean -> TRUE
Rule 118   boolean -> FALSE
Rule 119   expression -> term
Rule 120   expression -> term PLUS expression
Rule 121   expression -> term MINUS expression
Rule 122   term -> factor
Rule 123   term -> factor MULTIPLY term
Rule 124   term -> factor DIVIDE term
Rule 125   term -> factor MODULE term
Rule 126   term -> factor POW term
Rule 127   factor -> INTEGER
Rule 128   factor -> VARIABLE
Rule 129   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 130   assignment -> variable_assignment
Rule 131   assignment -> constant_assignment
Rule 132   variable_assignment -> VARIABLE assignment_operator values
Rule 133   variable_assignment -> VARIABLE assignment_operator expression
Rule 134   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 135   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 136   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 137   variable_assignment -> VARIABLE assignment_operator input
Rule 138   variable_assignment -> VARIABLE assignment_operator special_function
Rule 139   variable_assignment -> VARIABLE INCREASE
Rule 140   variable_assignment -> VARIABLE DECREMENT
Rule 141   variable_assignment -> INCREASE VARIABLE
Rule 142   variable_assignment -> DECREMENT VARIABLE
Rule 143   assignment_operator -> EQUALS
Rule 144   assignment_operator -> PLUS_EQUALS
Rule 145   constant_assignment -> const_syntax
Rule 146   constant_assignment -> define_syntax
Rule 147   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 148   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 149   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 150   params -> real_params
Rule 151   params -> empty
Rule 152   real_params -> VARIABLE
Rule 153   real_params -> values
Rule 154   real_params -> real_params COMMA VARIABLE
Rule 155   real_params -> real_params COMMA values
Rule 156   empty -> <empty>
Rule 157   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 158   special_function -> arrow_function
Rule 159   special_function -> anonymous_functions
Rule 160   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 161   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 162   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 163   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 164   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 165   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 166   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 167   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 168   string_param -> STRING
Rule 169   string_param -> VARIABLE
Rule 170   int_param -> INTEGER
Rule 171   int_param -> VARIABLE
Rule 172   types_structure -> structure_array_principal
Rule 173   types_structure -> structure_matrix_principal
Rule 174   types_structure -> structure_object_principal
Rule 175   structure_array_principal -> indexed_array
Rule 176   structure_array_principal -> associative_array
Rule 177   structure_array_principal -> access_array_stucture
Rule 178   structure_array_principal -> access_array_element
Rule 179   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 180   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 181   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 182   structure_array -> key EQUALS GREATER_THAN values
Rule 183   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 184   key -> INTEGER
Rule 185   key -> STRING
Rule 186   values_array_indexed -> values
Rule 187   values_array_indexed -> values COMMA values_array_indexed
Rule 188   values_array_indexed -> object_creation
Rule 189   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 190   values_array_indexed -> indexed_array
Rule 191   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 192   access_array_stucture -> access_array_element SEMICOLON
Rule 193   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 194   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 195   structure_matrix_principal -> matrix_firstform
Rule 196   structure_matrix_principal -> matrix_secondform
Rule 197   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 198   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 199   structure_matrix_principal -> add_element_matrix
Rule 200   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 201   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 202   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 203   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 204   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 205   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 206   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 207   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 208   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 209   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 210   modify_element_matrix -> access_element_matrix EQUALS values
Rule 211   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 212   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 213   structure_object_principal -> object_creation
Rule 214   structure_object_principal -> access_method_object
Rule 215   object_creation -> NEW IDENTIFIER
Rule 216   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 217   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 218   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 219   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 220   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 221   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 222   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 223   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 224   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 225   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 226   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 227   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 228   accessType -> IDENTIFIER
Rule 229   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 230   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 231   interface_body -> interface_body interface_method
Rule 232   interface_body -> <empty>
Rule 233   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 234   class_extends_opt -> EXTENDS IDENTIFIER
Rule 235   class_extends_opt -> <empty>
Rule 236   class_implements_opt -> IMPLEMENTS interface_list
Rule 237   class_implements_opt -> <empty>
Rule 238   interface_list -> IDENTIFIER
Rule 239   interface_list -> interface_list COMMA IDENTIFIER
Rule 240   class_body -> class_body class_member
Rule 241   class_body -> <empty>
Rule 242   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 243   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 244   class_member -> class_attribute
Rule 245   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 246   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 247   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 248   visibility_opt -> PUBLIC
Rule 249   visibility_opt -> PRIVATE
Rule 250   visibility_opt -> PROTECTED
Rule 251   visibility_opt -> <empty>
Rule 252   method_body -> classStatement
Rule 253   method_body -> classStatement return_form
Rule 254   method_body -> return_form
Rule 255   method_body -> classStatement BREAK SEMICOLON
Rule 256   method_body -> classStatement method_body
Rule 257   return_form -> RETURN values SEMICOLON
Rule 258   return_form -> RETURN access_method_object SEMICOLON
Rule 259   return_form -> RETURN SEMICOLON
Rule 260   classStatement -> sentence
Rule 261   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 65 70 179 180 181 200 204 205
BREAK                : 24 27 255
CLASS                : 229
COLON                : 
COMMA                : 100 102 106 108 110 112 148 154 155 166 167 167 183 187 189 191 203 205 239
COMMENT              : 
CONST                : 147
DECREMENT            : 30 32 140 142
DEFINE               : 148
DIVIDE               : 47 124
ECHO                 : 95 97
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 143 147 160 182 183 210 211 212 219 220 221 224 225 226 245
EQUALS_EQUALS        : 77 78 79 80 81 82 83 84 85
EXTENDS              : 234
FALSE                : 66 118
FEGTS                : 163
FLOAT                : 43 64 69 115
FN                   : 160
FOR                  : 28
FUNCTION             : 157 161 233 242 243
GREATER_EQUALS_TO    : 92
GREATER_THAN         : 90 160 182 183 217 218 219 220 221 222 223 224 225 226
IDENTICAL            : 86
IDENTIFIER           : 40 41 147 149 157 215 216 227 228 229 230 233 234 238 239 242 243
IF                   : 14 15 16
IMPLEMENTS           : 236
INCREASE             : 29 31 139 141
INTEGER              : 33 42 63 68 113 127 170 184 193 206 206 208 209 227
INTERFACE            : 230
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 162 229 230 242 243
LEFT_BRACKET         : 181 193 194 201 202 203 206 206 207 207 208 208 209 209 212 227
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 56 65 70 95 96 129 148 149 157 160 161 163 164 165 166 167 179 180 200 204 205 216 233 242 243
LOGIC_AND            : 52
LOGIC_NOT            : 72 73
LOGIC_OR             : 53
LOGIC_XOR            : 54
MINUS                : 45 121 217 218 219 220 221 222 223 224 225 226
MODULE               : 48 125
MULTIPLY             : 46 123
NEW                  : 215 216
NOT_EQUALS           : 87
NOT_IDENTICAL        : 88
NULL                 : 71
NULL_FUSION          : 94
PLUS                 : 44 120
PLUS_EQUALS          : 33 144
POW                  : 49 126
PRINT                : 96 98
PRIVATE              : 249
PROTECTED            : 250
PUBLIC               : 248
READLINE             : 164
RETURN               : 22 23 26 257 258 259
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 162 229 230 242 243
RIGHT_BRACKET        : 181 193 194 201 202 203 206 206 207 207 208 208 209 209 212 227
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 56 65 70 95 96 129 148 149 157 160 161 163 164 165 166 167 179 180 200 204 205 216 233 242 243
SEMICOLON            : 3 4 22 23 24 26 27 28 28 192 197 198 200 201 233 245 246 247 255 257 258 259 261
SMALL_EQUALS_TO      : 91
SMALL_THAN           : 89
SPACECRAFT           : 93
STATIC               : 242
STDIN                : 163
STRING               : 62 67 103 103 104 114 148 164 168 185
STRING_CONCATENATION : 103 104
STRLEN               : 165
SUBSTR               : 166 167
TRUE                 : 61 117
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 73 77 79 80 81 81 83 84 101 102 104 128 132 133 134 135 136 137 138 139 140 141 142 152 154 169 171 193 194 194 206 207 207 207 208 208 209 209 211 212 217 218 219 220 220 221 225 245 246
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 218 219 220 221 223 224 225 226
access_array_element : 41 78 79 80 82 82 178 192 221 222 223 224 225 226 226
access_array_stucture : 177
access_element_matrix : 83 84 197 210 211
access_method_object : 214 258 261
add_element_matrix   : 199
anonymous_functions  : 159
arrow_function       : 158
assignment           : 4
assignment_operator  : 132 133 134 135 136 137 138
associative_array    : 176
body_statement       : 13 14 15 16 17 18 19 20 25 28 162
boolean              : 116
boolean_expression   : 50 51 51
classStatement       : 252 253 255 256
class_attribute      : 244
class_body           : 229 240
class_declaration    : 6
class_extends_opt    : 229 230
class_implements_opt : 229
class_member         : 240
codeblock            : 157 160 161
comparation          : 55
comparator_operator  : 35 74 75 76
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 56 72 105 106
const_syntax         : 145
constant_assignment  : 131 247
control_structures   : 8
define_syntax        : 146
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 151
expression           : 75 76 76 120 121 129 133
expression_for       : 28 35 38 38 39
factor               : 122 123 124 125 126
false_boolean_types  : 59 60
for_statement        : 12
function_declaration : 9
function_invocation  : 109 110 134 217 222
if_statement         : 10
increment_statement  : 28
indexed_array        : 175 190 191 212
input                : 137
int_param            : 166 167 167
interface_body       : 230 231
interface_declaration : 7
interface_list       : 236 239
interface_method     : 231
key                  : 182 183
logic_expression     : 58
logic_not_sentence   : 57
logic_operator       : 51 59 60
matrix_firstform     : 195
matrix_secondform    : 196
method_body          : 242 243 256
modify_element_matrix : 198
number_values        : 34 37
object_creation      : 188 189 213
operator_aritmetic   : 34 38
params               : 149 157 160 161 216 233 242 243
print_statement      : 3
printable_values     : 95 96 97 98 100 102 106 108 110 112
program              : 1 0
real_params          : 150 154 155
return_form          : 253 254
sentence             : 1 2 21 22 23 24 25 260
special_function     : 138
string_param         : 165 166 167
string_special_function : 111 112 135
structure_array      : 180 181 183
structure_array_principal : 172
structure_matrix_first : 200 205
structure_matrix_principal : 173
structure_matrix_second : 201 203
structure_object_principal : 107 108 174
term                 : 119 120 121 123 124 125 126
true_boolean_types   : 59 60
types_structure      : 5 136
values               : 22 26 65 74 74 75 77 78 99 100 132 147 148 153 155 182 183 186 187 202 203 204 205 210 219 224 245 257
values_array_indexed : 179 187 189 191
variable_assignment  : 130
visibility_opt       : 233 242 243 245 246 247
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (95) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> ECHO . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 11

    (96) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> PRINT . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 82
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 12

    (130) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 130 (assignment -> variable_assignment .)


state 13

    (131) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 131 (assignment -> constant_assignment .)


state 14

    (172) types_structure -> structure_array_principal .

    ECHO            reduce using rule 172 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 172 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 172 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 172 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 172 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 172 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 172 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 172 (types_structure -> structure_array_principal .)
    IF              reduce using rule 172 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 172 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 172 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 172 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 172 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 172 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 172 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 172 (types_structure -> structure_array_principal .)
    $end            reduce using rule 172 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 172 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 172 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 172 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 172 (types_structure -> structure_array_principal .)


state 15

    (173) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 173 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 173 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 173 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 173 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 173 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 173 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 173 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 173 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 173 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 173 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 173 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 173 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 173 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 173 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 173 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 173 (types_structure -> structure_matrix_principal .)


state 16

    (174) types_structure -> structure_object_principal .

    ECHO            reduce using rule 174 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 174 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 174 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 174 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 174 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 174 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 174 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 174 (types_structure -> structure_object_principal .)
    IF              reduce using rule 174 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 174 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 174 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 174 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 174 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 174 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 174 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 174 (types_structure -> structure_object_principal .)
    $end            reduce using rule 174 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 174 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 174 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 174 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 174 (types_structure -> structure_object_principal .)


state 17

    (229) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 83


state 18

    (230) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 84


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (157) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 85


state 23

    (132) variable_assignment -> VARIABLE . assignment_operator values
    (133) variable_assignment -> VARIABLE . assignment_operator expression
    (134) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (135) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (136) variable_assignment -> VARIABLE . assignment_operator types_structure
    (137) variable_assignment -> VARIABLE . assignment_operator input
    (138) variable_assignment -> VARIABLE . assignment_operator special_function
    (139) variable_assignment -> VARIABLE . INCREASE
    (140) variable_assignment -> VARIABLE . DECREMENT
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (212) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (143) assignment_operator -> . EQUALS
    (144) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 87
    DECREMENT       shift and go to state 88
    LEFT_BRACKET    shift and go to state 89
    MINUS           shift and go to state 91
    EQUALS          shift and go to state 90
    PLUS_EQUALS     shift and go to state 92

    assignment_operator            shift and go to state 86

state 24

    (141) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 93


state 25

    (142) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 94


state 26

    (145) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 145 (constant_assignment -> const_syntax .)


state 27

    (146) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 146 (constant_assignment -> define_syntax .)


state 28

    (175) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 175 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 175 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 175 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 175 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 175 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 175 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 175 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 175 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 175 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 175 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 175 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 175 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 175 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 175 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 175 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 175 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 175 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 175 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 175 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 175 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 175 (structure_array_principal -> indexed_array .)


state 29

    (176) structure_array_principal -> associative_array .

    ECHO            reduce using rule 176 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 176 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 176 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 176 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 176 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 176 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 176 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 176 (structure_array_principal -> associative_array .)
    IF              reduce using rule 176 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 176 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 176 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 176 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 176 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 176 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 176 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 176 (structure_array_principal -> associative_array .)
    $end            reduce using rule 176 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 176 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 176 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 176 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 176 (structure_array_principal -> associative_array .)


state 30

    (177) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 177 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 177 (structure_array_principal -> access_array_stucture .)


state 31

    (178) structure_array_principal -> access_array_element .
    (192) access_array_stucture -> access_array_element . SEMICOLON
    (222) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (224) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ECHO            reduce using rule 178 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 178 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 178 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 178 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 178 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 178 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 178 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 178 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 178 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 178 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 178 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 178 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 178 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 178 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 178 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 178 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 178 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 178 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 178 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 178 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 95
    MINUS           shift and go to state 96

  ! SEMICOLON       [ reduce using rule 178 (structure_array_principal -> access_array_element .) ]


state 32

    (195) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 195 (structure_matrix_principal -> matrix_firstform .)


state 33

    (196) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 196 (structure_matrix_principal -> matrix_secondform .)


state 34

    (197) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (210) modify_element_matrix -> access_element_matrix . EQUALS values
    (211) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 97
    EQUALS          shift and go to state 98


state 35

    (198) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 99


state 36

    (199) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 199 (structure_matrix_principal -> add_element_matrix .)


state 37

    (213) structure_object_principal -> object_creation .

    ECHO            reduce using rule 213 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 213 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 213 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 213 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 213 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 213 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 213 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 213 (structure_object_principal -> object_creation .)
    IF              reduce using rule 213 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 213 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 213 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 213 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 213 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 213 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 213 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 213 (structure_object_principal -> object_creation .)
    $end            reduce using rule 213 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 213 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 213 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 213 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 213 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 213 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 213 (structure_object_principal -> object_creation .)


state 38

    (214) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 214 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 214 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 214 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 214 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 214 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 214 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 214 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 214 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 214 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 214 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 214 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 214 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 214 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 214 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 214 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 214 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 214 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 214 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 214 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 214 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 214 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 214 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 214 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 100


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 101


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 102


state 42

    (147) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 103


state 43

    (148) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 104


state 44

    (179) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (200) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 105
    LEFT_BRACKET    shift and go to state 106


state 45

    (201) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (202) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (203) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 107

    structure_matrix_second        shift and go to state 108

state 46

    (215) object_creation -> NEW . IDENTIFIER
    (216) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 109


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (95) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (129) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 114
    STRING          shift and go to state 54
    INTEGER         shift and go to state 115
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    LEFT_PAREN      shift and go to state 110
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 111
    conditional                    shift and go to state 112
    expression                     shift and go to state 113
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    boolean                        shift and go to state 61
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    access_array_element           shift and go to state 71
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76

state 51

    (97) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 97 (print_statement -> ECHO printable_values .)


state 52

    (99) printable_values -> values .
    (100) printable_values -> values . COMMA printable_values
    (74) comparation -> values . comparator_operator values
    (75) comparation -> values . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 99 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 99 (printable_values -> values .)
    COMMA           shift and go to state 116
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 117

state 53

    (101) printable_values -> VARIABLE .
    (102) printable_values -> VARIABLE . COMMA printable_values
    (104) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 101 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 101 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 128 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 128 (factor -> VARIABLE .) ]


state 54

    (103) printable_values -> STRING . STRING_CONCATENATION STRING
    (114) values -> STRING .
    (62) true_boolean_types -> STRING .
    (67) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 132
    COMMA           reduce using rule 114 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 114 (values -> STRING .)
    IDENTICAL       reduce using rule 114 (values -> STRING .)
    NOT_EQUALS      reduce using rule 114 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 114 (values -> STRING .)
    SMALL_THAN      reduce using rule 114 (values -> STRING .)
    GREATER_THAN    reduce using rule 114 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 114 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 114 (values -> STRING .)
    SPACECRAFT      reduce using rule 114 (values -> STRING .)
    NULL_FUSION     reduce using rule 114 (values -> STRING .)
    SEMICOLON       reduce using rule 114 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 114 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 67 (false_boolean_types -> STRING .) ]


state 55

    (105) printable_values -> conditional .
    (106) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 105 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> conditional .)
    COMMA           shift and go to state 133


state 56

    (107) printable_values -> structure_object_principal .
    (108) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 107 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 134


state 57

    (109) printable_values -> function_invocation .
    (110) printable_values -> function_invocation . COMMA printable_values

    SEMICOLON       reduce using rule 109 (printable_values -> function_invocation .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> function_invocation .)
    COMMA           shift and go to state 135


state 58

    (111) printable_values -> string_special_function .
    (112) printable_values -> string_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 111 (printable_values -> string_special_function .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> string_special_function .)
    COMMA           shift and go to state 136


state 59

    (113) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .
    (127) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 113 (values -> INTEGER .)
    COMMA           reduce using rule 113 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 113 (values -> INTEGER .)
    IDENTICAL       reduce using rule 113 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 113 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 113 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 113 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 113 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 113 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 113 (values -> INTEGER .)
    SEMICOLON       reduce using rule 113 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 113 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 127 (factor -> INTEGER .)
    DIVIDE          reduce using rule 127 (factor -> INTEGER .)
    MODULE          reduce using rule 127 (factor -> INTEGER .)
    POW             reduce using rule 127 (factor -> INTEGER .)
    PLUS            reduce using rule 127 (factor -> INTEGER .)
    MINUS           reduce using rule 127 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 127 (factor -> INTEGER .) ]


state 60

    (115) values -> FLOAT .
    (64) true_boolean_types -> FLOAT .
    (69) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 115 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 115 (values -> FLOAT .)
    IDENTICAL       reduce using rule 115 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 115 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 115 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 115 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 115 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 115 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 115 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 115 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 115 (values -> FLOAT .)
    SEMICOLON       reduce using rule 115 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 115 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]


state 61

    (116) values -> boolean .

    COMMA           reduce using rule 116 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 116 (values -> boolean .)
    IDENTICAL       reduce using rule 116 (values -> boolean .)
    NOT_EQUALS      reduce using rule 116 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 116 (values -> boolean .)
    SMALL_THAN      reduce using rule 116 (values -> boolean .)
    GREATER_THAN    reduce using rule 116 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> boolean .)
    SPACECRAFT      reduce using rule 116 (values -> boolean .)
    NULL_FUSION     reduce using rule 116 (values -> boolean .)
    SEMICOLON       reduce using rule 116 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 116 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 116 (values -> boolean .)
    LOGIC_AND       reduce using rule 116 (values -> boolean .)
    LOGIC_OR        reduce using rule 116 (values -> boolean .)
    LOGIC_XOR       reduce using rule 116 (values -> boolean .)
    ECHO            reduce using rule 116 (values -> boolean .)
    PRINT           reduce using rule 116 (values -> boolean .)
    CLASS           reduce using rule 116 (values -> boolean .)
    INTERFACE       reduce using rule 116 (values -> boolean .)
    FUNCTION        reduce using rule 116 (values -> boolean .)
    VARIABLE        reduce using rule 116 (values -> boolean .)
    INCREASE        reduce using rule 116 (values -> boolean .)
    DECREMENT       reduce using rule 116 (values -> boolean .)
    IF              reduce using rule 116 (values -> boolean .)
    WHILE           reduce using rule 116 (values -> boolean .)
    FOR             reduce using rule 116 (values -> boolean .)
    CONST           reduce using rule 116 (values -> boolean .)
    DEFINE          reduce using rule 116 (values -> boolean .)
    ARRAY           reduce using rule 116 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 116 (values -> boolean .)
    NEW             reduce using rule 116 (values -> boolean .)
    $end            reduce using rule 116 (values -> boolean .)
    RETURN          reduce using rule 116 (values -> boolean .)
    BREAK           reduce using rule 116 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 116 (values -> boolean .)


state 62

    (50) conditional -> boolean_expression .
    (51) conditional -> boolean_expression . logic_operator boolean_expression
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 50 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 50 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 50 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

  ! LOGIC_AND       [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 50 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 137

state 63

    (149) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 141


state 64

    (165) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 142


state 65

    (166) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 143


state 66

    (117) boolean -> TRUE .
    (61) true_boolean_types -> TRUE .

    COMMA           reduce using rule 117 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 117 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 117 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 117 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 117 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 117 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 117 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 117 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 117 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 117 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 117 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 117 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 117 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)


state 67

    (118) boolean -> FALSE .
    (66) false_boolean_types -> FALSE .

    COMMA           reduce using rule 118 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 118 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 118 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 118 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 118 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 118 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 118 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 118 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 118 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 118 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 118 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 118 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 118 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)


state 68

    (55) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 55 (boolean_expression -> comparation .)
    COMMA           reduce using rule 55 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 55 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 55 (boolean_expression -> comparation .)


state 69

    (57) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> logic_not_sentence .)


state 70

    (58) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_expression .)


state 71

    (222) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (224) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (78) comparation -> access_array_element . EQUALS_EQUALS values
    (79) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (82) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 96
    EQUALS_EQUALS   shift and go to state 144


state 72

    (76) comparation -> expression . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 145

state 73

    (83) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 146


state 74

    (72) logic_not_sentence -> LOGIC_NOT . conditional
    (73) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 148
    LEFT_PAREN      shift and go to state 110
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    conditional                    shift and go to state 147
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 149
    expression                     shift and go to state 72
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 75

    (59) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

    logic_operator                 shift and go to state 154

state 76

    (60) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

    logic_operator                 shift and go to state 155

state 77

    (119) expression -> term .
    (120) expression -> term . PLUS expression
    (121) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 119 (expression -> term .)
    IDENTICAL       reduce using rule 119 (expression -> term .)
    NOT_EQUALS      reduce using rule 119 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 119 (expression -> term .)
    SMALL_THAN      reduce using rule 119 (expression -> term .)
    GREATER_THAN    reduce using rule 119 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 119 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 119 (expression -> term .)
    SPACECRAFT      reduce using rule 119 (expression -> term .)
    NULL_FUSION     reduce using rule 119 (expression -> term .)
    RIGHT_PAREN     reduce using rule 119 (expression -> term .)
    SEMICOLON       reduce using rule 119 (expression -> term .)
    LOGIC_AND       reduce using rule 119 (expression -> term .)
    LOGIC_OR        reduce using rule 119 (expression -> term .)
    LOGIC_XOR       reduce using rule 119 (expression -> term .)
    COMMA           reduce using rule 119 (expression -> term .)
    PLUS            shift and go to state 156
    MINUS           shift and go to state 157


state 78

    (65) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 158


state 79

    (71) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 71 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> NULL .)


state 80

    (122) term -> factor .
    (123) term -> factor . MULTIPLY term
    (124) term -> factor . DIVIDE term
    (125) term -> factor . MODULE term
    (126) term -> factor . POW term

    PLUS            reduce using rule 122 (term -> factor .)
    MINUS           reduce using rule 122 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 122 (term -> factor .)
    IDENTICAL       reduce using rule 122 (term -> factor .)
    NOT_EQUALS      reduce using rule 122 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 122 (term -> factor .)
    SMALL_THAN      reduce using rule 122 (term -> factor .)
    GREATER_THAN    reduce using rule 122 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 122 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 122 (term -> factor .)
    SPACECRAFT      reduce using rule 122 (term -> factor .)
    NULL_FUSION     reduce using rule 122 (term -> factor .)
    RIGHT_PAREN     reduce using rule 122 (term -> factor .)
    SEMICOLON       reduce using rule 122 (term -> factor .)
    LOGIC_AND       reduce using rule 122 (term -> factor .)
    LOGIC_OR        reduce using rule 122 (term -> factor .)
    LOGIC_XOR       reduce using rule 122 (term -> factor .)
    COMMA           reduce using rule 122 (term -> factor .)
    MULTIPLY        shift and go to state 159
    DIVIDE          shift and go to state 160
    MODULE          shift and go to state 161
    POW             shift and go to state 162


state 81

    (96) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (129) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 114
    STRING          shift and go to state 54
    INTEGER         shift and go to state 115
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    LEFT_PAREN      shift and go to state 110
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 163
    conditional                    shift and go to state 112
    expression                     shift and go to state 113
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    boolean                        shift and go to state 61
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    access_array_element           shift and go to state 71
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76

state 82

    (98) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 98 (print_statement -> PRINT printable_values .)


state 83

    (229) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (234) class_extends_opt -> . EXTENDS IDENTIFIER
    (235) class_extends_opt -> .

    EXTENDS         shift and go to state 165
    IMPLEMENTS      reduce using rule 235 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 235 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 164

state 84

    (230) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (234) class_extends_opt -> . EXTENDS IDENTIFIER
    (235) class_extends_opt -> .

    EXTENDS         shift and go to state 165
    LEFT_BRACE      reduce using rule 235 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 166

state 85

    (157) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 167


state 86

    (132) variable_assignment -> VARIABLE assignment_operator . values
    (133) variable_assignment -> VARIABLE assignment_operator . expression
    (134) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (135) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (136) variable_assignment -> VARIABLE assignment_operator . types_structure
    (137) variable_assignment -> VARIABLE assignment_operator . input
    (138) variable_assignment -> VARIABLE assignment_operator . special_function
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (163) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (164) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (158) special_function -> . arrow_function
    (159) special_function -> . anonymous_functions
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (160) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (161) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    INTEGER         shift and go to state 176
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    FEGTS           shift and go to state 180
    READLINE        shift and go to state 181
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185
    FN              shift and go to state 186
    FUNCTION        shift and go to state 187
    VARIABLE        shift and go to state 168
    LEFT_PAREN      shift and go to state 179
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    values                         shift and go to state 169
    expression                     shift and go to state 170
    function_invocation            shift and go to state 171
    string_special_function        shift and go to state 172
    types_structure                shift and go to state 173
    input                          shift and go to state 174
    special_function               shift and go to state 175
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 182
    anonymous_functions            shift and go to state 183
    factor                         shift and go to state 80
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 87

    (139) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 139 (variable_assignment -> VARIABLE INCREASE .)


state 88

    (140) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 140 (variable_assignment -> VARIABLE DECREMENT .)


state 89

    (193) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (212) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 189
    VARIABLE        shift and go to state 188
    RIGHT_BRACKET   shift and go to state 190


state 90

    (143) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 143 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 143 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 143 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 143 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 143 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 143 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 143 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 143 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 143 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 143 (assignment_operator -> EQUALS .)
    FN              reduce using rule 143 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 143 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 143 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 143 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 143 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 143 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 143 (assignment_operator -> EQUALS .)


state 91

    (217) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (219) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 191


state 92

    (144) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 144 (assignment_operator -> PLUS_EQUALS .)


state 93

    (141) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 141 (variable_assignment -> INCREASE VARIABLE .)


state 94

    (142) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 142 (variable_assignment -> DECREMENT VARIABLE .)


state 95

    (192) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 192 (access_array_stucture -> access_array_element SEMICOLON .)


state 96

    (222) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (223) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (224) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (225) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 192


state 97

    (197) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 197 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 98

    (210) modify_element_matrix -> access_element_matrix EQUALS . values
    (211) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 194
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 193
    boolean                        shift and go to state 61

state 99

    (198) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 198 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 100

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 197
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    conditional                    shift and go to state 196
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 149
    expression                     shift and go to state 72
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 101

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 197
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    conditional                    shift and go to state 198
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 149
    expression                     shift and go to state 72
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 102

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 199


state 103

    (147) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 200


state 104

    (148) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 201


state 105

    (179) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (180) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (200) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (182) structure_array -> . key EQUALS GREATER_THAN values
    (183) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (204) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (205) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (184) key -> . INTEGER
    (185) key -> . STRING
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    ARRAY           shift and go to state 202
    INTEGER         shift and go to state 210
    STRING          shift and go to state 211
    FLOAT           shift and go to state 178
    NEW             shift and go to state 46
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values_array_indexed           shift and go to state 203
    structure_array                shift and go to state 204
    structure_matrix_first         shift and go to state 205
    values                         shift and go to state 206
    object_creation                shift and go to state 207
    indexed_array                  shift and go to state 208
    key                            shift and go to state 209
    boolean                        shift and go to state 61

state 106

    (181) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (182) structure_array -> . key EQUALS GREATER_THAN values
    (183) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (184) key -> . INTEGER
    (185) key -> . STRING

    INTEGER         shift and go to state 213
    STRING          shift and go to state 214

    structure_array                shift and go to state 212
    key                            shift and go to state 209

state 107

    (202) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (203) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 215
    boolean                        shift and go to state 61

state 108

    (201) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 216


state 109

    (215) object_creation -> NEW IDENTIFIER .
    (216) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 215 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 217


state 110

    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (129) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 219
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 220
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    conditional                    shift and go to state 218
    expression                     shift and go to state 113
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    values                         shift and go to state 149
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61

state 111

    (95) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 221


state 112

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (105) printable_values -> conditional .
    (106) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 222
    COMMA           shift and go to state 133

  ! RIGHT_PAREN     [ reduce using rule 105 (printable_values -> conditional .) ]


state 113

    (129) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (76) comparation -> expression . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 223
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 145

state 114

    (101) printable_values -> VARIABLE .
    (102) printable_values -> VARIABLE . COMMA printable_values
    (104) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (128) factor -> VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 101 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    RIGHT_PAREN     reduce using rule 101 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 130
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 131

  ! MINUS           [ reduce using rule 128 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 128 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 128 (factor -> VARIABLE .) ]


state 115

    (113) values -> INTEGER .
    (127) factor -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 113 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 113 (values -> INTEGER .)
    IDENTICAL       reduce using rule 113 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 113 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 113 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 113 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 113 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 113 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 113 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 113 (values -> INTEGER .)
    MULTIPLY        reduce using rule 127 (factor -> INTEGER .)
    DIVIDE          reduce using rule 127 (factor -> INTEGER .)
    MODULE          reduce using rule 127 (factor -> INTEGER .)
    POW             reduce using rule 127 (factor -> INTEGER .)
    PLUS            reduce using rule 127 (factor -> INTEGER .)
    MINUS           reduce using rule 127 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 127 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 127 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]


state 116

    (100) printable_values -> values COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    values                         shift and go to state 52
    printable_values               shift and go to state 224
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 117

    (74) comparation -> values comparator_operator . values
    (75) comparation -> values comparator_operator . expression
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 176
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    values                         shift and go to state 225
    expression                     shift and go to state 226
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 118

    (85) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)


state 119

    (86) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 86 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 86 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 86 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 86 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 86 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 86 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 86 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 86 (comparator_operator -> IDENTICAL .)


state 120

    (87) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 87 (comparator_operator -> NOT_EQUALS .)


state 121

    (88) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)


state 122

    (89) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 89 (comparator_operator -> SMALL_THAN .)


state 123

    (90) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> GREATER_THAN .)


state 124

    (91) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)


state 125

    (92) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)


state 126

    (93) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> SPACECRAFT .)


state 127

    (94) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> NULL_FUSION .)


state 128

    (102) printable_values -> VARIABLE COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 228
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 129

    (104) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 229


state 130

    (77) comparation -> VARIABLE EQUALS_EQUALS . values
    (80) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (81) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (84) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 230
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 231
    access_array_element           shift and go to state 232
    access_element_matrix          shift and go to state 233
    boolean                        shift and go to state 61

state 131

    (193) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 189
    VARIABLE        shift and go to state 188


state 132

    (103) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 234


state 133

    (106) printable_values -> conditional COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    conditional                    shift and go to state 55
    printable_values               shift and go to state 235
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 134

    (108) printable_values -> structure_object_principal COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 236
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 135

    (110) printable_values -> function_invocation COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    function_invocation            shift and go to state 57
    printable_values               shift and go to state 237
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 136

    (112) printable_values -> string_special_function COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) printable_values -> . function_invocation
    (110) printable_values -> . function_invocation COMMA printable_values
    (111) printable_values -> . string_special_function
    (112) printable_values -> . string_special_function COMMA printable_values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (166) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    string_special_function        shift and go to state 58
    printable_values               shift and go to state 238
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 137

    (51) conditional -> boolean_expression logic_operator . boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 197
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    boolean_expression             shift and go to state 239
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 149
    expression                     shift and go to state 72
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 138

    (52) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 52 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 52 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 52 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 52 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 52 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 52 (logic_operator -> LOGIC_AND .)


state 139

    (53) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_OR .)


state 140

    (54) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_XOR .)


state 141

    (149) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 240
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 142

    (165) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (168) string_param -> . STRING
    (169) string_param -> . VARIABLE

    STRING          shift and go to state 246
    VARIABLE        shift and go to state 247

    string_param                   shift and go to state 245

state 143

    (166) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (167) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (168) string_param -> . STRING
    (169) string_param -> . VARIABLE

    STRING          shift and go to state 246
    VARIABLE        shift and go to state 247

    string_param                   shift and go to state 248

state 144

    (78) comparation -> access_array_element EQUALS_EQUALS . values
    (79) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (82) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    access_array_element           shift and go to state 249
    values                         shift and go to state 250
    boolean                        shift and go to state 61

state 145

    (76) comparation -> expression comparator_operator . expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    expression                     shift and go to state 252
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 146

    (83) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 254


state 147

    (72) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)


state 148

    (73) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    MINUS           reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 128 (factor -> VARIABLE .) ]


state 149

    (74) comparation -> values . comparator_operator values
    (75) comparation -> values . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 117

state 150

    (78) comparation -> access_array_element . EQUALS_EQUALS values
    (79) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (82) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 144


state 151

    (114) values -> STRING .
    (62) true_boolean_types -> STRING .
    (67) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    EQUALS_EQUALS   reduce using rule 114 (values -> STRING .)
    IDENTICAL       reduce using rule 114 (values -> STRING .)
    NOT_EQUALS      reduce using rule 114 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 114 (values -> STRING .)
    SMALL_THAN      reduce using rule 114 (values -> STRING .)
    GREATER_THAN    reduce using rule 114 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 114 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 114 (values -> STRING .)
    SPACECRAFT      reduce using rule 114 (values -> STRING .)
    NULL_FUSION     reduce using rule 114 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 67 (false_boolean_types -> STRING .) ]


state 152

    (61) true_boolean_types -> TRUE .
    (117) boolean -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 117 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 117 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 117 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 117 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 117 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 117 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 117 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 117 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 117 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 117 (boolean -> TRUE .)


state 153

    (66) false_boolean_types -> FALSE .
    (118) boolean -> FALSE .

    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 118 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 118 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 118 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 118 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 118 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 118 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 118 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 118 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 118 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 118 (boolean -> FALSE .)


state 154

    (59) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    FALSE           shift and go to state 256
    STRING          shift and go to state 257
    INTEGER         shift and go to state 258
    FLOAT           shift and go to state 259
    ARRAY           shift and go to state 260
    NULL            shift and go to state 79

    false_boolean_types            shift and go to state 255

state 155

    (60) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 262
    STRING          shift and go to state 263
    INTEGER         shift and go to state 264
    FLOAT           shift and go to state 265
    ARRAY           shift and go to state 266

    true_boolean_types             shift and go to state 261

state 156

    (120) expression -> term PLUS . expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    term                           shift and go to state 77
    expression                     shift and go to state 267
    factor                         shift and go to state 80

state 157

    (121) expression -> term MINUS . expression
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    term                           shift and go to state 77
    expression                     shift and go to state 268
    factor                         shift and go to state 80

state 158

    (65) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (70) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 270
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 269
    boolean                        shift and go to state 61

state 159

    (123) term -> factor MULTIPLY . term
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    factor                         shift and go to state 80
    term                           shift and go to state 271

state 160

    (124) term -> factor DIVIDE . term
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    factor                         shift and go to state 80
    term                           shift and go to state 272

state 161

    (125) term -> factor MODULE . term
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    factor                         shift and go to state 80
    term                           shift and go to state 273

state 162

    (126) term -> factor POW . term
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    factor                         shift and go to state 80
    term                           shift and go to state 274

state 163

    (96) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 275


state 164

    (229) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (236) class_implements_opt -> . IMPLEMENTS interface_list
    (237) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 277
    LEFT_BRACE      reduce using rule 237 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 276

state 165

    (234) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 278


state 166

    (230) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 279


state 167

    (157) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 280
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 168

    (128) factor -> VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (212) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 128 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 89
    MINUS           shift and go to state 91

  ! MINUS           [ reduce using rule 128 (factor -> VARIABLE .) ]


state 169

    (132) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 132 (variable_assignment -> VARIABLE assignment_operator values .)


state 170

    (133) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 133 (variable_assignment -> VARIABLE assignment_operator expression .)


state 171

    (134) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 134 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 172

    (135) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 135 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 173

    (136) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 136 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 174

    (137) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 137 (variable_assignment -> VARIABLE assignment_operator input .)


state 175

    (138) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 138 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 176

    (113) values -> INTEGER .
    (127) factor -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 113 (values -> INTEGER .)
    SEMICOLON       reduce using rule 113 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 113 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 113 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 113 (values -> INTEGER .)
    COMMA           reduce using rule 113 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 113 (values -> INTEGER .)
    MULTIPLY        reduce using rule 127 (factor -> INTEGER .)
    DIVIDE          reduce using rule 127 (factor -> INTEGER .)
    MODULE          reduce using rule 127 (factor -> INTEGER .)
    POW             reduce using rule 127 (factor -> INTEGER .)
    PLUS            reduce using rule 127 (factor -> INTEGER .)
    MINUS           reduce using rule 127 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 127 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 127 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 127 (factor -> INTEGER .) ]


state 177

    (114) values -> STRING .

    SEMICOLON       reduce using rule 114 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 114 (values -> STRING .)
    LOGIC_AND       reduce using rule 114 (values -> STRING .)
    LOGIC_OR        reduce using rule 114 (values -> STRING .)
    LOGIC_XOR       reduce using rule 114 (values -> STRING .)
    COMMA           reduce using rule 114 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 114 (values -> STRING .)
    ECHO            reduce using rule 114 (values -> STRING .)
    PRINT           reduce using rule 114 (values -> STRING .)
    CLASS           reduce using rule 114 (values -> STRING .)
    INTERFACE       reduce using rule 114 (values -> STRING .)
    FUNCTION        reduce using rule 114 (values -> STRING .)
    VARIABLE        reduce using rule 114 (values -> STRING .)
    INCREASE        reduce using rule 114 (values -> STRING .)
    DECREMENT       reduce using rule 114 (values -> STRING .)
    IF              reduce using rule 114 (values -> STRING .)
    WHILE           reduce using rule 114 (values -> STRING .)
    FOR             reduce using rule 114 (values -> STRING .)
    CONST           reduce using rule 114 (values -> STRING .)
    DEFINE          reduce using rule 114 (values -> STRING .)
    ARRAY           reduce using rule 114 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 114 (values -> STRING .)
    NEW             reduce using rule 114 (values -> STRING .)
    $end            reduce using rule 114 (values -> STRING .)
    RETURN          reduce using rule 114 (values -> STRING .)
    BREAK           reduce using rule 114 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 114 (values -> STRING .)


state 178

    (115) values -> FLOAT .

    SEMICOLON       reduce using rule 115 (values -> FLOAT .)
    COMMA           reduce using rule 115 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 115 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 115 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 115 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 115 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 115 (values -> FLOAT .)
    ECHO            reduce using rule 115 (values -> FLOAT .)
    PRINT           reduce using rule 115 (values -> FLOAT .)
    CLASS           reduce using rule 115 (values -> FLOAT .)
    INTERFACE       reduce using rule 115 (values -> FLOAT .)
    FUNCTION        reduce using rule 115 (values -> FLOAT .)
    VARIABLE        reduce using rule 115 (values -> FLOAT .)
    INCREASE        reduce using rule 115 (values -> FLOAT .)
    DECREMENT       reduce using rule 115 (values -> FLOAT .)
    IF              reduce using rule 115 (values -> FLOAT .)
    WHILE           reduce using rule 115 (values -> FLOAT .)
    FOR             reduce using rule 115 (values -> FLOAT .)
    CONST           reduce using rule 115 (values -> FLOAT .)
    DEFINE          reduce using rule 115 (values -> FLOAT .)
    ARRAY           reduce using rule 115 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 115 (values -> FLOAT .)
    NEW             reduce using rule 115 (values -> FLOAT .)
    $end            reduce using rule 115 (values -> FLOAT .)
    RETURN          reduce using rule 115 (values -> FLOAT .)
    BREAK           reduce using rule 115 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 115 (values -> FLOAT .)


state 179

    (129) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 253
    VARIABLE        shift and go to state 227
    LEFT_PAREN      shift and go to state 179

    expression                     shift and go to state 281
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 180

    (163) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 282


state 181

    (164) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 283


state 182

    (158) special_function -> arrow_function .

    SEMICOLON       reduce using rule 158 (special_function -> arrow_function .)


state 183

    (159) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 159 (special_function -> anonymous_functions .)


state 184

    (117) boolean -> TRUE .

    SEMICOLON       reduce using rule 117 (boolean -> TRUE .)
    COMMA           reduce using rule 117 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 117 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 117 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 117 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 117 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 117 (boolean -> TRUE .)
    ECHO            reduce using rule 117 (boolean -> TRUE .)
    PRINT           reduce using rule 117 (boolean -> TRUE .)
    CLASS           reduce using rule 117 (boolean -> TRUE .)
    INTERFACE       reduce using rule 117 (boolean -> TRUE .)
    FUNCTION        reduce using rule 117 (boolean -> TRUE .)
    VARIABLE        reduce using rule 117 (boolean -> TRUE .)
    INCREASE        reduce using rule 117 (boolean -> TRUE .)
    DECREMENT       reduce using rule 117 (boolean -> TRUE .)
    IF              reduce using rule 117 (boolean -> TRUE .)
    WHILE           reduce using rule 117 (boolean -> TRUE .)
    FOR             reduce using rule 117 (boolean -> TRUE .)
    CONST           reduce using rule 117 (boolean -> TRUE .)
    DEFINE          reduce using rule 117 (boolean -> TRUE .)
    ARRAY           reduce using rule 117 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 117 (boolean -> TRUE .)
    NEW             reduce using rule 117 (boolean -> TRUE .)
    $end            reduce using rule 117 (boolean -> TRUE .)
    RETURN          reduce using rule 117 (boolean -> TRUE .)
    BREAK           reduce using rule 117 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 117 (boolean -> TRUE .)


state 185

    (118) boolean -> FALSE .

    SEMICOLON       reduce using rule 118 (boolean -> FALSE .)
    COMMA           reduce using rule 118 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 118 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 118 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 118 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 118 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 118 (boolean -> FALSE .)
    ECHO            reduce using rule 118 (boolean -> FALSE .)
    PRINT           reduce using rule 118 (boolean -> FALSE .)
    CLASS           reduce using rule 118 (boolean -> FALSE .)
    INTERFACE       reduce using rule 118 (boolean -> FALSE .)
    FUNCTION        reduce using rule 118 (boolean -> FALSE .)
    VARIABLE        reduce using rule 118 (boolean -> FALSE .)
    INCREASE        reduce using rule 118 (boolean -> FALSE .)
    DECREMENT       reduce using rule 118 (boolean -> FALSE .)
    IF              reduce using rule 118 (boolean -> FALSE .)
    WHILE           reduce using rule 118 (boolean -> FALSE .)
    FOR             reduce using rule 118 (boolean -> FALSE .)
    CONST           reduce using rule 118 (boolean -> FALSE .)
    DEFINE          reduce using rule 118 (boolean -> FALSE .)
    ARRAY           reduce using rule 118 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 118 (boolean -> FALSE .)
    NEW             reduce using rule 118 (boolean -> FALSE .)
    $end            reduce using rule 118 (boolean -> FALSE .)
    RETURN          reduce using rule 118 (boolean -> FALSE .)
    BREAK           reduce using rule 118 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 118 (boolean -> FALSE .)


state 186

    (160) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 284


state 187

    (161) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 285


state 188

    (194) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 286


state 189

    (193) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 287


state 190

    (212) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 288


state 191

    (217) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (218) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (219) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (220) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (227) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (228) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 291

    function_invocation            shift and go to state 289
    accessType                     shift and go to state 290

state 192

    (222) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (223) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (224) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (225) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (149) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (227) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (228) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 291

    function_invocation            shift and go to state 292
    accessType                     shift and go to state 293

state 193

    (210) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 210 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 194

    (211) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 211 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 195

    (113) values -> INTEGER .

    SEMICOLON       reduce using rule 113 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 113 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 113 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 113 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 113 (values -> INTEGER .)
    COMMA           reduce using rule 113 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 113 (values -> INTEGER .)
    ECHO            reduce using rule 113 (values -> INTEGER .)
    PRINT           reduce using rule 113 (values -> INTEGER .)
    CLASS           reduce using rule 113 (values -> INTEGER .)
    INTERFACE       reduce using rule 113 (values -> INTEGER .)
    FUNCTION        reduce using rule 113 (values -> INTEGER .)
    VARIABLE        reduce using rule 113 (values -> INTEGER .)
    INCREASE        reduce using rule 113 (values -> INTEGER .)
    DECREMENT       reduce using rule 113 (values -> INTEGER .)
    IF              reduce using rule 113 (values -> INTEGER .)
    WHILE           reduce using rule 113 (values -> INTEGER .)
    FOR             reduce using rule 113 (values -> INTEGER .)
    CONST           reduce using rule 113 (values -> INTEGER .)
    DEFINE          reduce using rule 113 (values -> INTEGER .)
    ARRAY           reduce using rule 113 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 113 (values -> INTEGER .)
    NEW             reduce using rule 113 (values -> INTEGER .)
    $end            reduce using rule 113 (values -> INTEGER .)
    RETURN          reduce using rule 113 (values -> INTEGER .)
    BREAK           reduce using rule 113 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 113 (values -> INTEGER .)


state 196

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 294


state 197

    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    MINUS           reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 128 (factor -> VARIABLE .) ]


state 198

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 295


state 199

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 296


state 200

    (147) const_syntax -> CONST IDENTIFIER EQUALS . values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 297
    boolean                        shift and go to state 61

state 201

    (148) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 298


state 202

    (204) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (179) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 299


state 203

    (179) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 300


state 204

    (180) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 301


state 205

    (200) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 302


state 206

    (186) values_array_indexed -> values .
    (187) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 186 (values_array_indexed -> values .)
    COMMA           shift and go to state 303


state 207

    (188) values_array_indexed -> object_creation .
    (189) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 188 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 304


state 208

    (190) values_array_indexed -> indexed_array .
    (191) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 190 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 305


state 209

    (182) structure_array -> key . EQUALS GREATER_THAN values
    (183) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 306


state 210

    (113) values -> INTEGER .
    (184) key -> INTEGER .

    COMMA           reduce using rule 113 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 113 (values -> INTEGER .)
    EQUALS          reduce using rule 184 (key -> INTEGER .)


state 211

    (114) values -> STRING .
    (185) key -> STRING .

    COMMA           reduce using rule 114 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 114 (values -> STRING .)
    EQUALS          reduce using rule 185 (key -> STRING .)


state 212

    (181) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 307


state 213

    (184) key -> INTEGER .

    EQUALS          reduce using rule 184 (key -> INTEGER .)


state 214

    (185) key -> STRING .

    EQUALS          reduce using rule 185 (key -> STRING .)


state 215

    (202) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (203) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 308


state 216

    (201) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 309


state 217

    (216) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 310
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 218

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 222


state 219

    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (128) factor -> VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 130
    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    MINUS           reduce using rule 128 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 131

  ! EQUALS_EQUALS   [ reduce using rule 128 (factor -> VARIABLE .) ]


state 220

    (127) factor -> INTEGER .
    (113) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 113 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 127 (factor -> INTEGER .)
    DIVIDE          reduce using rule 127 (factor -> INTEGER .)
    MODULE          reduce using rule 127 (factor -> INTEGER .)
    POW             reduce using rule 127 (factor -> INTEGER .)
    PLUS            reduce using rule 127 (factor -> INTEGER .)
    MINUS           reduce using rule 127 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 127 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 113 (values -> INTEGER .)
    IDENTICAL       reduce using rule 113 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 113 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 113 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 113 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 113 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 113 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 113 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 113 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 127 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 127 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 127 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]


state 221

    (95) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 95 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 222

    (56) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 223

    (129) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 129 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 224

    (100) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 100 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 100 (printable_values -> values COMMA printable_values .)


state 225

    (74) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 74 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 74 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 74 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 74 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 74 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 74 (comparation -> values comparator_operator values .)


state 226

    (75) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 75 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 75 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 75 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 75 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 75 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 75 (comparation -> values comparator_operator expression .)


state 227

    (128) factor -> VARIABLE .

    MULTIPLY        reduce using rule 128 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 128 (factor -> VARIABLE .)
    MODULE          reduce using rule 128 (factor -> VARIABLE .)
    POW             reduce using rule 128 (factor -> VARIABLE .)
    PLUS            reduce using rule 128 (factor -> VARIABLE .)
    MINUS           reduce using rule 128 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 128 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 128 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 128 (factor -> VARIABLE .)
    COMMA           reduce using rule 128 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 128 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 128 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 128 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 128 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 128 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 128 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 128 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 128 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 128 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 128 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 128 (factor -> VARIABLE .)


state 228

    (102) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 102 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 102 (printable_values -> VARIABLE COMMA printable_values .)


state 229

    (104) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 104 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 230

    (81) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 131


state 231

    (77) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 232

    (80) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 233

    (84) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 234

    (103) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 103 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 235

    (106) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 106 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> conditional COMMA printable_values .)


state 236

    (108) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 108 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> structure_object_principal COMMA printable_values .)


state 237

    (110) printable_values -> function_invocation COMMA printable_values .

    SEMICOLON       reduce using rule 110 (printable_values -> function_invocation COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> function_invocation COMMA printable_values .)


state 238

    (112) printable_values -> string_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 112 (printable_values -> string_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> string_special_function COMMA printable_values .)


state 239

    (51) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)


state 240

    (149) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 311


state 241

    (150) params -> real_params .
    (154) real_params -> real_params . COMMA VARIABLE
    (155) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 150 (params -> real_params .)
    COMMA           shift and go to state 312


state 242

    (151) params -> empty .

    RIGHT_PAREN     reduce using rule 151 (params -> empty .)


state 243

    (152) real_params -> VARIABLE .

    COMMA           reduce using rule 152 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 152 (real_params -> VARIABLE .)


state 244

    (153) real_params -> values .

    COMMA           reduce using rule 153 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 153 (real_params -> values .)


state 245

    (165) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 313


state 246

    (168) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 168 (string_param -> STRING .)
    COMMA           reduce using rule 168 (string_param -> STRING .)


state 247

    (169) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 169 (string_param -> VARIABLE .)
    COMMA           reduce using rule 169 (string_param -> VARIABLE .)


state 248

    (166) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (167) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 314


state 249

    (82) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 250

    (78) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)


state 251

    (79) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 315


state 252

    (76) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 76 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 76 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 76 (comparation -> expression comparator_operator expression .)


state 253

    (127) factor -> INTEGER .

    MULTIPLY        reduce using rule 127 (factor -> INTEGER .)
    DIVIDE          reduce using rule 127 (factor -> INTEGER .)
    MODULE          reduce using rule 127 (factor -> INTEGER .)
    POW             reduce using rule 127 (factor -> INTEGER .)
    PLUS            reduce using rule 127 (factor -> INTEGER .)
    MINUS           reduce using rule 127 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 127 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 127 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 127 (factor -> INTEGER .)
    COMMA           reduce using rule 127 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 127 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 127 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 127 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 127 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 127 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 127 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 127 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 127 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 127 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 127 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 127 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 127 (factor -> INTEGER .)


state 254

    (83) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 255

    (59) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 256

    (66) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 66 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 66 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 66 (false_boolean_types -> FALSE .)


state 257

    (67) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 67 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 67 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 67 (false_boolean_types -> STRING .)


state 258

    (68) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 68 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 68 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 68 (false_boolean_types -> INTEGER .)


state 259

    (69) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 69 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 69 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 69 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 69 (false_boolean_types -> FLOAT .)


state 260

    (70) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 316


state 261

    (60) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 262

    (61) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 61 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 61 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 61 (true_boolean_types -> TRUE .)


state 263

    (62) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 62 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 62 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 62 (true_boolean_types -> STRING .)


state 264

    (63) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 63 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 63 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 63 (true_boolean_types -> INTEGER .)


state 265

    (64) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 64 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> FLOAT .)


state 266

    (65) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 317


state 267

    (120) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 120 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 120 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 120 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 120 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 120 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 120 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 120 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 120 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 120 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 120 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 120 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 120 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 120 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 120 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 120 (expression -> term PLUS expression .)
    COMMA           reduce using rule 120 (expression -> term PLUS expression .)


state 268

    (121) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 121 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 121 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 121 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 121 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 121 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 121 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 121 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 121 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 121 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 121 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 121 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 121 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 121 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 121 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 121 (expression -> term MINUS expression .)
    COMMA           reduce using rule 121 (expression -> term MINUS expression .)


state 269

    (65) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 318


state 270

    (70) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 271

    (123) term -> factor MULTIPLY term .

    PLUS            reduce using rule 123 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 123 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 123 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 123 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 123 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 123 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 123 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 123 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 123 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 123 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 123 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 123 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 123 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 123 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 123 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 123 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 123 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 123 (term -> factor MULTIPLY term .)


state 272

    (124) term -> factor DIVIDE term .

    PLUS            reduce using rule 124 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 124 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 124 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 124 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 124 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 124 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 124 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 124 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 124 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 124 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 124 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 124 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 124 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 124 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 124 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 124 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 124 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 124 (term -> factor DIVIDE term .)


state 273

    (125) term -> factor MODULE term .

    PLUS            reduce using rule 125 (term -> factor MODULE term .)
    MINUS           reduce using rule 125 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 125 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 125 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 125 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 125 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 125 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 125 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 125 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 125 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 125 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 125 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 125 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 125 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 125 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 125 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 125 (term -> factor MODULE term .)
    COMMA           reduce using rule 125 (term -> factor MODULE term .)


state 274

    (126) term -> factor POW term .

    PLUS            reduce using rule 126 (term -> factor POW term .)
    MINUS           reduce using rule 126 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 126 (term -> factor POW term .)
    IDENTICAL       reduce using rule 126 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 126 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 126 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 126 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 126 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 126 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 126 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 126 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 126 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 126 (term -> factor POW term .)
    SEMICOLON       reduce using rule 126 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 126 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 126 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 126 (term -> factor POW term .)
    COMMA           reduce using rule 126 (term -> factor POW term .)


state 275

    (96) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 96 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 276

    (229) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 319


state 277

    (236) class_implements_opt -> IMPLEMENTS . interface_list
    (238) interface_list -> . IDENTIFIER
    (239) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 321

    interface_list                 shift and go to state 320

state 278

    (234) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 234 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 234 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 279

    (230) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (231) interface_body -> . interface_body interface_method
    (232) interface_body -> .

    RIGHT_BRACE     reduce using rule 232 (interface_body -> .)
    PUBLIC          reduce using rule 232 (interface_body -> .)
    PRIVATE         reduce using rule 232 (interface_body -> .)
    PROTECTED       reduce using rule 232 (interface_body -> .)
    FUNCTION        reduce using rule 232 (interface_body -> .)

    interface_body                 shift and go to state 322

state 280

    (157) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 323


state 281

    (129) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 223


state 282

    (163) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 324


state 283

    (164) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 325


state 284

    (160) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 326
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 285

    (161) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 327
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 286

    (194) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (207) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 328

  ! LEFT_BRACKET    [ reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 287

    (193) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (206) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 329

  ! LEFT_BRACKET    [ reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 288

    (212) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 331

    indexed_array                  shift and go to state 330

state 289

    (217) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 217 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 290

    (218) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (219) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (220) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (221) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 218 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 332


state 291

    (149) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (227) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (228) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 141
    LEFT_BRACKET    shift and go to state 333
    EQUALS          reduce using rule 228 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 228 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 228 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 228 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 228 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 228 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 228 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 228 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 228 (accessType -> IDENTIFIER .)
    IF              reduce using rule 228 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 228 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 228 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 228 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 228 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 228 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 228 (accessType -> IDENTIFIER .)
    $end            reduce using rule 228 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 228 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 228 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 228 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 228 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 228 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 228 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 228 (accessType -> IDENTIFIER .) ]


state 292

    (222) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 222 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 293

    (223) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (224) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (225) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (226) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 223 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 334


state 294

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 335


state 295

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 336


state 296

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 338
    LEFT_PAREN      shift and go to state 337
    IDENTIFIER      shift and go to state 341
    INTEGER         shift and go to state 342
    FLOAT           shift and go to state 343

    expression_for                 shift and go to state 339
    number_values                  shift and go to state 340

state 297

    (147) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 147 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 298

    (148) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 344
    boolean                        shift and go to state 61

state 299

    (204) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (179) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185
    NEW             shift and go to state 46
    ARRAY           shift and go to state 331

    values                         shift and go to state 345
    values_array_indexed           shift and go to state 203
    boolean                        shift and go to state 61
    object_creation                shift and go to state 207
    indexed_array                  shift and go to state 208

state 300

    (179) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 179 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 301

    (180) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 180 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 302

    (200) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 346


state 303

    (187) values_array_indexed -> values COMMA . values_array_indexed
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    NEW             shift and go to state 46
    ARRAY           shift and go to state 331
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 206
    values_array_indexed           shift and go to state 347
    object_creation                shift and go to state 207
    indexed_array                  shift and go to state 208
    boolean                        shift and go to state 61

state 304

    (189) values_array_indexed -> object_creation COMMA . values_array_indexed
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    NEW             shift and go to state 46
    ARRAY           shift and go to state 331
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    object_creation                shift and go to state 207
    values_array_indexed           shift and go to state 348
    values                         shift and go to state 206
    indexed_array                  shift and go to state 208
    boolean                        shift and go to state 61

state 305

    (191) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    NEW             shift and go to state 46
    ARRAY           shift and go to state 331
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    indexed_array                  shift and go to state 208
    values_array_indexed           shift and go to state 349
    values                         shift and go to state 206
    object_creation                shift and go to state 207
    boolean                        shift and go to state 61

state 306

    (182) structure_array -> key EQUALS . GREATER_THAN values
    (183) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 350


state 307

    (181) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 181 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 308

    (202) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (203) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 202 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 351


state 309

    (201) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 201 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 310

    (216) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 352


state 311

    (149) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 149 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 312

    (154) real_params -> real_params COMMA . VARIABLE
    (155) real_params -> real_params COMMA . values
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 353
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 354
    boolean                        shift and go to state 61

state 313

    (165) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    COMMA           reduce using rule 165 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 165 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 165 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 314

    (166) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (167) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (170) int_param -> . INTEGER
    (171) int_param -> . VARIABLE

    INTEGER         shift and go to state 356
    VARIABLE        shift and go to state 357

    int_param                      shift and go to state 355

state 315

    (193) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 359
    VARIABLE        shift and go to state 358


state 316

    (70) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 270


state 317

    (65) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 269
    boolean                        shift and go to state 61

state 318

    (65) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 319

    (229) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (240) class_body -> . class_body class_member
    (241) class_body -> .

    RIGHT_BRACE     reduce using rule 241 (class_body -> .)
    PUBLIC          reduce using rule 241 (class_body -> .)
    PRIVATE         reduce using rule 241 (class_body -> .)
    PROTECTED       reduce using rule 241 (class_body -> .)
    STATIC          reduce using rule 241 (class_body -> .)
    FUNCTION        reduce using rule 241 (class_body -> .)
    VARIABLE        reduce using rule 241 (class_body -> .)
    CONST           reduce using rule 241 (class_body -> .)
    DEFINE          reduce using rule 241 (class_body -> .)

    class_body                     shift and go to state 360

state 320

    (236) class_implements_opt -> IMPLEMENTS interface_list .
    (239) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 236 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 361


state 321

    (238) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 238 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 238 (interface_list -> IDENTIFIER .)


state 322

    (230) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (231) interface_body -> interface_body . interface_method
    (233) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (248) visibility_opt -> . PUBLIC
    (249) visibility_opt -> . PRIVATE
    (250) visibility_opt -> . PROTECTED
    (251) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 362
    PUBLIC          shift and go to state 365
    PRIVATE         shift and go to state 366
    PROTECTED       shift and go to state 367
    FUNCTION        reduce using rule 251 (visibility_opt -> .)

    interface_method               shift and go to state 363
    visibility_opt                 shift and go to state 364

state 323

    (157) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (162) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 369

    codeblock                      shift and go to state 368

state 324

    (163) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 370


state 325

    (164) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 371


state 326

    (160) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 372


state 327

    (161) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 373


state 328

    (207) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 374
    INTEGER         shift and go to state 375


state 329

    (206) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 377
    VARIABLE        shift and go to state 376


state 330

    (212) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 212 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 331

    (179) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 378


state 332

    (219) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (220) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (221) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 379
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 380
    access_array_element           shift and go to state 381
    boolean                        shift and go to state 61

state 333

    (227) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 382


state 334

    (224) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (225) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (226) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 385
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    access_array_element           shift and go to state 383
    values                         shift and go to state 384
    boolean                        shift and go to state 61

state 335

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 386
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 336

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 390
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 337

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 338
    LEFT_PAREN      shift and go to state 337
    IDENTIFIER      shift and go to state 341
    INTEGER         shift and go to state 342
    FLOAT           shift and go to state 343

    expression_for                 shift and go to state 391
    number_values                  shift and go to state 340

state 338

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 339

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 392
    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVIDE          shift and go to state 397
    MODULE          shift and go to state 398
    POW             shift and go to state 399

    operator_aritmetic             shift and go to state 393

state 340

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 341

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 400


state 342

    (42) number_values -> INTEGER .

    SEMICOLON       reduce using rule 42 (number_values -> INTEGER .)
    PLUS            reduce using rule 42 (number_values -> INTEGER .)
    MINUS           reduce using rule 42 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 42 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 42 (number_values -> INTEGER .)
    MODULE          reduce using rule 42 (number_values -> INTEGER .)
    POW             reduce using rule 42 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 42 (number_values -> INTEGER .)


state 343

    (43) number_values -> FLOAT .

    SEMICOLON       reduce using rule 43 (number_values -> FLOAT .)
    PLUS            reduce using rule 43 (number_values -> FLOAT .)
    MINUS           reduce using rule 43 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 43 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 43 (number_values -> FLOAT .)
    MODULE          reduce using rule 43 (number_values -> FLOAT .)
    POW             reduce using rule 43 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> FLOAT .)


state 344

    (148) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 401


state 345

    (204) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (186) values_array_indexed -> values .
    (187) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 402
    COMMA           shift and go to state 303

  ! RIGHT_PAREN     [ reduce using rule 186 (values_array_indexed -> values .) ]


state 346

    (200) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 200 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 347

    (187) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 187 (values_array_indexed -> values COMMA values_array_indexed .)


state 348

    (189) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 189 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 349

    (191) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 191 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 350

    (182) structure_array -> key EQUALS GREATER_THAN . values
    (183) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 403
    boolean                        shift and go to state 61

state 351

    (203) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (202) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (203) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 107

    structure_matrix_second        shift and go to state 404

state 352

    (216) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 216 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 353

    (154) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 154 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 154 (real_params -> real_params COMMA VARIABLE .)


state 354

    (155) real_params -> real_params COMMA values .

    COMMA           reduce using rule 155 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 155 (real_params -> real_params COMMA values .)


state 355

    (166) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (167) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 406
    COMMA           shift and go to state 405


state 356

    (170) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 170 (int_param -> INTEGER .)
    COMMA           reduce using rule 170 (int_param -> INTEGER .)


state 357

    (171) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 171 (int_param -> VARIABLE .)
    COMMA           reduce using rule 171 (int_param -> VARIABLE .)


state 358

    (194) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 407


state 359

    (193) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 408


state 360

    (229) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (240) class_body -> class_body . class_member
    (242) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (243) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (244) class_member -> . class_attribute
    (248) visibility_opt -> . PUBLIC
    (249) visibility_opt -> . PRIVATE
    (250) visibility_opt -> . PROTECTED
    (251) visibility_opt -> .
    (245) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (246) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (247) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 409
    PUBLIC          shift and go to state 365
    PRIVATE         shift and go to state 366
    PROTECTED       shift and go to state 367
    STATIC          reduce using rule 251 (visibility_opt -> .)
    FUNCTION        reduce using rule 251 (visibility_opt -> .)
    VARIABLE        reduce using rule 251 (visibility_opt -> .)
    CONST           reduce using rule 251 (visibility_opt -> .)
    DEFINE          reduce using rule 251 (visibility_opt -> .)

    class_member                   shift and go to state 410
    visibility_opt                 shift and go to state 411
    class_attribute                shift and go to state 412

state 361

    (239) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 413


state 362

    (230) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 230 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 363

    (231) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 231 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 231 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 231 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 231 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 231 (interface_body -> interface_body interface_method .)


state 364

    (233) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 414


state 365

    (248) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 248 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 248 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 248 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 248 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 248 (visibility_opt -> PUBLIC .)


state 366

    (249) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 249 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 249 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 249 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 249 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 249 (visibility_opt -> PRIVATE .)


state 367

    (250) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 250 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 250 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 250 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 250 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 250 (visibility_opt -> PROTECTED .)


state 368

    (157) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 157 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 369

    (162) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 415
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 370

    (163) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 163 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 371

    (164) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 164 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 372

    (160) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 416


state 373

    (161) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (162) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 369

    codeblock                      shift and go to state 417

state 374

    (207) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 418


state 375

    (208) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 419


state 376

    (209) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 420


state 377

    (206) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 421


state 378

    (179) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (186) values_array_indexed -> . values
    (187) values_array_indexed -> . values COMMA values_array_indexed
    (188) values_array_indexed -> . object_creation
    (189) values_array_indexed -> . object_creation COMMA values_array_indexed
    (190) values_array_indexed -> . indexed_array
    (191) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    NEW             shift and go to state 46
    ARRAY           shift and go to state 331
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values_array_indexed           shift and go to state 203
    values                         shift and go to state 206
    object_creation                shift and go to state 207
    indexed_array                  shift and go to state 208
    boolean                        shift and go to state 61

state 379

    (220) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 315

  ! LEFT_BRACKET    [ reduce using rule 220 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 380

    (219) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 219 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 381

    (221) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 221 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 382

    (227) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 422


state 383

    (226) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 226 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 384

    (224) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 224 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 385

    (225) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 315

  ! LEFT_BRACKET    [ reduce using rule 225 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 386

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 423


state 387

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 424
    BREAK           shift and go to state 425
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 387
    body_statement                 shift and go to state 426
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 388

    (26) body_statement -> RETURN . values SEMICOLON
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 427
    boolean                        shift and go to state 61

state 389

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 428


state 390

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 429


state 391

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 430
    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVIDE          shift and go to state 397
    MODULE          shift and go to state 398
    POW             shift and go to state 399

    operator_aritmetic             shift and go to state 393

state 392

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 431

    condition_for                  shift and go to state 432

state 393

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 338
    LEFT_PAREN      shift and go to state 337
    IDENTIFIER      shift and go to state 341
    INTEGER         shift and go to state 342
    FLOAT           shift and go to state 343

    expression_for                 shift and go to state 433
    number_values                  shift and go to state 340

state 394

    (44) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 44 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 44 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 44 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 44 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 44 (operator_aritmetic -> PLUS .)


state 395

    (45) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> MINUS .)


state 396

    (46) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MULTIPLY .)


state 397

    (47) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> DIVIDE .)


state 398

    (48) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MODULE .)


state 399

    (49) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> POW .)


state 400

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 434

    access_array_element           shift and go to state 435

state 401

    (148) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 148 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 402

    (204) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (205) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 204 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 436


state 403

    (182) structure_array -> key EQUALS GREATER_THAN values .
    (183) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 182 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 182 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 437


state 404

    (203) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 203 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 405

    (167) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (170) int_param -> . INTEGER
    (171) int_param -> . VARIABLE

    INTEGER         shift and go to state 356
    VARIABLE        shift and go to state 357

    int_param                      shift and go to state 438

state 406

    (166) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 166 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 166 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 166 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 407

    (194) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 194 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 408

    (193) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 193 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 409

    (229) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 229 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 410

    (240) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 240 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 240 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 240 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 240 (class_body -> class_body class_member .)
    STATIC          reduce using rule 240 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 240 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 240 (class_body -> class_body class_member .)
    CONST           reduce using rule 240 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 240 (class_body -> class_body class_member .)


state 411

    (242) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (243) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (245) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (246) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (247) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 439
    FUNCTION        shift and go to state 440
    VARIABLE        shift and go to state 441
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 442
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 412

    (244) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 244 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 244 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 244 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 244 (class_member -> class_attribute .)
    STATIC          reduce using rule 244 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 244 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 244 (class_member -> class_attribute .)
    CONST           reduce using rule 244 (class_member -> class_attribute .)
    DEFINE          reduce using rule 244 (class_member -> class_attribute .)


state 413

    (239) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 239 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 239 (interface_list -> interface_list COMMA IDENTIFIER .)


state 414

    (233) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 443


state 415

    (162) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 444


state 416

    (160) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 445


state 417

    (161) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 161 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 418

    (207) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 207 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 419

    (208) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 208 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 420

    (209) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 209 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 421

    (206) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 206 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 422

    (227) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 227 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 423

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 448
    ELSE            shift and go to state 449

    elseif_statement               shift and go to state 446
    else_statement                 shift and go to state 447

state 424

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    SEMICOLON       shift and go to state 451
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 450
    boolean                        shift and go to state 61

state 425

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 452


state 426

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 427

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 453


state 428

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 429

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 430

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 431

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 454

state 432

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 455


state 433

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVIDE          shift and go to state 397
    MODULE          shift and go to state 398
    POW             shift and go to state 399

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 393

state 434

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 456
    LEFT_BRACKET    shift and go to state 315


state 435

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 457


state 436

    (205) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (204) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (205) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 458

    structure_matrix_first         shift and go to state 459

state 437

    (183) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (182) structure_array -> . key EQUALS GREATER_THAN values
    (183) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (184) key -> . INTEGER
    (185) key -> . STRING

    INTEGER         shift and go to state 213
    STRING          shift and go to state 214

    key                            shift and go to state 209
    structure_array                shift and go to state 460

state 438

    (167) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 461


state 439

    (242) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 462


state 440

    (243) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 463


state 441

    (245) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (246) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 464
    SEMICOLON       shift and go to state 465


state 442

    (247) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 466


state 443

    (233) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 467


state 444

    (162) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 162 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 445

    (160) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (162) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 369

    codeblock                      shift and go to state 468

state 446

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 447

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 448

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 469


state 449

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 470


state 450

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 471


state 451

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 452

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 453

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 454

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 338
    LEFT_PAREN      shift and go to state 337
    IDENTIFIER      shift and go to state 341
    INTEGER         shift and go to state 342
    FLOAT           shift and go to state 343

    expression_for                 shift and go to state 472
    number_values                  shift and go to state 340

state 455

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 473
    INCREASE        shift and go to state 475
    DECREMENT       shift and go to state 476

    increment_statement            shift and go to state 474

state 456

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 457

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 458

    (204) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 477


state 459

    (205) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 205 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 460

    (183) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 183 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 183 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 461

    (167) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 167 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 167 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 167 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 462

    (242) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 478


state 463

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 479


state 464

    (245) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 480
    boolean                        shift and go to state 61

state 465

    (246) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 246 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 466

    (247) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 247 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 467

    (233) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 481
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 468

    (160) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 160 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 469

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (119) expression -> . term
    (120) expression -> . term PLUS expression
    (121) expression -> . term MINUS expression
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (122) term -> . factor
    (123) term -> . factor MULTIPLY term
    (124) term -> . factor DIVIDE term
    (125) term -> . factor MODULE term
    (126) term -> . factor POW term
    (127) factor -> . INTEGER
    (128) factor -> . VARIABLE
    (129) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 197
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 151
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 152
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 153
    NULL            shift and go to state 79

    conditional                    shift and go to state 482
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 149
    expression                     shift and go to state 72
    access_array_element           shift and go to state 150
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 470

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 483
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 471

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 472

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVIDE          shift and go to state 397
    MODULE          shift and go to state 398
    POW             shift and go to state 399

    operator_aritmetic             shift and go to state 393

state 473

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 484
    DECREMENT       shift and go to state 485
    PLUS_EQUALS     shift and go to state 486
    EQUALS          shift and go to state 487


state 474

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 488


state 475

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 489


state 476

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 490


state 477

    (204) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 491
    boolean                        shift and go to state 61

state 478

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 492


state 479

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 493
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 480

    (245) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 494


state 481

    (233) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 495


state 482

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 496


state 483

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 497


state 484

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 485

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 486

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 498


state 487

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 499


state 488

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 500


state 489

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 490

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 491

    (204) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (205) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 402


state 492

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (150) params -> . real_params
    (151) params -> . empty
    (152) real_params -> . VARIABLE
    (153) real_params -> . values
    (154) real_params -> . real_params COMMA VARIABLE
    (155) real_params -> . real_params COMMA values
    (156) empty -> .
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    RIGHT_PAREN     reduce using rule 156 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    params                         shift and go to state 501
    real_params                    shift and go to state 241
    empty                          shift and go to state 242
    values                         shift and go to state 244
    boolean                        shift and go to state 61

state 493

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 502


state 494

    (245) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 245 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 495

    (233) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 503


state 496

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 504


state 497

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 498

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 499

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    PLUS            shift and go to state 394
    MINUS           shift and go to state 395
    MULTIPLY        shift and go to state 396
    DIVIDE          shift and go to state 397
    MODULE          shift and go to state 398
    POW             shift and go to state 399

    operator_aritmetic             shift and go to state 505

state 500

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 506
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 501

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 507


state 502

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 508


state 503

    (233) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 233 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 233 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 233 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 233 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 233 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 504

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 388
    BREAK           shift and go to state 389
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 509
    sentence                       shift and go to state 387
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 505

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    INTEGER         shift and go to state 342
    FLOAT           shift and go to state 343

    number_values                  shift and go to state 510

state 506

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 511


state 507

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 512


state 508

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (252) method_body -> . classStatement
    (253) method_body -> . classStatement return_form
    (254) method_body -> . return_form
    (255) method_body -> . classStatement BREAK SEMICOLON
    (256) method_body -> . classStatement method_body
    (260) classStatement -> . sentence
    (261) classStatement -> . access_method_object SEMICOLON
    (257) return_form -> . RETURN values SEMICOLON
    (258) return_form -> . RETURN access_method_object SEMICOLON
    (259) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 518
    VARIABLE        shift and go to state 519
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 513
    classStatement                 shift and go to state 514
    return_form                    shift and go to state 515
    sentence                       shift and go to state 516
    access_method_object           shift and go to state 517
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 520
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 509

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 521


state 510

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 511

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 512

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (252) method_body -> . classStatement
    (253) method_body -> . classStatement return_form
    (254) method_body -> . return_form
    (255) method_body -> . classStatement BREAK SEMICOLON
    (256) method_body -> . classStatement method_body
    (260) classStatement -> . sentence
    (261) classStatement -> . access_method_object SEMICOLON
    (257) return_form -> . RETURN values SEMICOLON
    (258) return_form -> . RETURN access_method_object SEMICOLON
    (259) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 518
    VARIABLE        shift and go to state 519
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 522
    classStatement                 shift and go to state 514
    return_form                    shift and go to state 515
    sentence                       shift and go to state 516
    access_method_object           shift and go to state 517
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 520
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 513

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 523


state 514

    (252) method_body -> classStatement .
    (253) method_body -> classStatement . return_form
    (255) method_body -> classStatement . BREAK SEMICOLON
    (256) method_body -> classStatement . method_body
    (257) return_form -> . RETURN values SEMICOLON
    (258) return_form -> . RETURN access_method_object SEMICOLON
    (259) return_form -> . RETURN SEMICOLON
    (252) method_body -> . classStatement
    (253) method_body -> . classStatement return_form
    (254) method_body -> . return_form
    (255) method_body -> . classStatement BREAK SEMICOLON
    (256) method_body -> . classStatement method_body
    (260) classStatement -> . sentence
    (261) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (130) assignment -> . variable_assignment
    (131) assignment -> . constant_assignment
    (172) types_structure -> . structure_array_principal
    (173) types_structure -> . structure_matrix_principal
    (174) types_structure -> . structure_object_principal
    (229) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (230) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (157) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) variable_assignment -> . VARIABLE assignment_operator values
    (133) variable_assignment -> . VARIABLE assignment_operator expression
    (134) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (135) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (136) variable_assignment -> . VARIABLE assignment_operator types_structure
    (137) variable_assignment -> . VARIABLE assignment_operator input
    (138) variable_assignment -> . VARIABLE assignment_operator special_function
    (139) variable_assignment -> . VARIABLE INCREASE
    (140) variable_assignment -> . VARIABLE DECREMENT
    (141) variable_assignment -> . INCREASE VARIABLE
    (142) variable_assignment -> . DECREMENT VARIABLE
    (145) constant_assignment -> . const_syntax
    (146) constant_assignment -> . define_syntax
    (175) structure_array_principal -> . indexed_array
    (176) structure_array_principal -> . associative_array
    (177) structure_array_principal -> . access_array_stucture
    (178) structure_array_principal -> . access_array_element
    (195) structure_matrix_principal -> . matrix_firstform
    (196) structure_matrix_principal -> . matrix_secondform
    (197) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (198) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (199) structure_matrix_principal -> . add_element_matrix
    (213) structure_object_principal -> . object_creation
    (214) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (147) const_syntax -> . CONST IDENTIFIER EQUALS values
    (148) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (179) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (180) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (181) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (192) access_array_stucture -> . access_array_element SEMICOLON
    (200) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (201) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (206) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (210) modify_element_matrix -> . access_element_matrix EQUALS values
    (211) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (212) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (215) object_creation -> . NEW IDENTIFIER
    (216) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 252 (method_body -> classStatement .)
    BREAK           shift and go to state 525
    RETURN          shift and go to state 518
    VARIABLE        shift and go to state 519
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 514
    return_form                    shift and go to state 524
    method_body                    shift and go to state 526
    access_method_object           shift and go to state 517
    sentence                       shift and go to state 516
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 520
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 515

    (254) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 254 (method_body -> return_form .)


state 516

    (260) classStatement -> sentence .

    BREAK           reduce using rule 260 (classStatement -> sentence .)
    RETURN          reduce using rule 260 (classStatement -> sentence .)
    VARIABLE        reduce using rule 260 (classStatement -> sentence .)
    ECHO            reduce using rule 260 (classStatement -> sentence .)
    PRINT           reduce using rule 260 (classStatement -> sentence .)
    CLASS           reduce using rule 260 (classStatement -> sentence .)
    INTERFACE       reduce using rule 260 (classStatement -> sentence .)
    FUNCTION        reduce using rule 260 (classStatement -> sentence .)
    INCREASE        reduce using rule 260 (classStatement -> sentence .)
    DECREMENT       reduce using rule 260 (classStatement -> sentence .)
    IF              reduce using rule 260 (classStatement -> sentence .)
    WHILE           reduce using rule 260 (classStatement -> sentence .)
    FOR             reduce using rule 260 (classStatement -> sentence .)
    CONST           reduce using rule 260 (classStatement -> sentence .)
    DEFINE          reduce using rule 260 (classStatement -> sentence .)
    ARRAY           reduce using rule 260 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 260 (classStatement -> sentence .)
    NEW             reduce using rule 260 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 260 (classStatement -> sentence .)


state 517

    (261) classStatement -> access_method_object . SEMICOLON
    (214) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 527
    BREAK           reduce using rule 214 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 214 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 214 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 214 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 214 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 214 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 214 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 214 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 214 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 214 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 214 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 214 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 214 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 214 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 214 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 214 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 214 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 214 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 214 (structure_object_principal -> access_method_object .)


state 518

    (257) return_form -> RETURN . values SEMICOLON
    (258) return_form -> RETURN . access_method_object SEMICOLON
    (259) return_form -> RETURN . SEMICOLON
    (113) values -> . INTEGER
    (114) values -> . STRING
    (115) values -> . FLOAT
    (116) values -> . boolean
    (217) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (218) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (219) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (224) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (117) boolean -> . TRUE
    (118) boolean -> . FALSE
    (193) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 529
    INTEGER         shift and go to state 195
    STRING          shift and go to state 177
    FLOAT           shift and go to state 178
    VARIABLE        shift and go to state 531
    TRUE            shift and go to state 184
    FALSE           shift and go to state 185

    values                         shift and go to state 528
    access_method_object           shift and go to state 530
    boolean                        shift and go to state 61
    access_array_element           shift and go to state 532

state 519

    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) variable_assignment -> VARIABLE . assignment_operator values
    (133) variable_assignment -> VARIABLE . assignment_operator expression
    (134) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (135) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (136) variable_assignment -> VARIABLE . assignment_operator types_structure
    (137) variable_assignment -> VARIABLE . assignment_operator input
    (138) variable_assignment -> VARIABLE . assignment_operator special_function
    (139) variable_assignment -> VARIABLE . INCREASE
    (140) variable_assignment -> VARIABLE . DECREMENT
    (206) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (207) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (208) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (209) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (212) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (143) assignment_operator -> . EQUALS
    (144) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 91
    LEFT_BRACKET    shift and go to state 89
    INCREASE        shift and go to state 87
    DECREMENT       shift and go to state 88
    EQUALS          shift and go to state 90
    PLUS_EQUALS     shift and go to state 92

    assignment_operator            shift and go to state 86

state 520

    (222) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (224) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (178) structure_array_principal -> access_array_element .
    (192) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 96
    BREAK           reduce using rule 178 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 178 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 178 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 178 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 178 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 178 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 178 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 178 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 178 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 178 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 178 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 178 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 178 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 178 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 178 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 178 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 178 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 178 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 178 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 95


state 521

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 448
    ELSE            shift and go to state 449

    elseif_statement               shift and go to state 533
    else_statement                 shift and go to state 534

state 522

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 535


state 523

    (243) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 243 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 524

    (253) method_body -> classStatement return_form .
    (254) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 253 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 253 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 254 (method_body -> return_form .) ]


state 525

    (255) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 536


state 526

    (256) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 256 (method_body -> classStatement method_body .)


state 527

    (261) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 261 (classStatement -> access_method_object SEMICOLON .)


state 528

    (257) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 537


state 529

    (259) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 259 (return_form -> RETURN SEMICOLON .)


state 530

    (258) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 538


state 531

    (217) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (218) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (219) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (220) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (221) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (193) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (194) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 91
    LEFT_BRACKET    shift and go to state 315


state 532

    (222) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (224) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 96


state 533

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 534

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 535

    (242) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 242 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 536

    (255) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 255 (method_body -> classStatement BREAK SEMICOLON .)


state 537

    (257) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 257 (return_form -> RETURN values SEMICOLON .)


state 538

    (258) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 258 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 62 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 62 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 62 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 197 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 219 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 286 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 287 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 291 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 345 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 379 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 385 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 433 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 433 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 433 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 433 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 433 resolved as shift
WARNING: shift/reduce conflict for POW in state 433 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 59 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 60
WARNING: reduce/reduce conflict in state 114 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 115
WARNING: reduce/reduce conflict in state 115 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 115
WARNING: reduce/reduce conflict in state 151 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 151
WARNING: reduce/reduce conflict in state 176 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 176
WARNING: reduce/reduce conflict in state 220 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 220
WARNING: reduce/reduce conflict in state 220 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 220
WARNING: reduce/reduce conflict in state 452 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 452
WARNING: reduce/reduce conflict in state 471 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 471
WARNING: reduce/reduce conflict in state 524 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 524
