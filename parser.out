Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY_PUSH
    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    expression_for -> length_operations
Rule 43    number_values -> INTEGER
Rule 44    number_values -> FLOAT
Rule 45    operator_aritmetic -> PLUS
Rule 46    operator_aritmetic -> MINUS
Rule 47    operator_aritmetic -> MULTIPLY
Rule 48    operator_aritmetic -> DIVIDE
Rule 49    operator_aritmetic -> MODULE
Rule 50    operator_aritmetic -> POW
Rule 51    conditional -> boolean_expression
Rule 52    conditional -> boolean_expression logic_operator boolean_expression
Rule 53    logic_operator -> LOGIC_AND
Rule 54    logic_operator -> LOGIC_OR
Rule 55    logic_operator -> LOGIC_XOR
Rule 56    boolean_expression -> comparation
Rule 57    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 58    boolean_expression -> logic_not_sentence
Rule 59    boolean_expression -> logic_expression
Rule 60    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 61    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 62    true_boolean_types -> TRUE
Rule 63    true_boolean_types -> STRING
Rule 64    true_boolean_types -> INTEGER
Rule 65    true_boolean_types -> FLOAT
Rule 66    true_boolean_types -> VARIABLE
Rule 67    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 68    false_boolean_types -> FALSE
Rule 69    false_boolean_types -> STRING
Rule 70    false_boolean_types -> INTEGER
Rule 71    false_boolean_types -> VARIABLE
Rule 72    false_boolean_types -> FLOAT
Rule 73    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 74    false_boolean_types -> NULL
Rule 75    logic_not_sentence -> LOGIC_NOT conditional
Rule 76    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 77    comparation -> values comparator_operator values
Rule 78    comparation -> values comparator_operator expression
Rule 79    comparation -> expression comparator_operator expression
Rule 80    comparation -> VARIABLE EQUALS_EQUALS values
Rule 81    comparation -> access_array_element EQUALS_EQUALS values
Rule 82    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 83    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 84    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 85    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 86    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 87    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 88    comparator_operator -> EQUALS_EQUALS
Rule 89    comparator_operator -> IDENTICAL
Rule 90    comparator_operator -> NOT_EQUALS
Rule 91    comparator_operator -> NOT_IDENTICAL
Rule 92    comparator_operator -> SMALL_THAN
Rule 93    comparator_operator -> GREATER_THAN
Rule 94    comparator_operator -> SMALL_EQUALS_TO
Rule 95    comparator_operator -> GREATER_EQUALS_TO
Rule 96    comparator_operator -> SPACECRAFT
Rule 97    comparator_operator -> NULL_FUSION
Rule 98    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 99    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 100   print_statement -> ECHO printable_values
Rule 101   print_statement -> PRINT printable_values
Rule 102   printable_values -> values
Rule 103   printable_values -> values COMMA printable_values
Rule 104   printable_values -> VARIABLE
Rule 105   printable_values -> VARIABLE COMMA printable_values
Rule 106   printable_values -> STRING STRING_CONCATENATION STRING
Rule 107   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 108   printable_values -> conditional
Rule 109   printable_values -> conditional COMMA printable_values
Rule 110   printable_values -> structure_object_principal
Rule 111   printable_values -> structure_object_principal COMMA printable_values
Rule 112   printable_values -> function_invocation
Rule 113   printable_values -> function_invocation COMMA printable_values
Rule 114   printable_values -> string_special_function
Rule 115   printable_values -> string_special_function COMMA printable_values
Rule 116   printable_values -> array_special_function
Rule 117   printable_values -> array_special_function COMMA printable_values
Rule 118   values -> INTEGER
Rule 119   values -> STRING
Rule 120   values -> FLOAT
Rule 121   values -> boolean
Rule 122   boolean -> TRUE
Rule 123   boolean -> FALSE
Rule 124   expression -> term
Rule 125   expression -> term PLUS expression
Rule 126   expression -> term MINUS expression
Rule 127   term -> factor
Rule 128   term -> factor MULTIPLY term
Rule 129   term -> factor DIVIDE term
Rule 130   term -> factor MODULE term
Rule 131   term -> factor POW term
Rule 132   factor -> INTEGER
Rule 133   factor -> FLOAT
Rule 134   factor -> VARIABLE
Rule 135   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 136   factor -> STRING
Rule 137   assignment -> variable_assignment
Rule 138   assignment -> constant_assignment
Rule 139   variable_assignment -> VARIABLE assignment_operator values
Rule 140   variable_assignment -> VARIABLE assignment_operator expression
Rule 141   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 142   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 143   variable_assignment -> VARIABLE assignment_operator array_special_function
Rule 144   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 145   variable_assignment -> VARIABLE assignment_operator input
Rule 146   variable_assignment -> VARIABLE assignment_operator special_function
Rule 147   variable_assignment -> VARIABLE assignment_operator conditional
Rule 148   variable_assignment -> VARIABLE INCREASE
Rule 149   variable_assignment -> VARIABLE DECREMENT
Rule 150   variable_assignment -> INCREASE VARIABLE
Rule 151   variable_assignment -> DECREMENT VARIABLE
Rule 152   assignment_operator -> EQUALS
Rule 153   assignment_operator -> PLUS_EQUALS
Rule 154   constant_assignment -> const_syntax
Rule 155   constant_assignment -> define_syntax
Rule 156   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 157   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 158   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 159   function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN
Rule 160   params -> real_params
Rule 161   params -> empty
Rule 162   real_params -> VARIABLE
Rule 163   real_params -> values
Rule 164   real_params -> real_params COMMA VARIABLE
Rule 165   real_params -> real_params COMMA values
Rule 166   empty -> <empty>
Rule 167   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 168   special_function -> arrow_function
Rule 169   special_function -> anonymous_functions
Rule 170   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 171   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
Rule 172   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 173   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 174   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 175   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 176   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 177   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 178   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 179   string_param -> STRING
Rule 180   string_param -> VARIABLE
Rule 181   int_param -> INTEGER
Rule 182   int_param -> VARIABLE
Rule 183   array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 184   array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 185   array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 186   array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 187   count_param -> COMMA COUNT_NORMAL
Rule 188   count_param -> COMMA COUNT_RECURSIVE
Rule 189   count_param -> <empty>
Rule 190   length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 191   length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 192   length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 193   length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 194   types_structure -> structure_array_principal
Rule 195   types_structure -> structure_matrix_principal
Rule 196   types_structure -> structure_object_principal
Rule 197   structure_array_principal -> indexed_array
Rule 198   structure_array_principal -> associative_array
Rule 199   structure_array_principal -> access_array_stucture
Rule 200   structure_array_principal -> access_array_element
Rule 201   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 202   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 203   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 204   structure_array -> key EQUALS GREATER_THAN values
Rule 205   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 206   key -> INTEGER
Rule 207   key -> STRING
Rule 208   values_array_indexed -> values
Rule 209   values_array_indexed -> values COMMA values_array_indexed
Rule 210   values_array_indexed -> object_creation
Rule 211   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 212   values_array_indexed -> indexed_array
Rule 213   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 214   access_array_stucture -> access_array_element SEMICOLON
Rule 215   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 216   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 217   structure_matrix_principal -> matrix_firstform
Rule 218   structure_matrix_principal -> matrix_secondform
Rule 219   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 220   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 221   structure_matrix_principal -> add_element_matrix
Rule 222   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 223   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 224   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 225   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 226   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 227   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 228   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 229   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 230   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 231   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 232   modify_element_matrix -> access_element_matrix EQUALS values
Rule 233   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 234   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 235   structure_object_principal -> object_creation
Rule 236   structure_object_principal -> access_method_object
Rule 237   object_creation -> NEW IDENTIFIER
Rule 238   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 239   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 240   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 241   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 242   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 243   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 244   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 245   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 246   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 247   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 248   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 249   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 250   accessType -> IDENTIFIER
Rule 251   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 252   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 253   interface_body -> interface_body interface_method
Rule 254   interface_body -> <empty>
Rule 255   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 256   class_extends_opt -> EXTENDS IDENTIFIER
Rule 257   class_extends_opt -> <empty>
Rule 258   class_implements_opt -> IMPLEMENTS interface_list
Rule 259   class_implements_opt -> <empty>
Rule 260   interface_list -> IDENTIFIER
Rule 261   interface_list -> interface_list COMMA IDENTIFIER
Rule 262   class_body -> class_body class_member
Rule 263   class_body -> <empty>
Rule 264   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 265   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 266   class_member -> class_attribute
Rule 267   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 268   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 269   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 270   visibility_opt -> PUBLIC
Rule 271   visibility_opt -> PRIVATE
Rule 272   visibility_opt -> PROTECTED
Rule 273   visibility_opt -> <empty>
Rule 274   method_body -> classStatement
Rule 275   method_body -> classStatement return_form
Rule 276   method_body -> return_form
Rule 277   method_body -> classStatement BREAK SEMICOLON
Rule 278   method_body -> classStatement method_body
Rule 279   return_form -> RETURN values SEMICOLON
Rule 280   return_form -> RETURN access_method_object SEMICOLON
Rule 281   return_form -> RETURN SEMICOLON
Rule 282   classStatement -> sentence
Rule 283   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 67 73 201 202 203 222 226 227
ARRAY_POP            : 186
ARRAY_PUSH           : 
BREAK                : 24 27 277
CLASS                : 251
COLON                : 
COMMA                : 103 105 109 111 113 115 117 157 164 165 177 178 178 187 188 205 209 211 213 225 227 261
COMMENT              : 
CONST                : 156
COUNT                : 183 184 185 190 191 192
COUNT_NORMAL         : 187
COUNT_RECURSIVE      : 188
DECREMENT            : 30 32 149 151
DEFINE               : 157
DIVIDE               : 48 129
ECHO                 : 98 100
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 152 156 170 171 204 205 232 233 234 241 242 243 246 247 248 267
EQUALS_EQUALS        : 80 81 82 83 84 85 86 87 88
EXTENDS              : 256
FALSE                : 68 123
FEGTS                : 174
FLOAT                : 44 65 72 120 133
FN                   : 170 171
FOR                  : 28
FUNCTION             : 167 172 255 264 265
GREATER_EQUALS_TO    : 95
GREATER_THAN         : 93 170 171 204 205 239 240 241 242 243 244 245 246 247 248
IDENTICAL            : 89
IDENTIFIER           : 40 41 156 158 167 237 238 249 250 251 252 255 256 260 261 264 265
IF                   : 14 15 16
IMPLEMENTS           : 258
INCREASE             : 29 31 148 150
INTEGER              : 33 43 64 70 118 132 181 206 215 228 228 230 231 249
INTERFACE            : 252
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 173 251 252 264 265
LEFT_BRACKET         : 203 215 216 223 224 225 228 228 229 229 230 230 231 231 234 249
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 57 67 73 98 99 135 157 158 159 167 170 171 172 174 175 176 177 178 183 184 185 186 190 191 192 193 201 202 222 226 227 238 255 264 265
LOGIC_AND            : 53
LOGIC_NOT            : 75 76
LOGIC_OR             : 54
LOGIC_XOR            : 55
MINUS                : 46 126 239 240 241 242 243 244 245 246 247 248
MODULE               : 49 130
MULTIPLY             : 47 128
NEW                  : 237 238
NOT_EQUALS           : 90
NOT_IDENTICAL        : 91
NULL                 : 74
NULL_FUSION          : 97
PLUS                 : 45 125
PLUS_EQUALS          : 33 153
POW                  : 50 131
PRINT                : 99 101
PRIVATE              : 271
PROTECTED            : 272
PUBLIC               : 270
READLINE             : 175
RETURN               : 22 23 26 279 280 281
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 173 251 252 264 265
RIGHT_BRACKET        : 203 215 216 223 224 225 228 228 229 229 230 230 231 231 234 249
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 57 67 73 98 99 135 157 158 159 167 170 171 172 174 175 176 177 178 183 184 185 186 190 191 192 193 201 202 222 226 227 238 255 264 265
SEMICOLON            : 3 4 22 23 24 26 27 28 28 214 219 220 222 223 255 267 268 269 277 279 280 281 283
SMALL_EQUALS_TO      : 94
SMALL_THAN           : 92
SPACECRAFT           : 96
STATIC               : 264
STDIN                : 174
STRING               : 63 69 106 106 107 119 136 157 175 179 207
STRING_CONCATENATION : 106 107
STRLEN               : 176 193
SUBSTR               : 177 178
TRUE                 : 62 122
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 66 71 76 80 82 83 84 84 86 87 104 105 107 134 139 140 141 142 143 144 145 146 147 148 149 150 151 159 162 164 180 182 185 186 192 215 216 216 228 229 229 229 230 230 231 231 233 234 239 240 241 242 242 243 247 267 268
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 240 241 242 243 245 246 247 248
access_array_element : 41 81 82 83 85 85 200 214 243 244 245 246 247 248 248
access_array_stucture : 199
access_element_matrix : 86 87 219 232 233
access_method_object : 236 280 283
add_element_matrix   : 221
anonymous_functions  : 169
array_special_function : 116 117 143
arrow_function       : 168
assignment           : 4
assignment_operator  : 139 140 141 142 143 144 145 146 147
associative_array    : 198
body_statement       : 13 14 15 16 17 18 19 20 25 28 173
boolean              : 121
boolean_expression   : 51 52 52
classStatement       : 274 275 277 278
class_attribute      : 266
class_body           : 251 262
class_declaration    : 6
class_extends_opt    : 251 252
class_implements_opt : 251
class_member         : 262
codeblock            : 167 170 172
comparation          : 56
comparator_operator  : 35 77 78 79
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 57 75 108 109 147
const_syntax         : 154
constant_assignment  : 138 269
control_structures   : 8
count_param          : 183 184 185 190 191 192
define_syntax        : 155
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 161
expression           : 78 79 79 125 126 135 140
expression_for       : 28 35 38 38 39
factor               : 127 128 129 130 131
false_boolean_types  : 60 61
for_statement        : 12
function_declaration : 9
function_invocation  : 112 113 141 239 244
if_statement         : 10
increment_statement  : 28
indexed_array        : 197 212 213 234
input                : 145
int_param            : 177 178 178
interface_body       : 252 253
interface_declaration : 7
interface_list       : 258 261
interface_method     : 253
key                  : 204 205
length_operations    : 42
logic_expression     : 59
logic_not_sentence   : 58
logic_operator       : 52 60 61
matrix_firstform     : 217
matrix_secondform    : 218
method_body          : 264 265 278
modify_element_matrix : 220
number_values        : 34 37
object_creation      : 210 211 235
operator_aritmetic   : 34 38
params               : 158 159 167 170 171 172 238 255 264 265
print_statement      : 3 171
printable_values     : 98 99 100 101 103 105 109 111 113 115 117
program              : 1 0
real_params          : 160 164 165
return_form          : 275 276
sentence             : 1 2 21 22 23 24 25 282
special_function     : 146
string_param         : 176 177 178 193
string_special_function : 114 115 142
structure_array      : 202 203 205
structure_array_principal : 183 190 194
structure_matrix_first : 222 227
structure_matrix_principal : 184 191 195
structure_matrix_second : 223 225
structure_object_principal : 110 111 196
term                 : 124 125 126 128 129 130 131
true_boolean_types   : 60 61
types_structure      : 5 144
values               : 22 26 67 77 77 78 80 81 102 103 139 156 157 163 165 204 205 208 209 224 225 226 227 232 241 246 267 279
values_array_indexed : 201 209 211 213
variable_assignment  : 137
visibility_opt       : 255 264 265 267 268 269
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (98) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> ECHO . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 11

    (99) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> PRINT . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 84
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 85
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 12

    (137) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 137 (assignment -> variable_assignment .)


state 13

    (138) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 138 (assignment -> constant_assignment .)


state 14

    (194) types_structure -> structure_array_principal .

    ECHO            reduce using rule 194 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 194 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 194 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 194 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 194 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 194 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 194 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 194 (types_structure -> structure_array_principal .)
    IF              reduce using rule 194 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 194 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 194 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 194 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 194 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 194 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 194 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 194 (types_structure -> structure_array_principal .)
    $end            reduce using rule 194 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 194 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 194 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 194 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 194 (types_structure -> structure_array_principal .)


state 15

    (195) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 195 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 195 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 195 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 195 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 195 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 195 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 195 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 195 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 195 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 195 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 195 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 195 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 195 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 195 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 195 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 195 (types_structure -> structure_matrix_principal .)


state 16

    (196) types_structure -> structure_object_principal .

    ECHO            reduce using rule 196 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 196 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 196 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 196 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 196 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 196 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 196 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 196 (types_structure -> structure_object_principal .)
    IF              reduce using rule 196 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 196 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 196 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 196 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 196 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 196 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 196 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 196 (types_structure -> structure_object_principal .)
    $end            reduce using rule 196 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 196 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 196 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 196 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 196 (types_structure -> structure_object_principal .)


state 17

    (251) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 86


state 18

    (252) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 87


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (167) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 88


state 23

    (139) variable_assignment -> VARIABLE . assignment_operator values
    (140) variable_assignment -> VARIABLE . assignment_operator expression
    (141) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (142) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (143) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (144) variable_assignment -> VARIABLE . assignment_operator types_structure
    (145) variable_assignment -> VARIABLE . assignment_operator input
    (146) variable_assignment -> VARIABLE . assignment_operator special_function
    (147) variable_assignment -> VARIABLE . assignment_operator conditional
    (148) variable_assignment -> VARIABLE . INCREASE
    (149) variable_assignment -> VARIABLE . DECREMENT
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (152) assignment_operator -> . EQUALS
    (153) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 24

    (150) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 96


state 25

    (151) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 97


state 26

    (154) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 154 (constant_assignment -> const_syntax .)


state 27

    (155) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 155 (constant_assignment -> define_syntax .)


state 28

    (197) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 197 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 197 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 197 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 197 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 197 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 197 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 197 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 197 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 197 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 197 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 197 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 197 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 197 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 197 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 197 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 197 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 197 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 197 (structure_array_principal -> indexed_array .)
    COMMA           reduce using rule 197 (structure_array_principal -> indexed_array .)
    RIGHT_PAREN     reduce using rule 197 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 197 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 197 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 197 (structure_array_principal -> indexed_array .)


state 29

    (198) structure_array_principal -> associative_array .

    ECHO            reduce using rule 198 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 198 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 198 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 198 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 198 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 198 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 198 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 198 (structure_array_principal -> associative_array .)
    IF              reduce using rule 198 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 198 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 198 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 198 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 198 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 198 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 198 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 198 (structure_array_principal -> associative_array .)
    $end            reduce using rule 198 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 198 (structure_array_principal -> associative_array .)
    COMMA           reduce using rule 198 (structure_array_principal -> associative_array .)
    RIGHT_PAREN     reduce using rule 198 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 198 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 198 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 198 (structure_array_principal -> associative_array .)


state 30

    (199) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    COMMA           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    RIGHT_PAREN     reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 199 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 199 (structure_array_principal -> access_array_stucture .)


state 31

    (200) structure_array_principal -> access_array_element .
    (214) access_array_stucture -> access_array_element . SEMICOLON
    (244) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            reduce using rule 200 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 200 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 200 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 200 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 200 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 200 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 200 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 200 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 200 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 200 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 200 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 200 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 200 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 200 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 200 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 200 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 200 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 200 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 200 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 200 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98
    MINUS           shift and go to state 99


state 32

    (217) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    COMMA           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_PAREN     reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 217 (structure_matrix_principal -> matrix_firstform .)


state 33

    (218) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    COMMA           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_PAREN     reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 218 (structure_matrix_principal -> matrix_secondform .)


state 34

    (219) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (232) modify_element_matrix -> access_element_matrix . EQUALS values
    (233) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 100
    EQUALS          shift and go to state 101


state 35

    (220) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 102


state 36

    (221) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    COMMA           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_PAREN     reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 221 (structure_matrix_principal -> add_element_matrix .)


state 37

    (235) structure_object_principal -> object_creation .

    ECHO            reduce using rule 235 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 235 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 235 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 235 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 235 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 235 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 235 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 235 (structure_object_principal -> object_creation .)
    IF              reduce using rule 235 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 235 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 235 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 235 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 235 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 235 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 235 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 235 (structure_object_principal -> object_creation .)
    $end            reduce using rule 235 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 235 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 235 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 235 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 235 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 235 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 235 (structure_object_principal -> object_creation .)


state 38

    (236) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 236 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 236 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 236 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 236 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 236 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 236 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 236 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 236 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 236 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 236 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 236 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 236 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 236 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 236 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 236 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 236 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 236 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 236 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 236 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 236 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 236 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 236 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 236 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 103


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 104


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 105


state 42

    (156) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 106


state 43

    (157) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 107


state 44

    (201) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (222) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 108
    LEFT_BRACKET    shift and go to state 109


state 45

    (223) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (224) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (225) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 111

state 46

    (237) object_creation -> NEW . IDENTIFIER
    (238) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 112


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (98) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (135) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 114
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 51

    (100) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 100 (print_statement -> ECHO printable_values .)


state 52

    (102) printable_values -> values .
    (103) printable_values -> values . COMMA printable_values
    (77) comparation -> values . comparator_operator values
    (78) comparation -> values . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 102 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 102 (printable_values -> values .)
    COMMA           shift and go to state 121
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 53

    (104) printable_values -> VARIABLE .
    (105) printable_values -> VARIABLE . COMMA printable_values
    (107) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (159) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .
    (134) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 104 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    LEFT_PAREN      shift and go to state 135
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]


state 54

    (106) printable_values -> STRING . STRING_CONCATENATION STRING
    (119) values -> STRING .
    (63) true_boolean_types -> STRING .
    (69) false_boolean_types -> STRING .
    (136) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> STRING .)
    STRING_CONCATENATION shift and go to state 138
    COMMA           reduce using rule 119 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 119 (values -> STRING .)
    IDENTICAL       reduce using rule 119 (values -> STRING .)
    NOT_EQUALS      reduce using rule 119 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 119 (values -> STRING .)
    SMALL_THAN      reduce using rule 119 (values -> STRING .)
    GREATER_THAN    reduce using rule 119 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> STRING .)
    SPACECRAFT      reduce using rule 119 (values -> STRING .)
    NULL_FUSION     reduce using rule 119 (values -> STRING .)
    SEMICOLON       reduce using rule 119 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 119 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> STRING .) ]


state 55

    (108) printable_values -> conditional .
    (109) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 108 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> conditional .)
    COMMA           shift and go to state 139


state 56

    (110) printable_values -> structure_object_principal .
    (111) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 110 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 140


state 57

    (112) printable_values -> function_invocation .
    (113) printable_values -> function_invocation . COMMA printable_values

    SEMICOLON       reduce using rule 112 (printable_values -> function_invocation .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> function_invocation .)
    COMMA           shift and go to state 141


state 58

    (114) printable_values -> string_special_function .
    (115) printable_values -> string_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 114 (printable_values -> string_special_function .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> string_special_function .)
    COMMA           shift and go to state 142


state 59

    (116) printable_values -> array_special_function .
    (117) printable_values -> array_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 116 (printable_values -> array_special_function .)
    RIGHT_PAREN     reduce using rule 116 (printable_values -> array_special_function .)
    COMMA           shift and go to state 143


state 60

    (118) values -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (70) false_boolean_types -> INTEGER .
    (132) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> INTEGER .)
    COMMA           reduce using rule 118 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 118 (values -> INTEGER .)
    IDENTICAL       reduce using rule 118 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 118 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 118 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 118 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 118 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 118 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 118 (values -> INTEGER .)
    SEMICOLON       reduce using rule 118 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 118 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 132 (factor -> INTEGER .)
    DIVIDE          reduce using rule 132 (factor -> INTEGER .)
    MODULE          reduce using rule 132 (factor -> INTEGER .)
    POW             reduce using rule 132 (factor -> INTEGER .)
    PLUS            reduce using rule 132 (factor -> INTEGER .)
    MINUS           reduce using rule 132 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 132 (factor -> INTEGER .) ]


state 61

    (120) values -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (72) false_boolean_types -> FLOAT .
    (133) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> FLOAT .)
    COMMA           reduce using rule 120 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 120 (values -> FLOAT .)
    IDENTICAL       reduce using rule 120 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 120 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 120 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 120 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 120 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 120 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 120 (values -> FLOAT .)
    SEMICOLON       reduce using rule 120 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 120 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 133 (factor -> FLOAT .)
    DIVIDE          reduce using rule 133 (factor -> FLOAT .)
    MODULE          reduce using rule 133 (factor -> FLOAT .)
    POW             reduce using rule 133 (factor -> FLOAT .)
    PLUS            reduce using rule 133 (factor -> FLOAT .)
    MINUS           reduce using rule 133 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> FLOAT .) ]


state 62

    (121) values -> boolean .

    COMMA           reduce using rule 121 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 121 (values -> boolean .)
    IDENTICAL       reduce using rule 121 (values -> boolean .)
    NOT_EQUALS      reduce using rule 121 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 121 (values -> boolean .)
    SMALL_THAN      reduce using rule 121 (values -> boolean .)
    GREATER_THAN    reduce using rule 121 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 121 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 121 (values -> boolean .)
    SPACECRAFT      reduce using rule 121 (values -> boolean .)
    NULL_FUSION     reduce using rule 121 (values -> boolean .)
    SEMICOLON       reduce using rule 121 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 121 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 121 (values -> boolean .)
    LOGIC_AND       reduce using rule 121 (values -> boolean .)
    LOGIC_OR        reduce using rule 121 (values -> boolean .)
    LOGIC_XOR       reduce using rule 121 (values -> boolean .)
    ECHO            reduce using rule 121 (values -> boolean .)
    PRINT           reduce using rule 121 (values -> boolean .)
    CLASS           reduce using rule 121 (values -> boolean .)
    INTERFACE       reduce using rule 121 (values -> boolean .)
    FUNCTION        reduce using rule 121 (values -> boolean .)
    VARIABLE        reduce using rule 121 (values -> boolean .)
    INCREASE        reduce using rule 121 (values -> boolean .)
    DECREMENT       reduce using rule 121 (values -> boolean .)
    IF              reduce using rule 121 (values -> boolean .)
    WHILE           reduce using rule 121 (values -> boolean .)
    FOR             reduce using rule 121 (values -> boolean .)
    CONST           reduce using rule 121 (values -> boolean .)
    DEFINE          reduce using rule 121 (values -> boolean .)
    ARRAY           reduce using rule 121 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 121 (values -> boolean .)
    NEW             reduce using rule 121 (values -> boolean .)
    $end            reduce using rule 121 (values -> boolean .)
    RETURN          reduce using rule 121 (values -> boolean .)
    BREAK           reduce using rule 121 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 121 (values -> boolean .)


state 63

    (51) conditional -> boolean_expression .
    (52) conditional -> boolean_expression . logic_operator boolean_expression
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 51 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

  ! LOGIC_AND       [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 51 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 144

state 64

    (158) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 148


state 65

    (176) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 149


state 66

    (177) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 150


state 67

    (183) array_special_function -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 151


state 68

    (186) array_special_function -> ARRAY_POP . LEFT_PAREN VARIABLE RIGHT_PAREN

    LEFT_PAREN      shift and go to state 152


state 69

    (122) boolean -> TRUE .
    (62) true_boolean_types -> TRUE .

    COMMA           reduce using rule 122 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 122 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 122 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 122 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 122 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 122 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 122 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 122 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 122 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 122 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 122 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 122 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 122 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)


state 70

    (123) boolean -> FALSE .
    (68) false_boolean_types -> FALSE .

    COMMA           reduce using rule 123 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 123 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 123 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 123 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 123 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 123 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 123 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 123 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 123 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 123 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 123 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 123 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 123 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> FALSE .)


state 71

    (56) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> comparation .)
    COMMA           reduce using rule 56 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> comparation .)


state 72

    (58) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_not_sentence .)


state 73

    (59) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 59 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 59 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> logic_expression .)


state 74

    (244) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> access_array_element . EQUALS_EQUALS values
    (82) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (85) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 99
    EQUALS_EQUALS   shift and go to state 153


state 75

    (79) comparation -> expression . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 76

    (86) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 155


state 77

    (75) logic_not_sentence -> LOGIC_NOT . conditional
    (76) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 157
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 160
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    conditional                    shift and go to state 156
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 158
    expression                     shift and go to state 75
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 78

    (60) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

    logic_operator                 shift and go to state 163

state 79

    (61) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

    logic_operator                 shift and go to state 164

state 80

    (124) expression -> term .
    (125) expression -> term . PLUS expression
    (126) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 124 (expression -> term .)
    IDENTICAL       reduce using rule 124 (expression -> term .)
    NOT_EQUALS      reduce using rule 124 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 124 (expression -> term .)
    SMALL_THAN      reduce using rule 124 (expression -> term .)
    GREATER_THAN    reduce using rule 124 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 124 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 124 (expression -> term .)
    SPACECRAFT      reduce using rule 124 (expression -> term .)
    NULL_FUSION     reduce using rule 124 (expression -> term .)
    RIGHT_PAREN     reduce using rule 124 (expression -> term .)
    SEMICOLON       reduce using rule 124 (expression -> term .)
    LOGIC_AND       reduce using rule 124 (expression -> term .)
    LOGIC_OR        reduce using rule 124 (expression -> term .)
    LOGIC_XOR       reduce using rule 124 (expression -> term .)
    COMMA           reduce using rule 124 (expression -> term .)
    PLUS            shift and go to state 165
    MINUS           shift and go to state 166


state 81

    (67) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 167


state 82

    (74) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 74 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 74 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 74 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 74 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 74 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 74 (false_boolean_types -> NULL .)


state 83

    (127) term -> factor .
    (128) term -> factor . MULTIPLY term
    (129) term -> factor . DIVIDE term
    (130) term -> factor . MODULE term
    (131) term -> factor . POW term

    PLUS            reduce using rule 127 (term -> factor .)
    MINUS           reduce using rule 127 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 127 (term -> factor .)
    IDENTICAL       reduce using rule 127 (term -> factor .)
    NOT_EQUALS      reduce using rule 127 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 127 (term -> factor .)
    SMALL_THAN      reduce using rule 127 (term -> factor .)
    GREATER_THAN    reduce using rule 127 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 127 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 127 (term -> factor .)
    SPACECRAFT      reduce using rule 127 (term -> factor .)
    NULL_FUSION     reduce using rule 127 (term -> factor .)
    RIGHT_PAREN     reduce using rule 127 (term -> factor .)
    SEMICOLON       reduce using rule 127 (term -> factor .)
    LOGIC_AND       reduce using rule 127 (term -> factor .)
    LOGIC_OR        reduce using rule 127 (term -> factor .)
    LOGIC_XOR       reduce using rule 127 (term -> factor .)
    COMMA           reduce using rule 127 (term -> factor .)
    MULTIPLY        shift and go to state 168
    DIVIDE          shift and go to state 169
    MODULE          shift and go to state 170
    POW             shift and go to state 171


state 84

    (99) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (135) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 172
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 85

    (101) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 101 (print_statement -> PRINT printable_values .)


state 86

    (251) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (256) class_extends_opt -> . EXTENDS IDENTIFIER
    (257) class_extends_opt -> .

    EXTENDS         shift and go to state 174
    IMPLEMENTS      reduce using rule 257 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 257 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 173

state 87

    (252) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (256) class_extends_opt -> . EXTENDS IDENTIFIER
    (257) class_extends_opt -> .

    EXTENDS         shift and go to state 174
    LEFT_BRACE      reduce using rule 257 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 175

state 88

    (167) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 176


state 89

    (139) variable_assignment -> VARIABLE assignment_operator . values
    (140) variable_assignment -> VARIABLE assignment_operator . expression
    (141) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (142) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (143) variable_assignment -> VARIABLE assignment_operator . array_special_function
    (144) variable_assignment -> VARIABLE assignment_operator . types_structure
    (145) variable_assignment -> VARIABLE assignment_operator . input
    (146) variable_assignment -> VARIABLE assignment_operator . special_function
    (147) variable_assignment -> VARIABLE assignment_operator . conditional
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (174) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (175) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (168) special_function -> . arrow_function
    (169) special_function -> . anonymous_functions
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (170) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (171) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (172) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL

    INTEGER         shift and go to state 119
    STRING          shift and go to state 187
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    VARIABLE        shift and go to state 177
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    FEGTS           shift and go to state 188
    READLINE        shift and go to state 189
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FN              shift and go to state 194
    FUNCTION        shift and go to state 195
    LEFT_PAREN      shift and go to state 113
    ARRAY           shift and go to state 196
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    NULL            shift and go to state 82

    values                         shift and go to state 178
    expression                     shift and go to state 179
    function_invocation            shift and go to state 180
    string_special_function        shift and go to state 181
    array_special_function         shift and go to state 182
    types_structure                shift and go to state 183
    input                          shift and go to state 184
    special_function               shift and go to state 185
    conditional                    shift and go to state 186
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 190
    anonymous_functions            shift and go to state 191
    boolean_expression             shift and go to state 63
    factor                         shift and go to state 83
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 192
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 193
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 90

    (148) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 148 (variable_assignment -> VARIABLE INCREASE .)


state 91

    (149) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 149 (variable_assignment -> VARIABLE DECREMENT .)


state 92

    (215) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 198
    VARIABLE        shift and go to state 197
    RIGHT_BRACKET   shift and go to state 199


state 93

    (152) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 152 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 152 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 152 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 152 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 152 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 152 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 152 (assignment_operator -> EQUALS .)
    COUNT           reduce using rule 152 (assignment_operator -> EQUALS .)
    ARRAY_POP       reduce using rule 152 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 152 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 152 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 152 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 152 (assignment_operator -> EQUALS .)
    FN              reduce using rule 152 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 152 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 152 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 152 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 152 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 152 (assignment_operator -> EQUALS .)
    LOGIC_NOT       reduce using rule 152 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 152 (assignment_operator -> EQUALS .)


state 94

    (239) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (241) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 200


state 95

    (153) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    COUNT           reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    ARRAY_POP       reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    LOGIC_NOT       reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 153 (assignment_operator -> PLUS_EQUALS .)


state 96

    (150) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 150 (variable_assignment -> INCREASE VARIABLE .)


state 97

    (151) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 151 (variable_assignment -> DECREMENT VARIABLE .)


state 98

    (214) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    COMMA           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_PAREN     reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 214 (access_array_stucture -> access_array_element SEMICOLON .)


state 99

    (244) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (246) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 201


state 100

    (219) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    COMMA           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 219 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 101

    (232) modify_element_matrix -> access_element_matrix EQUALS . values
    (233) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 203
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 202
    boolean                        shift and go to state 62

state 102

    (220) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    COMMA           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 220 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 103

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 210
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 160
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    conditional                    shift and go to state 209
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 158
    expression                     shift and go to state 75
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 104

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 210
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 160
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    conditional                    shift and go to state 211
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 158
    expression                     shift and go to state 75
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 105

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 212


state 106

    (156) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 213


state 107

    (157) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 214


state 108

    (201) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (202) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (222) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (204) structure_array -> . key EQUALS GREATER_THAN values
    (205) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (226) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (206) key -> . INTEGER
    (207) key -> . STRING
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    ARRAY           shift and go to state 215
    INTEGER         shift and go to state 223
    STRING          shift and go to state 224
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values_array_indexed           shift and go to state 216
    structure_array                shift and go to state 217
    structure_matrix_first         shift and go to state 218
    values                         shift and go to state 219
    object_creation                shift and go to state 220
    indexed_array                  shift and go to state 221
    key                            shift and go to state 222
    boolean                        shift and go to state 62

state 109

    (203) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (204) structure_array -> . key EQUALS GREATER_THAN values
    (205) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (206) key -> . INTEGER
    (207) key -> . STRING

    INTEGER         shift and go to state 226
    STRING          shift and go to state 227

    structure_array                shift and go to state 225
    key                            shift and go to state 222

state 110

    (224) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (225) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 228
    boolean                        shift and go to state 62

state 111

    (223) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 229


state 112

    (237) object_creation -> NEW IDENTIFIER .
    (238) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 237 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 230


state 113

    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (135) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 232
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 233
    FLOAT           shift and go to state 234
    STRING          shift and go to state 235
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    conditional                    shift and go to state 231
    expression                     shift and go to state 116
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    values                         shift and go to state 158
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62

state 114

    (98) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 236


state 115

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (108) printable_values -> conditional .
    (109) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 237
    COMMA           shift and go to state 139

  ! RIGHT_PAREN     [ reduce using rule 108 (printable_values -> conditional .) ]


state 116

    (135) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (79) comparation -> expression . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 238
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 117

    (104) printable_values -> VARIABLE .
    (105) printable_values -> VARIABLE . COMMA printable_values
    (107) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (159) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (134) factor -> VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 104 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    LEFT_PAREN      shift and go to state 135
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 137
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]


state 118

    (106) printable_values -> STRING . STRING_CONCATENATION STRING
    (119) values -> STRING .
    (136) factor -> STRING .
    (63) true_boolean_types -> STRING .
    (69) false_boolean_types -> STRING .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 138
    COMMA           reduce using rule 119 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 119 (values -> STRING .)
    IDENTICAL       reduce using rule 119 (values -> STRING .)
    NOT_EQUALS      reduce using rule 119 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 119 (values -> STRING .)
    SMALL_THAN      reduce using rule 119 (values -> STRING .)
    GREATER_THAN    reduce using rule 119 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> STRING .)
    SPACECRAFT      reduce using rule 119 (values -> STRING .)
    NULL_FUSION     reduce using rule 119 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 119 (values -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)

  ! RIGHT_PAREN     [ reduce using rule 136 (factor -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> STRING .) ]


state 119

    (118) values -> INTEGER .
    (132) factor -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (70) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 118 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 118 (values -> INTEGER .)
    IDENTICAL       reduce using rule 118 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 118 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 118 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 118 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 118 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 118 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 118 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 118 (values -> INTEGER .)
    SEMICOLON       reduce using rule 118 (values -> INTEGER .)
    MULTIPLY        reduce using rule 132 (factor -> INTEGER .)
    DIVIDE          reduce using rule 132 (factor -> INTEGER .)
    MODULE          reduce using rule 132 (factor -> INTEGER .)
    POW             reduce using rule 132 (factor -> INTEGER .)
    PLUS            reduce using rule 132 (factor -> INTEGER .)
    MINUS           reduce using rule 132 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 132 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]


state 120

    (120) values -> FLOAT .
    (133) factor -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (72) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 120 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 120 (values -> FLOAT .)
    IDENTICAL       reduce using rule 120 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 120 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 120 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 120 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 120 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 120 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 120 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 120 (values -> FLOAT .)
    SEMICOLON       reduce using rule 120 (values -> FLOAT .)
    MULTIPLY        reduce using rule 133 (factor -> FLOAT .)
    DIVIDE          reduce using rule 133 (factor -> FLOAT .)
    MODULE          reduce using rule 133 (factor -> FLOAT .)
    POW             reduce using rule 133 (factor -> FLOAT .)
    PLUS            reduce using rule 133 (factor -> FLOAT .)
    MINUS           reduce using rule 133 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)

  ! RIGHT_PAREN     [ reduce using rule 133 (factor -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]


state 121

    (103) printable_values -> values COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    values                         shift and go to state 52
    printable_values               shift and go to state 239
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 122

    (77) comparation -> values comparator_operator . values
    (78) comparation -> values comparator_operator . expression
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 242
    STRING          shift and go to state 243
    FLOAT           shift and go to state 244
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246

    values                         shift and go to state 240
    expression                     shift and go to state 241
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 123

    (88) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    COUNT           reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)
    STRLEN          reduce using rule 88 (comparator_operator -> EQUALS_EQUALS .)


state 124

    (89) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 89 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 89 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 89 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 89 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 89 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 89 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 89 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 89 (comparator_operator -> IDENTICAL .)
    COUNT           reduce using rule 89 (comparator_operator -> IDENTICAL .)
    STRLEN          reduce using rule 89 (comparator_operator -> IDENTICAL .)


state 125

    (90) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    COUNT           reduce using rule 90 (comparator_operator -> NOT_EQUALS .)
    STRLEN          reduce using rule 90 (comparator_operator -> NOT_EQUALS .)


state 126

    (91) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    COUNT           reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)
    STRLEN          reduce using rule 91 (comparator_operator -> NOT_IDENTICAL .)


state 127

    (92) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    COUNT           reduce using rule 92 (comparator_operator -> SMALL_THAN .)
    STRLEN          reduce using rule 92 (comparator_operator -> SMALL_THAN .)


state 128

    (93) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    COUNT           reduce using rule 93 (comparator_operator -> GREATER_THAN .)
    STRLEN          reduce using rule 93 (comparator_operator -> GREATER_THAN .)


state 129

    (94) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    COUNT           reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)
    STRLEN          reduce using rule 94 (comparator_operator -> SMALL_EQUALS_TO .)


state 130

    (95) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    COUNT           reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)
    STRLEN          reduce using rule 95 (comparator_operator -> GREATER_EQUALS_TO .)


state 131

    (96) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    COUNT           reduce using rule 96 (comparator_operator -> SPACECRAFT .)
    STRLEN          reduce using rule 96 (comparator_operator -> SPACECRAFT .)


state 132

    (97) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    COUNT           reduce using rule 97 (comparator_operator -> NULL_FUSION .)
    STRLEN          reduce using rule 97 (comparator_operator -> NULL_FUSION .)


state 133

    (105) printable_values -> VARIABLE COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 247
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 134

    (107) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 248


state 135

    (159) function_invocation -> VARIABLE LEFT_PAREN . params RIGHT_PAREN
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 250
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 136

    (80) comparation -> VARIABLE EQUALS_EQUALS . values
    (83) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (84) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (87) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 254
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 255
    access_array_element           shift and go to state 256
    access_element_matrix          shift and go to state 257
    boolean                        shift and go to state 62

state 137

    (215) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 198
    VARIABLE        shift and go to state 197


state 138

    (106) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 258


state 139

    (109) printable_values -> conditional COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    conditional                    shift and go to state 55
    printable_values               shift and go to state 259
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 140

    (111) printable_values -> structure_object_principal COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 260
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 141

    (113) printable_values -> function_invocation COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    function_invocation            shift and go to state 57
    printable_values               shift and go to state 261
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 142

    (115) printable_values -> string_special_function COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    string_special_function        shift and go to state 58
    printable_values               shift and go to state 262
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 143

    (117) printable_values -> array_special_function COMMA . printable_values
    (102) printable_values -> . values
    (103) printable_values -> . values COMMA printable_values
    (104) printable_values -> . VARIABLE
    (105) printable_values -> . VARIABLE COMMA printable_values
    (106) printable_values -> . STRING STRING_CONCATENATION STRING
    (107) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (108) printable_values -> . conditional
    (109) printable_values -> . conditional COMMA printable_values
    (110) printable_values -> . structure_object_principal
    (111) printable_values -> . structure_object_principal COMMA printable_values
    (112) printable_values -> . function_invocation
    (113) printable_values -> . function_invocation COMMA printable_values
    (114) printable_values -> . string_special_function
    (115) printable_values -> . string_special_function COMMA printable_values
    (116) printable_values -> . array_special_function
    (117) printable_values -> . array_special_function COMMA printable_values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (176) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (177) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (183) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (186) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    array_special_function         shift and go to state 59
    printable_values               shift and go to state 263
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 144

    (52) conditional -> boolean_expression logic_operator . boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 210
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 160
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    boolean_expression             shift and go to state 264
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 158
    expression                     shift and go to state 75
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 145

    (53) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_AND .)


state 146

    (54) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_OR .)


state 147

    (55) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 55 (logic_operator -> LOGIC_XOR .)


state 148

    (158) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 265
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 149

    (176) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (179) string_param -> . STRING
    (180) string_param -> . VARIABLE

    STRING          shift and go to state 267
    VARIABLE        shift and go to state 268

    string_param                   shift and go to state 266

state 150

    (177) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (178) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (179) string_param -> . STRING
    (180) string_param -> . VARIABLE

    STRING          shift and go to state 267
    VARIABLE        shift and go to state 268

    string_param                   shift and go to state 269

state 151

    (183) array_special_function -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (184) array_special_function -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (185) array_special_function -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 272
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 270
    structure_matrix_principal     shift and go to state 271
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 273
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 152

    (186) array_special_function -> ARRAY_POP LEFT_PAREN . VARIABLE RIGHT_PAREN

    VARIABLE        shift and go to state 274


state 153

    (81) comparation -> access_array_element EQUALS_EQUALS . values
    (82) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (85) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 277
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    access_array_element           shift and go to state 275
    values                         shift and go to state 276
    boolean                        shift and go to state 62

state 154

    (79) comparation -> expression comparator_operator . expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    expression                     shift and go to state 278
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 155

    (86) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 282


state 156

    (75) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 75 (logic_not_sentence -> LOGIC_NOT conditional .)


state 157

    (76) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .
    (134) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    COMMA           reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    MINUS           reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]


state 158

    (77) comparation -> values . comparator_operator values
    (78) comparation -> values . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 159

    (81) comparation -> access_array_element . EQUALS_EQUALS values
    (82) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (85) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 153


state 160

    (119) values -> STRING .
    (63) true_boolean_types -> STRING .
    (69) false_boolean_types -> STRING .
    (136) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 119 (values -> STRING .)
    IDENTICAL       reduce using rule 119 (values -> STRING .)
    NOT_EQUALS      reduce using rule 119 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 119 (values -> STRING .)
    SMALL_THAN      reduce using rule 119 (values -> STRING .)
    GREATER_THAN    reduce using rule 119 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> STRING .)
    SPACECRAFT      reduce using rule 119 (values -> STRING .)
    NULL_FUSION     reduce using rule 119 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> STRING .) ]


state 161

    (62) true_boolean_types -> TRUE .
    (122) boolean -> TRUE .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 122 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 122 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 122 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 122 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 122 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 122 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 122 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 122 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 122 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 122 (boolean -> TRUE .)


state 162

    (68) false_boolean_types -> FALSE .
    (123) boolean -> FALSE .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 123 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 123 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 123 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 123 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 123 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 123 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 123 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 123 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 123 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 123 (boolean -> FALSE .)


state 163

    (60) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL

    FALSE           shift and go to state 284
    STRING          shift and go to state 285
    INTEGER         shift and go to state 286
    VARIABLE        shift and go to state 287
    FLOAT           shift and go to state 288
    ARRAY           shift and go to state 289
    NULL            shift and go to state 82

    false_boolean_types            shift and go to state 283

state 164

    (61) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 291
    STRING          shift and go to state 292
    INTEGER         shift and go to state 293
    FLOAT           shift and go to state 294
    VARIABLE        shift and go to state 295
    ARRAY           shift and go to state 296

    true_boolean_types             shift and go to state 290

state 165

    (125) expression -> term PLUS . expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    term                           shift and go to state 80
    expression                     shift and go to state 297
    factor                         shift and go to state 83

state 166

    (126) expression -> term MINUS . expression
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    term                           shift and go to state 80
    expression                     shift and go to state 298
    factor                         shift and go to state 83

state 167

    (67) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (73) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 300
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 299
    boolean                        shift and go to state 62

state 168

    (128) term -> factor MULTIPLY . term
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    factor                         shift and go to state 83
    term                           shift and go to state 301

state 169

    (129) term -> factor DIVIDE . term
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    factor                         shift and go to state 83
    term                           shift and go to state 302

state 170

    (130) term -> factor MODULE . term
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    factor                         shift and go to state 83
    term                           shift and go to state 303

state 171

    (131) term -> factor POW . term
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    factor                         shift and go to state 83
    term                           shift and go to state 304

state 172

    (99) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 305


state 173

    (251) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) class_implements_opt -> . IMPLEMENTS interface_list
    (259) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 307
    LEFT_BRACE      reduce using rule 259 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 306

state 174

    (256) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 308


state 175

    (252) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 309


state 176

    (167) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 310
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 177

    (159) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (134) factor -> VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
    LEFT_PAREN      shift and go to state 135
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 134 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]


state 178

    (139) variable_assignment -> VARIABLE assignment_operator values .
    (77) comparation -> values . comparator_operator values
    (78) comparation -> values . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 139 (variable_assignment -> VARIABLE assignment_operator values .)
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 179

    (140) variable_assignment -> VARIABLE assignment_operator expression .
    (79) comparation -> expression . comparator_operator expression
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 140 (variable_assignment -> VARIABLE assignment_operator expression .)
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 180

    (141) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 141 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 181

    (142) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 142 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 182

    (143) variable_assignment -> VARIABLE assignment_operator array_special_function .

    SEMICOLON       reduce using rule 143 (variable_assignment -> VARIABLE assignment_operator array_special_function .)


state 183

    (144) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 144 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 184

    (145) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 145 (variable_assignment -> VARIABLE assignment_operator input .)


state 185

    (146) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 146 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 186

    (147) variable_assignment -> VARIABLE assignment_operator conditional .

    SEMICOLON       reduce using rule 147 (variable_assignment -> VARIABLE assignment_operator conditional .)


state 187

    (119) values -> STRING .
    (136) factor -> STRING .
    (63) true_boolean_types -> STRING .
    (69) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
    EQUALS_EQUALS   reduce using rule 119 (values -> STRING .)
    IDENTICAL       reduce using rule 119 (values -> STRING .)
    NOT_EQUALS      reduce using rule 119 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 119 (values -> STRING .)
    SMALL_THAN      reduce using rule 119 (values -> STRING .)
    GREATER_THAN    reduce using rule 119 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> STRING .)
    SPACECRAFT      reduce using rule 119 (values -> STRING .)
    NULL_FUSION     reduce using rule 119 (values -> STRING .)
    SEMICOLON       reduce using rule 119 (values -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 136 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> STRING .) ]


state 188

    (174) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 311


state 189

    (175) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 312


state 190

    (168) special_function -> arrow_function .

    SEMICOLON       reduce using rule 168 (special_function -> arrow_function .)


state 191

    (169) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 169 (special_function -> anonymous_functions .)


state 192

    (200) structure_array_principal -> access_array_element .
    (214) access_array_stucture -> access_array_element . SEMICOLON
    (244) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> access_array_element . EQUALS_EQUALS values
    (82) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (85) comparation -> access_array_element . EQUALS_EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 98
    MINUS           shift and go to state 99
    EQUALS_EQUALS   shift and go to state 153

  ! SEMICOLON       [ reduce using rule 200 (structure_array_principal -> access_array_element .) ]


state 193

    (219) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (232) modify_element_matrix -> access_element_matrix . EQUALS values
    (233) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE
    (86) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    SEMICOLON       shift and go to state 100
    EQUALS          shift and go to state 101
    EQUALS_EQUALS   shift and go to state 155


state 194

    (170) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (171) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement

    LEFT_PAREN      shift and go to state 313


state 195

    (172) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 314


state 196

    (201) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (222) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (67) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 315
    LEFT_BRACKET    shift and go to state 109


state 197

    (216) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 316


state 198

    (215) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 317


state 199

    (234) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 318


state 200

    (239) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (240) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (241) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (242) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (249) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (250) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 322
    VARIABLE        shift and go to state 319

    function_invocation            shift and go to state 320
    accessType                     shift and go to state 321

state 201

    (244) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (245) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (246) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (247) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (158) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (249) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (250) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 322
    VARIABLE        shift and go to state 319

    function_invocation            shift and go to state 323
    accessType                     shift and go to state 324

state 202

    (232) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 232 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 203

    (233) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 233 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 204

    (118) values -> INTEGER .

    SEMICOLON       reduce using rule 118 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 118 (values -> INTEGER .)
    COMMA           reduce using rule 118 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 118 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 118 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 118 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 118 (values -> INTEGER .)
    ECHO            reduce using rule 118 (values -> INTEGER .)
    PRINT           reduce using rule 118 (values -> INTEGER .)
    CLASS           reduce using rule 118 (values -> INTEGER .)
    INTERFACE       reduce using rule 118 (values -> INTEGER .)
    FUNCTION        reduce using rule 118 (values -> INTEGER .)
    VARIABLE        reduce using rule 118 (values -> INTEGER .)
    INCREASE        reduce using rule 118 (values -> INTEGER .)
    DECREMENT       reduce using rule 118 (values -> INTEGER .)
    IF              reduce using rule 118 (values -> INTEGER .)
    WHILE           reduce using rule 118 (values -> INTEGER .)
    FOR             reduce using rule 118 (values -> INTEGER .)
    CONST           reduce using rule 118 (values -> INTEGER .)
    DEFINE          reduce using rule 118 (values -> INTEGER .)
    ARRAY           reduce using rule 118 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 118 (values -> INTEGER .)
    NEW             reduce using rule 118 (values -> INTEGER .)
    $end            reduce using rule 118 (values -> INTEGER .)
    RETURN          reduce using rule 118 (values -> INTEGER .)
    BREAK           reduce using rule 118 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 118 (values -> INTEGER .)


state 205

    (119) values -> STRING .

    SEMICOLON       reduce using rule 119 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 119 (values -> STRING .)
    COMMA           reduce using rule 119 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 119 (values -> STRING .)
    LOGIC_AND       reduce using rule 119 (values -> STRING .)
    LOGIC_OR        reduce using rule 119 (values -> STRING .)
    LOGIC_XOR       reduce using rule 119 (values -> STRING .)
    ECHO            reduce using rule 119 (values -> STRING .)
    PRINT           reduce using rule 119 (values -> STRING .)
    CLASS           reduce using rule 119 (values -> STRING .)
    INTERFACE       reduce using rule 119 (values -> STRING .)
    FUNCTION        reduce using rule 119 (values -> STRING .)
    VARIABLE        reduce using rule 119 (values -> STRING .)
    INCREASE        reduce using rule 119 (values -> STRING .)
    DECREMENT       reduce using rule 119 (values -> STRING .)
    IF              reduce using rule 119 (values -> STRING .)
    WHILE           reduce using rule 119 (values -> STRING .)
    FOR             reduce using rule 119 (values -> STRING .)
    CONST           reduce using rule 119 (values -> STRING .)
    DEFINE          reduce using rule 119 (values -> STRING .)
    ARRAY           reduce using rule 119 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 119 (values -> STRING .)
    NEW             reduce using rule 119 (values -> STRING .)
    $end            reduce using rule 119 (values -> STRING .)
    RETURN          reduce using rule 119 (values -> STRING .)
    BREAK           reduce using rule 119 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 119 (values -> STRING .)


state 206

    (120) values -> FLOAT .

    SEMICOLON       reduce using rule 120 (values -> FLOAT .)
    COMMA           reduce using rule 120 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 120 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 120 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 120 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 120 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 120 (values -> FLOAT .)
    ECHO            reduce using rule 120 (values -> FLOAT .)
    PRINT           reduce using rule 120 (values -> FLOAT .)
    CLASS           reduce using rule 120 (values -> FLOAT .)
    INTERFACE       reduce using rule 120 (values -> FLOAT .)
    FUNCTION        reduce using rule 120 (values -> FLOAT .)
    VARIABLE        reduce using rule 120 (values -> FLOAT .)
    INCREASE        reduce using rule 120 (values -> FLOAT .)
    DECREMENT       reduce using rule 120 (values -> FLOAT .)
    IF              reduce using rule 120 (values -> FLOAT .)
    WHILE           reduce using rule 120 (values -> FLOAT .)
    FOR             reduce using rule 120 (values -> FLOAT .)
    CONST           reduce using rule 120 (values -> FLOAT .)
    DEFINE          reduce using rule 120 (values -> FLOAT .)
    ARRAY           reduce using rule 120 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 120 (values -> FLOAT .)
    NEW             reduce using rule 120 (values -> FLOAT .)
    $end            reduce using rule 120 (values -> FLOAT .)
    RETURN          reduce using rule 120 (values -> FLOAT .)
    BREAK           reduce using rule 120 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 120 (values -> FLOAT .)


state 207

    (122) boolean -> TRUE .

    SEMICOLON       reduce using rule 122 (boolean -> TRUE .)
    COMMA           reduce using rule 122 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 122 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 122 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 122 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 122 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 122 (boolean -> TRUE .)
    ECHO            reduce using rule 122 (boolean -> TRUE .)
    PRINT           reduce using rule 122 (boolean -> TRUE .)
    CLASS           reduce using rule 122 (boolean -> TRUE .)
    INTERFACE       reduce using rule 122 (boolean -> TRUE .)
    FUNCTION        reduce using rule 122 (boolean -> TRUE .)
    VARIABLE        reduce using rule 122 (boolean -> TRUE .)
    INCREASE        reduce using rule 122 (boolean -> TRUE .)
    DECREMENT       reduce using rule 122 (boolean -> TRUE .)
    IF              reduce using rule 122 (boolean -> TRUE .)
    WHILE           reduce using rule 122 (boolean -> TRUE .)
    FOR             reduce using rule 122 (boolean -> TRUE .)
    CONST           reduce using rule 122 (boolean -> TRUE .)
    DEFINE          reduce using rule 122 (boolean -> TRUE .)
    ARRAY           reduce using rule 122 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 122 (boolean -> TRUE .)
    NEW             reduce using rule 122 (boolean -> TRUE .)
    $end            reduce using rule 122 (boolean -> TRUE .)
    RETURN          reduce using rule 122 (boolean -> TRUE .)
    BREAK           reduce using rule 122 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 122 (boolean -> TRUE .)


state 208

    (123) boolean -> FALSE .

    SEMICOLON       reduce using rule 123 (boolean -> FALSE .)
    COMMA           reduce using rule 123 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 123 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 123 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 123 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 123 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 123 (boolean -> FALSE .)
    ECHO            reduce using rule 123 (boolean -> FALSE .)
    PRINT           reduce using rule 123 (boolean -> FALSE .)
    CLASS           reduce using rule 123 (boolean -> FALSE .)
    INTERFACE       reduce using rule 123 (boolean -> FALSE .)
    FUNCTION        reduce using rule 123 (boolean -> FALSE .)
    VARIABLE        reduce using rule 123 (boolean -> FALSE .)
    INCREASE        reduce using rule 123 (boolean -> FALSE .)
    DECREMENT       reduce using rule 123 (boolean -> FALSE .)
    IF              reduce using rule 123 (boolean -> FALSE .)
    WHILE           reduce using rule 123 (boolean -> FALSE .)
    FOR             reduce using rule 123 (boolean -> FALSE .)
    CONST           reduce using rule 123 (boolean -> FALSE .)
    DEFINE          reduce using rule 123 (boolean -> FALSE .)
    ARRAY           reduce using rule 123 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 123 (boolean -> FALSE .)
    NEW             reduce using rule 123 (boolean -> FALSE .)
    $end            reduce using rule 123 (boolean -> FALSE .)
    RETURN          reduce using rule 123 (boolean -> FALSE .)
    BREAK           reduce using rule 123 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 123 (boolean -> FALSE .)


state 209

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 325


state 210

    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .
    (134) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    MINUS           reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]


state 211

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 326


state 212

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 327


state 213

    (156) const_syntax -> CONST IDENTIFIER EQUALS . values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 328
    boolean                        shift and go to state 62

state 214

    (157) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 329


state 215

    (226) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (201) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 330


state 216

    (201) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 331


state 217

    (202) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 332


state 218

    (222) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 333


state 219

    (208) values_array_indexed -> values .
    (209) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 208 (values_array_indexed -> values .)
    COMMA           shift and go to state 334


state 220

    (210) values_array_indexed -> object_creation .
    (211) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 210 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 335


state 221

    (212) values_array_indexed -> indexed_array .
    (213) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 212 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 336


state 222

    (204) structure_array -> key . EQUALS GREATER_THAN values
    (205) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 337


state 223

    (118) values -> INTEGER .
    (206) key -> INTEGER .

    COMMA           reduce using rule 118 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 118 (values -> INTEGER .)
    EQUALS          reduce using rule 206 (key -> INTEGER .)


state 224

    (119) values -> STRING .
    (207) key -> STRING .

    COMMA           reduce using rule 119 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 119 (values -> STRING .)
    EQUALS          reduce using rule 207 (key -> STRING .)


state 225

    (203) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 338


state 226

    (206) key -> INTEGER .

    EQUALS          reduce using rule 206 (key -> INTEGER .)


state 227

    (207) key -> STRING .

    EQUALS          reduce using rule 207 (key -> STRING .)


state 228

    (224) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (225) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 339


state 229

    (223) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 340


state 230

    (238) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 341
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 231

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 237


state 232

    (80) comparation -> VARIABLE . EQUALS_EQUALS values
    (83) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (134) factor -> VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> VARIABLE .
    (71) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 136
    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    MINUS           reduce using rule 134 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 137
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> VARIABLE .) ]


state 233

    (132) factor -> INTEGER .
    (118) values -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (70) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 132 (factor -> INTEGER .)
    DIVIDE          reduce using rule 132 (factor -> INTEGER .)
    MODULE          reduce using rule 132 (factor -> INTEGER .)
    POW             reduce using rule 132 (factor -> INTEGER .)
    PLUS            reduce using rule 132 (factor -> INTEGER .)
    MINUS           reduce using rule 132 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 132 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 118 (values -> INTEGER .)
    IDENTICAL       reduce using rule 118 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 118 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 118 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 118 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 118 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 118 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 118 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 132 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 132 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> INTEGER .) ]


state 234

    (133) factor -> FLOAT .
    (120) values -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (72) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 133 (factor -> FLOAT .)
    DIVIDE          reduce using rule 133 (factor -> FLOAT .)
    MODULE          reduce using rule 133 (factor -> FLOAT .)
    POW             reduce using rule 133 (factor -> FLOAT .)
    PLUS            reduce using rule 133 (factor -> FLOAT .)
    MINUS           reduce using rule 133 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 133 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 120 (values -> FLOAT .)
    IDENTICAL       reduce using rule 120 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 120 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 120 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 120 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 120 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 120 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 120 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)

  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> FLOAT .) ]


state 235

    (136) factor -> STRING .
    (119) values -> STRING .
    (63) true_boolean_types -> STRING .
    (69) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 136 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 119 (values -> STRING .)
    IDENTICAL       reduce using rule 119 (values -> STRING .)
    NOT_EQUALS      reduce using rule 119 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 119 (values -> STRING .)
    SMALL_THAN      reduce using rule 119 (values -> STRING .)
    GREATER_THAN    reduce using rule 119 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> STRING .)
    SPACECRAFT      reduce using rule 119 (values -> STRING .)
    NULL_FUSION     reduce using rule 119 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> STRING .) ]


state 236

    (98) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 98 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 237

    (57) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 238

    (135) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 135 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 239

    (103) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 103 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> values COMMA printable_values .)


state 240

    (77) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 77 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 77 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 77 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 77 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 77 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 77 (comparation -> values comparator_operator values .)


state 241

    (78) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 78 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 78 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 78 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 78 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 78 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 78 (comparation -> values comparator_operator expression .)


state 242

    (118) values -> INTEGER .
    (132) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 118 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 118 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 118 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 118 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 118 (values -> INTEGER .)
    COMMA           reduce using rule 118 (values -> INTEGER .)
    SEMICOLON       reduce using rule 118 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 118 (values -> INTEGER .)
    MULTIPLY        reduce using rule 132 (factor -> INTEGER .)
    DIVIDE          reduce using rule 132 (factor -> INTEGER .)
    MODULE          reduce using rule 132 (factor -> INTEGER .)
    POW             reduce using rule 132 (factor -> INTEGER .)
    PLUS            reduce using rule 132 (factor -> INTEGER .)
    MINUS           reduce using rule 132 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 132 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 132 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 132 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 132 (factor -> INTEGER .) ]


state 243

    (119) values -> STRING .
    (136) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 119 (values -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 119 (values -> STRING .)
    LOGIC_AND       reduce using rule 119 (values -> STRING .)
    LOGIC_OR        reduce using rule 119 (values -> STRING .)
    LOGIC_XOR       reduce using rule 119 (values -> STRING .)
    COMMA           reduce using rule 119 (values -> STRING .)
    SEMICOLON       reduce using rule 119 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 119 (values -> STRING .)
    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 136 (factor -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 136 (factor -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 136 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 136 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 136 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 136 (factor -> STRING .) ]


state 244

    (120) values -> FLOAT .
    (133) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (values -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 120 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 120 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 120 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 120 (values -> FLOAT .)
    COMMA           reduce using rule 120 (values -> FLOAT .)
    SEMICOLON       reduce using rule 120 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 120 (values -> FLOAT .)
    MULTIPLY        reduce using rule 133 (factor -> FLOAT .)
    DIVIDE          reduce using rule 133 (factor -> FLOAT .)
    MODULE          reduce using rule 133 (factor -> FLOAT .)
    POW             reduce using rule 133 (factor -> FLOAT .)
    PLUS            reduce using rule 133 (factor -> FLOAT .)
    MINUS           reduce using rule 133 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 133 (factor -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 133 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 133 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 133 (factor -> FLOAT .) ]


state 245

    (134) factor -> VARIABLE .

    MULTIPLY        reduce using rule 134 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 134 (factor -> VARIABLE .)
    MODULE          reduce using rule 134 (factor -> VARIABLE .)
    POW             reduce using rule 134 (factor -> VARIABLE .)
    PLUS            reduce using rule 134 (factor -> VARIABLE .)
    MINUS           reduce using rule 134 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 134 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 134 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 134 (factor -> VARIABLE .)
    COMMA           reduce using rule 134 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 134 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 134 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 134 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 134 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 134 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 134 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 134 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 134 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 134 (factor -> VARIABLE .)


state 246

    (135) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    VARIABLE        shift and go to state 245
    LEFT_PAREN      shift and go to state 246
    STRING          shift and go to state 281

    expression                     shift and go to state 342
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 247

    (105) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 105 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> VARIABLE COMMA printable_values .)


state 248

    (107) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 107 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 249

    (162) real_params -> VARIABLE .

    COMMA           reduce using rule 162 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 162 (real_params -> VARIABLE .)


state 250

    (159) function_invocation -> VARIABLE LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 343


state 251

    (160) params -> real_params .
    (164) real_params -> real_params . COMMA VARIABLE
    (165) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 160 (params -> real_params .)
    COMMA           shift and go to state 344


state 252

    (161) params -> empty .

    RIGHT_PAREN     reduce using rule 161 (params -> empty .)


state 253

    (163) real_params -> values .

    COMMA           reduce using rule 163 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 163 (real_params -> values .)


state 254

    (84) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 137


state 255

    (80) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 256

    (83) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 257

    (87) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 258

    (106) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 106 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 259

    (109) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 109 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> conditional COMMA printable_values .)


state 260

    (111) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 111 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> structure_object_principal COMMA printable_values .)


state 261

    (113) printable_values -> function_invocation COMMA printable_values .

    SEMICOLON       reduce using rule 113 (printable_values -> function_invocation COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> function_invocation COMMA printable_values .)


state 262

    (115) printable_values -> string_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 115 (printable_values -> string_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 115 (printable_values -> string_special_function COMMA printable_values .)


state 263

    (117) printable_values -> array_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 117 (printable_values -> array_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 117 (printable_values -> array_special_function COMMA printable_values .)


state 264

    (52) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)


state 265

    (158) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 345


state 266

    (176) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 346


state 267

    (179) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 179 (string_param -> STRING .)
    COMMA           reduce using rule 179 (string_param -> STRING .)


state 268

    (180) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 180 (string_param -> VARIABLE .)
    COMMA           reduce using rule 180 (string_param -> VARIABLE .)


state 269

    (177) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (178) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 347


state 270

    (183) array_special_function -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 348

state 271

    (184) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 350

state 272

    (185) array_special_function -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 351

state 273

    (200) structure_array_principal -> access_array_element .
    (214) access_array_stucture -> access_array_element . SEMICOLON

    COMMA           reduce using rule 200 (structure_array_principal -> access_array_element .)
    RIGHT_PAREN     reduce using rule 200 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 274

    (186) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 352


state 275

    (85) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 276

    (81) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS values .)


state 277

    (82) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 353


state 278

    (79) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 79 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 79 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 79 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 79 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 79 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> expression comparator_operator expression .)


state 279

    (132) factor -> INTEGER .

    MULTIPLY        reduce using rule 132 (factor -> INTEGER .)
    DIVIDE          reduce using rule 132 (factor -> INTEGER .)
    MODULE          reduce using rule 132 (factor -> INTEGER .)
    POW             reduce using rule 132 (factor -> INTEGER .)
    PLUS            reduce using rule 132 (factor -> INTEGER .)
    MINUS           reduce using rule 132 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 132 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 132 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 132 (factor -> INTEGER .)
    COMMA           reduce using rule 132 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 132 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 132 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 132 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 132 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 132 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 132 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 132 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 132 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 132 (factor -> INTEGER .)


state 280

    (133) factor -> FLOAT .

    MULTIPLY        reduce using rule 133 (factor -> FLOAT .)
    DIVIDE          reduce using rule 133 (factor -> FLOAT .)
    MODULE          reduce using rule 133 (factor -> FLOAT .)
    POW             reduce using rule 133 (factor -> FLOAT .)
    PLUS            reduce using rule 133 (factor -> FLOAT .)
    MINUS           reduce using rule 133 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 133 (factor -> FLOAT .)
    LOGIC_OR        reduce using rule 133 (factor -> FLOAT .)
    LOGIC_XOR       reduce using rule 133 (factor -> FLOAT .)
    COMMA           reduce using rule 133 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 133 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 133 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 133 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 133 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 133 (factor -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 133 (factor -> FLOAT .)
    SMALL_THAN      reduce using rule 133 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 133 (factor -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 133 (factor -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 133 (factor -> FLOAT .)
    SPACECRAFT      reduce using rule 133 (factor -> FLOAT .)
    NULL_FUSION     reduce using rule 133 (factor -> FLOAT .)


state 281

    (136) factor -> STRING .

    MULTIPLY        reduce using rule 136 (factor -> STRING .)
    DIVIDE          reduce using rule 136 (factor -> STRING .)
    MODULE          reduce using rule 136 (factor -> STRING .)
    POW             reduce using rule 136 (factor -> STRING .)
    PLUS            reduce using rule 136 (factor -> STRING .)
    MINUS           reduce using rule 136 (factor -> STRING .)
    LOGIC_AND       reduce using rule 136 (factor -> STRING .)
    LOGIC_OR        reduce using rule 136 (factor -> STRING .)
    LOGIC_XOR       reduce using rule 136 (factor -> STRING .)
    COMMA           reduce using rule 136 (factor -> STRING .)
    SEMICOLON       reduce using rule 136 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 136 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 136 (factor -> STRING .)
    IDENTICAL       reduce using rule 136 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 136 (factor -> STRING .)
    NOT_IDENTICAL   reduce using rule 136 (factor -> STRING .)
    SMALL_THAN      reduce using rule 136 (factor -> STRING .)
    GREATER_THAN    reduce using rule 136 (factor -> STRING .)
    SMALL_EQUALS_TO reduce using rule 136 (factor -> STRING .)
    GREATER_EQUALS_TO reduce using rule 136 (factor -> STRING .)
    SPACECRAFT      reduce using rule 136 (factor -> STRING .)
    NULL_FUSION     reduce using rule 136 (factor -> STRING .)


state 282

    (86) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 86 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 283

    (60) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 284

    (68) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 68 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 68 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 68 (false_boolean_types -> FALSE .)


state 285

    (69) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 69 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 69 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 69 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 69 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 69 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 69 (false_boolean_types -> STRING .)


state 286

    (70) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 70 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> INTEGER .)


state 287

    (71) false_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 71 (false_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> VARIABLE .)


state 288

    (72) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 72 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 72 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 72 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 72 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 72 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 72 (false_boolean_types -> FLOAT .)


state 289

    (73) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 354


state 290

    (61) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 291

    (62) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 62 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 62 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 62 (true_boolean_types -> TRUE .)


state 292

    (63) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 63 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 63 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 63 (true_boolean_types -> STRING .)


state 293

    (64) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 64 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> INTEGER .)


state 294

    (65) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 65 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> FLOAT .)


state 295

    (66) true_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 66 (true_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> VARIABLE .)


state 296

    (67) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 355


state 297

    (125) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 125 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 125 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 125 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 125 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 125 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 125 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 125 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 125 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 125 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 125 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 125 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 125 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 125 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 125 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 125 (expression -> term PLUS expression .)
    COMMA           reduce using rule 125 (expression -> term PLUS expression .)


state 298

    (126) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 126 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 126 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 126 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 126 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 126 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 126 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 126 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 126 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 126 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 126 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 126 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 126 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 126 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 126 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 126 (expression -> term MINUS expression .)
    COMMA           reduce using rule 126 (expression -> term MINUS expression .)


state 299

    (67) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 356


state 300

    (73) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 73 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 301

    (128) term -> factor MULTIPLY term .

    PLUS            reduce using rule 128 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 128 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 128 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 128 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 128 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 128 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 128 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 128 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 128 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 128 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 128 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 128 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 128 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 128 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 128 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 128 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 128 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 128 (term -> factor MULTIPLY term .)


state 302

    (129) term -> factor DIVIDE term .

    PLUS            reduce using rule 129 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 129 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 129 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 129 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 129 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 129 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 129 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 129 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 129 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 129 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 129 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 129 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 129 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 129 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 129 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 129 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 129 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 129 (term -> factor DIVIDE term .)


state 303

    (130) term -> factor MODULE term .

    PLUS            reduce using rule 130 (term -> factor MODULE term .)
    MINUS           reduce using rule 130 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 130 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 130 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 130 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 130 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 130 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 130 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 130 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 130 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 130 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 130 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 130 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 130 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 130 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 130 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 130 (term -> factor MODULE term .)
    COMMA           reduce using rule 130 (term -> factor MODULE term .)


state 304

    (131) term -> factor POW term .

    PLUS            reduce using rule 131 (term -> factor POW term .)
    MINUS           reduce using rule 131 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 131 (term -> factor POW term .)
    IDENTICAL       reduce using rule 131 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 131 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 131 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 131 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 131 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 131 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 131 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 131 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 131 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 131 (term -> factor POW term .)
    SEMICOLON       reduce using rule 131 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 131 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 131 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 131 (term -> factor POW term .)
    COMMA           reduce using rule 131 (term -> factor POW term .)


state 305

    (99) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 99 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 306

    (251) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 357


state 307

    (258) class_implements_opt -> IMPLEMENTS . interface_list
    (260) interface_list -> . IDENTIFIER
    (261) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 359

    interface_list                 shift and go to state 358

state 308

    (256) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 256 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 256 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 309

    (252) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (253) interface_body -> . interface_body interface_method
    (254) interface_body -> .

    RIGHT_BRACE     reduce using rule 254 (interface_body -> .)
    PUBLIC          reduce using rule 254 (interface_body -> .)
    PRIVATE         reduce using rule 254 (interface_body -> .)
    PROTECTED       reduce using rule 254 (interface_body -> .)
    FUNCTION        reduce using rule 254 (interface_body -> .)

    interface_body                 shift and go to state 360

state 310

    (167) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 361


state 311

    (174) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 362


state 312

    (175) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 363


state 313

    (170) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (171) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 364
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 314

    (172) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 365
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 315

    (201) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (202) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (222) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (67) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (73) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (204) structure_array -> . key EQUALS GREATER_THAN values
    (205) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (226) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (206) key -> . INTEGER
    (207) key -> . STRING
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 300
    ARRAY           shift and go to state 215
    INTEGER         shift and go to state 223
    STRING          shift and go to state 224
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values_array_indexed           shift and go to state 216
    structure_array                shift and go to state 217
    structure_matrix_first         shift and go to state 218
    values                         shift and go to state 366
    object_creation                shift and go to state 220
    indexed_array                  shift and go to state 221
    key                            shift and go to state 222
    boolean                        shift and go to state 62

state 316

    (216) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 367

  ! LEFT_BRACKET    [ reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 317

    (215) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (228) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 368

  ! LEFT_BRACKET    [ reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 318

    (234) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 370

    indexed_array                  shift and go to state 369

state 319

    (159) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 135


state 320

    (239) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 239 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 321

    (240) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (241) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 371


state 322

    (158) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (249) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (250) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 148
    LEFT_BRACKET    shift and go to state 372
    EQUALS          reduce using rule 250 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 250 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 250 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 250 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 250 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 250 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 250 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 250 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 250 (accessType -> IDENTIFIER .)
    IF              reduce using rule 250 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 250 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 250 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 250 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 250 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 250 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 250 (accessType -> IDENTIFIER .)
    $end            reduce using rule 250 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 250 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 250 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 250 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 250 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 250 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 250 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 250 (accessType -> IDENTIFIER .) ]


state 323

    (244) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 244 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 324

    (245) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (246) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 373


state 325

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 374


state 326

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 375


state 327

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (190) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 377
    LEFT_PAREN      shift and go to state 376
    IDENTIFIER      shift and go to state 380
    INTEGER         shift and go to state 382
    FLOAT           shift and go to state 383
    COUNT           shift and go to state 384
    STRLEN          shift and go to state 385

    expression_for                 shift and go to state 378
    number_values                  shift and go to state 379
    length_operations              shift and go to state 381

state 328

    (156) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 156 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 329

    (157) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 386
    boolean                        shift and go to state 62

state 330

    (226) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (201) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208
    NEW             shift and go to state 46
    ARRAY           shift and go to state 370

    values                         shift and go to state 387
    values_array_indexed           shift and go to state 216
    boolean                        shift and go to state 62
    object_creation                shift and go to state 220
    indexed_array                  shift and go to state 221

state 331

    (201) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 201 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 332

    (202) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    COMMA           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 202 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 333

    (222) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 388


state 334

    (209) values_array_indexed -> values COMMA . values_array_indexed
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 370
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 219
    values_array_indexed           shift and go to state 389
    object_creation                shift and go to state 220
    indexed_array                  shift and go to state 221
    boolean                        shift and go to state 62

state 335

    (211) values_array_indexed -> object_creation COMMA . values_array_indexed
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 370
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    object_creation                shift and go to state 220
    values_array_indexed           shift and go to state 390
    values                         shift and go to state 219
    indexed_array                  shift and go to state 221
    boolean                        shift and go to state 62

state 336

    (213) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 370
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    indexed_array                  shift and go to state 221
    values_array_indexed           shift and go to state 391
    values                         shift and go to state 219
    object_creation                shift and go to state 220
    boolean                        shift and go to state 62

state 337

    (204) structure_array -> key EQUALS . GREATER_THAN values
    (205) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 392


state 338

    (203) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    COMMA           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 203 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 339

    (224) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (225) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 224 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 393


state 340

    (223) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    COMMA           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_PAREN     reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 223 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 341

    (238) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 394


state 342

    (135) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 238


state 343

    (159) function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 159 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)


state 344

    (164) real_params -> real_params COMMA . VARIABLE
    (165) real_params -> real_params COMMA . values
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 395
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 396
    boolean                        shift and go to state 62

state 345

    (158) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 158 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 346

    (176) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    COMMA           reduce using rule 176 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 176 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 176 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 347

    (177) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (181) int_param -> . INTEGER
    (182) int_param -> . VARIABLE

    INTEGER         shift and go to state 398
    VARIABLE        shift and go to state 399

    int_param                      shift and go to state 397

state 348

    (183) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 400


state 349

    (187) count_param -> COMMA . COUNT_NORMAL
    (188) count_param -> COMMA . COUNT_RECURSIVE

    COUNT_NORMAL    shift and go to state 401
    COUNT_RECURSIVE shift and go to state 402


state 350

    (184) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 403


state 351

    (185) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 404


state 352

    (186) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .

    COMMA           reduce using rule 186 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    SEMICOLON       reduce using rule 186 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 186 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 353

    (215) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 406
    VARIABLE        shift and go to state 405


state 354

    (73) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 300


state 355

    (67) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 299
    boolean                        shift and go to state 62

state 356

    (67) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 67 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 357

    (251) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (262) class_body -> . class_body class_member
    (263) class_body -> .

    RIGHT_BRACE     reduce using rule 263 (class_body -> .)
    PUBLIC          reduce using rule 263 (class_body -> .)
    PRIVATE         reduce using rule 263 (class_body -> .)
    PROTECTED       reduce using rule 263 (class_body -> .)
    STATIC          reduce using rule 263 (class_body -> .)
    FUNCTION        reduce using rule 263 (class_body -> .)
    VARIABLE        reduce using rule 263 (class_body -> .)
    CONST           reduce using rule 263 (class_body -> .)
    DEFINE          reduce using rule 263 (class_body -> .)

    class_body                     shift and go to state 407

state 358

    (258) class_implements_opt -> IMPLEMENTS interface_list .
    (261) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 258 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 408


state 359

    (260) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 260 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 260 (interface_list -> IDENTIFIER .)


state 360

    (252) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (253) interface_body -> interface_body . interface_method
    (255) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (270) visibility_opt -> . PUBLIC
    (271) visibility_opt -> . PRIVATE
    (272) visibility_opt -> . PROTECTED
    (273) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 409
    PUBLIC          shift and go to state 412
    PRIVATE         shift and go to state 413
    PROTECTED       shift and go to state 414
    FUNCTION        reduce using rule 273 (visibility_opt -> .)

    interface_method               shift and go to state 410
    visibility_opt                 shift and go to state 411

state 361

    (167) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (173) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 416

    codeblock                      shift and go to state 415

state 362

    (174) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 417


state 363

    (175) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 418


state 364

    (170) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (171) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN print_statement

    RIGHT_PAREN     shift and go to state 419


state 365

    (172) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 420


state 366

    (67) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (208) values_array_indexed -> values .
    (209) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 356
    COMMA           shift and go to state 334

  ! RIGHT_PAREN     [ reduce using rule 208 (values_array_indexed -> values .) ]


state 367

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 421
    INTEGER         shift and go to state 422


state 368

    (228) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 424
    VARIABLE        shift and go to state 423


state 369

    (234) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    COMMA           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_PAREN     reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 234 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 370

    (201) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 425


state 371

    (241) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 426
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 427
    access_array_element           shift and go to state 428
    boolean                        shift and go to state 62

state 372

    (249) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 429


state 373

    (246) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 432
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    access_array_element           shift and go to state 430
    values                         shift and go to state 431
    boolean                        shift and go to state 62

state 374

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 433
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 375

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 437
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 376

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (190) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 377
    LEFT_PAREN      shift and go to state 376
    IDENTIFIER      shift and go to state 380
    INTEGER         shift and go to state 382
    FLOAT           shift and go to state 383
    COUNT           shift and go to state 384
    STRLEN          shift and go to state 385

    expression_for                 shift and go to state 438
    number_values                  shift and go to state 379
    length_operations              shift and go to state 381

state 377

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 378

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 439
    PLUS            shift and go to state 441
    MINUS           shift and go to state 442
    MULTIPLY        shift and go to state 443
    DIVIDE          shift and go to state 444
    MODULE          shift and go to state 445
    POW             shift and go to state 446

    operator_aritmetic             shift and go to state 440

state 379

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 380

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 447


state 381

    (42) expression_for -> length_operations .

    SEMICOLON       reduce using rule 42 (expression_for -> length_operations .)
    PLUS            reduce using rule 42 (expression_for -> length_operations .)
    MINUS           reduce using rule 42 (expression_for -> length_operations .)
    MULTIPLY        reduce using rule 42 (expression_for -> length_operations .)
    DIVIDE          reduce using rule 42 (expression_for -> length_operations .)
    MODULE          reduce using rule 42 (expression_for -> length_operations .)
    POW             reduce using rule 42 (expression_for -> length_operations .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> length_operations .)


state 382

    (43) number_values -> INTEGER .

    SEMICOLON       reduce using rule 43 (number_values -> INTEGER .)
    PLUS            reduce using rule 43 (number_values -> INTEGER .)
    MINUS           reduce using rule 43 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 43 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 43 (number_values -> INTEGER .)
    MODULE          reduce using rule 43 (number_values -> INTEGER .)
    POW             reduce using rule 43 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> INTEGER .)


state 383

    (44) number_values -> FLOAT .

    SEMICOLON       reduce using rule 44 (number_values -> FLOAT .)
    PLUS            reduce using rule 44 (number_values -> FLOAT .)
    MINUS           reduce using rule 44 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 44 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 44 (number_values -> FLOAT .)
    MODULE          reduce using rule 44 (number_values -> FLOAT .)
    POW             reduce using rule 44 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 44 (number_values -> FLOAT .)


state 384

    (190) length_operations -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 448


state 385

    (193) length_operations -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 449


state 386

    (157) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 450


state 387

    (226) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (208) values_array_indexed -> values .
    (209) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 451
    COMMA           shift and go to state 334

  ! RIGHT_PAREN     [ reduce using rule 208 (values_array_indexed -> values .) ]


state 388

    (222) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 222 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 389

    (209) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 209 (values_array_indexed -> values COMMA values_array_indexed .)


state 390

    (211) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 211 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 391

    (213) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 213 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 392

    (204) structure_array -> key EQUALS GREATER_THAN . values
    (205) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 452
    boolean                        shift and go to state 62

state 393

    (225) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (224) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (225) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 453

state 394

    (238) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 238 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 395

    (164) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 164 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 164 (real_params -> real_params COMMA VARIABLE .)


state 396

    (165) real_params -> real_params COMMA values .

    COMMA           reduce using rule 165 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 165 (real_params -> real_params COMMA values .)


state 397

    (177) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 455
    COMMA           shift and go to state 454


state 398

    (181) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 181 (int_param -> INTEGER .)
    COMMA           reduce using rule 181 (int_param -> INTEGER .)


state 399

    (182) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 182 (int_param -> VARIABLE .)
    COMMA           reduce using rule 182 (int_param -> VARIABLE .)


state 400

    (183) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 183 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 183 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 183 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 401

    (187) count_param -> COMMA COUNT_NORMAL .

    RIGHT_PAREN     reduce using rule 187 (count_param -> COMMA COUNT_NORMAL .)


state 402

    (188) count_param -> COMMA COUNT_RECURSIVE .

    RIGHT_PAREN     reduce using rule 188 (count_param -> COMMA COUNT_RECURSIVE .)


state 403

    (184) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 184 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 184 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 184 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 404

    (185) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    COMMA           reduce using rule 185 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 185 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 185 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 405

    (216) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 456


state 406

    (215) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 457


state 407

    (251) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (262) class_body -> class_body . class_member
    (264) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (265) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (266) class_member -> . class_attribute
    (270) visibility_opt -> . PUBLIC
    (271) visibility_opt -> . PRIVATE
    (272) visibility_opt -> . PROTECTED
    (273) visibility_opt -> .
    (267) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (268) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (269) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 458
    PUBLIC          shift and go to state 412
    PRIVATE         shift and go to state 413
    PROTECTED       shift and go to state 414
    STATIC          reduce using rule 273 (visibility_opt -> .)
    FUNCTION        reduce using rule 273 (visibility_opt -> .)
    VARIABLE        reduce using rule 273 (visibility_opt -> .)
    CONST           reduce using rule 273 (visibility_opt -> .)
    DEFINE          reduce using rule 273 (visibility_opt -> .)

    class_member                   shift and go to state 459
    visibility_opt                 shift and go to state 460
    class_attribute                shift and go to state 461

state 408

    (261) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 462


state 409

    (252) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 252 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 410

    (253) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 253 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 253 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 253 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 253 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 253 (interface_body -> interface_body interface_method .)


state 411

    (255) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 463


state 412

    (270) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 270 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 270 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 270 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 270 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 270 (visibility_opt -> PUBLIC .)


state 413

    (271) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 271 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 271 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 271 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 271 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 271 (visibility_opt -> PRIVATE .)


state 414

    (272) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 272 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 272 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 272 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 272 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 272 (visibility_opt -> PROTECTED .)


state 415

    (167) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 167 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 416

    (173) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 464
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 417

    (174) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 174 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 418

    (175) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 175 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 419

    (170) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock
    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN print_statement

    EQUALS          shift and go to state 465


state 420

    (172) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (173) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 416

    codeblock                      shift and go to state 466

state 421

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 467


state 422

    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 468


state 423

    (231) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 469


state 424

    (228) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 470


state 425

    (201) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (208) values_array_indexed -> . values
    (209) values_array_indexed -> . values COMMA values_array_indexed
    (210) values_array_indexed -> . object_creation
    (211) values_array_indexed -> . object_creation COMMA values_array_indexed
    (212) values_array_indexed -> . indexed_array
    (213) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 370
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values_array_indexed           shift and go to state 216
    values                         shift and go to state 219
    object_creation                shift and go to state 220
    indexed_array                  shift and go to state 221
    boolean                        shift and go to state 62

state 426

    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 353

  ! LEFT_BRACKET    [ reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 427

    (241) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 428

    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 429

    (249) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 471


state 430

    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 431

    (246) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 432

    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 353

  ! LEFT_BRACKET    [ reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 433

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 472


state 434

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 473
    BREAK           shift and go to state 474
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 434
    body_statement                 shift and go to state 475
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 435

    (26) body_statement -> RETURN . values SEMICOLON
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 476
    boolean                        shift and go to state 62

state 436

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 477


state 437

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 478


state 438

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 479
    PLUS            shift and go to state 441
    MINUS           shift and go to state 442
    MULTIPLY        shift and go to state 443
    DIVIDE          shift and go to state 444
    MODULE          shift and go to state 445
    POW             shift and go to state 446

    operator_aritmetic             shift and go to state 440

state 439

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 480

    condition_for                  shift and go to state 481

state 440

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (190) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 377
    LEFT_PAREN      shift and go to state 376
    IDENTIFIER      shift and go to state 380
    INTEGER         shift and go to state 382
    FLOAT           shift and go to state 383
    COUNT           shift and go to state 384
    STRLEN          shift and go to state 385

    expression_for                 shift and go to state 482
    number_values                  shift and go to state 379
    length_operations              shift and go to state 381

state 441

    (45) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    COUNT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    STRLEN          reduce using rule 45 (operator_aritmetic -> PLUS .)


state 442

    (46) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    COUNT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    STRLEN          reduce using rule 46 (operator_aritmetic -> MINUS .)


state 443

    (47) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    COUNT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    STRLEN          reduce using rule 47 (operator_aritmetic -> MULTIPLY .)


state 444

    (48) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    COUNT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    STRLEN          reduce using rule 48 (operator_aritmetic -> DIVIDE .)


state 445

    (49) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    COUNT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    STRLEN          reduce using rule 49 (operator_aritmetic -> MODULE .)


state 446

    (50) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> POW .)
    COUNT           reduce using rule 50 (operator_aritmetic -> POW .)
    STRLEN          reduce using rule 50 (operator_aritmetic -> POW .)


state 447

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 483

    access_array_element           shift and go to state 484

state 448

    (190) length_operations -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 487
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 485
    structure_matrix_principal     shift and go to state 486
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 273
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 449

    (193) length_operations -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (179) string_param -> . STRING
    (180) string_param -> . VARIABLE

    STRING          shift and go to state 267
    VARIABLE        shift and go to state 268

    string_param                   shift and go to state 488

state 450

    (157) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 157 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 451

    (226) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (227) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 226 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 489


state 452

    (204) structure_array -> key EQUALS GREATER_THAN values .
    (205) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 204 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 204 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 490


state 453

    (225) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 225 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 454

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (181) int_param -> . INTEGER
    (182) int_param -> . VARIABLE

    INTEGER         shift and go to state 398
    VARIABLE        shift and go to state 399

    int_param                      shift and go to state 491

state 455

    (177) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 177 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 177 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 177 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 456

    (216) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 457

    (215) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 215 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 458

    (251) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 251 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 459

    (262) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 262 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 262 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 262 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 262 (class_body -> class_body class_member .)
    STATIC          reduce using rule 262 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 262 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 262 (class_body -> class_body class_member .)
    CONST           reduce using rule 262 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 262 (class_body -> class_body class_member .)


state 460

    (264) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (265) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (267) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (268) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (269) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 492
    FUNCTION        shift and go to state 493
    VARIABLE        shift and go to state 494
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 495
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 461

    (266) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 266 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 266 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 266 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 266 (class_member -> class_attribute .)
    STATIC          reduce using rule 266 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 266 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 266 (class_member -> class_attribute .)
    CONST           reduce using rule 266 (class_member -> class_attribute .)
    DEFINE          reduce using rule 266 (class_member -> class_attribute .)


state 462

    (261) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 261 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 261 (interface_list -> interface_list COMMA IDENTIFIER .)


state 463

    (255) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 496


state 464

    (173) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 497


state 465

    (170) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock
    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN print_statement

    GREATER_THAN    shift and go to state 498


state 466

    (172) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 172 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 467

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 468

    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 469

    (231) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 470

    (228) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 228 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 471

    (249) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 249 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 472

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 501
    ELSE            shift and go to state 502

    elseif_statement               shift and go to state 499
    else_statement                 shift and go to state 500

state 473

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    SEMICOLON       shift and go to state 504
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 503
    boolean                        shift and go to state 62

state 474

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 505


state 475

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 476

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 506


state 477

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 478

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 479

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 480

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (88) comparator_operator -> . EQUALS_EQUALS
    (89) comparator_operator -> . IDENTICAL
    (90) comparator_operator -> . NOT_EQUALS
    (91) comparator_operator -> . NOT_IDENTICAL
    (92) comparator_operator -> . SMALL_THAN
    (93) comparator_operator -> . GREATER_THAN
    (94) comparator_operator -> . SMALL_EQUALS_TO
    (95) comparator_operator -> . GREATER_EQUALS_TO
    (96) comparator_operator -> . SPACECRAFT
    (97) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 507

state 481

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 508


state 482

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 441
    MINUS           shift and go to state 442
    MULTIPLY        shift and go to state 443
    DIVIDE          shift and go to state 444
    MODULE          shift and go to state 445
    POW             shift and go to state 446

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 440

state 483

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 509
    LEFT_BRACKET    shift and go to state 353


state 484

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 510


state 485

    (190) length_operations -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 511

state 486

    (191) length_operations -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 512

state 487

    (192) length_operations -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) count_param -> . COMMA COUNT_NORMAL
    (188) count_param -> . COMMA COUNT_RECURSIVE
    (189) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 349
    RIGHT_PAREN     reduce using rule 189 (count_param -> .)

    count_param                    shift and go to state 513

state 488

    (193) length_operations -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 514


state 489

    (227) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (226) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 515

    structure_matrix_first         shift and go to state 516

state 490

    (205) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (204) structure_array -> . key EQUALS GREATER_THAN values
    (205) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (206) key -> . INTEGER
    (207) key -> . STRING

    INTEGER         shift and go to state 226
    STRING          shift and go to state 227

    key                            shift and go to state 222
    structure_array                shift and go to state 517

state 491

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 518


state 492

    (264) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 519


state 493

    (265) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 520


state 494

    (267) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (268) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 521
    SEMICOLON       shift and go to state 522


state 495

    (269) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 523


state 496

    (255) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 524


state 497

    (173) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 173 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 498

    (170) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . print_statement
    (173) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values

    LEFT_BRACE      shift and go to state 416
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11

    codeblock                      shift and go to state 525
    print_statement                shift and go to state 526

state 499

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 500

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 501

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 527


state 502

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 528


state 503

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 529


state 504

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 505

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 506

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 507

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (190) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 377
    LEFT_PAREN      shift and go to state 376
    IDENTIFIER      shift and go to state 380
    INTEGER         shift and go to state 382
    FLOAT           shift and go to state 383
    COUNT           shift and go to state 384
    STRLEN          shift and go to state 385

    expression_for                 shift and go to state 530
    number_values                  shift and go to state 379
    length_operations              shift and go to state 381

state 508

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 531
    INCREASE        shift and go to state 533
    DECREMENT       shift and go to state 534

    increment_statement            shift and go to state 532

state 509

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 510

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 511

    (190) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 535


state 512

    (191) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 536


state 513

    (192) length_operations -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 537


state 514

    (193) length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    PLUS            reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MINUS           reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MODULE          reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    POW             reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 193 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 515

    (226) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 538


state 516

    (227) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 227 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 517

    (205) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 205 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 205 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 518

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 178 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 178 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 178 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 519

    (264) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 539


state 520

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 540


state 521

    (267) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 541
    boolean                        shift and go to state 62

state 522

    (268) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 523

    (269) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 269 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 524

    (255) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 542
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 525

    (170) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 170 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 526

    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .

    SEMICOLON       reduce using rule 171 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .)


state 527

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (77) comparation -> . values comparator_operator values
    (78) comparation -> . values comparator_operator expression
    (79) comparation -> . expression comparator_operator expression
    (80) comparation -> . VARIABLE EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS values
    (82) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (83) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (84) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (85) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (86) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (75) logic_not_sentence -> . LOGIC_NOT conditional
    (76) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (124) expression -> . term
    (125) expression -> . term PLUS expression
    (126) expression -> . term MINUS expression
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . VARIABLE
    (67) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (68) false_boolean_types -> . FALSE
    (69) false_boolean_types -> . STRING
    (70) false_boolean_types -> . INTEGER
    (71) false_boolean_types -> . VARIABLE
    (72) false_boolean_types -> . FLOAT
    (73) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (74) false_boolean_types -> . NULL
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (127) term -> . factor
    (128) term -> . factor MULTIPLY term
    (129) term -> . factor DIVIDE term
    (130) term -> . factor MODULE term
    (131) term -> . factor POW term
    (132) factor -> . INTEGER
    (133) factor -> . FLOAT
    (134) factor -> . VARIABLE
    (135) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (136) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 210
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 160
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 161
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 162
    NULL            shift and go to state 82

    conditional                    shift and go to state 543
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 158
    expression                     shift and go to state 75
    access_array_element           shift and go to state 159
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 528

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 544
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 529

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 530

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 441
    MINUS           shift and go to state 442
    MULTIPLY        shift and go to state 443
    DIVIDE          shift and go to state 444
    MODULE          shift and go to state 445
    POW             shift and go to state 446

    operator_aritmetic             shift and go to state 440

state 531

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 545
    DECREMENT       shift and go to state 546
    PLUS_EQUALS     shift and go to state 547
    EQUALS          shift and go to state 548


state 532

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 549


state 533

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 550


state 534

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 551


state 535

    (190) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 190 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 536

    (191) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 537

    (192) length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    PLUS            reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MINUS           reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MODULE          reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    POW             reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 192 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 538

    (226) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 552
    boolean                        shift and go to state 62

state 539

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 553


state 540

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 554
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 541

    (267) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 555


state 542

    (255) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 556


state 543

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 557


state 544

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 558


state 545

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 546

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 547

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 559


state 548

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 560


state 549

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 561


state 550

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 551

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 552

    (226) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (227) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 451


state 553

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (160) params -> . real_params
    (161) params -> . empty
    (162) real_params -> . VARIABLE
    (163) real_params -> . values
    (164) real_params -> . real_params COMMA VARIABLE
    (165) real_params -> . real_params COMMA values
    (166) empty -> .
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE

    VARIABLE        shift and go to state 249
    RIGHT_PAREN     reduce using rule 166 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    params                         shift and go to state 562
    real_params                    shift and go to state 251
    empty                          shift and go to state 252
    values                         shift and go to state 253
    boolean                        shift and go to state 62

state 554

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 563


state 555

    (267) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 267 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 556

    (255) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 564


state 557

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 565


state 558

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 559

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 560

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    PLUS            shift and go to state 441
    MINUS           shift and go to state 442
    MULTIPLY        shift and go to state 443
    DIVIDE          shift and go to state 444
    MODULE          shift and go to state 445
    POW             shift and go to state 446

    operator_aritmetic             shift and go to state 566

state 561

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 567
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 562

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 568


state 563

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 569


state 564

    (255) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 255 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 255 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 255 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 255 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 255 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 565

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 435
    BREAK           shift and go to state 436
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 570
    sentence                       shift and go to state 434
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 566

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    INTEGER         shift and go to state 382
    FLOAT           shift and go to state 383

    number_values                  shift and go to state 571

state 567

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 572


state 568

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 573


state 569

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (274) method_body -> . classStatement
    (275) method_body -> . classStatement return_form
    (276) method_body -> . return_form
    (277) method_body -> . classStatement BREAK SEMICOLON
    (278) method_body -> . classStatement method_body
    (282) classStatement -> . sentence
    (283) classStatement -> . access_method_object SEMICOLON
    (279) return_form -> . RETURN values SEMICOLON
    (280) return_form -> . RETURN access_method_object SEMICOLON
    (281) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 574
    classStatement                 shift and go to state 575
    return_form                    shift and go to state 576
    sentence                       shift and go to state 577
    access_method_object           shift and go to state 578
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 570

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 582


state 571

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 572

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 573

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (274) method_body -> . classStatement
    (275) method_body -> . classStatement return_form
    (276) method_body -> . return_form
    (277) method_body -> . classStatement BREAK SEMICOLON
    (278) method_body -> . classStatement method_body
    (282) classStatement -> . sentence
    (283) classStatement -> . access_method_object SEMICOLON
    (279) return_form -> . RETURN values SEMICOLON
    (280) return_form -> . RETURN access_method_object SEMICOLON
    (281) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 583
    classStatement                 shift and go to state 575
    return_form                    shift and go to state 576
    sentence                       shift and go to state 577
    access_method_object           shift and go to state 578
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 574

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 584


state 575

    (274) method_body -> classStatement .
    (275) method_body -> classStatement . return_form
    (277) method_body -> classStatement . BREAK SEMICOLON
    (278) method_body -> classStatement . method_body
    (279) return_form -> . RETURN values SEMICOLON
    (280) return_form -> . RETURN access_method_object SEMICOLON
    (281) return_form -> . RETURN SEMICOLON
    (274) method_body -> . classStatement
    (275) method_body -> . classStatement return_form
    (276) method_body -> . return_form
    (277) method_body -> . classStatement BREAK SEMICOLON
    (278) method_body -> . classStatement method_body
    (282) classStatement -> . sentence
    (283) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (98) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> . ECHO printable_values
    (101) print_statement -> . PRINT printable_values
    (137) assignment -> . variable_assignment
    (138) assignment -> . constant_assignment
    (194) types_structure -> . structure_array_principal
    (195) types_structure -> . structure_matrix_principal
    (196) types_structure -> . structure_object_principal
    (251) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (252) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (167) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (139) variable_assignment -> . VARIABLE assignment_operator values
    (140) variable_assignment -> . VARIABLE assignment_operator expression
    (141) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (142) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (143) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator types_structure
    (145) variable_assignment -> . VARIABLE assignment_operator input
    (146) variable_assignment -> . VARIABLE assignment_operator special_function
    (147) variable_assignment -> . VARIABLE assignment_operator conditional
    (148) variable_assignment -> . VARIABLE INCREASE
    (149) variable_assignment -> . VARIABLE DECREMENT
    (150) variable_assignment -> . INCREASE VARIABLE
    (151) variable_assignment -> . DECREMENT VARIABLE
    (154) constant_assignment -> . const_syntax
    (155) constant_assignment -> . define_syntax
    (197) structure_array_principal -> . indexed_array
    (198) structure_array_principal -> . associative_array
    (199) structure_array_principal -> . access_array_stucture
    (200) structure_array_principal -> . access_array_element
    (217) structure_matrix_principal -> . matrix_firstform
    (218) structure_matrix_principal -> . matrix_secondform
    (219) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (220) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . add_element_matrix
    (235) structure_object_principal -> . object_creation
    (236) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (156) const_syntax -> . CONST IDENTIFIER EQUALS values
    (157) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (201) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (202) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (214) access_array_stucture -> . access_array_element SEMICOLON
    (222) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (223) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (228) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (232) modify_element_matrix -> . access_element_matrix EQUALS values
    (233) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (234) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (237) object_creation -> . NEW IDENTIFIER
    (238) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 274 (method_body -> classStatement .)
    BREAK           shift and go to state 586
    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 575
    return_form                    shift and go to state 585
    method_body                    shift and go to state 587
    access_method_object           shift and go to state 578
    sentence                       shift and go to state 577
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 576

    (276) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 276 (method_body -> return_form .)


state 577

    (282) classStatement -> sentence .

    BREAK           reduce using rule 282 (classStatement -> sentence .)
    RETURN          reduce using rule 282 (classStatement -> sentence .)
    VARIABLE        reduce using rule 282 (classStatement -> sentence .)
    ECHO            reduce using rule 282 (classStatement -> sentence .)
    PRINT           reduce using rule 282 (classStatement -> sentence .)
    CLASS           reduce using rule 282 (classStatement -> sentence .)
    INTERFACE       reduce using rule 282 (classStatement -> sentence .)
    FUNCTION        reduce using rule 282 (classStatement -> sentence .)
    INCREASE        reduce using rule 282 (classStatement -> sentence .)
    DECREMENT       reduce using rule 282 (classStatement -> sentence .)
    IF              reduce using rule 282 (classStatement -> sentence .)
    WHILE           reduce using rule 282 (classStatement -> sentence .)
    FOR             reduce using rule 282 (classStatement -> sentence .)
    CONST           reduce using rule 282 (classStatement -> sentence .)
    DEFINE          reduce using rule 282 (classStatement -> sentence .)
    ARRAY           reduce using rule 282 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 282 (classStatement -> sentence .)
    NEW             reduce using rule 282 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 282 (classStatement -> sentence .)


state 578

    (283) classStatement -> access_method_object . SEMICOLON
    (236) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 588
    BREAK           reduce using rule 236 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 236 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 236 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 236 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 236 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 236 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 236 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 236 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 236 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 236 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 236 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 236 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 236 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 236 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 236 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 236 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 236 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 236 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 236 (structure_object_principal -> access_method_object .)


state 579

    (279) return_form -> RETURN . values SEMICOLON
    (280) return_form -> RETURN . access_method_object SEMICOLON
    (281) return_form -> RETURN . SEMICOLON
    (118) values -> . INTEGER
    (119) values -> . STRING
    (120) values -> . FLOAT
    (121) values -> . boolean
    (239) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (244) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (122) boolean -> . TRUE
    (123) boolean -> . FALSE
    (215) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 590
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    VARIABLE        shift and go to state 592
    TRUE            shift and go to state 207
    FALSE           shift and go to state 208

    values                         shift and go to state 589
    access_method_object           shift and go to state 591
    boolean                        shift and go to state 62
    access_array_element           shift and go to state 593

state 580

    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (139) variable_assignment -> VARIABLE . assignment_operator values
    (140) variable_assignment -> VARIABLE . assignment_operator expression
    (141) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (142) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (143) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (144) variable_assignment -> VARIABLE . assignment_operator types_structure
    (145) variable_assignment -> VARIABLE . assignment_operator input
    (146) variable_assignment -> VARIABLE . assignment_operator special_function
    (147) variable_assignment -> VARIABLE . assignment_operator conditional
    (148) variable_assignment -> VARIABLE . INCREASE
    (149) variable_assignment -> VARIABLE . DECREMENT
    (228) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (152) assignment_operator -> . EQUALS
    (153) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 92
    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 581

    (244) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (200) structure_array_principal -> access_array_element .
    (214) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 99
    BREAK           reduce using rule 200 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 200 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 200 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 200 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 200 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 200 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 200 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 200 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 200 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 200 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 200 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 200 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 200 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 200 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 200 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 200 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 200 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 200 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 200 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 582

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 501
    ELSE            shift and go to state 502

    elseif_statement               shift and go to state 594
    else_statement                 shift and go to state 595

state 583

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 596


state 584

    (265) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 265 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 585

    (275) method_body -> classStatement return_form .
    (276) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 275 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 275 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 276 (method_body -> return_form .) ]


state 586

    (277) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 597


state 587

    (278) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 278 (method_body -> classStatement method_body .)


state 588

    (283) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 283 (classStatement -> access_method_object SEMICOLON .)


state 589

    (279) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 598


state 590

    (281) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 281 (return_form -> RETURN SEMICOLON .)


state 591

    (280) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 599


state 592

    (239) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (215) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 353


state 593

    (244) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 99


state 594

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 595

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 596

    (264) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 264 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 597

    (277) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 277 (method_body -> classStatement BREAK SEMICOLON .)


state 598

    (279) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 279 (return_form -> RETURN values SEMICOLON .)


state 599

    (280) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 280 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 63 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 177 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 192 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 210 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 232 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 316 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 317 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 322 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 366 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 387 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 426 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 432 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 482 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 482 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 482 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 482 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 482 resolved as shift
WARNING: shift/reduce conflict for POW in state 482 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 54
WARNING: reduce/reduce conflict in state 60 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 60 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 117 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 117 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 118
WARNING: reduce/reduce conflict in state 118 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 119 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 157 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (logic_not_sentence -> LOGIC_NOT VARIABLE) in state 157
WARNING: reduce/reduce conflict in state 157 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 157
WARNING: reduce/reduce conflict in state 160 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 160
WARNING: reduce/reduce conflict in state 160 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 160
WARNING: reduce/reduce conflict in state 177 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 177
WARNING: reduce/reduce conflict in state 187 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 187
WARNING: reduce/reduce conflict in state 187 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 187
WARNING: reduce/reduce conflict in state 210 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 210
WARNING: reduce/reduce conflict in state 232 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 232
WARNING: reduce/reduce conflict in state 233 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 233
WARNING: reduce/reduce conflict in state 233 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 233
WARNING: reduce/reduce conflict in state 234 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 234
WARNING: reduce/reduce conflict in state 234 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 235
WARNING: reduce/reduce conflict in state 235 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 235
WARNING: reduce/reduce conflict in state 242 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 242
WARNING: reduce/reduce conflict in state 243 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 243
WARNING: reduce/reduce conflict in state 244 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 244
WARNING: reduce/reduce conflict in state 505 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 505
WARNING: reduce/reduce conflict in state 529 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 529
WARNING: reduce/reduce conflict in state 585 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 585
