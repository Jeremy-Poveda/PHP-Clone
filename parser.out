Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY_PUSH
    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    body_statement -> RETURN printable_values SEMICOLON
Rule 29    body_statement -> sentence RETURN printable_values SEMICOLON
Rule 30    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 31    increment_statement -> VARIABLE INCREASE
Rule 32    increment_statement -> VARIABLE DECREMENT
Rule 33    increment_statement -> INCREASE VARIABLE
Rule 34    increment_statement -> DECREMENT VARIABLE
Rule 35    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 36    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 37    condition_for -> VARIABLE comparator_operator expression_for
Rule 38    expression_for -> VARIABLE
Rule 39    expression_for -> number_values
Rule 40    expression_for -> expression_for operator_aritmetic expression_for
Rule 41    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 42    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 43    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 44    expression_for -> length_operations
Rule 45    number_values -> INTEGER
Rule 46    number_values -> FLOAT
Rule 47    operator_aritmetic -> PLUS
Rule 48    operator_aritmetic -> MINUS
Rule 49    operator_aritmetic -> MULTIPLY
Rule 50    operator_aritmetic -> DIVIDE
Rule 51    operator_aritmetic -> MODULE
Rule 52    operator_aritmetic -> POW
Rule 53    conditional -> boolean_expression
Rule 54    conditional -> boolean_expression logic_operator boolean_expression
Rule 55    logic_operator -> LOGIC_AND
Rule 56    logic_operator -> LOGIC_OR
Rule 57    logic_operator -> LOGIC_XOR
Rule 58    boolean_expression -> comparation
Rule 59    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 60    boolean_expression -> logic_not_sentence
Rule 61    boolean_expression -> logic_expression
Rule 62    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 63    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 64    true_boolean_types -> TRUE
Rule 65    true_boolean_types -> STRING
Rule 66    true_boolean_types -> INTEGER
Rule 67    true_boolean_types -> FLOAT
Rule 68    true_boolean_types -> VARIABLE
Rule 69    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 70    false_boolean_types -> FALSE
Rule 71    false_boolean_types -> STRING
Rule 72    false_boolean_types -> INTEGER
Rule 73    false_boolean_types -> VARIABLE
Rule 74    false_boolean_types -> FLOAT
Rule 75    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 76    false_boolean_types -> NULL
Rule 77    logic_not_sentence -> LOGIC_NOT conditional
Rule 78    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 79    comparation -> values comparator_operator values
Rule 80    comparation -> values comparator_operator expression
Rule 81    comparation -> expression comparator_operator expression
Rule 82    comparation -> VARIABLE EQUALS_EQUALS values
Rule 83    comparation -> access_array_element EQUALS_EQUALS values
Rule 84    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 85    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 86    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 87    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 88    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 89    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 90    comparator_operator -> EQUALS_EQUALS
Rule 91    comparator_operator -> IDENTICAL
Rule 92    comparator_operator -> NOT_EQUALS
Rule 93    comparator_operator -> NOT_IDENTICAL
Rule 94    comparator_operator -> SMALL_THAN
Rule 95    comparator_operator -> GREATER_THAN
Rule 96    comparator_operator -> SMALL_EQUALS_TO
Rule 97    comparator_operator -> GREATER_EQUALS_TO
Rule 98    comparator_operator -> SPACECRAFT
Rule 99    comparator_operator -> NULL_FUSION
Rule 100   print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 101   print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 102   print_statement -> ECHO printable_values
Rule 103   print_statement -> PRINT printable_values
Rule 104   printable_values -> values
Rule 105   printable_values -> values printable_dividers printable_values
Rule 106   printable_values -> values COMMA printable_values
Rule 107   printable_values -> VARIABLE
Rule 108   printable_values -> VARIABLE printable_dividers printable_values
Rule 109   printable_values -> VARIABLE COMMA printable_values
Rule 110   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 111   printable_values -> conditional
Rule 112   printable_values -> conditional printable_dividers printable_values
Rule 113   printable_values -> conditional COMMA printable_values
Rule 114   printable_values -> structure_object_principal
Rule 115   printable_values -> structure_object_principal printable_dividers printable_values
Rule 116   printable_values -> structure_object_principal COMMA printable_values
Rule 117   printable_dividers -> COMMA
Rule 118   printable_dividers -> STRING_CONCATENATION
Rule 119   values -> INTEGER
Rule 120   values -> STRING
Rule 121   values -> FLOAT
Rule 122   values -> boolean
Rule 123   boolean -> TRUE
Rule 124   boolean -> FALSE
Rule 125   expression -> term
Rule 126   expression -> term PLUS expression
Rule 127   expression -> term MINUS expression
Rule 128   term -> factor
Rule 129   term -> factor MULTIPLY term
Rule 130   term -> factor DIVIDE term
Rule 131   term -> factor MODULE term
Rule 132   term -> factor POW term
Rule 133   factor -> INTEGER
Rule 134   factor -> FLOAT
Rule 135   factor -> VARIABLE
Rule 136   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 137   factor -> STRING
Rule 138   assignment -> variable_assignment
Rule 139   assignment -> constant_assignment
Rule 140   variable_assignment -> VARIABLE assignment_operator values
Rule 141   variable_assignment -> VARIABLE assignment_operator expression
Rule 142   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 143   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 144   variable_assignment -> VARIABLE assignment_operator array_special_function
Rule 145   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 146   variable_assignment -> VARIABLE assignment_operator input
Rule 147   variable_assignment -> VARIABLE assignment_operator special_function
Rule 148   variable_assignment -> VARIABLE assignment_operator conditional
Rule 149   variable_assignment -> VARIABLE INCREASE
Rule 150   variable_assignment -> VARIABLE DECREMENT
Rule 151   variable_assignment -> INCREASE VARIABLE
Rule 152   variable_assignment -> DECREMENT VARIABLE
Rule 153   assignment_operator -> EQUALS
Rule 154   assignment_operator -> PLUS_EQUALS
Rule 155   constant_assignment -> const_syntax
Rule 156   constant_assignment -> define_syntax
Rule 157   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 158   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 159   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 160   function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN
Rule 161   params -> real_params
Rule 162   params -> empty
Rule 163   real_params -> VARIABLE
Rule 164   real_params -> values
Rule 165   real_params -> real_params COMMA VARIABLE
Rule 166   real_params -> real_params COMMA values
Rule 167   empty -> <empty>
Rule 168   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 169   special_function -> arrow_function
Rule 170   special_function -> anonymous_functions
Rule 171   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 172   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
Rule 173   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 174   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 175   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 176   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 177   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 178   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 179   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 180   string_param -> STRING
Rule 181   string_param -> VARIABLE
Rule 182   int_param -> INTEGER
Rule 183   int_param -> VARIABLE
Rule 184   array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 185   array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 186   array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 187   array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 188   count_param -> COMMA COUNT_NORMAL
Rule 189   count_param -> COMMA COUNT_RECURSIVE
Rule 190   count_param -> <empty>
Rule 191   length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 192   length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 193   length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 194   length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 195   types_structure -> structure_array_principal
Rule 196   types_structure -> structure_matrix_principal
Rule 197   types_structure -> structure_object_principal
Rule 198   structure_array_principal -> indexed_array
Rule 199   structure_array_principal -> associative_array
Rule 200   structure_array_principal -> access_array_stucture
Rule 201   structure_array_principal -> access_array_element
Rule 202   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 203   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 204   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 205   structure_array -> key EQUALS GREATER_THAN values
Rule 206   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 207   key -> INTEGER
Rule 208   key -> STRING
Rule 209   values_array_indexed -> values
Rule 210   values_array_indexed -> values COMMA values_array_indexed
Rule 211   values_array_indexed -> object_creation
Rule 212   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 213   values_array_indexed -> indexed_array
Rule 214   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 215   access_array_stucture -> access_array_element SEMICOLON
Rule 216   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 217   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 218   structure_matrix_principal -> matrix_firstform
Rule 219   structure_matrix_principal -> matrix_secondform
Rule 220   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 221   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 222   structure_matrix_principal -> add_element_matrix
Rule 223   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 224   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 225   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 226   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 227   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 228   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 229   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 230   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 231   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 232   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 233   modify_element_matrix -> access_element_matrix EQUALS values
Rule 234   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 235   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 236   structure_object_principal -> object_creation
Rule 237   structure_object_principal -> access_method_object
Rule 238   object_creation -> NEW IDENTIFIER
Rule 239   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 240   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 241   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 242   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 243   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 244   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 245   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 246   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 247   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 248   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 249   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 250   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 251   accessType -> IDENTIFIER
Rule 252   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 253   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 254   interface_body -> interface_body interface_method
Rule 255   interface_body -> <empty>
Rule 256   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 257   class_extends_opt -> EXTENDS IDENTIFIER
Rule 258   class_extends_opt -> <empty>
Rule 259   class_implements_opt -> IMPLEMENTS interface_list
Rule 260   class_implements_opt -> <empty>
Rule 261   interface_list -> IDENTIFIER
Rule 262   interface_list -> interface_list COMMA IDENTIFIER
Rule 263   class_body -> class_body class_member
Rule 264   class_body -> <empty>
Rule 265   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 266   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 267   class_member -> class_attribute
Rule 268   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 269   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 270   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 271   visibility_opt -> PUBLIC
Rule 272   visibility_opt -> PRIVATE
Rule 273   visibility_opt -> PROTECTED
Rule 274   visibility_opt -> <empty>
Rule 275   method_body -> classStatement
Rule 276   method_body -> classStatement return_form
Rule 277   method_body -> return_form
Rule 278   method_body -> classStatement BREAK SEMICOLON
Rule 279   method_body -> classStatement method_body
Rule 280   return_form -> RETURN values SEMICOLON
Rule 281   return_form -> RETURN access_method_object SEMICOLON
Rule 282   return_form -> RETURN SEMICOLON
Rule 283   classStatement -> sentence
Rule 284   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 69 75 202 203 204 223 227 228
ARRAY_POP            : 187
ARRAY_PUSH           : 
BREAK                : 24 27 278
CLASS                : 252
COLON                : 
COMMA                : 106 109 113 116 117 158 165 166 178 179 179 188 189 206 210 212 214 226 228 262
COMMENT              : 
CONST                : 157
COUNT                : 184 185 186 191 192 193
COUNT_NORMAL         : 188
COUNT_RECURSIVE      : 189
DECREMENT            : 32 34 150 152
DEFINE               : 158
DIVIDE               : 50 130
ECHO                 : 100 102
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 30 36 153 157 171 172 205 206 233 234 235 242 243 244 247 248 249 268
EQUALS_EQUALS        : 82 83 84 85 86 87 88 89 90
EXTENDS              : 257
FALSE                : 70 124
FEGTS                : 175
FLOAT                : 46 67 74 121 134
FN                   : 171 172
FOR                  : 30
FUNCTION             : 168 173 256 265 266
GREATER_EQUALS_TO    : 97
GREATER_THAN         : 95 171 172 205 206 240 241 242 243 244 245 246 247 248 249
IDENTICAL            : 91
IDENTIFIER           : 42 43 157 159 168 238 239 250 251 252 253 256 257 261 262 265 266
IF                   : 14 15 16
IMPLEMENTS           : 259
INCREASE             : 31 33 149 151
INTEGER              : 35 45 66 72 119 133 182 207 216 229 229 231 232 250
INTERFACE            : 253
LEFT_BRACE           : 13 14 15 16 17 18 19 20 30 174 252 253 265 266
LEFT_BRACKET         : 204 216 217 224 225 226 229 229 230 230 231 231 232 232 235 250
LEFT_PAREN           : 13 14 15 16 17 18 19 30 41 42 43 59 69 75 100 101 136 158 159 160 168 171 172 173 175 176 177 178 179 184 185 186 187 191 192 193 194 202 203 223 227 228 239 256 265 266
LOGIC_AND            : 55
LOGIC_NOT            : 77 78
LOGIC_OR             : 56
LOGIC_XOR            : 57
MINUS                : 48 127 240 241 242 243 244 245 246 247 248 249
MODULE               : 51 131
MULTIPLY             : 49 129
NEW                  : 238 239
NOT_EQUALS           : 92
NOT_IDENTICAL        : 93
NULL                 : 76
NULL_FUSION          : 99
PLUS                 : 47 126
PLUS_EQUALS          : 35 154
POW                  : 52 132
PRINT                : 101 103
PRIVATE              : 272
PROTECTED            : 273
PUBLIC               : 271
READLINE             : 176
RETURN               : 22 23 26 28 29 280 281 282
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 30 174 252 253 265 266
RIGHT_BRACKET        : 204 216 217 224 225 226 229 229 230 230 231 231 232 232 235 250
RIGHT_PAREN          : 13 14 15 16 17 18 19 30 41 42 43 59 69 75 100 101 136 158 159 160 168 171 172 173 175 176 177 178 179 184 185 186 187 191 192 193 194 202 203 223 227 228 239 256 265 266
SEMICOLON            : 3 4 22 23 24 26 27 28 29 30 30 215 220 221 223 224 256 268 269 270 278 280 281 282 284
SMALL_EQUALS_TO      : 96
SMALL_THAN           : 94
SPACECRAFT           : 98
STATIC               : 265
STDIN                : 175
STRING               : 65 71 110 120 137 158 176 180 208
STRING_CONCATENATION : 110 118
STRLEN               : 177 194
SUBSTR               : 178 179
TRUE                 : 64 123
VARIABLE             : 30 31 32 33 34 35 36 36 37 38 42 68 73 78 82 84 85 86 86 88 89 107 108 109 110 135 140 141 142 143 144 145 146 147 148 149 150 151 152 160 163 165 181 183 186 187 193 216 217 217 229 230 230 230 231 231 232 232 234 235 240 241 242 243 243 244 248 268 269
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 241 242 243 244 246 247 248 249
access_array_element : 43 83 84 85 87 87 201 215 244 245 246 247 248 249 249
access_array_stucture : 200
access_element_matrix : 88 89 220 233 234
access_method_object : 237 281 284
add_element_matrix   : 222
anonymous_functions  : 170
array_special_function : 144
arrow_function       : 169
assignment           : 4
assignment_operator  : 140 141 142 143 144 145 146 147 148
associative_array    : 199
body_statement       : 13 14 15 16 17 18 19 20 25 30 174
boolean              : 122
boolean_expression   : 53 54 54
classStatement       : 275 276 278 279
class_attribute      : 267
class_body           : 252 263
class_declaration    : 6
class_extends_opt    : 252 253
class_implements_opt : 252
class_member         : 263
codeblock            : 168 171 173
comparation          : 58
comparator_operator  : 37 79 80 81
condition_for        : 30
conditional          : 13 14 15 16 17 18 19 59 77 111 112 113 148
const_syntax         : 155
constant_assignment  : 139 270
control_structures   : 8
count_param          : 184 185 186 191 192 193
define_syntax        : 156
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 162
expression           : 80 81 81 126 127 136 141
expression_for       : 30 37 40 40 41
factor               : 128 129 130 131 132
false_boolean_types  : 62 63
for_statement        : 12
function_declaration : 9
function_invocation  : 142 240 245
if_statement         : 10
increment_statement  : 30
indexed_array        : 198 213 214 235
input                : 146
int_param            : 178 179 179
interface_body       : 253 254
interface_declaration : 7
interface_list       : 259 262
interface_method     : 254
key                  : 205 206
length_operations    : 44
logic_expression     : 61
logic_not_sentence   : 60
logic_operator       : 54 62 63
matrix_firstform     : 218
matrix_secondform    : 219
method_body          : 265 266 279
modify_element_matrix : 221
number_values        : 36 39
object_creation      : 211 212 236
operator_aritmetic   : 36 40
params               : 159 160 168 171 172 173 239 256 265 266
print_statement      : 3 172
printable_dividers   : 105 108 112 115
printable_values     : 28 29 100 101 102 103 105 106 108 109 112 113 115 116
program              : 1 0
real_params          : 161 165 166
return_form          : 276 277
sentence             : 1 2 21 22 23 24 25 29 283
special_function     : 147
string_param         : 177 178 179 194
string_special_function : 143
structure_array      : 203 204 206
structure_array_principal : 184 191 195
structure_matrix_first : 223 228
structure_matrix_principal : 185 192 196
structure_matrix_second : 224 226
structure_object_principal : 114 115 116 197
term                 : 125 126 127 129 130 131 132
true_boolean_types   : 62 63
types_structure      : 5 145
values               : 22 26 69 79 79 80 82 83 104 105 106 140 157 158 164 166 205 206 209 210 225 226 227 228 233 242 247 268 280
values_array_indexed : 202 210 212 214
variable_assignment  : 138
visibility_opt       : 256 265 266 268 269 270
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (100) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> ECHO . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 11

    (101) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> PRINT . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 76
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 77
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 12

    (138) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 138 (assignment -> variable_assignment .)


state 13

    (139) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 139 (assignment -> constant_assignment .)


state 14

    (195) types_structure -> structure_array_principal .

    ECHO            reduce using rule 195 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 195 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 195 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 195 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 195 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 195 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 195 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 195 (types_structure -> structure_array_principal .)
    IF              reduce using rule 195 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 195 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 195 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 195 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 195 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 195 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 195 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 195 (types_structure -> structure_array_principal .)
    $end            reduce using rule 195 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 195 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 195 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 195 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 195 (types_structure -> structure_array_principal .)


state 15

    (196) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 196 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 196 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 196 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 196 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 196 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 196 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 196 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 196 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 196 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 196 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 196 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 196 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 196 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 196 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 196 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 196 (types_structure -> structure_matrix_principal .)


state 16

    (197) types_structure -> structure_object_principal .

    ECHO            reduce using rule 197 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 197 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 197 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 197 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 197 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 197 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 197 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 197 (types_structure -> structure_object_principal .)
    IF              reduce using rule 197 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 197 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 197 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 197 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 197 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 197 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 197 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 197 (types_structure -> structure_object_principal .)
    $end            reduce using rule 197 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 197 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 197 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 197 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 197 (types_structure -> structure_object_principal .)


state 17

    (252) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 78


state 18

    (253) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 79


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (168) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 80


state 23

    (140) variable_assignment -> VARIABLE . assignment_operator values
    (141) variable_assignment -> VARIABLE . assignment_operator expression
    (142) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (143) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (144) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (145) variable_assignment -> VARIABLE . assignment_operator types_structure
    (146) variable_assignment -> VARIABLE . assignment_operator input
    (147) variable_assignment -> VARIABLE . assignment_operator special_function
    (148) variable_assignment -> VARIABLE . assignment_operator conditional
    (149) variable_assignment -> VARIABLE . INCREASE
    (150) variable_assignment -> VARIABLE . DECREMENT
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (153) assignment_operator -> . EQUALS
    (154) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 82
    DECREMENT       shift and go to state 83
    LEFT_BRACKET    shift and go to state 84
    MINUS           shift and go to state 86
    EQUALS          shift and go to state 85
    PLUS_EQUALS     shift and go to state 87

    assignment_operator            shift and go to state 81

state 24

    (151) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 88


state 25

    (152) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 89


state 26

    (155) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 155 (constant_assignment -> const_syntax .)


state 27

    (156) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 156 (constant_assignment -> define_syntax .)


state 28

    (198) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 198 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 198 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 198 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 198 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 198 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 198 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 198 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 198 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 198 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 198 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 198 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 198 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 198 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 198 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 198 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 198 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 198 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 198 (structure_array_principal -> indexed_array .)
    COMMA           reduce using rule 198 (structure_array_principal -> indexed_array .)
    RIGHT_PAREN     reduce using rule 198 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 198 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 198 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 198 (structure_array_principal -> indexed_array .)


state 29

    (199) structure_array_principal -> associative_array .

    ECHO            reduce using rule 199 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 199 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 199 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 199 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 199 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 199 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 199 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 199 (structure_array_principal -> associative_array .)
    IF              reduce using rule 199 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 199 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 199 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 199 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 199 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 199 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 199 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 199 (structure_array_principal -> associative_array .)
    $end            reduce using rule 199 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 199 (structure_array_principal -> associative_array .)
    COMMA           reduce using rule 199 (structure_array_principal -> associative_array .)
    RIGHT_PAREN     reduce using rule 199 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 199 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 199 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 199 (structure_array_principal -> associative_array .)


state 30

    (200) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    COMMA           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    RIGHT_PAREN     reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 200 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 200 (structure_array_principal -> access_array_stucture .)


state 31

    (201) structure_array_principal -> access_array_element .
    (215) access_array_stucture -> access_array_element . SEMICOLON
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            reduce using rule 201 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 201 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 201 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 201 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 201 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 201 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 201 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 201 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 201 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 201 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 201 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 201 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 201 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 201 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 201 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 201 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 201 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 201 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 201 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 201 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 90
    MINUS           shift and go to state 91


state 32

    (218) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    COMMA           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_PAREN     reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 218 (structure_matrix_principal -> matrix_firstform .)


state 33

    (219) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    COMMA           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_PAREN     reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 219 (structure_matrix_principal -> matrix_secondform .)


state 34

    (220) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (233) modify_element_matrix -> access_element_matrix . EQUALS values
    (234) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 92
    EQUALS          shift and go to state 93


state 35

    (221) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 94


state 36

    (222) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    COMMA           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_PAREN     reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 222 (structure_matrix_principal -> add_element_matrix .)


state 37

    (236) structure_object_principal -> object_creation .

    ECHO            reduce using rule 236 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 236 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 236 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 236 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 236 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 236 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 236 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 236 (structure_object_principal -> object_creation .)
    IF              reduce using rule 236 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 236 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 236 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 236 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 236 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 236 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 236 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 236 (structure_object_principal -> object_creation .)
    $end            reduce using rule 236 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 236 (structure_object_principal -> object_creation .)
    STRING_CONCATENATION reduce using rule 236 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 236 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 236 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 236 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 236 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 236 (structure_object_principal -> object_creation .)


state 38

    (237) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 237 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 237 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 237 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 237 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 237 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 237 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 237 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 237 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 237 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 237 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 237 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 237 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 237 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 237 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 237 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 237 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 237 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 237 (structure_object_principal -> access_method_object .)
    STRING_CONCATENATION reduce using rule 237 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 237 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 237 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 237 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 237 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 237 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 95


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 96


state 41

    (30) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 97


state 42

    (157) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 98


state 43

    (158) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99


state 44

    (202) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (223) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 100
    LEFT_BRACKET    shift and go to state 101


state 45

    (224) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (225) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (226) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 102

    structure_matrix_second        shift and go to state 103

state 46

    (238) object_creation -> NEW . IDENTIFIER
    (239) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 104


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (100) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (136) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 109
    INTEGER         shift and go to state 111
    STRING          shift and go to state 110
    FLOAT           shift and go to state 112
    LEFT_PAREN      shift and go to state 105
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 106
    conditional                    shift and go to state 107
    expression                     shift and go to state 108
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    access_array_element           shift and go to state 66
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71

state 51

    (102) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 102 (print_statement -> ECHO printable_values .)


state 52

    (104) printable_values -> values .
    (105) printable_values -> values . printable_dividers printable_values
    (106) printable_values -> values . COMMA printable_values
    (79) comparation -> values . comparator_operator values
    (80) comparation -> values . comparator_operator expression
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 104 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> values .)
    COMMA           shift and go to state 114
    STRING_CONCATENATION shift and go to state 116
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    printable_dividers             shift and go to state 113
    comparator_operator            shift and go to state 115

state 53

    (107) printable_values -> VARIABLE .
    (108) printable_values -> VARIABLE . printable_dividers printable_values
    (109) printable_values -> VARIABLE . COMMA printable_values
    (110) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .
    (135) factor -> VARIABLE .
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 107 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]

    printable_dividers             shift and go to state 127

state 54

    (120) values -> STRING .
    (65) true_boolean_types -> STRING .
    (71) false_boolean_types -> STRING .
    (137) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> STRING .)
    COMMA           reduce using rule 120 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 120 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 120 (values -> STRING .)
    IDENTICAL       reduce using rule 120 (values -> STRING .)
    NOT_EQUALS      reduce using rule 120 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 120 (values -> STRING .)
    SMALL_THAN      reduce using rule 120 (values -> STRING .)
    GREATER_THAN    reduce using rule 120 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> STRING .)
    SPACECRAFT      reduce using rule 120 (values -> STRING .)
    NULL_FUSION     reduce using rule 120 (values -> STRING .)
    SEMICOLON       reduce using rule 120 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 120 (values -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 137 (factor -> STRING .)
    DIVIDE          reduce using rule 137 (factor -> STRING .)
    MODULE          reduce using rule 137 (factor -> STRING .)
    POW             reduce using rule 137 (factor -> STRING .)
    PLUS            reduce using rule 137 (factor -> STRING .)
    MINUS           reduce using rule 137 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> STRING .) ]


state 55

    (111) printable_values -> conditional .
    (112) printable_values -> conditional . printable_dividers printable_values
    (113) printable_values -> conditional . COMMA printable_values
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 111 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> conditional .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 116

    printable_dividers             shift and go to state 132

state 56

    (114) printable_values -> structure_object_principal .
    (115) printable_values -> structure_object_principal . printable_dividers printable_values
    (116) printable_values -> structure_object_principal . COMMA printable_values
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 114 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 135
    STRING_CONCATENATION shift and go to state 116

    printable_dividers             shift and go to state 134

state 57

    (119) values -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (72) false_boolean_types -> INTEGER .
    (133) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> INTEGER .)
    COMMA           reduce using rule 119 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 119 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 119 (values -> INTEGER .)
    IDENTICAL       reduce using rule 119 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 119 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 119 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 119 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 119 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 119 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 119 (values -> INTEGER .)
    SEMICOLON       reduce using rule 119 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 119 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 133 (factor -> INTEGER .)
    DIVIDE          reduce using rule 133 (factor -> INTEGER .)
    MODULE          reduce using rule 133 (factor -> INTEGER .)
    POW             reduce using rule 133 (factor -> INTEGER .)
    PLUS            reduce using rule 133 (factor -> INTEGER .)
    MINUS           reduce using rule 133 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> INTEGER .) ]


state 58

    (121) values -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (74) false_boolean_types -> FLOAT .
    (134) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 121 (values -> FLOAT .)
    COMMA           reduce using rule 121 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 121 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 121 (values -> FLOAT .)
    IDENTICAL       reduce using rule 121 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 121 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 121 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 121 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 121 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 121 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 121 (values -> FLOAT .)
    SEMICOLON       reduce using rule 121 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 121 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 134 (factor -> FLOAT .)
    DIVIDE          reduce using rule 134 (factor -> FLOAT .)
    MODULE          reduce using rule 134 (factor -> FLOAT .)
    POW             reduce using rule 134 (factor -> FLOAT .)
    PLUS            reduce using rule 134 (factor -> FLOAT .)
    MINUS           reduce using rule 134 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> FLOAT .) ]


state 59

    (122) values -> boolean .

    COMMA           reduce using rule 122 (values -> boolean .)
    STRING_CONCATENATION reduce using rule 122 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 122 (values -> boolean .)
    IDENTICAL       reduce using rule 122 (values -> boolean .)
    NOT_EQUALS      reduce using rule 122 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 122 (values -> boolean .)
    SMALL_THAN      reduce using rule 122 (values -> boolean .)
    GREATER_THAN    reduce using rule 122 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 122 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 122 (values -> boolean .)
    SPACECRAFT      reduce using rule 122 (values -> boolean .)
    NULL_FUSION     reduce using rule 122 (values -> boolean .)
    SEMICOLON       reduce using rule 122 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 122 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 122 (values -> boolean .)
    LOGIC_AND       reduce using rule 122 (values -> boolean .)
    LOGIC_OR        reduce using rule 122 (values -> boolean .)
    LOGIC_XOR       reduce using rule 122 (values -> boolean .)
    ECHO            reduce using rule 122 (values -> boolean .)
    PRINT           reduce using rule 122 (values -> boolean .)
    CLASS           reduce using rule 122 (values -> boolean .)
    INTERFACE       reduce using rule 122 (values -> boolean .)
    FUNCTION        reduce using rule 122 (values -> boolean .)
    VARIABLE        reduce using rule 122 (values -> boolean .)
    INCREASE        reduce using rule 122 (values -> boolean .)
    DECREMENT       reduce using rule 122 (values -> boolean .)
    IF              reduce using rule 122 (values -> boolean .)
    WHILE           reduce using rule 122 (values -> boolean .)
    FOR             reduce using rule 122 (values -> boolean .)
    CONST           reduce using rule 122 (values -> boolean .)
    DEFINE          reduce using rule 122 (values -> boolean .)
    ARRAY           reduce using rule 122 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 122 (values -> boolean .)
    NEW             reduce using rule 122 (values -> boolean .)
    $end            reduce using rule 122 (values -> boolean .)
    RETURN          reduce using rule 122 (values -> boolean .)
    BREAK           reduce using rule 122 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 122 (values -> boolean .)


state 60

    (53) conditional -> boolean_expression .
    (54) conditional -> boolean_expression . logic_operator boolean_expression
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 53 (conditional -> boolean_expression .)
    STRING_CONCATENATION reduce using rule 53 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 53 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 53 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 137
    LOGIC_OR        shift and go to state 138
    LOGIC_XOR       shift and go to state 139

  ! LOGIC_AND       [ reduce using rule 53 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 53 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 53 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 136

state 61

    (123) boolean -> TRUE .
    (64) true_boolean_types -> TRUE .

    COMMA           reduce using rule 123 (boolean -> TRUE .)
    STRING_CONCATENATION reduce using rule 123 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 123 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 123 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 123 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 123 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 123 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 123 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 123 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 123 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 123 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 123 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 123 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 123 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)


state 62

    (124) boolean -> FALSE .
    (70) false_boolean_types -> FALSE .

    COMMA           reduce using rule 124 (boolean -> FALSE .)
    STRING_CONCATENATION reduce using rule 124 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 124 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 124 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 124 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 124 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 124 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 124 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 124 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 124 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 124 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 124 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 124 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 124 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> FALSE .)


state 63

    (58) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> comparation .)
    COMMA           reduce using rule 58 (boolean_expression -> comparation .)
    STRING_CONCATENATION reduce using rule 58 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> comparation .)


state 64

    (60) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    STRING_CONCATENATION reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 60 (boolean_expression -> logic_not_sentence .)


state 65

    (61) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 61 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 61 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 61 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 61 (boolean_expression -> logic_expression .)
    STRING_CONCATENATION reduce using rule 61 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 61 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 61 (boolean_expression -> logic_expression .)


state 66

    (245) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> access_array_element . EQUALS_EQUALS values
    (84) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (87) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 140


state 67

    (81) comparation -> expression . comparator_operator expression
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 141

state 68

    (88) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 142


state 69

    (77) logic_not_sentence -> LOGIC_NOT . conditional
    (78) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    VARIABLE        shift and go to state 144
    LEFT_PAREN      shift and go to state 105
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    conditional                    shift and go to state 143
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 145
    expression                     shift and go to state 67
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 70

    (62) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 137
    LOGIC_OR        shift and go to state 138
    LOGIC_XOR       shift and go to state 139

    logic_operator                 shift and go to state 149

state 71

    (63) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 137
    LOGIC_OR        shift and go to state 138
    LOGIC_XOR       shift and go to state 139

    logic_operator                 shift and go to state 150

state 72

    (125) expression -> term .
    (126) expression -> term . PLUS expression
    (127) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 125 (expression -> term .)
    IDENTICAL       reduce using rule 125 (expression -> term .)
    NOT_EQUALS      reduce using rule 125 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 125 (expression -> term .)
    SMALL_THAN      reduce using rule 125 (expression -> term .)
    GREATER_THAN    reduce using rule 125 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 125 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 125 (expression -> term .)
    SPACECRAFT      reduce using rule 125 (expression -> term .)
    NULL_FUSION     reduce using rule 125 (expression -> term .)
    RIGHT_PAREN     reduce using rule 125 (expression -> term .)
    SEMICOLON       reduce using rule 125 (expression -> term .)
    LOGIC_AND       reduce using rule 125 (expression -> term .)
    LOGIC_OR        reduce using rule 125 (expression -> term .)
    LOGIC_XOR       reduce using rule 125 (expression -> term .)
    COMMA           reduce using rule 125 (expression -> term .)
    STRING_CONCATENATION reduce using rule 125 (expression -> term .)
    PLUS            shift and go to state 151
    MINUS           shift and go to state 152


state 73

    (69) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (75) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 153


state 74

    (76) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 76 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 76 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 76 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 76 (false_boolean_types -> NULL .)
    STRING_CONCATENATION reduce using rule 76 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 76 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 76 (false_boolean_types -> NULL .)


state 75

    (128) term -> factor .
    (129) term -> factor . MULTIPLY term
    (130) term -> factor . DIVIDE term
    (131) term -> factor . MODULE term
    (132) term -> factor . POW term

    PLUS            reduce using rule 128 (term -> factor .)
    MINUS           reduce using rule 128 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 128 (term -> factor .)
    IDENTICAL       reduce using rule 128 (term -> factor .)
    NOT_EQUALS      reduce using rule 128 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 128 (term -> factor .)
    SMALL_THAN      reduce using rule 128 (term -> factor .)
    GREATER_THAN    reduce using rule 128 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 128 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 128 (term -> factor .)
    SPACECRAFT      reduce using rule 128 (term -> factor .)
    NULL_FUSION     reduce using rule 128 (term -> factor .)
    RIGHT_PAREN     reduce using rule 128 (term -> factor .)
    SEMICOLON       reduce using rule 128 (term -> factor .)
    LOGIC_AND       reduce using rule 128 (term -> factor .)
    LOGIC_OR        reduce using rule 128 (term -> factor .)
    LOGIC_XOR       reduce using rule 128 (term -> factor .)
    COMMA           reduce using rule 128 (term -> factor .)
    STRING_CONCATENATION reduce using rule 128 (term -> factor .)
    MULTIPLY        shift and go to state 154
    DIVIDE          shift and go to state 155
    MODULE          shift and go to state 156
    POW             shift and go to state 157


state 76

    (101) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (136) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 109
    INTEGER         shift and go to state 111
    STRING          shift and go to state 110
    FLOAT           shift and go to state 112
    LEFT_PAREN      shift and go to state 105
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 158
    conditional                    shift and go to state 107
    expression                     shift and go to state 108
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    access_array_element           shift and go to state 66
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71

state 77

    (103) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 103 (print_statement -> PRINT printable_values .)


state 78

    (252) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (257) class_extends_opt -> . EXTENDS IDENTIFIER
    (258) class_extends_opt -> .

    EXTENDS         shift and go to state 160
    IMPLEMENTS      reduce using rule 258 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 258 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 159

state 79

    (253) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (257) class_extends_opt -> . EXTENDS IDENTIFIER
    (258) class_extends_opt -> .

    EXTENDS         shift and go to state 160
    LEFT_BRACE      reduce using rule 258 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 161

state 80

    (168) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 162


state 81

    (140) variable_assignment -> VARIABLE assignment_operator . values
    (141) variable_assignment -> VARIABLE assignment_operator . expression
    (142) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (143) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (144) variable_assignment -> VARIABLE assignment_operator . array_special_function
    (145) variable_assignment -> VARIABLE assignment_operator . types_structure
    (146) variable_assignment -> VARIABLE assignment_operator . input
    (147) variable_assignment -> VARIABLE assignment_operator . special_function
    (148) variable_assignment -> VARIABLE assignment_operator . conditional
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (159) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (160) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (177) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (178) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (179) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (184) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (185) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (186) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (187) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (175) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (176) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (169) special_function -> . arrow_function
    (170) special_function -> . anonymous_functions
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (171) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (172) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (173) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL

    INTEGER         shift and go to state 111
    STRING          shift and go to state 110
    FLOAT           shift and go to state 112
    IDENTIFIER      shift and go to state 173
    VARIABLE        shift and go to state 163
    STRLEN          shift and go to state 174
    SUBSTR          shift and go to state 175
    COUNT           shift and go to state 176
    ARRAY_POP       shift and go to state 177
    FEGTS           shift and go to state 178
    READLINE        shift and go to state 179
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    FN              shift and go to state 184
    FUNCTION        shift and go to state 185
    LEFT_PAREN      shift and go to state 105
    ARRAY           shift and go to state 186
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    NULL            shift and go to state 74

    values                         shift and go to state 164
    expression                     shift and go to state 165
    function_invocation            shift and go to state 166
    string_special_function        shift and go to state 167
    array_special_function         shift and go to state 168
    types_structure                shift and go to state 169
    input                          shift and go to state 170
    special_function               shift and go to state 171
    conditional                    shift and go to state 172
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 180
    anonymous_functions            shift and go to state 181
    boolean_expression             shift and go to state 60
    factor                         shift and go to state 75
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 182
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 183
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71

state 82

    (149) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 149 (variable_assignment -> VARIABLE INCREASE .)


state 83

    (150) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 150 (variable_assignment -> VARIABLE DECREMENT .)


state 84

    (216) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 188
    VARIABLE        shift and go to state 187
    RIGHT_BRACKET   shift and go to state 189


state 85

    (153) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 153 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 153 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 153 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 153 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 153 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 153 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 153 (assignment_operator -> EQUALS .)
    COUNT           reduce using rule 153 (assignment_operator -> EQUALS .)
    ARRAY_POP       reduce using rule 153 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 153 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 153 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 153 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 153 (assignment_operator -> EQUALS .)
    FN              reduce using rule 153 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 153 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 153 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 153 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 153 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 153 (assignment_operator -> EQUALS .)
    LOGIC_NOT       reduce using rule 153 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 153 (assignment_operator -> EQUALS .)


state 86

    (240) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (242) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 190


state 87

    (154) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    COUNT           reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    ARRAY_POP       reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    LOGIC_NOT       reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 154 (assignment_operator -> PLUS_EQUALS .)


state 88

    (151) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 151 (variable_assignment -> INCREASE VARIABLE .)


state 89

    (152) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 152 (variable_assignment -> DECREMENT VARIABLE .)


state 90

    (215) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    COMMA           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_PAREN     reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 215 (access_array_stucture -> access_array_element SEMICOLON .)


state 91

    (245) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (247) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 191


state 92

    (220) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    COMMA           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 220 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 93

    (233) modify_element_matrix -> access_element_matrix EQUALS . values
    (234) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 192
    boolean                        shift and go to state 59

state 94

    (221) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    COMMA           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 221 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 95

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    conditional                    shift and go to state 199
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 145
    expression                     shift and go to state 67
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 96

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    conditional                    shift and go to state 201
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 145
    expression                     shift and go to state 67
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 97

    (30) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 202


state 98

    (157) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 203


state 99

    (158) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 204


state 100

    (202) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (203) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (223) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (205) structure_array -> . key EQUALS GREATER_THAN values
    (206) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (228) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (207) key -> . INTEGER
    (208) key -> . STRING
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    ARRAY           shift and go to state 205
    INTEGER         shift and go to state 213
    STRING          shift and go to state 214
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    structure_array                shift and go to state 207
    structure_matrix_first         shift and go to state 208
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    key                            shift and go to state 212
    boolean                        shift and go to state 59

state 101

    (204) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (205) structure_array -> . key EQUALS GREATER_THAN values
    (206) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (207) key -> . INTEGER
    (208) key -> . STRING

    INTEGER         shift and go to state 216
    STRING          shift and go to state 217

    structure_array                shift and go to state 215
    key                            shift and go to state 212

state 102

    (225) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (226) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 218
    boolean                        shift and go to state 59

state 103

    (224) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 219


state 104

    (238) object_creation -> NEW IDENTIFIER .
    (239) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 238 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 220


state 105

    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (136) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 222
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 223
    FLOAT           shift and go to state 224
    STRING          shift and go to state 225
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    conditional                    shift and go to state 221
    expression                     shift and go to state 108
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    values                         shift and go to state 145
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59

state 106

    (100) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 226


state 107

    (59) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (111) printable_values -> conditional .
    (112) printable_values -> conditional . printable_dividers printable_values
    (113) printable_values -> conditional . COMMA printable_values
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 227
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 116

  ! RIGHT_PAREN     [ reduce using rule 111 (printable_values -> conditional .) ]

    printable_dividers             shift and go to state 132

state 108

    (136) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (81) comparation -> expression . comparator_operator expression
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 228
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 141

state 109

    (107) printable_values -> VARIABLE .
    (108) printable_values -> VARIABLE . printable_dividers printable_values
    (109) printable_values -> VARIABLE . COMMA printable_values
    (110) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (135) factor -> VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 107 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 130
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 131
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]

    printable_dividers             shift and go to state 127

state 110

    (120) values -> STRING .
    (137) factor -> STRING .
    (65) true_boolean_types -> STRING .
    (71) false_boolean_types -> STRING .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 120 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 120 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 120 (values -> STRING .)
    IDENTICAL       reduce using rule 120 (values -> STRING .)
    NOT_EQUALS      reduce using rule 120 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 120 (values -> STRING .)
    SMALL_THAN      reduce using rule 120 (values -> STRING .)
    GREATER_THAN    reduce using rule 120 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> STRING .)
    SPACECRAFT      reduce using rule 120 (values -> STRING .)
    NULL_FUSION     reduce using rule 120 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 120 (values -> STRING .)
    SEMICOLON       reduce using rule 120 (values -> STRING .)
    MULTIPLY        reduce using rule 137 (factor -> STRING .)
    DIVIDE          reduce using rule 137 (factor -> STRING .)
    MODULE          reduce using rule 137 (factor -> STRING .)
    POW             reduce using rule 137 (factor -> STRING .)
    PLUS            reduce using rule 137 (factor -> STRING .)
    MINUS           reduce using rule 137 (factor -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)

  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> STRING .) ]


state 111

    (119) values -> INTEGER .
    (133) factor -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (72) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 119 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 119 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 119 (values -> INTEGER .)
    IDENTICAL       reduce using rule 119 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 119 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 119 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 119 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 119 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 119 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 119 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 119 (values -> INTEGER .)
    SEMICOLON       reduce using rule 119 (values -> INTEGER .)
    MULTIPLY        reduce using rule 133 (factor -> INTEGER .)
    DIVIDE          reduce using rule 133 (factor -> INTEGER .)
    MODULE          reduce using rule 133 (factor -> INTEGER .)
    POW             reduce using rule 133 (factor -> INTEGER .)
    PLUS            reduce using rule 133 (factor -> INTEGER .)
    MINUS           reduce using rule 133 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 133 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]


state 112

    (121) values -> FLOAT .
    (134) factor -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (74) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 121 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 121 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 121 (values -> FLOAT .)
    IDENTICAL       reduce using rule 121 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 121 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 121 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 121 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 121 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 121 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 121 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 121 (values -> FLOAT .)
    SEMICOLON       reduce using rule 121 (values -> FLOAT .)
    MULTIPLY        reduce using rule 134 (factor -> FLOAT .)
    DIVIDE          reduce using rule 134 (factor -> FLOAT .)
    MODULE          reduce using rule 134 (factor -> FLOAT .)
    POW             reduce using rule 134 (factor -> FLOAT .)
    PLUS            reduce using rule 134 (factor -> FLOAT .)
    MINUS           reduce using rule 134 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)

  ! RIGHT_PAREN     [ reduce using rule 134 (factor -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]


state 113

    (105) printable_values -> values printable_dividers . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    values                         shift and go to state 52
    printable_values               shift and go to state 229
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 114

    (106) printable_values -> values COMMA . printable_values
    (117) printable_dividers -> COMMA .
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

  ! VARIABLE        [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 117 (printable_dividers -> COMMA .) ]

    values                         shift and go to state 52
    printable_values               shift and go to state 230
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 115

    (79) comparation -> values comparator_operator . values
    (80) comparation -> values comparator_operator . expression
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 233
    STRING          shift and go to state 234
    FLOAT           shift and go to state 235
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237

    values                         shift and go to state 231
    expression                     shift and go to state 232
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 116

    (118) printable_dividers -> STRING_CONCATENATION .

    VARIABLE        reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    INTEGER         reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    STRING          reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    FLOAT           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    TRUE            reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    FALSE           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    LEFT_PAREN      reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    NEW             reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    LOGIC_NOT       reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    ARRAY           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    NULL            reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)


state 117

    (90) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    COUNT           reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)
    STRLEN          reduce using rule 90 (comparator_operator -> EQUALS_EQUALS .)


state 118

    (91) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 91 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 91 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 91 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 91 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 91 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 91 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> IDENTICAL .)
    COUNT           reduce using rule 91 (comparator_operator -> IDENTICAL .)
    STRLEN          reduce using rule 91 (comparator_operator -> IDENTICAL .)


state 119

    (92) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    COUNT           reduce using rule 92 (comparator_operator -> NOT_EQUALS .)
    STRLEN          reduce using rule 92 (comparator_operator -> NOT_EQUALS .)


state 120

    (93) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    COUNT           reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)
    STRLEN          reduce using rule 93 (comparator_operator -> NOT_IDENTICAL .)


state 121

    (94) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    COUNT           reduce using rule 94 (comparator_operator -> SMALL_THAN .)
    STRLEN          reduce using rule 94 (comparator_operator -> SMALL_THAN .)


state 122

    (95) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    COUNT           reduce using rule 95 (comparator_operator -> GREATER_THAN .)
    STRLEN          reduce using rule 95 (comparator_operator -> GREATER_THAN .)


state 123

    (96) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    COUNT           reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)
    STRLEN          reduce using rule 96 (comparator_operator -> SMALL_EQUALS_TO .)


state 124

    (97) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    COUNT           reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)
    STRLEN          reduce using rule 97 (comparator_operator -> GREATER_EQUALS_TO .)


state 125

    (98) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    COUNT           reduce using rule 98 (comparator_operator -> SPACECRAFT .)
    STRLEN          reduce using rule 98 (comparator_operator -> SPACECRAFT .)


state 126

    (99) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    COUNT           reduce using rule 99 (comparator_operator -> NULL_FUSION .)
    STRLEN          reduce using rule 99 (comparator_operator -> NULL_FUSION .)


state 127

    (108) printable_values -> VARIABLE printable_dividers . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 238
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 128

    (109) printable_values -> VARIABLE COMMA . printable_values
    (117) printable_dividers -> COMMA .
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

  ! VARIABLE        [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 117 (printable_dividers -> COMMA .) ]

    printable_values               shift and go to state 239
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 129

    (110) printable_values -> VARIABLE STRING_CONCATENATION . STRING
    (118) printable_dividers -> STRING_CONCATENATION .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 240
    VARIABLE        reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    INTEGER         reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    FLOAT           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    TRUE            reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    FALSE           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    LEFT_PAREN      reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    NEW             reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    LOGIC_NOT       reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    ARRAY           reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)
    NULL            reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .)

  ! STRING          [ reduce using rule 118 (printable_dividers -> STRING_CONCATENATION .) ]


state 130

    (82) comparation -> VARIABLE EQUALS_EQUALS . values
    (85) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (86) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (89) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 241
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 242
    access_array_element           shift and go to state 243
    access_element_matrix          shift and go to state 244
    boolean                        shift and go to state 59

state 131

    (216) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 188
    VARIABLE        shift and go to state 187


state 132

    (112) printable_values -> conditional printable_dividers . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    conditional                    shift and go to state 55
    printable_values               shift and go to state 245
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 133

    (113) printable_values -> conditional COMMA . printable_values
    (117) printable_dividers -> COMMA .
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

  ! VARIABLE        [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 117 (printable_dividers -> COMMA .) ]

    conditional                    shift and go to state 55
    printable_values               shift and go to state 246
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 134

    (115) printable_values -> structure_object_principal printable_dividers . printable_values
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 247
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 135

    (116) printable_values -> structure_object_principal COMMA . printable_values
    (117) printable_dividers -> COMMA .
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

  ! VARIABLE        [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 117 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 117 (printable_dividers -> COMMA .) ]

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 248
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 136

    (54) conditional -> boolean_expression logic_operator . boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    boolean_expression             shift and go to state 249
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 145
    expression                     shift and go to state 67
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 137

    (55) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 55 (logic_operator -> LOGIC_AND .)


state 138

    (56) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 56 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 56 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 56 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 56 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 56 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 56 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 56 (logic_operator -> LOGIC_OR .)


state 139

    (57) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 57 (logic_operator -> LOGIC_XOR .)


state 140

    (83) comparation -> access_array_element EQUALS_EQUALS . values
    (84) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (87) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 252
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    access_array_element           shift and go to state 250
    values                         shift and go to state 251
    boolean                        shift and go to state 59

state 141

    (81) comparation -> expression comparator_operator . expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    expression                     shift and go to state 253
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 142

    (88) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 257


state 143

    (77) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    STRING_CONCATENATION reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 77 (logic_not_sentence -> LOGIC_NOT conditional .)


state 144

    (78) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .
    (135) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    COMMA           reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    STRING_CONCATENATION reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    MINUS           reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 78 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]


state 145

    (79) comparation -> values . comparator_operator values
    (80) comparation -> values . comparator_operator expression
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 115

state 146

    (83) comparation -> access_array_element . EQUALS_EQUALS values
    (84) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (87) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 140


state 147

    (64) true_boolean_types -> TRUE .
    (123) boolean -> TRUE .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 123 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 123 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 123 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 123 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 123 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 123 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 123 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 123 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 123 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 123 (boolean -> TRUE .)


state 148

    (70) false_boolean_types -> FALSE .
    (124) boolean -> FALSE .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 124 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 124 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 124 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 124 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 124 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 124 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 124 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 124 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 124 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 124 (boolean -> FALSE .)


state 149

    (62) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL

    FALSE           shift and go to state 259
    STRING          shift and go to state 260
    INTEGER         shift and go to state 261
    VARIABLE        shift and go to state 262
    FLOAT           shift and go to state 263
    ARRAY           shift and go to state 264
    NULL            shift and go to state 74

    false_boolean_types            shift and go to state 258

state 150

    (63) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 266
    STRING          shift and go to state 267
    INTEGER         shift and go to state 268
    FLOAT           shift and go to state 269
    VARIABLE        shift and go to state 270
    ARRAY           shift and go to state 271

    true_boolean_types             shift and go to state 265

state 151

    (126) expression -> term PLUS . expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    term                           shift and go to state 72
    expression                     shift and go to state 272
    factor                         shift and go to state 75

state 152

    (127) expression -> term MINUS . expression
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    term                           shift and go to state 72
    expression                     shift and go to state 273
    factor                         shift and go to state 75

state 153

    (69) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (75) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 275
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 274
    boolean                        shift and go to state 59

state 154

    (129) term -> factor MULTIPLY . term
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    factor                         shift and go to state 75
    term                           shift and go to state 276

state 155

    (130) term -> factor DIVIDE . term
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    factor                         shift and go to state 75
    term                           shift and go to state 277

state 156

    (131) term -> factor MODULE . term
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    factor                         shift and go to state 75
    term                           shift and go to state 278

state 157

    (132) term -> factor POW . term
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    factor                         shift and go to state 75
    term                           shift and go to state 279

state 158

    (101) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 280


state 159

    (252) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) class_implements_opt -> . IMPLEMENTS interface_list
    (260) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 282
    LEFT_BRACE      reduce using rule 260 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 281

state 160

    (257) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 283


state 161

    (253) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 284


state 162

    (168) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 285
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 163

    (160) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (135) factor -> VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
    LEFT_PAREN      shift and go to state 290
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 135 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 84
    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 130
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]


state 164

    (140) variable_assignment -> VARIABLE assignment_operator values .
    (79) comparation -> values . comparator_operator values
    (80) comparation -> values . comparator_operator expression
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 140 (variable_assignment -> VARIABLE assignment_operator values .)
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 115

state 165

    (141) variable_assignment -> VARIABLE assignment_operator expression .
    (81) comparation -> expression . comparator_operator expression
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 141 (variable_assignment -> VARIABLE assignment_operator expression .)
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 141

state 166

    (142) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 142 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 167

    (143) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 143 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 168

    (144) variable_assignment -> VARIABLE assignment_operator array_special_function .

    SEMICOLON       reduce using rule 144 (variable_assignment -> VARIABLE assignment_operator array_special_function .)


state 169

    (145) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 145 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 170

    (146) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 146 (variable_assignment -> VARIABLE assignment_operator input .)


state 171

    (147) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 147 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 172

    (148) variable_assignment -> VARIABLE assignment_operator conditional .

    SEMICOLON       reduce using rule 148 (variable_assignment -> VARIABLE assignment_operator conditional .)


state 173

    (159) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 291


state 174

    (177) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 292


state 175

    (178) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (179) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 293


state 176

    (184) array_special_function -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (185) array_special_function -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (186) array_special_function -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 294


state 177

    (187) array_special_function -> ARRAY_POP . LEFT_PAREN VARIABLE RIGHT_PAREN

    LEFT_PAREN      shift and go to state 295


state 178

    (175) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 296


state 179

    (176) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 297


state 180

    (169) special_function -> arrow_function .

    SEMICOLON       reduce using rule 169 (special_function -> arrow_function .)


state 181

    (170) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 170 (special_function -> anonymous_functions .)


state 182

    (201) structure_array_principal -> access_array_element .
    (215) access_array_stucture -> access_array_element . SEMICOLON
    (245) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> access_array_element . EQUALS_EQUALS values
    (84) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (87) comparation -> access_array_element . EQUALS_EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 90
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 140

  ! SEMICOLON       [ reduce using rule 201 (structure_array_principal -> access_array_element .) ]


state 183

    (220) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (233) modify_element_matrix -> access_element_matrix . EQUALS values
    (234) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE
    (88) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    SEMICOLON       shift and go to state 92
    EQUALS          shift and go to state 93
    EQUALS_EQUALS   shift and go to state 142


state 184

    (171) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (172) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement

    LEFT_PAREN      shift and go to state 298


state 185

    (173) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 299


state 186

    (202) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (223) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (69) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (75) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 300
    LEFT_BRACKET    shift and go to state 101


state 187

    (217) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 301


state 188

    (216) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 302


state 189

    (235) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 303


state 190

    (240) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (241) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (242) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (159) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (160) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (250) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (251) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 307
    VARIABLE        shift and go to state 304

    function_invocation            shift and go to state 305
    accessType                     shift and go to state 306

state 191

    (245) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (246) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (247) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (248) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (159) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (160) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (250) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (251) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 307
    VARIABLE        shift and go to state 304

    function_invocation            shift and go to state 308
    accessType                     shift and go to state 309

state 192

    (233) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 233 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 193

    (234) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 234 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 194

    (119) values -> INTEGER .

    SEMICOLON       reduce using rule 119 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 119 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 119 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 119 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 119 (values -> INTEGER .)
    COMMA           reduce using rule 119 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 119 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 119 (values -> INTEGER .)
    ECHO            reduce using rule 119 (values -> INTEGER .)
    PRINT           reduce using rule 119 (values -> INTEGER .)
    CLASS           reduce using rule 119 (values -> INTEGER .)
    INTERFACE       reduce using rule 119 (values -> INTEGER .)
    FUNCTION        reduce using rule 119 (values -> INTEGER .)
    VARIABLE        reduce using rule 119 (values -> INTEGER .)
    INCREASE        reduce using rule 119 (values -> INTEGER .)
    DECREMENT       reduce using rule 119 (values -> INTEGER .)
    IF              reduce using rule 119 (values -> INTEGER .)
    WHILE           reduce using rule 119 (values -> INTEGER .)
    FOR             reduce using rule 119 (values -> INTEGER .)
    CONST           reduce using rule 119 (values -> INTEGER .)
    DEFINE          reduce using rule 119 (values -> INTEGER .)
    ARRAY           reduce using rule 119 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 119 (values -> INTEGER .)
    NEW             reduce using rule 119 (values -> INTEGER .)
    $end            reduce using rule 119 (values -> INTEGER .)
    RETURN          reduce using rule 119 (values -> INTEGER .)
    BREAK           reduce using rule 119 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 119 (values -> INTEGER .)


state 195

    (120) values -> STRING .

    SEMICOLON       reduce using rule 120 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 120 (values -> STRING .)
    LOGIC_AND       reduce using rule 120 (values -> STRING .)
    LOGIC_OR        reduce using rule 120 (values -> STRING .)
    LOGIC_XOR       reduce using rule 120 (values -> STRING .)
    COMMA           reduce using rule 120 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 120 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 120 (values -> STRING .)
    ECHO            reduce using rule 120 (values -> STRING .)
    PRINT           reduce using rule 120 (values -> STRING .)
    CLASS           reduce using rule 120 (values -> STRING .)
    INTERFACE       reduce using rule 120 (values -> STRING .)
    FUNCTION        reduce using rule 120 (values -> STRING .)
    VARIABLE        reduce using rule 120 (values -> STRING .)
    INCREASE        reduce using rule 120 (values -> STRING .)
    DECREMENT       reduce using rule 120 (values -> STRING .)
    IF              reduce using rule 120 (values -> STRING .)
    WHILE           reduce using rule 120 (values -> STRING .)
    FOR             reduce using rule 120 (values -> STRING .)
    CONST           reduce using rule 120 (values -> STRING .)
    DEFINE          reduce using rule 120 (values -> STRING .)
    ARRAY           reduce using rule 120 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 120 (values -> STRING .)
    NEW             reduce using rule 120 (values -> STRING .)
    $end            reduce using rule 120 (values -> STRING .)
    RETURN          reduce using rule 120 (values -> STRING .)
    BREAK           reduce using rule 120 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 120 (values -> STRING .)


state 196

    (121) values -> FLOAT .

    SEMICOLON       reduce using rule 121 (values -> FLOAT .)
    COMMA           reduce using rule 121 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 121 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 121 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 121 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 121 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 121 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 121 (values -> FLOAT .)
    ECHO            reduce using rule 121 (values -> FLOAT .)
    PRINT           reduce using rule 121 (values -> FLOAT .)
    CLASS           reduce using rule 121 (values -> FLOAT .)
    INTERFACE       reduce using rule 121 (values -> FLOAT .)
    FUNCTION        reduce using rule 121 (values -> FLOAT .)
    VARIABLE        reduce using rule 121 (values -> FLOAT .)
    INCREASE        reduce using rule 121 (values -> FLOAT .)
    DECREMENT       reduce using rule 121 (values -> FLOAT .)
    IF              reduce using rule 121 (values -> FLOAT .)
    WHILE           reduce using rule 121 (values -> FLOAT .)
    FOR             reduce using rule 121 (values -> FLOAT .)
    CONST           reduce using rule 121 (values -> FLOAT .)
    DEFINE          reduce using rule 121 (values -> FLOAT .)
    ARRAY           reduce using rule 121 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 121 (values -> FLOAT .)
    NEW             reduce using rule 121 (values -> FLOAT .)
    $end            reduce using rule 121 (values -> FLOAT .)
    RETURN          reduce using rule 121 (values -> FLOAT .)
    BREAK           reduce using rule 121 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 121 (values -> FLOAT .)


state 197

    (123) boolean -> TRUE .

    SEMICOLON       reduce using rule 123 (boolean -> TRUE .)
    COMMA           reduce using rule 123 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 123 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 123 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 123 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 123 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 123 (boolean -> TRUE .)
    STRING_CONCATENATION reduce using rule 123 (boolean -> TRUE .)
    ECHO            reduce using rule 123 (boolean -> TRUE .)
    PRINT           reduce using rule 123 (boolean -> TRUE .)
    CLASS           reduce using rule 123 (boolean -> TRUE .)
    INTERFACE       reduce using rule 123 (boolean -> TRUE .)
    FUNCTION        reduce using rule 123 (boolean -> TRUE .)
    VARIABLE        reduce using rule 123 (boolean -> TRUE .)
    INCREASE        reduce using rule 123 (boolean -> TRUE .)
    DECREMENT       reduce using rule 123 (boolean -> TRUE .)
    IF              reduce using rule 123 (boolean -> TRUE .)
    WHILE           reduce using rule 123 (boolean -> TRUE .)
    FOR             reduce using rule 123 (boolean -> TRUE .)
    CONST           reduce using rule 123 (boolean -> TRUE .)
    DEFINE          reduce using rule 123 (boolean -> TRUE .)
    ARRAY           reduce using rule 123 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 123 (boolean -> TRUE .)
    NEW             reduce using rule 123 (boolean -> TRUE .)
    $end            reduce using rule 123 (boolean -> TRUE .)
    RETURN          reduce using rule 123 (boolean -> TRUE .)
    BREAK           reduce using rule 123 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 123 (boolean -> TRUE .)


state 198

    (124) boolean -> FALSE .

    SEMICOLON       reduce using rule 124 (boolean -> FALSE .)
    COMMA           reduce using rule 124 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 124 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 124 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 124 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 124 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 124 (boolean -> FALSE .)
    STRING_CONCATENATION reduce using rule 124 (boolean -> FALSE .)
    ECHO            reduce using rule 124 (boolean -> FALSE .)
    PRINT           reduce using rule 124 (boolean -> FALSE .)
    CLASS           reduce using rule 124 (boolean -> FALSE .)
    INTERFACE       reduce using rule 124 (boolean -> FALSE .)
    FUNCTION        reduce using rule 124 (boolean -> FALSE .)
    VARIABLE        reduce using rule 124 (boolean -> FALSE .)
    INCREASE        reduce using rule 124 (boolean -> FALSE .)
    DECREMENT       reduce using rule 124 (boolean -> FALSE .)
    IF              reduce using rule 124 (boolean -> FALSE .)
    WHILE           reduce using rule 124 (boolean -> FALSE .)
    FOR             reduce using rule 124 (boolean -> FALSE .)
    CONST           reduce using rule 124 (boolean -> FALSE .)
    DEFINE          reduce using rule 124 (boolean -> FALSE .)
    ARRAY           reduce using rule 124 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 124 (boolean -> FALSE .)
    NEW             reduce using rule 124 (boolean -> FALSE .)
    $end            reduce using rule 124 (boolean -> FALSE .)
    RETURN          reduce using rule 124 (boolean -> FALSE .)
    BREAK           reduce using rule 124 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 124 (boolean -> FALSE .)


state 199

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 310


state 200

    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .
    (135) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 130
    LEFT_BRACKET    shift and go to state 131
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    MINUS           reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]


state 201

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 311


state 202

    (30) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 312


state 203

    (157) const_syntax -> CONST IDENTIFIER EQUALS . values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 313
    boolean                        shift and go to state 59

state 204

    (158) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 314


state 205

    (227) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (202) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 315


state 206

    (202) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 316


state 207

    (203) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 317


state 208

    (223) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 318


state 209

    (209) values_array_indexed -> values .
    (210) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 209 (values_array_indexed -> values .)
    COMMA           shift and go to state 319


state 210

    (211) values_array_indexed -> object_creation .
    (212) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 211 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 320


state 211

    (213) values_array_indexed -> indexed_array .
    (214) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 213 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 321


state 212

    (205) structure_array -> key . EQUALS GREATER_THAN values
    (206) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 322


state 213

    (119) values -> INTEGER .
    (207) key -> INTEGER .

    COMMA           reduce using rule 119 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 119 (values -> INTEGER .)
    EQUALS          reduce using rule 207 (key -> INTEGER .)


state 214

    (120) values -> STRING .
    (208) key -> STRING .

    COMMA           reduce using rule 120 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 120 (values -> STRING .)
    EQUALS          reduce using rule 208 (key -> STRING .)


state 215

    (204) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 323


state 216

    (207) key -> INTEGER .

    EQUALS          reduce using rule 207 (key -> INTEGER .)


state 217

    (208) key -> STRING .

    EQUALS          reduce using rule 208 (key -> STRING .)


state 218

    (225) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (226) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 324


state 219

    (224) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 325


state 220

    (239) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 326
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 221

    (59) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 227


state 222

    (82) comparation -> VARIABLE . EQUALS_EQUALS values
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (135) factor -> VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (73) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 130
    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    MINUS           reduce using rule 135 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 131
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 135 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> VARIABLE .) ]


state 223

    (133) factor -> INTEGER .
    (119) values -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (72) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 133 (factor -> INTEGER .)
    DIVIDE          reduce using rule 133 (factor -> INTEGER .)
    MODULE          reduce using rule 133 (factor -> INTEGER .)
    POW             reduce using rule 133 (factor -> INTEGER .)
    PLUS            reduce using rule 133 (factor -> INTEGER .)
    MINUS           reduce using rule 133 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 133 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 119 (values -> INTEGER .)
    IDENTICAL       reduce using rule 119 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 119 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 119 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 119 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 119 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 119 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 119 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 133 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 133 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> INTEGER .) ]


state 224

    (134) factor -> FLOAT .
    (121) values -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (74) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 134 (factor -> FLOAT .)
    DIVIDE          reduce using rule 134 (factor -> FLOAT .)
    MODULE          reduce using rule 134 (factor -> FLOAT .)
    POW             reduce using rule 134 (factor -> FLOAT .)
    PLUS            reduce using rule 134 (factor -> FLOAT .)
    MINUS           reduce using rule 134 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 134 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 121 (values -> FLOAT .)
    IDENTICAL       reduce using rule 121 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 121 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 121 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 121 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 121 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 121 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 121 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 121 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)

  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> FLOAT .) ]


state 225

    (137) factor -> STRING .
    (120) values -> STRING .
    (65) true_boolean_types -> STRING .
    (71) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 137 (factor -> STRING .)
    DIVIDE          reduce using rule 137 (factor -> STRING .)
    MODULE          reduce using rule 137 (factor -> STRING .)
    POW             reduce using rule 137 (factor -> STRING .)
    PLUS            reduce using rule 137 (factor -> STRING .)
    MINUS           reduce using rule 137 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 137 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 120 (values -> STRING .)
    IDENTICAL       reduce using rule 120 (values -> STRING .)
    NOT_EQUALS      reduce using rule 120 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 120 (values -> STRING .)
    SMALL_THAN      reduce using rule 120 (values -> STRING .)
    GREATER_THAN    reduce using rule 120 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 120 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 120 (values -> STRING .)
    SPACECRAFT      reduce using rule 120 (values -> STRING .)
    NULL_FUSION     reduce using rule 120 (values -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> STRING .) ]


state 226

    (100) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 100 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 227

    (59) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 228

    (136) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 136 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 229

    (105) printable_values -> values printable_dividers printable_values .

    SEMICOLON       reduce using rule 105 (printable_values -> values printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> values printable_dividers printable_values .)


state 230

    (106) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 106 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> values COMMA printable_values .)


state 231

    (79) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 79 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 79 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 79 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 79 (comparation -> values comparator_operator values .)
    STRING_CONCATENATION reduce using rule 79 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 79 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> values comparator_operator values .)


state 232

    (80) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 80 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 80 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 80 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 80 (comparation -> values comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 80 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 80 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> values comparator_operator expression .)


state 233

    (119) values -> INTEGER .
    (133) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 119 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 119 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 119 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 119 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 119 (values -> INTEGER .)
    COMMA           reduce using rule 119 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 119 (values -> INTEGER .)
    SEMICOLON       reduce using rule 119 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 119 (values -> INTEGER .)
    MULTIPLY        reduce using rule 133 (factor -> INTEGER .)
    DIVIDE          reduce using rule 133 (factor -> INTEGER .)
    MODULE          reduce using rule 133 (factor -> INTEGER .)
    POW             reduce using rule 133 (factor -> INTEGER .)
    PLUS            reduce using rule 133 (factor -> INTEGER .)
    MINUS           reduce using rule 133 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 133 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 133 (factor -> INTEGER .) ]
  ! STRING_CONCATENATION [ reduce using rule 133 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 133 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 133 (factor -> INTEGER .) ]


state 234

    (120) values -> STRING .
    (137) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 120 (values -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 120 (values -> STRING .)
    LOGIC_AND       reduce using rule 120 (values -> STRING .)
    LOGIC_OR        reduce using rule 120 (values -> STRING .)
    LOGIC_XOR       reduce using rule 120 (values -> STRING .)
    COMMA           reduce using rule 120 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 120 (values -> STRING .)
    SEMICOLON       reduce using rule 120 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 120 (values -> STRING .)
    MULTIPLY        reduce using rule 137 (factor -> STRING .)
    DIVIDE          reduce using rule 137 (factor -> STRING .)
    MODULE          reduce using rule 137 (factor -> STRING .)
    POW             reduce using rule 137 (factor -> STRING .)
    PLUS            reduce using rule 137 (factor -> STRING .)
    MINUS           reduce using rule 137 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 137 (factor -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 137 (factor -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 137 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 137 (factor -> STRING .) ]
  ! STRING_CONCATENATION [ reduce using rule 137 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> STRING .) ]


state 235

    (121) values -> FLOAT .
    (134) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 121 (values -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 121 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 121 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 121 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 121 (values -> FLOAT .)
    COMMA           reduce using rule 121 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 121 (values -> FLOAT .)
    SEMICOLON       reduce using rule 121 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 121 (values -> FLOAT .)
    MULTIPLY        reduce using rule 134 (factor -> FLOAT .)
    DIVIDE          reduce using rule 134 (factor -> FLOAT .)
    MODULE          reduce using rule 134 (factor -> FLOAT .)
    POW             reduce using rule 134 (factor -> FLOAT .)
    PLUS            reduce using rule 134 (factor -> FLOAT .)
    MINUS           reduce using rule 134 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 134 (factor -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 134 (factor -> FLOAT .) ]
  ! STRING_CONCATENATION [ reduce using rule 134 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 134 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 134 (factor -> FLOAT .) ]


state 236

    (135) factor -> VARIABLE .

    MULTIPLY        reduce using rule 135 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 135 (factor -> VARIABLE .)
    MODULE          reduce using rule 135 (factor -> VARIABLE .)
    POW             reduce using rule 135 (factor -> VARIABLE .)
    PLUS            reduce using rule 135 (factor -> VARIABLE .)
    MINUS           reduce using rule 135 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 135 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 135 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 135 (factor -> VARIABLE .)
    COMMA           reduce using rule 135 (factor -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 135 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 135 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 135 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 135 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 135 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 135 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 135 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 135 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 135 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 135 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 135 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 135 (factor -> VARIABLE .)


state 237

    (136) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 254
    FLOAT           shift and go to state 255
    VARIABLE        shift and go to state 236
    LEFT_PAREN      shift and go to state 237
    STRING          shift and go to state 256

    expression                     shift and go to state 327
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 238

    (108) printable_values -> VARIABLE printable_dividers printable_values .

    SEMICOLON       reduce using rule 108 (printable_values -> VARIABLE printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> VARIABLE printable_dividers printable_values .)


state 239

    (109) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 109 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> VARIABLE COMMA printable_values .)


state 240

    (110) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 110 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 241

    (86) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 131


state 242

    (82) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 243

    (85) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 244

    (89) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    STRING_CONCATENATION reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 245

    (112) printable_values -> conditional printable_dividers printable_values .

    SEMICOLON       reduce using rule 112 (printable_values -> conditional printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> conditional printable_dividers printable_values .)


state 246

    (113) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 113 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> conditional COMMA printable_values .)


state 247

    (115) printable_values -> structure_object_principal printable_dividers printable_values .

    SEMICOLON       reduce using rule 115 (printable_values -> structure_object_principal printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 115 (printable_values -> structure_object_principal printable_dividers printable_values .)


state 248

    (116) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 116 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 116 (printable_values -> structure_object_principal COMMA printable_values .)


state 249

    (54) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    STRING_CONCATENATION reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)


state 250

    (87) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 251

    (83) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS values .)


state 252

    (84) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 328


state 253

    (81) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 81 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 81 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 81 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 81 (comparation -> expression comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 81 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 81 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> expression comparator_operator expression .)


state 254

    (133) factor -> INTEGER .

    MULTIPLY        reduce using rule 133 (factor -> INTEGER .)
    DIVIDE          reduce using rule 133 (factor -> INTEGER .)
    MODULE          reduce using rule 133 (factor -> INTEGER .)
    POW             reduce using rule 133 (factor -> INTEGER .)
    PLUS            reduce using rule 133 (factor -> INTEGER .)
    MINUS           reduce using rule 133 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 133 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 133 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 133 (factor -> INTEGER .)
    COMMA           reduce using rule 133 (factor -> INTEGER .)
    STRING_CONCATENATION reduce using rule 133 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 133 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 133 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 133 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 133 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 133 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 133 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 133 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 133 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 133 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 133 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 133 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 133 (factor -> INTEGER .)


state 255

    (134) factor -> FLOAT .

    MULTIPLY        reduce using rule 134 (factor -> FLOAT .)
    DIVIDE          reduce using rule 134 (factor -> FLOAT .)
    MODULE          reduce using rule 134 (factor -> FLOAT .)
    POW             reduce using rule 134 (factor -> FLOAT .)
    PLUS            reduce using rule 134 (factor -> FLOAT .)
    MINUS           reduce using rule 134 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 134 (factor -> FLOAT .)
    LOGIC_OR        reduce using rule 134 (factor -> FLOAT .)
    LOGIC_XOR       reduce using rule 134 (factor -> FLOAT .)
    COMMA           reduce using rule 134 (factor -> FLOAT .)
    STRING_CONCATENATION reduce using rule 134 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 134 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 134 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 134 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 134 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 134 (factor -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> FLOAT .)
    SMALL_THAN      reduce using rule 134 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 134 (factor -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> FLOAT .)
    SPACECRAFT      reduce using rule 134 (factor -> FLOAT .)
    NULL_FUSION     reduce using rule 134 (factor -> FLOAT .)


state 256

    (137) factor -> STRING .

    MULTIPLY        reduce using rule 137 (factor -> STRING .)
    DIVIDE          reduce using rule 137 (factor -> STRING .)
    MODULE          reduce using rule 137 (factor -> STRING .)
    POW             reduce using rule 137 (factor -> STRING .)
    PLUS            reduce using rule 137 (factor -> STRING .)
    MINUS           reduce using rule 137 (factor -> STRING .)
    LOGIC_AND       reduce using rule 137 (factor -> STRING .)
    LOGIC_OR        reduce using rule 137 (factor -> STRING .)
    LOGIC_XOR       reduce using rule 137 (factor -> STRING .)
    COMMA           reduce using rule 137 (factor -> STRING .)
    STRING_CONCATENATION reduce using rule 137 (factor -> STRING .)
    SEMICOLON       reduce using rule 137 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 137 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 137 (factor -> STRING .)
    IDENTICAL       reduce using rule 137 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 137 (factor -> STRING .)
    NOT_IDENTICAL   reduce using rule 137 (factor -> STRING .)
    SMALL_THAN      reduce using rule 137 (factor -> STRING .)
    GREATER_THAN    reduce using rule 137 (factor -> STRING .)
    SMALL_EQUALS_TO reduce using rule 137 (factor -> STRING .)
    GREATER_EQUALS_TO reduce using rule 137 (factor -> STRING .)
    SPACECRAFT      reduce using rule 137 (factor -> STRING .)
    NULL_FUSION     reduce using rule 137 (factor -> STRING .)


state 257

    (88) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 258

    (62) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    STRING_CONCATENATION reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 259

    (70) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 70 (false_boolean_types -> FALSE .)
    STRING_CONCATENATION reduce using rule 70 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> FALSE .)


state 260

    (71) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 71 (false_boolean_types -> STRING .)
    STRING_CONCATENATION reduce using rule 71 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> STRING .)


state 261

    (72) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 72 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 72 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 72 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 72 (false_boolean_types -> INTEGER .)
    STRING_CONCATENATION reduce using rule 72 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 72 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 72 (false_boolean_types -> INTEGER .)


state 262

    (73) false_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 73 (false_boolean_types -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 73 (false_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 73 (false_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 73 (false_boolean_types -> VARIABLE .)


state 263

    (74) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 74 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 74 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 74 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 74 (false_boolean_types -> FLOAT .)
    STRING_CONCATENATION reduce using rule 74 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 74 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 74 (false_boolean_types -> FLOAT .)


state 264

    (75) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 329


state 265

    (63) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    STRING_CONCATENATION reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 266

    (64) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 64 (true_boolean_types -> TRUE .)
    STRING_CONCATENATION reduce using rule 64 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> TRUE .)


state 267

    (65) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 65 (true_boolean_types -> STRING .)
    STRING_CONCATENATION reduce using rule 65 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> STRING .)


state 268

    (66) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 66 (true_boolean_types -> INTEGER .)
    STRING_CONCATENATION reduce using rule 66 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> INTEGER .)


state 269

    (67) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 67 (true_boolean_types -> FLOAT .)
    STRING_CONCATENATION reduce using rule 67 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 67 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 67 (true_boolean_types -> FLOAT .)


state 270

    (68) true_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 68 (true_boolean_types -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 68 (true_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 68 (true_boolean_types -> VARIABLE .)


state 271

    (69) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 330


state 272

    (126) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 126 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 126 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 126 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 126 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 126 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 126 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 126 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 126 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 126 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 126 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 126 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 126 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 126 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 126 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 126 (expression -> term PLUS expression .)
    COMMA           reduce using rule 126 (expression -> term PLUS expression .)
    STRING_CONCATENATION reduce using rule 126 (expression -> term PLUS expression .)


state 273

    (127) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 127 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 127 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 127 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 127 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 127 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 127 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 127 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 127 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 127 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 127 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 127 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 127 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 127 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 127 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 127 (expression -> term MINUS expression .)
    COMMA           reduce using rule 127 (expression -> term MINUS expression .)
    STRING_CONCATENATION reduce using rule 127 (expression -> term MINUS expression .)


state 274

    (69) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 331


state 275

    (75) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 75 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 276

    (129) term -> factor MULTIPLY term .

    PLUS            reduce using rule 129 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 129 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 129 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 129 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 129 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 129 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 129 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 129 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 129 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 129 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 129 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 129 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 129 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 129 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 129 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 129 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 129 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 129 (term -> factor MULTIPLY term .)
    STRING_CONCATENATION reduce using rule 129 (term -> factor MULTIPLY term .)


state 277

    (130) term -> factor DIVIDE term .

    PLUS            reduce using rule 130 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 130 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 130 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 130 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 130 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 130 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 130 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 130 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 130 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 130 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 130 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 130 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 130 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 130 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 130 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 130 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 130 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 130 (term -> factor DIVIDE term .)
    STRING_CONCATENATION reduce using rule 130 (term -> factor DIVIDE term .)


state 278

    (131) term -> factor MODULE term .

    PLUS            reduce using rule 131 (term -> factor MODULE term .)
    MINUS           reduce using rule 131 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 131 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 131 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 131 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 131 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 131 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 131 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 131 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 131 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 131 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 131 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 131 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 131 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 131 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 131 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 131 (term -> factor MODULE term .)
    COMMA           reduce using rule 131 (term -> factor MODULE term .)
    STRING_CONCATENATION reduce using rule 131 (term -> factor MODULE term .)


state 279

    (132) term -> factor POW term .

    PLUS            reduce using rule 132 (term -> factor POW term .)
    MINUS           reduce using rule 132 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 132 (term -> factor POW term .)
    IDENTICAL       reduce using rule 132 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 132 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 132 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 132 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 132 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 132 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 132 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 132 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 132 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 132 (term -> factor POW term .)
    SEMICOLON       reduce using rule 132 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 132 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 132 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 132 (term -> factor POW term .)
    COMMA           reduce using rule 132 (term -> factor POW term .)
    STRING_CONCATENATION reduce using rule 132 (term -> factor POW term .)


state 280

    (101) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 101 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 281

    (252) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 332


state 282

    (259) class_implements_opt -> IMPLEMENTS . interface_list
    (261) interface_list -> . IDENTIFIER
    (262) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 334

    interface_list                 shift and go to state 333

state 283

    (257) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 257 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 257 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 284

    (253) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (254) interface_body -> . interface_body interface_method
    (255) interface_body -> .

    RIGHT_BRACE     reduce using rule 255 (interface_body -> .)
    PUBLIC          reduce using rule 255 (interface_body -> .)
    PRIVATE         reduce using rule 255 (interface_body -> .)
    PROTECTED       reduce using rule 255 (interface_body -> .)
    FUNCTION        reduce using rule 255 (interface_body -> .)

    interface_body                 shift and go to state 335

state 285

    (168) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 336


state 286

    (161) params -> real_params .
    (165) real_params -> real_params . COMMA VARIABLE
    (166) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 161 (params -> real_params .)
    COMMA           shift and go to state 337


state 287

    (162) params -> empty .

    RIGHT_PAREN     reduce using rule 162 (params -> empty .)


state 288

    (163) real_params -> VARIABLE .

    COMMA           reduce using rule 163 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 163 (real_params -> VARIABLE .)


state 289

    (164) real_params -> values .

    COMMA           reduce using rule 164 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 164 (real_params -> values .)


state 290

    (160) function_invocation -> VARIABLE LEFT_PAREN . params RIGHT_PAREN
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 338
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 291

    (159) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 339
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 292

    (177) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (180) string_param -> . STRING
    (181) string_param -> . VARIABLE

    STRING          shift and go to state 341
    VARIABLE        shift and go to state 342

    string_param                   shift and go to state 340

state 293

    (178) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (179) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (180) string_param -> . STRING
    (181) string_param -> . VARIABLE

    STRING          shift and go to state 341
    VARIABLE        shift and go to state 342

    string_param                   shift and go to state 343

state 294

    (184) array_special_function -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (185) array_special_function -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (186) array_special_function -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 346
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 344
    structure_matrix_principal     shift and go to state 345
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 347
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 295

    (187) array_special_function -> ARRAY_POP LEFT_PAREN . VARIABLE RIGHT_PAREN

    VARIABLE        shift and go to state 348


state 296

    (175) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 349


state 297

    (176) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 350


state 298

    (171) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (172) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 351
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 299

    (173) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 352
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 300

    (202) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (203) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (223) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (69) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (75) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (205) structure_array -> . key EQUALS GREATER_THAN values
    (206) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (228) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (207) key -> . INTEGER
    (208) key -> . STRING
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 275
    ARRAY           shift and go to state 205
    INTEGER         shift and go to state 213
    STRING          shift and go to state 214
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    structure_array                shift and go to state 207
    structure_matrix_first         shift and go to state 208
    values                         shift and go to state 353
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    key                            shift and go to state 212
    boolean                        shift and go to state 59

state 301

    (217) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 354

  ! LEFT_BRACKET    [ reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 302

    (216) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (229) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 355

  ! LEFT_BRACKET    [ reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 303

    (235) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 357

    indexed_array                  shift and go to state 356

state 304

    (160) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 290


state 305

    (240) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 240 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 306

    (241) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (244) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 241 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 358


state 307

    (159) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (250) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (251) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 291
    LEFT_BRACKET    shift and go to state 359
    EQUALS          reduce using rule 251 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 251 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 251 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 251 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 251 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 251 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 251 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 251 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 251 (accessType -> IDENTIFIER .)
    IF              reduce using rule 251 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 251 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 251 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 251 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 251 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 251 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 251 (accessType -> IDENTIFIER .)
    $end            reduce using rule 251 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 251 (accessType -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 251 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 251 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 251 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 251 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 251 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 251 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 251 (accessType -> IDENTIFIER .) ]


state 308

    (245) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 245 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 309

    (246) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (249) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 246 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 360


state 310

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 361


state 311

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 362


state 312

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (191) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (194) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 365
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 313

    (157) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 157 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 314

    (158) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 373
    boolean                        shift and go to state 59

state 315

    (227) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (202) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357

    values                         shift and go to state 374
    values_array_indexed           shift and go to state 206
    boolean                        shift and go to state 59
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211

state 316

    (202) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 202 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 317

    (203) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    COMMA           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 203 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 318

    (223) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 375


state 319

    (210) values_array_indexed -> values COMMA . values_array_indexed
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 209
    values_array_indexed           shift and go to state 376
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 59

state 320

    (212) values_array_indexed -> object_creation COMMA . values_array_indexed
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    object_creation                shift and go to state 210
    values_array_indexed           shift and go to state 377
    values                         shift and go to state 209
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 59

state 321

    (214) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    indexed_array                  shift and go to state 211
    values_array_indexed           shift and go to state 378
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    boolean                        shift and go to state 59

state 322

    (205) structure_array -> key EQUALS . GREATER_THAN values
    (206) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 379


state 323

    (204) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    COMMA           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 204 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 324

    (225) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (226) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 225 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 380


state 325

    (224) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    COMMA           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_PAREN     reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 224 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 326

    (239) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 381


state 327

    (136) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 228


state 328

    (216) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 383
    VARIABLE        shift and go to state 382


state 329

    (75) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 275


state 330

    (69) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 274
    boolean                        shift and go to state 59

state 331

    (69) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 69 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 332

    (252) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (263) class_body -> . class_body class_member
    (264) class_body -> .

    RIGHT_BRACE     reduce using rule 264 (class_body -> .)
    PUBLIC          reduce using rule 264 (class_body -> .)
    PRIVATE         reduce using rule 264 (class_body -> .)
    PROTECTED       reduce using rule 264 (class_body -> .)
    STATIC          reduce using rule 264 (class_body -> .)
    FUNCTION        reduce using rule 264 (class_body -> .)
    VARIABLE        reduce using rule 264 (class_body -> .)
    CONST           reduce using rule 264 (class_body -> .)
    DEFINE          reduce using rule 264 (class_body -> .)

    class_body                     shift and go to state 384

state 333

    (259) class_implements_opt -> IMPLEMENTS interface_list .
    (262) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 259 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 385


state 334

    (261) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 261 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 261 (interface_list -> IDENTIFIER .)


state 335

    (253) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (254) interface_body -> interface_body . interface_method
    (256) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (271) visibility_opt -> . PUBLIC
    (272) visibility_opt -> . PRIVATE
    (273) visibility_opt -> . PROTECTED
    (274) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 386
    PUBLIC          shift and go to state 389
    PRIVATE         shift and go to state 390
    PROTECTED       shift and go to state 391
    FUNCTION        reduce using rule 274 (visibility_opt -> .)

    interface_method               shift and go to state 387
    visibility_opt                 shift and go to state 388

state 336

    (168) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (174) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 393

    codeblock                      shift and go to state 392

state 337

    (165) real_params -> real_params COMMA . VARIABLE
    (166) real_params -> real_params COMMA . values
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 394
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 395
    boolean                        shift and go to state 59

state 338

    (160) function_invocation -> VARIABLE LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 396


state 339

    (159) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 397


state 340

    (177) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 398


state 341

    (180) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 180 (string_param -> STRING .)
    COMMA           reduce using rule 180 (string_param -> STRING .)


state 342

    (181) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 181 (string_param -> VARIABLE .)
    COMMA           reduce using rule 181 (string_param -> VARIABLE .)


state 343

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (179) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 399


state 344

    (184) array_special_function -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 400

state 345

    (185) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 402

state 346

    (186) array_special_function -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    LEFT_BRACKET    shift and go to state 84
    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 403

state 347

    (201) structure_array_principal -> access_array_element .
    (215) access_array_stucture -> access_array_element . SEMICOLON

    COMMA           reduce using rule 201 (structure_array_principal -> access_array_element .)
    RIGHT_PAREN     reduce using rule 201 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 90


state 348

    (187) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 404


state 349

    (175) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 405


state 350

    (176) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 406


state 351

    (171) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (172) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN print_statement

    RIGHT_PAREN     shift and go to state 407


state 352

    (173) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 408


state 353

    (69) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (209) values_array_indexed -> values .
    (210) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 331
    COMMA           shift and go to state 319

  ! RIGHT_PAREN     [ reduce using rule 209 (values_array_indexed -> values .) ]


state 354

    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 409
    INTEGER         shift and go to state 410


state 355

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 412
    VARIABLE        shift and go to state 411


state 356

    (235) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    COMMA           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_PAREN     reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 235 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 357

    (202) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 413


state 358

    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (244) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 414
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 415
    access_array_element           shift and go to state 416
    boolean                        shift and go to state 59

state 359

    (250) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 417


state 360

    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (249) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 420
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    access_array_element           shift and go to state 418
    values                         shift and go to state 419
    boolean                        shift and go to state 59

state 361

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 421
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 362

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 425
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 363

    (41) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (191) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (194) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 426
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 364

    (38) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 38 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 38 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 38 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 38 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 38 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 38 (expression_for -> VARIABLE .)
    POW             reduce using rule 38 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> VARIABLE .)


state 365

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 427
    PLUS            shift and go to state 429
    MINUS           shift and go to state 430
    MULTIPLY        shift and go to state 431
    DIVIDE          shift and go to state 432
    MODULE          shift and go to state 433
    POW             shift and go to state 434

    operator_aritmetic             shift and go to state 428

state 366

    (39) expression_for -> number_values .

    SEMICOLON       reduce using rule 39 (expression_for -> number_values .)
    PLUS            reduce using rule 39 (expression_for -> number_values .)
    MINUS           reduce using rule 39 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 39 (expression_for -> number_values .)
    DIVIDE          reduce using rule 39 (expression_for -> number_values .)
    MODULE          reduce using rule 39 (expression_for -> number_values .)
    POW             reduce using rule 39 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> number_values .)


state 367

    (42) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 435


state 368

    (44) expression_for -> length_operations .

    SEMICOLON       reduce using rule 44 (expression_for -> length_operations .)
    PLUS            reduce using rule 44 (expression_for -> length_operations .)
    MINUS           reduce using rule 44 (expression_for -> length_operations .)
    MULTIPLY        reduce using rule 44 (expression_for -> length_operations .)
    DIVIDE          reduce using rule 44 (expression_for -> length_operations .)
    MODULE          reduce using rule 44 (expression_for -> length_operations .)
    POW             reduce using rule 44 (expression_for -> length_operations .)
    RIGHT_PAREN     reduce using rule 44 (expression_for -> length_operations .)


state 369

    (45) number_values -> INTEGER .

    SEMICOLON       reduce using rule 45 (number_values -> INTEGER .)
    PLUS            reduce using rule 45 (number_values -> INTEGER .)
    MINUS           reduce using rule 45 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 45 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 45 (number_values -> INTEGER .)
    MODULE          reduce using rule 45 (number_values -> INTEGER .)
    POW             reduce using rule 45 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 45 (number_values -> INTEGER .)


state 370

    (46) number_values -> FLOAT .

    SEMICOLON       reduce using rule 46 (number_values -> FLOAT .)
    PLUS            reduce using rule 46 (number_values -> FLOAT .)
    MINUS           reduce using rule 46 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 46 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 46 (number_values -> FLOAT .)
    MODULE          reduce using rule 46 (number_values -> FLOAT .)
    POW             reduce using rule 46 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 46 (number_values -> FLOAT .)


state 371

    (191) length_operations -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 436


state 372

    (194) length_operations -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 437


state 373

    (158) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 438


state 374

    (227) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (209) values_array_indexed -> values .
    (210) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 439
    COMMA           shift and go to state 319

  ! RIGHT_PAREN     [ reduce using rule 209 (values_array_indexed -> values .) ]


state 375

    (223) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 223 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 376

    (210) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 210 (values_array_indexed -> values COMMA values_array_indexed .)


state 377

    (212) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 212 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 378

    (214) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 214 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 379

    (205) structure_array -> key EQUALS GREATER_THAN . values
    (206) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 440
    boolean                        shift and go to state 59

state 380

    (226) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (225) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (226) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 102

    structure_matrix_second        shift and go to state 441

state 381

    (239) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 239 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 382

    (217) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 442


state 383

    (216) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 443


state 384

    (252) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (263) class_body -> class_body . class_member
    (265) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (266) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (267) class_member -> . class_attribute
    (271) visibility_opt -> . PUBLIC
    (272) visibility_opt -> . PRIVATE
    (273) visibility_opt -> . PROTECTED
    (274) visibility_opt -> .
    (268) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (269) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (270) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 444
    PUBLIC          shift and go to state 389
    PRIVATE         shift and go to state 390
    PROTECTED       shift and go to state 391
    STATIC          reduce using rule 274 (visibility_opt -> .)
    FUNCTION        reduce using rule 274 (visibility_opt -> .)
    VARIABLE        reduce using rule 274 (visibility_opt -> .)
    CONST           reduce using rule 274 (visibility_opt -> .)
    DEFINE          reduce using rule 274 (visibility_opt -> .)

    class_member                   shift and go to state 445
    visibility_opt                 shift and go to state 446
    class_attribute                shift and go to state 447

state 385

    (262) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 448


state 386

    (253) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 253 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 387

    (254) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 254 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 254 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 254 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 254 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 254 (interface_body -> interface_body interface_method .)


state 388

    (256) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 449


state 389

    (271) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 271 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 271 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 271 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 271 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 271 (visibility_opt -> PUBLIC .)


state 390

    (272) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 272 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 272 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 272 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 272 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 272 (visibility_opt -> PRIVATE .)


state 391

    (273) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 273 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 273 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 273 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 273 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 273 (visibility_opt -> PROTECTED .)


state 392

    (168) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 168 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 393

    (174) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 450
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 394

    (165) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 165 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 165 (real_params -> real_params COMMA VARIABLE .)


state 395

    (166) real_params -> real_params COMMA values .

    COMMA           reduce using rule 166 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 166 (real_params -> real_params COMMA values .)


state 396

    (160) function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 160 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)


state 397

    (159) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 159 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 398

    (177) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 177 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 399

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (179) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (182) int_param -> . INTEGER
    (183) int_param -> . VARIABLE

    INTEGER         shift and go to state 452
    VARIABLE        shift and go to state 453

    int_param                      shift and go to state 451

state 400

    (184) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 454


state 401

    (188) count_param -> COMMA . COUNT_NORMAL
    (189) count_param -> COMMA . COUNT_RECURSIVE

    COUNT_NORMAL    shift and go to state 455
    COUNT_RECURSIVE shift and go to state 456


state 402

    (185) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 457


state 403

    (186) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 458


state 404

    (187) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 187 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 405

    (175) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 175 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 406

    (176) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 176 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 407

    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock
    (172) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN print_statement

    EQUALS          shift and go to state 459


state 408

    (173) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (174) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 393

    codeblock                      shift and go to state 460

state 409

    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 461


state 410

    (231) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 462


state 411

    (232) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 463


state 412

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 464


state 413

    (202) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (209) values_array_indexed -> . values
    (210) values_array_indexed -> . values COMMA values_array_indexed
    (211) values_array_indexed -> . object_creation
    (212) values_array_indexed -> . object_creation COMMA values_array_indexed
    (213) values_array_indexed -> . indexed_array
    (214) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 59

state 414

    (243) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 328

  ! LEFT_BRACKET    [ reduce using rule 243 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 415

    (242) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 242 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 416

    (244) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 244 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 417

    (250) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 465


state 418

    (249) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 249 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 419

    (247) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 247 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 420

    (248) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 328

  ! LEFT_BRACKET    [ reduce using rule 248 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 421

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 466


state 422

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (29) body_statement -> sentence . RETURN printable_values SEMICOLON
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 467
    BREAK           shift and go to state 468
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 422
    body_statement                 shift and go to state 469
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 423

    (26) body_statement -> RETURN . values SEMICOLON
    (28) body_statement -> RETURN . printable_values SEMICOLON
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    values                         shift and go to state 470
    printable_values               shift and go to state 471
    boolean                        shift and go to state 59
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 424

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 472


state 425

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 473


state 426

    (41) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 474
    PLUS            shift and go to state 429
    MINUS           shift and go to state 430
    MULTIPLY        shift and go to state 431
    DIVIDE          shift and go to state 432
    MODULE          shift and go to state 433
    POW             shift and go to state 434

    operator_aritmetic             shift and go to state 428

state 427

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (37) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 475

    condition_for                  shift and go to state 476

state 428

    (40) expression_for -> expression_for operator_aritmetic . expression_for
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (191) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (194) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 477
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 429

    (47) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> PLUS .)
    COUNT           reduce using rule 47 (operator_aritmetic -> PLUS .)
    STRLEN          reduce using rule 47 (operator_aritmetic -> PLUS .)


state 430

    (48) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MINUS .)
    COUNT           reduce using rule 48 (operator_aritmetic -> MINUS .)
    STRLEN          reduce using rule 48 (operator_aritmetic -> MINUS .)


state 431

    (49) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    COUNT           reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    STRLEN          reduce using rule 49 (operator_aritmetic -> MULTIPLY .)


state 432

    (50) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    COUNT           reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    STRLEN          reduce using rule 50 (operator_aritmetic -> DIVIDE .)


state 433

    (51) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 51 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 51 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 51 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 51 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 51 (operator_aritmetic -> MODULE .)
    COUNT           reduce using rule 51 (operator_aritmetic -> MODULE .)
    STRLEN          reduce using rule 51 (operator_aritmetic -> MODULE .)


state 434

    (52) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 52 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 52 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 52 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 52 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 52 (operator_aritmetic -> POW .)
    COUNT           reduce using rule 52 (operator_aritmetic -> POW .)
    STRLEN          reduce using rule 52 (operator_aritmetic -> POW .)


state 435

    (42) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (43) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 478

    access_array_element           shift and go to state 479

state 436

    (191) length_operations -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 482
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 480
    structure_matrix_principal     shift and go to state 481
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 347
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 437

    (194) length_operations -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (180) string_param -> . STRING
    (181) string_param -> . VARIABLE

    STRING          shift and go to state 341
    VARIABLE        shift and go to state 342

    string_param                   shift and go to state 483

state 438

    (158) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 158 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 439

    (227) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (228) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 227 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 484


state 440

    (205) structure_array -> key EQUALS GREATER_THAN values .
    (206) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 205 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 205 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 485


state 441

    (226) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 226 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 442

    (217) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 217 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 443

    (216) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 216 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 444

    (252) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 252 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 445

    (263) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 263 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 263 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 263 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 263 (class_body -> class_body class_member .)
    STATIC          reduce using rule 263 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 263 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 263 (class_body -> class_body class_member .)
    CONST           reduce using rule 263 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 263 (class_body -> class_body class_member .)


state 446

    (265) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (266) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (268) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (269) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (270) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 486
    FUNCTION        shift and go to state 487
    VARIABLE        shift and go to state 488
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 489
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 447

    (267) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 267 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 267 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 267 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 267 (class_member -> class_attribute .)
    STATIC          reduce using rule 267 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 267 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 267 (class_member -> class_attribute .)
    CONST           reduce using rule 267 (class_member -> class_attribute .)
    DEFINE          reduce using rule 267 (class_member -> class_attribute .)


state 448

    (262) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 262 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 262 (interface_list -> interface_list COMMA IDENTIFIER .)


state 449

    (256) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 490


state 450

    (174) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 491


state 451

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (179) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 493
    COMMA           shift and go to state 492


state 452

    (182) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 182 (int_param -> INTEGER .)
    COMMA           reduce using rule 182 (int_param -> INTEGER .)


state 453

    (183) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 183 (int_param -> VARIABLE .)
    COMMA           reduce using rule 183 (int_param -> VARIABLE .)


state 454

    (184) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 184 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 455

    (188) count_param -> COMMA COUNT_NORMAL .

    RIGHT_PAREN     reduce using rule 188 (count_param -> COMMA COUNT_NORMAL .)


state 456

    (189) count_param -> COMMA COUNT_RECURSIVE .

    RIGHT_PAREN     reduce using rule 189 (count_param -> COMMA COUNT_RECURSIVE .)


state 457

    (185) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 185 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 458

    (186) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 186 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 459

    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock
    (172) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN print_statement

    GREATER_THAN    shift and go to state 494


state 460

    (173) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 173 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 461

    (230) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 230 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 462

    (231) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 231 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 463

    (232) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 232 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 464

    (229) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 229 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 465

    (250) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 250 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 466

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 497
    ELSE            shift and go to state 498

    elseif_statement               shift and go to state 495
    else_statement                 shift and go to state 496

state 467

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (29) body_statement -> sentence RETURN . printable_values SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (28) body_statement -> RETURN . printable_values SEMICOLON
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (104) printable_values -> . values
    (105) printable_values -> . values printable_dividers printable_values
    (106) printable_values -> . values COMMA printable_values
    (107) printable_values -> . VARIABLE
    (108) printable_values -> . VARIABLE printable_dividers printable_values
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (111) printable_values -> . conditional
    (112) printable_values -> . conditional printable_dividers printable_values
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal printable_dividers printable_values
    (116) printable_values -> . structure_object_principal COMMA printable_values
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    SEMICOLON       shift and go to state 500
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    values                         shift and go to state 499
    printable_values               shift and go to state 501
    boolean                        shift and go to state 59
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 468

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 502


state 469

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 470

    (26) body_statement -> RETURN values . SEMICOLON
    (104) printable_values -> values .
    (105) printable_values -> values . printable_dividers printable_values
    (106) printable_values -> values . COMMA printable_values
    (79) comparation -> values . comparator_operator values
    (80) comparation -> values . comparator_operator expression
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 503
    COMMA           shift and go to state 114
    STRING_CONCATENATION shift and go to state 116
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

  ! SEMICOLON       [ reduce using rule 104 (printable_values -> values .) ]

    printable_dividers             shift and go to state 113
    comparator_operator            shift and go to state 115

state 471

    (28) body_statement -> RETURN printable_values . SEMICOLON

    SEMICOLON       shift and go to state 504


state 472

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 473

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 474

    (41) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 475

    (37) condition_for -> VARIABLE . comparator_operator expression_for
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

    comparator_operator            shift and go to state 505

state 476

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 506


state 477

    (40) expression_for -> expression_for operator_aritmetic expression_for .
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 429
    MINUS           shift and go to state 430
    MULTIPLY        shift and go to state 431
    DIVIDE          shift and go to state 432
    MODULE          shift and go to state 433
    POW             shift and go to state 434

  ! PLUS            [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 428

state 478

    (42) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 507
    LEFT_BRACKET    shift and go to state 328


state 479

    (43) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 508


state 480

    (191) length_operations -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 509

state 481

    (192) length_operations -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 510

state 482

    (193) length_operations -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (188) count_param -> . COMMA COUNT_NORMAL
    (189) count_param -> . COMMA COUNT_RECURSIVE
    (190) count_param -> .

    LEFT_BRACKET    shift and go to state 84
    COMMA           shift and go to state 401
    RIGHT_PAREN     reduce using rule 190 (count_param -> .)

    count_param                    shift and go to state 511

state 483

    (194) length_operations -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 512


state 484

    (228) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (227) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (228) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 513

    structure_matrix_first         shift and go to state 514

state 485

    (206) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (205) structure_array -> . key EQUALS GREATER_THAN values
    (206) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (207) key -> . INTEGER
    (208) key -> . STRING

    INTEGER         shift and go to state 216
    STRING          shift and go to state 217

    key                            shift and go to state 212
    structure_array                shift and go to state 515

state 486

    (265) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 516


state 487

    (266) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 517


state 488

    (268) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (269) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 518
    SEMICOLON       shift and go to state 519


state 489

    (270) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 520


state 490

    (256) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 521


state 491

    (174) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 174 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 492

    (179) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (182) int_param -> . INTEGER
    (183) int_param -> . VARIABLE

    INTEGER         shift and go to state 452
    VARIABLE        shift and go to state 453

    int_param                      shift and go to state 522

state 493

    (178) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 178 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 494

    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (172) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . print_statement
    (174) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values

    LEFT_BRACE      shift and go to state 393
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11

    codeblock                      shift and go to state 523
    print_statement                shift and go to state 524

state 495

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 496

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 497

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 525


state 498

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 526


state 499

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON
    (104) printable_values -> values .
    (105) printable_values -> values . printable_dividers printable_values
    (106) printable_values -> values . COMMA printable_values
    (79) comparation -> values . comparator_operator values
    (80) comparation -> values . comparator_operator expression
    (117) printable_dividers -> . COMMA
    (118) printable_dividers -> . STRING_CONCATENATION
    (90) comparator_operator -> . EQUALS_EQUALS
    (91) comparator_operator -> . IDENTICAL
    (92) comparator_operator -> . NOT_EQUALS
    (93) comparator_operator -> . NOT_IDENTICAL
    (94) comparator_operator -> . SMALL_THAN
    (95) comparator_operator -> . GREATER_THAN
    (96) comparator_operator -> . SMALL_EQUALS_TO
    (97) comparator_operator -> . GREATER_EQUALS_TO
    (98) comparator_operator -> . SPACECRAFT
    (99) comparator_operator -> . NULL_FUSION

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 527
    COMMA           shift and go to state 114
    STRING_CONCATENATION shift and go to state 116
    EQUALS_EQUALS   shift and go to state 117
    IDENTICAL       shift and go to state 118
    NOT_EQUALS      shift and go to state 119
    NOT_IDENTICAL   shift and go to state 120
    SMALL_THAN      shift and go to state 121
    GREATER_THAN    shift and go to state 122
    SMALL_EQUALS_TO shift and go to state 123
    GREATER_EQUALS_TO shift and go to state 124
    SPACECRAFT      shift and go to state 125
    NULL_FUSION     shift and go to state 126

  ! SEMICOLON       [ reduce using rule 104 (printable_values -> values .) ]

    printable_dividers             shift and go to state 113
    comparator_operator            shift and go to state 115

state 500

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 501

    (29) body_statement -> sentence RETURN printable_values . SEMICOLON
    (28) body_statement -> RETURN printable_values . SEMICOLON

    SEMICOLON       shift and go to state 528


state 502

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 503

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 504

    (28) body_statement -> RETURN printable_values SEMICOLON .

    RIGHT_BRACE     reduce using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)


state 505

    (37) condition_for -> VARIABLE comparator_operator . expression_for
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (191) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (192) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (193) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (194) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 529
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 506

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (31) increment_statement -> . VARIABLE INCREASE
    (32) increment_statement -> . VARIABLE DECREMENT
    (33) increment_statement -> . INCREASE VARIABLE
    (34) increment_statement -> . DECREMENT VARIABLE
    (35) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (36) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 530
    INCREASE        shift and go to state 532
    DECREMENT       shift and go to state 533

    increment_statement            shift and go to state 531

state 507

    (42) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 508

    (43) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 509

    (191) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 534


state 510

    (192) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 535


state 511

    (193) length_operations -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 536


state 512

    (194) length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    PLUS            reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MINUS           reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MODULE          reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    POW             reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 194 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 513

    (227) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 537


state 514

    (228) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 228 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 515

    (206) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 206 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 206 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 516

    (265) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 538


state 517

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 539


state 518

    (268) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 540
    boolean                        shift and go to state 59

state 519

    (269) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 269 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 520

    (270) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 270 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 521

    (256) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 541
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 522

    (179) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 542


state 523

    (171) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 171 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 524

    (172) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .

    SEMICOLON       reduce using rule 172 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .)


state 525

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (79) comparation -> . values comparator_operator values
    (80) comparation -> . values comparator_operator expression
    (81) comparation -> . expression comparator_operator expression
    (82) comparation -> . VARIABLE EQUALS_EQUALS values
    (83) comparation -> . access_array_element EQUALS_EQUALS values
    (84) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (86) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (87) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (88) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (77) logic_not_sentence -> . LOGIC_NOT conditional
    (78) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (125) expression -> . term
    (126) expression -> . term PLUS expression
    (127) expression -> . term MINUS expression
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> . FALSE
    (71) false_boolean_types -> . STRING
    (72) false_boolean_types -> . INTEGER
    (73) false_boolean_types -> . VARIABLE
    (74) false_boolean_types -> . FLOAT
    (75) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (76) false_boolean_types -> . NULL
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (128) term -> . factor
    (129) term -> . factor MULTIPLY term
    (130) term -> . factor DIVIDE term
    (131) term -> . factor MODULE term
    (132) term -> . factor POW term
    (133) factor -> . INTEGER
    (134) factor -> . FLOAT
    (135) factor -> . VARIABLE
    (136) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (137) factor -> . STRING

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 147
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 148
    NULL            shift and go to state 74

    conditional                    shift and go to state 543
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 145
    expression                     shift and go to state 67
    access_array_element           shift and go to state 146
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 526

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 544
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 527

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 528

    (29) body_statement -> sentence RETURN printable_values SEMICOLON .
    (28) body_statement -> RETURN printable_values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 29 (body_statement -> sentence RETURN printable_values SEMICOLON .) ]


state 529

    (37) condition_for -> VARIABLE comparator_operator expression_for .
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 37 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 429
    MINUS           shift and go to state 430
    MULTIPLY        shift and go to state 431
    DIVIDE          shift and go to state 432
    MODULE          shift and go to state 433
    POW             shift and go to state 434

    operator_aritmetic             shift and go to state 428

state 530

    (31) increment_statement -> VARIABLE . INCREASE
    (32) increment_statement -> VARIABLE . DECREMENT
    (35) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (36) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 545
    DECREMENT       shift and go to state 546
    PLUS_EQUALS     shift and go to state 547
    EQUALS          shift and go to state 548


state 531

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 549


state 532

    (33) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 550


state 533

    (34) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 551


state 534

    (191) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 191 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 535

    (192) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 192 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 536

    (193) length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    PLUS            reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MINUS           reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MODULE          reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    POW             reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 193 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 537

    (227) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 552
    boolean                        shift and go to state 59

state 538

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 553


state 539

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 554
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 540

    (268) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 555


state 541

    (256) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 556


state 542

    (179) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 179 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 543

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 557


state 544

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 558


state 545

    (31) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> VARIABLE INCREASE .)


state 546

    (32) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> VARIABLE DECREMENT .)


state 547

    (35) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 559


state 548

    (36) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 560


state 549

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 561


state 550

    (33) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> INCREASE VARIABLE .)


state 551

    (34) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> DECREMENT VARIABLE .)


state 552

    (227) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (228) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 439


state 553

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (161) params -> . real_params
    (162) params -> . empty
    (163) real_params -> . VARIABLE
    (164) real_params -> . values
    (165) real_params -> . real_params COMMA VARIABLE
    (166) real_params -> . real_params COMMA values
    (167) empty -> .
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE

    VARIABLE        shift and go to state 288
    RIGHT_PAREN     reduce using rule 167 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 562
    real_params                    shift and go to state 286
    empty                          shift and go to state 287
    values                         shift and go to state 289
    boolean                        shift and go to state 59

state 554

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 563


state 555

    (268) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 268 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 556

    (256) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 564


state 557

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 565


state 558

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 559

    (35) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 35 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 560

    (36) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    PLUS            shift and go to state 429
    MINUS           shift and go to state 430
    MULTIPLY        shift and go to state 431
    DIVIDE          shift and go to state 432
    MODULE          shift and go to state 433
    POW             shift and go to state 434

    operator_aritmetic             shift and go to state 566

state 561

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 567
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 562

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 568


state 563

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 569


state 564

    (256) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 256 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 256 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 256 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 256 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 256 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 565

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 423
    BREAK           shift and go to state 424
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 570
    sentence                       shift and go to state 422
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 566

    (36) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT

    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370

    number_values                  shift and go to state 571

state 567

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 572


state 568

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 573


state 569

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (275) method_body -> . classStatement
    (276) method_body -> . classStatement return_form
    (277) method_body -> . return_form
    (278) method_body -> . classStatement BREAK SEMICOLON
    (279) method_body -> . classStatement method_body
    (283) classStatement -> . sentence
    (284) classStatement -> . access_method_object SEMICOLON
    (280) return_form -> . RETURN values SEMICOLON
    (281) return_form -> . RETURN access_method_object SEMICOLON
    (282) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 574
    classStatement                 shift and go to state 575
    return_form                    shift and go to state 576
    sentence                       shift and go to state 577
    access_method_object           shift and go to state 578
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 570

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 582


state 571

    (36) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 36 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 572

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 573

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (275) method_body -> . classStatement
    (276) method_body -> . classStatement return_form
    (277) method_body -> . return_form
    (278) method_body -> . classStatement BREAK SEMICOLON
    (279) method_body -> . classStatement method_body
    (283) classStatement -> . sentence
    (284) classStatement -> . access_method_object SEMICOLON
    (280) return_form -> . RETURN values SEMICOLON
    (281) return_form -> . RETURN access_method_object SEMICOLON
    (282) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 583
    classStatement                 shift and go to state 575
    return_form                    shift and go to state 576
    sentence                       shift and go to state 577
    access_method_object           shift and go to state 578
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 574

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 584


state 575

    (275) method_body -> classStatement .
    (276) method_body -> classStatement . return_form
    (278) method_body -> classStatement . BREAK SEMICOLON
    (279) method_body -> classStatement . method_body
    (280) return_form -> . RETURN values SEMICOLON
    (281) return_form -> . RETURN access_method_object SEMICOLON
    (282) return_form -> . RETURN SEMICOLON
    (275) method_body -> . classStatement
    (276) method_body -> . classStatement return_form
    (277) method_body -> . return_form
    (278) method_body -> . classStatement BREAK SEMICOLON
    (279) method_body -> . classStatement method_body
    (283) classStatement -> . sentence
    (284) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (100) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (101) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (102) print_statement -> . ECHO printable_values
    (103) print_statement -> . PRINT printable_values
    (138) assignment -> . variable_assignment
    (139) assignment -> . constant_assignment
    (195) types_structure -> . structure_array_principal
    (196) types_structure -> . structure_matrix_principal
    (197) types_structure -> . structure_object_principal
    (252) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (168) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (140) variable_assignment -> . VARIABLE assignment_operator values
    (141) variable_assignment -> . VARIABLE assignment_operator expression
    (142) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (143) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (144) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (145) variable_assignment -> . VARIABLE assignment_operator types_structure
    (146) variable_assignment -> . VARIABLE assignment_operator input
    (147) variable_assignment -> . VARIABLE assignment_operator special_function
    (148) variable_assignment -> . VARIABLE assignment_operator conditional
    (149) variable_assignment -> . VARIABLE INCREASE
    (150) variable_assignment -> . VARIABLE DECREMENT
    (151) variable_assignment -> . INCREASE VARIABLE
    (152) variable_assignment -> . DECREMENT VARIABLE
    (155) constant_assignment -> . const_syntax
    (156) constant_assignment -> . define_syntax
    (198) structure_array_principal -> . indexed_array
    (199) structure_array_principal -> . associative_array
    (200) structure_array_principal -> . access_array_stucture
    (201) structure_array_principal -> . access_array_element
    (218) structure_matrix_principal -> . matrix_firstform
    (219) structure_matrix_principal -> . matrix_secondform
    (220) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (221) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (222) structure_matrix_principal -> . add_element_matrix
    (236) structure_object_principal -> . object_creation
    (237) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (157) const_syntax -> . CONST IDENTIFIER EQUALS values
    (158) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (202) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (203) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (204) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (215) access_array_stucture -> . access_array_element SEMICOLON
    (223) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (224) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (229) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (233) modify_element_matrix -> . access_element_matrix EQUALS values
    (234) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (235) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (238) object_creation -> . NEW IDENTIFIER
    (239) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 275 (method_body -> classStatement .)
    BREAK           shift and go to state 586
    RETURN          shift and go to state 579
    VARIABLE        shift and go to state 580
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 575
    return_form                    shift and go to state 585
    method_body                    shift and go to state 587
    access_method_object           shift and go to state 578
    sentence                       shift and go to state 577
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 581
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 576

    (277) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 277 (method_body -> return_form .)


state 577

    (283) classStatement -> sentence .

    BREAK           reduce using rule 283 (classStatement -> sentence .)
    RETURN          reduce using rule 283 (classStatement -> sentence .)
    VARIABLE        reduce using rule 283 (classStatement -> sentence .)
    ECHO            reduce using rule 283 (classStatement -> sentence .)
    PRINT           reduce using rule 283 (classStatement -> sentence .)
    CLASS           reduce using rule 283 (classStatement -> sentence .)
    INTERFACE       reduce using rule 283 (classStatement -> sentence .)
    FUNCTION        reduce using rule 283 (classStatement -> sentence .)
    INCREASE        reduce using rule 283 (classStatement -> sentence .)
    DECREMENT       reduce using rule 283 (classStatement -> sentence .)
    IF              reduce using rule 283 (classStatement -> sentence .)
    WHILE           reduce using rule 283 (classStatement -> sentence .)
    FOR             reduce using rule 283 (classStatement -> sentence .)
    CONST           reduce using rule 283 (classStatement -> sentence .)
    DEFINE          reduce using rule 283 (classStatement -> sentence .)
    ARRAY           reduce using rule 283 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 283 (classStatement -> sentence .)
    NEW             reduce using rule 283 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 283 (classStatement -> sentence .)


state 578

    (284) classStatement -> access_method_object . SEMICOLON
    (237) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 588
    BREAK           reduce using rule 237 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 237 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 237 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 237 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 237 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 237 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 237 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 237 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 237 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 237 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 237 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 237 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 237 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 237 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 237 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 237 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 237 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 237 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 237 (structure_object_principal -> access_method_object .)


state 579

    (280) return_form -> RETURN . values SEMICOLON
    (281) return_form -> RETURN . access_method_object SEMICOLON
    (282) return_form -> RETURN . SEMICOLON
    (119) values -> . INTEGER
    (120) values -> . STRING
    (121) values -> . FLOAT
    (122) values -> . boolean
    (240) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (241) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (242) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (245) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (247) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (123) boolean -> . TRUE
    (124) boolean -> . FALSE
    (216) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 590
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    VARIABLE        shift and go to state 592
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 589
    access_method_object           shift and go to state 591
    boolean                        shift and go to state 59
    access_array_element           shift and go to state 593

state 580

    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (140) variable_assignment -> VARIABLE . assignment_operator values
    (141) variable_assignment -> VARIABLE . assignment_operator expression
    (142) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (143) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (144) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (145) variable_assignment -> VARIABLE . assignment_operator types_structure
    (146) variable_assignment -> VARIABLE . assignment_operator input
    (147) variable_assignment -> VARIABLE . assignment_operator special_function
    (148) variable_assignment -> VARIABLE . assignment_operator conditional
    (149) variable_assignment -> VARIABLE . INCREASE
    (150) variable_assignment -> VARIABLE . DECREMENT
    (229) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (230) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (231) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (232) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (153) assignment_operator -> . EQUALS
    (154) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 86
    LEFT_BRACKET    shift and go to state 84
    INCREASE        shift and go to state 82
    DECREMENT       shift and go to state 83
    EQUALS          shift and go to state 85
    PLUS_EQUALS     shift and go to state 87

    assignment_operator            shift and go to state 81

state 581

    (245) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (201) structure_array_principal -> access_array_element .
    (215) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 91
    BREAK           reduce using rule 201 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 201 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 201 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 201 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 201 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 201 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 201 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 201 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 201 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 201 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 201 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 201 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 201 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 201 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 201 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 201 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 201 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 201 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 201 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 90


state 582

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 497
    ELSE            shift and go to state 498

    elseif_statement               shift and go to state 594
    else_statement                 shift and go to state 595

state 583

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 596


state 584

    (266) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 266 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 585

    (276) method_body -> classStatement return_form .
    (277) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 276 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 276 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 277 (method_body -> return_form .) ]


state 586

    (278) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 597


state 587

    (279) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 279 (method_body -> classStatement method_body .)


state 588

    (284) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 284 (classStatement -> access_method_object SEMICOLON .)


state 589

    (280) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 598


state 590

    (282) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 282 (return_form -> RETURN SEMICOLON .)


state 591

    (281) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 599


state 592

    (240) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (241) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (242) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (243) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (244) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (216) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (217) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 86
    LEFT_BRACKET    shift and go to state 328


state 593

    (245) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (247) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 91


state 594

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 595

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 596

    (265) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 265 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 597

    (278) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 278 (method_body -> classStatement BREAK SEMICOLON .)


state 598

    (280) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 280 (return_form -> RETURN values SEMICOLON .)


state 599

    (281) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 281 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 60 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 114 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 114 resolved as shift
WARNING: shift/reduce conflict for STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 114 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 114 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for NEW in state 114 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 114 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 114 resolved as shift
WARNING: shift/reduce conflict for NULL in state 114 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 128 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 128 resolved as shift
WARNING: shift/reduce conflict for STRING in state 128 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 128 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 128 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 128 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 128 resolved as shift
WARNING: shift/reduce conflict for NEW in state 128 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 128 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 128 resolved as shift
WARNING: shift/reduce conflict for NULL in state 128 resolved as shift
WARNING: shift/reduce conflict for STRING in state 129 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 133 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 133 resolved as shift
WARNING: shift/reduce conflict for STRING in state 133 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 133 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 133 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 133 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for NEW in state 133 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 133 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 133 resolved as shift
WARNING: shift/reduce conflict for NULL in state 133 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 135 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 135 resolved as shift
WARNING: shift/reduce conflict for STRING in state 135 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 135 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 135 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 135 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for NEW in state 135 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 135 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 135 resolved as shift
WARNING: shift/reduce conflict for NULL in state 135 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 163 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 182 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 222 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 301 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 302 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 307 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 353 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 374 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 414 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 420 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 470 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 477 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 477 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 477 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 477 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 477 resolved as shift
WARNING: shift/reduce conflict for POW in state 477 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 499 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 54
WARNING: reduce/reduce conflict in state 57 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 58
WARNING: reduce/reduce conflict in state 109 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 109
WARNING: reduce/reduce conflict in state 109 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 109
WARNING: reduce/reduce conflict in state 110 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 110
WARNING: reduce/reduce conflict in state 110 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 110
WARNING: reduce/reduce conflict in state 111 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 112
WARNING: reduce/reduce conflict in state 112 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 112
WARNING: reduce/reduce conflict in state 144 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (logic_not_sentence -> LOGIC_NOT VARIABLE) in state 144
WARNING: reduce/reduce conflict in state 144 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 144
WARNING: reduce/reduce conflict in state 163 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 163
WARNING: reduce/reduce conflict in state 200 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 200
WARNING: reduce/reduce conflict in state 222 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 222
WARNING: reduce/reduce conflict in state 223 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 223
WARNING: reduce/reduce conflict in state 223 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 223
WARNING: reduce/reduce conflict in state 224 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 224
WARNING: reduce/reduce conflict in state 224 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 224
WARNING: reduce/reduce conflict in state 225 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 225
WARNING: reduce/reduce conflict in state 225 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 225
WARNING: reduce/reduce conflict in state 233 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 233
WARNING: reduce/reduce conflict in state 234 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 235
WARNING: reduce/reduce conflict in state 502 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 502
WARNING: reduce/reduce conflict in state 527 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 527
WARNING: reduce/reduce conflict in state 528 resolved using rule (body_statement -> RETURN printable_values SEMICOLON)
WARNING: rejected rule (body_statement -> sentence RETURN printable_values SEMICOLON) in state 528
WARNING: reduce/reduce conflict in state 585 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 585
WARNING: Rule (body_statement -> sentence RETURN printable_values SEMICOLON) is never reduced
