Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY_PUSH
    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    expression_for -> length_operations
Rule 43    number_values -> INTEGER
Rule 44    number_values -> FLOAT
Rule 45    operator_aritmetic -> PLUS
Rule 46    operator_aritmetic -> MINUS
Rule 47    operator_aritmetic -> MULTIPLY
Rule 48    operator_aritmetic -> DIVIDE
Rule 49    operator_aritmetic -> MODULE
Rule 50    operator_aritmetic -> POW
Rule 51    conditional -> boolean_expression
Rule 52    conditional -> boolean_expression logic_operator boolean_expression
Rule 53    logic_operator -> LOGIC_AND
Rule 54    logic_operator -> LOGIC_OR
Rule 55    logic_operator -> LOGIC_XOR
Rule 56    boolean_expression -> comparation
Rule 57    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 58    boolean_expression -> logic_not_sentence
Rule 59    boolean_expression -> logic_expression
Rule 60    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 61    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 62    true_boolean_types -> TRUE
Rule 63    true_boolean_types -> STRING
Rule 64    true_boolean_types -> INTEGER
Rule 65    true_boolean_types -> FLOAT
Rule 66    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 67    false_boolean_types -> FALSE
Rule 68    false_boolean_types -> STRING
Rule 69    false_boolean_types -> INTEGER
Rule 70    false_boolean_types -> FLOAT
Rule 71    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 72    false_boolean_types -> NULL
Rule 73    logic_not_sentence -> LOGIC_NOT conditional
Rule 74    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 75    comparation -> values comparator_operator values
Rule 76    comparation -> values comparator_operator expression
Rule 77    comparation -> expression comparator_operator expression
Rule 78    comparation -> VARIABLE EQUALS_EQUALS values
Rule 79    comparation -> access_array_element EQUALS_EQUALS values
Rule 80    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 81    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 82    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 83    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 84    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 85    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 86    comparator_operator -> EQUALS_EQUALS
Rule 87    comparator_operator -> IDENTICAL
Rule 88    comparator_operator -> NOT_EQUALS
Rule 89    comparator_operator -> NOT_IDENTICAL
Rule 90    comparator_operator -> SMALL_THAN
Rule 91    comparator_operator -> GREATER_THAN
Rule 92    comparator_operator -> SMALL_EQUALS_TO
Rule 93    comparator_operator -> GREATER_EQUALS_TO
Rule 94    comparator_operator -> SPACECRAFT
Rule 95    comparator_operator -> NULL_FUSION
Rule 96    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 97    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 98    print_statement -> ECHO printable_values
Rule 99    print_statement -> PRINT printable_values
Rule 100   printable_values -> values
Rule 101   printable_values -> values COMMA printable_values
Rule 102   printable_values -> VARIABLE
Rule 103   printable_values -> VARIABLE COMMA printable_values
Rule 104   printable_values -> STRING STRING_CONCATENATION STRING
Rule 105   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 106   printable_values -> conditional
Rule 107   printable_values -> conditional COMMA printable_values
Rule 108   printable_values -> structure_object_principal
Rule 109   printable_values -> structure_object_principal COMMA printable_values
Rule 110   printable_values -> function_invocation
Rule 111   printable_values -> function_invocation COMMA printable_values
Rule 112   printable_values -> string_special_function
Rule 113   printable_values -> string_special_function COMMA printable_values
Rule 114   printable_values -> array_special_function
Rule 115   printable_values -> array_special_function COMMA printable_values
Rule 116   values -> INTEGER
Rule 117   values -> STRING
Rule 118   values -> FLOAT
Rule 119   values -> boolean
Rule 120   boolean -> TRUE
Rule 121   boolean -> FALSE
Rule 122   expression -> term
Rule 123   expression -> term PLUS expression
Rule 124   expression -> term MINUS expression
Rule 125   term -> factor
Rule 126   term -> factor MULTIPLY term
Rule 127   term -> factor DIVIDE term
Rule 128   term -> factor MODULE term
Rule 129   term -> factor POW term
Rule 130   factor -> INTEGER
Rule 131   factor -> FLOAT
Rule 132   factor -> VARIABLE
Rule 133   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 134   factor -> STRING
Rule 135   assignment -> variable_assignment
Rule 136   assignment -> constant_assignment
Rule 137   variable_assignment -> VARIABLE assignment_operator values
Rule 138   variable_assignment -> VARIABLE assignment_operator expression
Rule 139   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 140   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 141   variable_assignment -> VARIABLE assignment_operator array_special_function
Rule 142   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 143   variable_assignment -> VARIABLE assignment_operator input
Rule 144   variable_assignment -> VARIABLE assignment_operator special_function
Rule 145   variable_assignment -> VARIABLE INCREASE
Rule 146   variable_assignment -> VARIABLE DECREMENT
Rule 147   variable_assignment -> INCREASE VARIABLE
Rule 148   variable_assignment -> DECREMENT VARIABLE
Rule 149   assignment_operator -> EQUALS
Rule 150   assignment_operator -> PLUS_EQUALS
Rule 151   constant_assignment -> const_syntax
Rule 152   constant_assignment -> define_syntax
Rule 153   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 154   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 155   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 156   params -> real_params
Rule 157   params -> empty
Rule 158   real_params -> VARIABLE
Rule 159   real_params -> values
Rule 160   real_params -> real_params COMMA VARIABLE
Rule 161   real_params -> real_params COMMA values
Rule 162   empty -> <empty>
Rule 163   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 164   special_function -> arrow_function
Rule 165   special_function -> anonymous_functions
Rule 166   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 167   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 168   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 169   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 170   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 171   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 172   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 173   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 174   string_param -> STRING
Rule 175   string_param -> VARIABLE
Rule 176   int_param -> INTEGER
Rule 177   int_param -> VARIABLE
Rule 178   array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 179   array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 180   array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 181   array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 182   count_param -> COMMA COUNT_NORMAL
Rule 183   count_param -> COMMA COUNT_RECURSIVE
Rule 184   count_param -> <empty>
Rule 185   length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 186   length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 187   length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 188   length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 189   types_structure -> structure_array_principal
Rule 190   types_structure -> structure_matrix_principal
Rule 191   types_structure -> structure_object_principal
Rule 192   structure_array_principal -> indexed_array
Rule 193   structure_array_principal -> associative_array
Rule 194   structure_array_principal -> access_array_stucture
Rule 195   structure_array_principal -> access_array_element
Rule 196   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 197   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 198   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 199   structure_array -> key EQUALS GREATER_THAN values
Rule 200   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 201   key -> INTEGER
Rule 202   key -> STRING
Rule 203   values_array_indexed -> values
Rule 204   values_array_indexed -> values COMMA values_array_indexed
Rule 205   values_array_indexed -> object_creation
Rule 206   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 207   values_array_indexed -> indexed_array
Rule 208   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 209   access_array_stucture -> access_array_element SEMICOLON
Rule 210   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 211   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 212   structure_matrix_principal -> matrix_firstform
Rule 213   structure_matrix_principal -> matrix_secondform
Rule 214   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 215   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 216   structure_matrix_principal -> add_element_matrix
Rule 217   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 218   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 219   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 220   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 221   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 222   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 223   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 224   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 225   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 226   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 227   modify_element_matrix -> access_element_matrix EQUALS values
Rule 228   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 229   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 230   structure_object_principal -> object_creation
Rule 231   structure_object_principal -> access_method_object
Rule 232   object_creation -> NEW IDENTIFIER
Rule 233   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 234   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 235   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 236   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 237   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 238   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 239   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 240   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 241   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 242   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 243   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 244   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 245   accessType -> IDENTIFIER
Rule 246   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 247   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 248   interface_body -> interface_body interface_method
Rule 249   interface_body -> <empty>
Rule 250   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 251   class_extends_opt -> EXTENDS IDENTIFIER
Rule 252   class_extends_opt -> <empty>
Rule 253   class_implements_opt -> IMPLEMENTS interface_list
Rule 254   class_implements_opt -> <empty>
Rule 255   interface_list -> IDENTIFIER
Rule 256   interface_list -> interface_list COMMA IDENTIFIER
Rule 257   class_body -> class_body class_member
Rule 258   class_body -> <empty>
Rule 259   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 260   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 261   class_member -> class_attribute
Rule 262   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 263   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 264   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 265   visibility_opt -> PUBLIC
Rule 266   visibility_opt -> PRIVATE
Rule 267   visibility_opt -> PROTECTED
Rule 268   visibility_opt -> <empty>
Rule 269   method_body -> classStatement
Rule 270   method_body -> classStatement return_form
Rule 271   method_body -> return_form
Rule 272   method_body -> classStatement BREAK SEMICOLON
Rule 273   method_body -> classStatement method_body
Rule 274   return_form -> RETURN values SEMICOLON
Rule 275   return_form -> RETURN access_method_object SEMICOLON
Rule 276   return_form -> RETURN SEMICOLON
Rule 277   classStatement -> sentence
Rule 278   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 66 71 196 197 198 217 221 222
ARRAY_POP            : 181
ARRAY_PUSH           : 
BREAK                : 24 27 272
CLASS                : 246
COLON                : 
COMMA                : 101 103 107 109 111 113 115 154 160 161 172 173 173 182 183 200 204 206 208 220 222 256
COMMENT              : 
CONST                : 153
COUNT                : 178 179 180 185 186 187
COUNT_NORMAL         : 182
COUNT_RECURSIVE      : 183
DECREMENT            : 30 32 146 148
DEFINE               : 154
DIVIDE               : 48 127
ECHO                 : 96 98
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 149 153 166 199 200 227 228 229 236 237 238 241 242 243 262
EQUALS_EQUALS        : 78 79 80 81 82 83 84 85 86
EXTENDS              : 251
FALSE                : 67 121
FEGTS                : 169
FLOAT                : 44 65 70 118 131
FN                   : 166
FOR                  : 28
FUNCTION             : 163 167 250 259 260
GREATER_EQUALS_TO    : 93
GREATER_THAN         : 91 166 199 200 234 235 236 237 238 239 240 241 242 243
IDENTICAL            : 87
IDENTIFIER           : 40 41 153 155 163 232 233 244 245 246 247 250 251 255 256 259 260
IF                   : 14 15 16
IMPLEMENTS           : 253
INCREASE             : 29 31 145 147
INTEGER              : 33 43 64 69 116 130 176 201 210 223 223 225 226 244
INTERFACE            : 247
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 168 246 247 259 260
LEFT_BRACKET         : 198 210 211 218 219 220 223 223 224 224 225 225 226 226 229 244
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 57 66 71 96 97 133 154 155 163 166 167 169 170 171 172 173 178 179 180 181 185 186 187 188 196 197 217 221 222 233 250 259 260
LOGIC_AND            : 53
LOGIC_NOT            : 73 74
LOGIC_OR             : 54
LOGIC_XOR            : 55
MINUS                : 46 124 234 235 236 237 238 239 240 241 242 243
MODULE               : 49 128
MULTIPLY             : 47 126
NEW                  : 232 233
NOT_EQUALS           : 88
NOT_IDENTICAL        : 89
NULL                 : 72
NULL_FUSION          : 95
PLUS                 : 45 123
PLUS_EQUALS          : 33 150
POW                  : 50 129
PRINT                : 97 99
PRIVATE              : 266
PROTECTED            : 267
PUBLIC               : 265
READLINE             : 170
RETURN               : 22 23 26 274 275 276
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 168 246 247 259 260
RIGHT_BRACKET        : 198 210 211 218 219 220 223 223 224 224 225 225 226 226 229 244
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 57 66 71 96 97 133 154 155 163 166 167 169 170 171 172 173 178 179 180 181 185 186 187 188 196 197 217 221 222 233 250 259 260
SEMICOLON            : 3 4 22 23 24 26 27 28 28 209 214 215 217 218 250 262 263 264 272 274 275 276 278
SMALL_EQUALS_TO      : 92
SMALL_THAN           : 90
SPACECRAFT           : 94
STATIC               : 259
STDIN                : 169
STRING               : 63 68 104 104 105 117 134 154 170 174 202
STRING_CONCATENATION : 104 105
STRLEN               : 171 188
SUBSTR               : 172 173
TRUE                 : 62 120
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 74 78 80 81 82 82 84 85 102 103 105 132 137 138 139 140 141 142 143 144 145 146 147 148 158 160 175 177 180 181 187 210 211 211 223 224 224 224 225 225 226 226 228 229 234 235 236 237 237 238 242 262 263
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 235 236 237 238 240 241 242 243
access_array_element : 41 79 80 81 83 83 195 209 238 239 240 241 242 243 243
access_array_stucture : 194
access_element_matrix : 84 85 214 227 228
access_method_object : 231 275 278
add_element_matrix   : 216
anonymous_functions  : 165
array_special_function : 114 115 141
arrow_function       : 164
assignment           : 4
assignment_operator  : 137 138 139 140 141 142 143 144
associative_array    : 193
body_statement       : 13 14 15 16 17 18 19 20 25 28 168
boolean              : 119
boolean_expression   : 51 52 52
classStatement       : 269 270 272 273
class_attribute      : 261
class_body           : 246 257
class_declaration    : 6
class_extends_opt    : 246 247
class_implements_opt : 246
class_member         : 257
codeblock            : 163 166 167
comparation          : 56
comparator_operator  : 35 75 76 77
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 57 73 106 107
const_syntax         : 151
constant_assignment  : 136 264
control_structures   : 8
count_param          : 178 179 180 185 186 187
define_syntax        : 152
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 157
expression           : 76 77 77 123 124 133 138
expression_for       : 28 35 38 38 39
factor               : 125 126 127 128 129
false_boolean_types  : 60 61
for_statement        : 12
function_declaration : 9
function_invocation  : 110 111 139 234 239
if_statement         : 10
increment_statement  : 28
indexed_array        : 192 207 208 229
input                : 143
int_param            : 172 173 173
interface_body       : 247 248
interface_declaration : 7
interface_list       : 253 256
interface_method     : 248
key                  : 199 200
length_operations    : 42
logic_expression     : 59
logic_not_sentence   : 58
logic_operator       : 52 60 61
matrix_firstform     : 212
matrix_secondform    : 213
method_body          : 259 260 273
modify_element_matrix : 215
number_values        : 34 37
object_creation      : 205 206 230
operator_aritmetic   : 34 38
params               : 155 163 166 167 233 250 259 260
print_statement      : 3
printable_values     : 96 97 98 99 101 103 107 109 111 113 115
program              : 1 0
real_params          : 156 160 161
return_form          : 270 271
sentence             : 1 2 21 22 23 24 25 277
special_function     : 144
string_param         : 171 172 173 188
string_special_function : 112 113 140
structure_array      : 197 198 200
structure_array_principal : 178 185 189
structure_matrix_first : 217 222
structure_matrix_principal : 179 186 190
structure_matrix_second : 218 220
structure_object_principal : 108 109 191
term                 : 122 123 124 126 127 128 129
true_boolean_types   : 60 61
types_structure      : 5 142
values               : 22 26 66 75 75 76 78 79 100 101 137 153 154 159 161 199 200 203 204 219 220 221 222 227 236 241 262 274
values_array_indexed : 196 204 206 208
variable_assignment  : 135
visibility_opt       : 250 259 260 262 263 264
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (96) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> ECHO . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 11

    (97) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> PRINT . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 84
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 85
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 12

    (135) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 135 (assignment -> variable_assignment .)


state 13

    (136) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 136 (assignment -> constant_assignment .)


state 14

    (189) types_structure -> structure_array_principal .

    ECHO            reduce using rule 189 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 189 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 189 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 189 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 189 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 189 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 189 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 189 (types_structure -> structure_array_principal .)
    IF              reduce using rule 189 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 189 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 189 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 189 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 189 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 189 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 189 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 189 (types_structure -> structure_array_principal .)
    $end            reduce using rule 189 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 189 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 189 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 189 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 189 (types_structure -> structure_array_principal .)


state 15

    (190) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 190 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 190 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 190 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 190 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 190 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 190 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 190 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 190 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 190 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 190 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 190 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 190 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 190 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 190 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 190 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 190 (types_structure -> structure_matrix_principal .)


state 16

    (191) types_structure -> structure_object_principal .

    ECHO            reduce using rule 191 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 191 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 191 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 191 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 191 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 191 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 191 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 191 (types_structure -> structure_object_principal .)
    IF              reduce using rule 191 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 191 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 191 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 191 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 191 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 191 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 191 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 191 (types_structure -> structure_object_principal .)
    $end            reduce using rule 191 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 191 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 191 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 191 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 191 (types_structure -> structure_object_principal .)


state 17

    (246) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 86


state 18

    (247) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 87


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (163) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 88


state 23

    (137) variable_assignment -> VARIABLE . assignment_operator values
    (138) variable_assignment -> VARIABLE . assignment_operator expression
    (139) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (140) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (141) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (142) variable_assignment -> VARIABLE . assignment_operator types_structure
    (143) variable_assignment -> VARIABLE . assignment_operator input
    (144) variable_assignment -> VARIABLE . assignment_operator special_function
    (145) variable_assignment -> VARIABLE . INCREASE
    (146) variable_assignment -> VARIABLE . DECREMENT
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (149) assignment_operator -> . EQUALS
    (150) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 24

    (147) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 96


state 25

    (148) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 97


state 26

    (151) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 151 (constant_assignment -> const_syntax .)


state 27

    (152) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 152 (constant_assignment -> define_syntax .)


state 28

    (192) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 192 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 192 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 192 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 192 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 192 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 192 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 192 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 192 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 192 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 192 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 192 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 192 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 192 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 192 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 192 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 192 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 192 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 192 (structure_array_principal -> indexed_array .)
    COMMA           reduce using rule 192 (structure_array_principal -> indexed_array .)
    RIGHT_PAREN     reduce using rule 192 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 192 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 192 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 192 (structure_array_principal -> indexed_array .)


state 29

    (193) structure_array_principal -> associative_array .

    ECHO            reduce using rule 193 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 193 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 193 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 193 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 193 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 193 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 193 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 193 (structure_array_principal -> associative_array .)
    IF              reduce using rule 193 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 193 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 193 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 193 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 193 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 193 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 193 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 193 (structure_array_principal -> associative_array .)
    $end            reduce using rule 193 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 193 (structure_array_principal -> associative_array .)
    COMMA           reduce using rule 193 (structure_array_principal -> associative_array .)
    RIGHT_PAREN     reduce using rule 193 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 193 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 193 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 193 (structure_array_principal -> associative_array .)


state 30

    (194) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    COMMA           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    RIGHT_PAREN     reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 194 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 194 (structure_array_principal -> access_array_stucture .)


state 31

    (195) structure_array_principal -> access_array_element .
    (209) access_array_stucture -> access_array_element . SEMICOLON
    (239) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (241) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ECHO            reduce using rule 195 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 195 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 195 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 195 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 195 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 195 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 195 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 195 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 195 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 195 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 195 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 195 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 195 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 195 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 195 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 195 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 195 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 195 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 195 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 195 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98
    MINUS           shift and go to state 99

  ! SEMICOLON       [ reduce using rule 195 (structure_array_principal -> access_array_element .) ]


state 32

    (212) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    COMMA           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_PAREN     reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 212 (structure_matrix_principal -> matrix_firstform .)


state 33

    (213) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    COMMA           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_PAREN     reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 213 (structure_matrix_principal -> matrix_secondform .)


state 34

    (214) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (227) modify_element_matrix -> access_element_matrix . EQUALS values
    (228) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 100
    EQUALS          shift and go to state 101


state 35

    (215) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 102


state 36

    (216) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    COMMA           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_PAREN     reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 216 (structure_matrix_principal -> add_element_matrix .)


state 37

    (230) structure_object_principal -> object_creation .

    ECHO            reduce using rule 230 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 230 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 230 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 230 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 230 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 230 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 230 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 230 (structure_object_principal -> object_creation .)
    IF              reduce using rule 230 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 230 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 230 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 230 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 230 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 230 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 230 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 230 (structure_object_principal -> object_creation .)
    $end            reduce using rule 230 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 230 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 230 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 230 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 230 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 230 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 230 (structure_object_principal -> object_creation .)


state 38

    (231) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 231 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 231 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 231 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 231 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 231 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 231 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 231 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 231 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 231 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 231 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 231 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 231 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 231 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 231 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 231 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 231 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 231 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 231 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 231 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 231 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 231 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 231 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 231 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 103


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 104


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 105


state 42

    (153) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 106


state 43

    (154) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 107


state 44

    (196) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (217) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 108
    LEFT_BRACKET    shift and go to state 109


state 45

    (218) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (219) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (220) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 111

state 46

    (232) object_creation -> NEW . IDENTIFIER
    (233) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 112


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (96) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (133) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 114
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 51

    (98) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 98 (print_statement -> ECHO printable_values .)


state 52

    (100) printable_values -> values .
    (101) printable_values -> values . COMMA printable_values
    (75) comparation -> values . comparator_operator values
    (76) comparation -> values . comparator_operator expression
    (86) comparator_operator -> . EQUALS_EQUALS
    (87) comparator_operator -> . IDENTICAL
    (88) comparator_operator -> . NOT_EQUALS
    (89) comparator_operator -> . NOT_IDENTICAL
    (90) comparator_operator -> . SMALL_THAN
    (91) comparator_operator -> . GREATER_THAN
    (92) comparator_operator -> . SMALL_EQUALS_TO
    (93) comparator_operator -> . GREATER_EQUALS_TO
    (94) comparator_operator -> . SPACECRAFT
    (95) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 100 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 100 (printable_values -> values .)
    COMMA           shift and go to state 121
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 53

    (102) printable_values -> VARIABLE .
    (103) printable_values -> VARIABLE . COMMA printable_values
    (105) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (78) comparation -> VARIABLE . EQUALS_EQUALS values
    (81) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 102 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 102 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 135
    LEFT_BRACKET    shift and go to state 136
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 132 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> VARIABLE .) ]


state 54

    (104) printable_values -> STRING . STRING_CONCATENATION STRING
    (117) values -> STRING .
    (63) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .
    (134) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 117 (values -> STRING .)
    STRING_CONCATENATION shift and go to state 137
    COMMA           reduce using rule 117 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 117 (values -> STRING .)
    IDENTICAL       reduce using rule 117 (values -> STRING .)
    NOT_EQUALS      reduce using rule 117 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 117 (values -> STRING .)
    SMALL_THAN      reduce using rule 117 (values -> STRING .)
    GREATER_THAN    reduce using rule 117 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 117 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 117 (values -> STRING .)
    SPACECRAFT      reduce using rule 117 (values -> STRING .)
    NULL_FUSION     reduce using rule 117 (values -> STRING .)
    SEMICOLON       reduce using rule 117 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 117 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> STRING .) ]


state 55

    (106) printable_values -> conditional .
    (107) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 106 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> conditional .)
    COMMA           shift and go to state 138


state 56

    (108) printable_values -> structure_object_principal .
    (109) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 108 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 139


state 57

    (110) printable_values -> function_invocation .
    (111) printable_values -> function_invocation . COMMA printable_values

    SEMICOLON       reduce using rule 110 (printable_values -> function_invocation .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> function_invocation .)
    COMMA           shift and go to state 140


state 58

    (112) printable_values -> string_special_function .
    (113) printable_values -> string_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 112 (printable_values -> string_special_function .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> string_special_function .)
    COMMA           shift and go to state 141


state 59

    (114) printable_values -> array_special_function .
    (115) printable_values -> array_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 114 (printable_values -> array_special_function .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> array_special_function .)
    COMMA           shift and go to state 142


state 60

    (116) values -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .
    (130) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 116 (values -> INTEGER .)
    COMMA           reduce using rule 116 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 116 (values -> INTEGER .)
    IDENTICAL       reduce using rule 116 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 116 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 116 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 116 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 116 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 116 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 116 (values -> INTEGER .)
    SEMICOLON       reduce using rule 116 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 116 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 130 (factor -> INTEGER .)
    DIVIDE          reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    POW             reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 130 (factor -> INTEGER .) ]


state 61

    (118) values -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (70) false_boolean_types -> FLOAT .
    (131) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> FLOAT .)
    COMMA           reduce using rule 118 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 118 (values -> FLOAT .)
    IDENTICAL       reduce using rule 118 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 118 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 118 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 118 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 118 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 118 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 118 (values -> FLOAT .)
    SEMICOLON       reduce using rule 118 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 118 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 131 (factor -> FLOAT .)
    DIVIDE          reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    POW             reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 131 (factor -> FLOAT .) ]


state 62

    (119) values -> boolean .

    COMMA           reduce using rule 119 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 119 (values -> boolean .)
    IDENTICAL       reduce using rule 119 (values -> boolean .)
    NOT_EQUALS      reduce using rule 119 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 119 (values -> boolean .)
    SMALL_THAN      reduce using rule 119 (values -> boolean .)
    GREATER_THAN    reduce using rule 119 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 119 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 119 (values -> boolean .)
    SPACECRAFT      reduce using rule 119 (values -> boolean .)
    NULL_FUSION     reduce using rule 119 (values -> boolean .)
    SEMICOLON       reduce using rule 119 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 119 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 119 (values -> boolean .)
    LOGIC_AND       reduce using rule 119 (values -> boolean .)
    LOGIC_OR        reduce using rule 119 (values -> boolean .)
    LOGIC_XOR       reduce using rule 119 (values -> boolean .)
    ECHO            reduce using rule 119 (values -> boolean .)
    PRINT           reduce using rule 119 (values -> boolean .)
    CLASS           reduce using rule 119 (values -> boolean .)
    INTERFACE       reduce using rule 119 (values -> boolean .)
    FUNCTION        reduce using rule 119 (values -> boolean .)
    VARIABLE        reduce using rule 119 (values -> boolean .)
    INCREASE        reduce using rule 119 (values -> boolean .)
    DECREMENT       reduce using rule 119 (values -> boolean .)
    IF              reduce using rule 119 (values -> boolean .)
    WHILE           reduce using rule 119 (values -> boolean .)
    FOR             reduce using rule 119 (values -> boolean .)
    CONST           reduce using rule 119 (values -> boolean .)
    DEFINE          reduce using rule 119 (values -> boolean .)
    ARRAY           reduce using rule 119 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 119 (values -> boolean .)
    NEW             reduce using rule 119 (values -> boolean .)
    $end            reduce using rule 119 (values -> boolean .)
    RETURN          reduce using rule 119 (values -> boolean .)
    BREAK           reduce using rule 119 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 119 (values -> boolean .)


state 63

    (51) conditional -> boolean_expression .
    (52) conditional -> boolean_expression . logic_operator boolean_expression
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 51 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 144
    LOGIC_OR        shift and go to state 145
    LOGIC_XOR       shift and go to state 146

  ! LOGIC_AND       [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 51 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 143

state 64

    (155) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 147


state 65

    (171) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 148


state 66

    (172) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 149


state 67

    (178) array_special_function -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 150


state 68

    (181) array_special_function -> ARRAY_POP . LEFT_PAREN VARIABLE RIGHT_PAREN

    LEFT_PAREN      shift and go to state 151


state 69

    (120) boolean -> TRUE .
    (62) true_boolean_types -> TRUE .

    COMMA           reduce using rule 120 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 120 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 120 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 120 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 120 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 120 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 120 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 120 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 120 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 120 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 120 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 120 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 120 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)


state 70

    (121) boolean -> FALSE .
    (67) false_boolean_types -> FALSE .

    COMMA           reduce using rule 121 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 121 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 121 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 121 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 121 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 121 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 121 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 121 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 121 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 121 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 121 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 121 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 121 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)


state 71

    (56) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> comparation .)
    COMMA           reduce using rule 56 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> comparation .)


state 72

    (58) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_not_sentence .)


state 73

    (59) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 59 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 59 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> logic_expression .)


state 74

    (239) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (241) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> access_array_element . EQUALS_EQUALS values
    (80) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (83) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 99
    EQUALS_EQUALS   shift and go to state 152


state 75

    (77) comparation -> expression . comparator_operator expression
    (86) comparator_operator -> . EQUALS_EQUALS
    (87) comparator_operator -> . IDENTICAL
    (88) comparator_operator -> . NOT_EQUALS
    (89) comparator_operator -> . NOT_IDENTICAL
    (90) comparator_operator -> . SMALL_THAN
    (91) comparator_operator -> . GREATER_THAN
    (92) comparator_operator -> . SMALL_EQUALS_TO
    (93) comparator_operator -> . GREATER_EQUALS_TO
    (94) comparator_operator -> . SPACECRAFT
    (95) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 153

state 76

    (84) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 154


state 77

    (73) logic_not_sentence -> LOGIC_NOT . conditional
    (74) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 156
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 159
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    conditional                    shift and go to state 155
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 157
    expression                     shift and go to state 75
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 78

    (60) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 144
    LOGIC_OR        shift and go to state 145
    LOGIC_XOR       shift and go to state 146

    logic_operator                 shift and go to state 162

state 79

    (61) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 144
    LOGIC_OR        shift and go to state 145
    LOGIC_XOR       shift and go to state 146

    logic_operator                 shift and go to state 163

state 80

    (122) expression -> term .
    (123) expression -> term . PLUS expression
    (124) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 122 (expression -> term .)
    IDENTICAL       reduce using rule 122 (expression -> term .)
    NOT_EQUALS      reduce using rule 122 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 122 (expression -> term .)
    SMALL_THAN      reduce using rule 122 (expression -> term .)
    GREATER_THAN    reduce using rule 122 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 122 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 122 (expression -> term .)
    SPACECRAFT      reduce using rule 122 (expression -> term .)
    NULL_FUSION     reduce using rule 122 (expression -> term .)
    RIGHT_PAREN     reduce using rule 122 (expression -> term .)
    SEMICOLON       reduce using rule 122 (expression -> term .)
    LOGIC_AND       reduce using rule 122 (expression -> term .)
    LOGIC_OR        reduce using rule 122 (expression -> term .)
    LOGIC_XOR       reduce using rule 122 (expression -> term .)
    COMMA           reduce using rule 122 (expression -> term .)
    PLUS            shift and go to state 164
    MINUS           shift and go to state 165


state 81

    (66) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 166


state 82

    (72) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 72 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 72 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 72 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 72 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 72 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 72 (false_boolean_types -> NULL .)


state 83

    (125) term -> factor .
    (126) term -> factor . MULTIPLY term
    (127) term -> factor . DIVIDE term
    (128) term -> factor . MODULE term
    (129) term -> factor . POW term

    PLUS            reduce using rule 125 (term -> factor .)
    MINUS           reduce using rule 125 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 125 (term -> factor .)
    IDENTICAL       reduce using rule 125 (term -> factor .)
    NOT_EQUALS      reduce using rule 125 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 125 (term -> factor .)
    SMALL_THAN      reduce using rule 125 (term -> factor .)
    GREATER_THAN    reduce using rule 125 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 125 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 125 (term -> factor .)
    SPACECRAFT      reduce using rule 125 (term -> factor .)
    NULL_FUSION     reduce using rule 125 (term -> factor .)
    RIGHT_PAREN     reduce using rule 125 (term -> factor .)
    SEMICOLON       reduce using rule 125 (term -> factor .)
    LOGIC_AND       reduce using rule 125 (term -> factor .)
    LOGIC_OR        reduce using rule 125 (term -> factor .)
    LOGIC_XOR       reduce using rule 125 (term -> factor .)
    COMMA           reduce using rule 125 (term -> factor .)
    MULTIPLY        shift and go to state 167
    DIVIDE          shift and go to state 168
    MODULE          shift and go to state 169
    POW             shift and go to state 170


state 84

    (97) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (133) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 171
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 85

    (99) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 99 (print_statement -> PRINT printable_values .)


state 86

    (246) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (251) class_extends_opt -> . EXTENDS IDENTIFIER
    (252) class_extends_opt -> .

    EXTENDS         shift and go to state 173
    IMPLEMENTS      reduce using rule 252 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 252 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 172

state 87

    (247) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (251) class_extends_opt -> . EXTENDS IDENTIFIER
    (252) class_extends_opt -> .

    EXTENDS         shift and go to state 173
    LEFT_BRACE      reduce using rule 252 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 174

state 88

    (163) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 175


state 89

    (137) variable_assignment -> VARIABLE assignment_operator . values
    (138) variable_assignment -> VARIABLE assignment_operator . expression
    (139) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (140) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (141) variable_assignment -> VARIABLE assignment_operator . array_special_function
    (142) variable_assignment -> VARIABLE assignment_operator . types_structure
    (143) variable_assignment -> VARIABLE assignment_operator . input
    (144) variable_assignment -> VARIABLE assignment_operator . special_function
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (169) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (170) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (164) special_function -> . arrow_function
    (165) special_function -> . anonymous_functions
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (166) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (167) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    INTEGER         shift and go to state 185
    STRING          shift and go to state 186
    FLOAT           shift and go to state 187
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    FEGTS           shift and go to state 189
    READLINE        shift and go to state 190
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194
    FN              shift and go to state 195
    FUNCTION        shift and go to state 196
    VARIABLE        shift and go to state 176
    LEFT_PAREN      shift and go to state 188
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    values                         shift and go to state 177
    expression                     shift and go to state 178
    function_invocation            shift and go to state 179
    string_special_function        shift and go to state 180
    array_special_function         shift and go to state 181
    types_structure                shift and go to state 182
    input                          shift and go to state 183
    special_function               shift and go to state 184
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 191
    anonymous_functions            shift and go to state 192
    factor                         shift and go to state 83
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 90

    (145) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 145 (variable_assignment -> VARIABLE INCREASE .)


state 91

    (146) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 146 (variable_assignment -> VARIABLE DECREMENT .)


state 92

    (210) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 198
    VARIABLE        shift and go to state 197
    RIGHT_BRACKET   shift and go to state 199


state 93

    (149) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 149 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 149 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 149 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 149 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 149 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 149 (assignment_operator -> EQUALS .)
    COUNT           reduce using rule 149 (assignment_operator -> EQUALS .)
    ARRAY_POP       reduce using rule 149 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 149 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 149 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 149 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 149 (assignment_operator -> EQUALS .)
    FN              reduce using rule 149 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 149 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 149 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 149 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 149 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 149 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 149 (assignment_operator -> EQUALS .)


state 94

    (234) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (236) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 200


state 95

    (150) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    COUNT           reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    ARRAY_POP       reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 150 (assignment_operator -> PLUS_EQUALS .)


state 96

    (147) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 147 (variable_assignment -> INCREASE VARIABLE .)


state 97

    (148) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 148 (variable_assignment -> DECREMENT VARIABLE .)


state 98

    (209) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    COMMA           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_PAREN     reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 209 (access_array_stucture -> access_array_element SEMICOLON .)


state 99

    (239) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (240) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (241) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (242) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 201


state 100

    (214) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    COMMA           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 214 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 101

    (227) modify_element_matrix -> access_element_matrix EQUALS . values
    (228) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 203
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 202
    boolean                        shift and go to state 62

state 102

    (215) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    COMMA           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 215 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 103

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 208
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 159
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    conditional                    shift and go to state 207
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 157
    expression                     shift and go to state 75
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 104

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 208
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 159
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    conditional                    shift and go to state 209
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 157
    expression                     shift and go to state 75
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 105

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 210


state 106

    (153) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 211


state 107

    (154) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 212


state 108

    (196) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (197) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (217) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (199) structure_array -> . key EQUALS GREATER_THAN values
    (200) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (221) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (222) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (201) key -> . INTEGER
    (202) key -> . STRING
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    ARRAY           shift and go to state 213
    INTEGER         shift and go to state 221
    STRING          shift and go to state 222
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values_array_indexed           shift and go to state 214
    structure_array                shift and go to state 215
    structure_matrix_first         shift and go to state 216
    values                         shift and go to state 217
    object_creation                shift and go to state 218
    indexed_array                  shift and go to state 219
    key                            shift and go to state 220
    boolean                        shift and go to state 62

state 109

    (198) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (199) structure_array -> . key EQUALS GREATER_THAN values
    (200) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (201) key -> . INTEGER
    (202) key -> . STRING

    INTEGER         shift and go to state 224
    STRING          shift and go to state 225

    structure_array                shift and go to state 223
    key                            shift and go to state 220

state 110

    (219) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (220) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 226
    boolean                        shift and go to state 62

state 111

    (218) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 227


state 112

    (232) object_creation -> NEW IDENTIFIER .
    (233) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 232 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 228


state 113

    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (133) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 230
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 231
    FLOAT           shift and go to state 232
    STRING          shift and go to state 233
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    conditional                    shift and go to state 229
    expression                     shift and go to state 116
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    values                         shift and go to state 157
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62

state 114

    (96) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 234


state 115

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (106) printable_values -> conditional .
    (107) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 235
    COMMA           shift and go to state 138

  ! RIGHT_PAREN     [ reduce using rule 106 (printable_values -> conditional .) ]


state 116

    (133) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (77) comparation -> expression . comparator_operator expression
    (86) comparator_operator -> . EQUALS_EQUALS
    (87) comparator_operator -> . IDENTICAL
    (88) comparator_operator -> . NOT_EQUALS
    (89) comparator_operator -> . NOT_IDENTICAL
    (90) comparator_operator -> . SMALL_THAN
    (91) comparator_operator -> . GREATER_THAN
    (92) comparator_operator -> . SMALL_EQUALS_TO
    (93) comparator_operator -> . GREATER_EQUALS_TO
    (94) comparator_operator -> . SPACECRAFT
    (95) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 236
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 153

state 117

    (102) printable_values -> VARIABLE .
    (103) printable_values -> VARIABLE . COMMA printable_values
    (105) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (78) comparation -> VARIABLE . EQUALS_EQUALS values
    (81) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (132) factor -> VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 102 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    RIGHT_PAREN     reduce using rule 102 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 135
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 136

  ! MINUS           [ reduce using rule 132 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 132 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> VARIABLE .) ]


state 118

    (104) printable_values -> STRING . STRING_CONCATENATION STRING
    (117) values -> STRING .
    (134) factor -> STRING .
    (63) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 137
    COMMA           reduce using rule 117 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 117 (values -> STRING .)
    IDENTICAL       reduce using rule 117 (values -> STRING .)
    NOT_EQUALS      reduce using rule 117 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 117 (values -> STRING .)
    SMALL_THAN      reduce using rule 117 (values -> STRING .)
    GREATER_THAN    reduce using rule 117 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 117 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 117 (values -> STRING .)
    SPACECRAFT      reduce using rule 117 (values -> STRING .)
    NULL_FUSION     reduce using rule 117 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 117 (values -> STRING .)
    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)

  ! RIGHT_PAREN     [ reduce using rule 134 (factor -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]


state 119

    (116) values -> INTEGER .
    (130) factor -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 116 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 116 (values -> INTEGER .)
    IDENTICAL       reduce using rule 116 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 116 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 116 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 116 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 116 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 116 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 116 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 116 (values -> INTEGER .)
    MULTIPLY        reduce using rule 130 (factor -> INTEGER .)
    DIVIDE          reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    POW             reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 130 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 130 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]


state 120

    (118) values -> FLOAT .
    (131) factor -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (70) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 118 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 118 (values -> FLOAT .)
    IDENTICAL       reduce using rule 118 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 118 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 118 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 118 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 118 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 118 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 118 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 118 (values -> FLOAT .)
    MULTIPLY        reduce using rule 131 (factor -> FLOAT .)
    DIVIDE          reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    POW             reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)

  ! RIGHT_PAREN     [ reduce using rule 131 (factor -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 131 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]


state 121

    (101) printable_values -> values COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    values                         shift and go to state 52
    printable_values               shift and go to state 237
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 122

    (75) comparation -> values comparator_operator . values
    (76) comparation -> values comparator_operator . expression
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 185
    STRING          shift and go to state 186
    FLOAT           shift and go to state 187
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188

    values                         shift and go to state 238
    expression                     shift and go to state 239
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 123

    (86) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    COUNT           reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)
    STRLEN          reduce using rule 86 (comparator_operator -> EQUALS_EQUALS .)


state 124

    (87) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 87 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 87 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 87 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 87 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 87 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 87 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 87 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 87 (comparator_operator -> IDENTICAL .)
    COUNT           reduce using rule 87 (comparator_operator -> IDENTICAL .)
    STRLEN          reduce using rule 87 (comparator_operator -> IDENTICAL .)


state 125

    (88) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    COUNT           reduce using rule 88 (comparator_operator -> NOT_EQUALS .)
    STRLEN          reduce using rule 88 (comparator_operator -> NOT_EQUALS .)


state 126

    (89) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    COUNT           reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)
    STRLEN          reduce using rule 89 (comparator_operator -> NOT_IDENTICAL .)


state 127

    (90) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    COUNT           reduce using rule 90 (comparator_operator -> SMALL_THAN .)
    STRLEN          reduce using rule 90 (comparator_operator -> SMALL_THAN .)


state 128

    (91) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    COUNT           reduce using rule 91 (comparator_operator -> GREATER_THAN .)
    STRLEN          reduce using rule 91 (comparator_operator -> GREATER_THAN .)


state 129

    (92) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    COUNT           reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)
    STRLEN          reduce using rule 92 (comparator_operator -> SMALL_EQUALS_TO .)


state 130

    (93) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    COUNT           reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)
    STRLEN          reduce using rule 93 (comparator_operator -> GREATER_EQUALS_TO .)


state 131

    (94) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    COUNT           reduce using rule 94 (comparator_operator -> SPACECRAFT .)
    STRLEN          reduce using rule 94 (comparator_operator -> SPACECRAFT .)


state 132

    (95) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    COUNT           reduce using rule 95 (comparator_operator -> NULL_FUSION .)
    STRLEN          reduce using rule 95 (comparator_operator -> NULL_FUSION .)


state 133

    (103) printable_values -> VARIABLE COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 241
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 134

    (105) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 242


state 135

    (78) comparation -> VARIABLE EQUALS_EQUALS . values
    (81) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (82) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (85) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 243
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 244
    access_array_element           shift and go to state 245
    access_element_matrix          shift and go to state 246
    boolean                        shift and go to state 62

state 136

    (210) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 198
    VARIABLE        shift and go to state 197


state 137

    (104) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 247


state 138

    (107) printable_values -> conditional COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    conditional                    shift and go to state 55
    printable_values               shift and go to state 248
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 139

    (109) printable_values -> structure_object_principal COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 249
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 140

    (111) printable_values -> function_invocation COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    function_invocation            shift and go to state 57
    printable_values               shift and go to state 250
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 141

    (113) printable_values -> string_special_function COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    string_special_function        shift and go to state 58
    printable_values               shift and go to state 251
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 142

    (115) printable_values -> array_special_function COMMA . printable_values
    (100) printable_values -> . values
    (101) printable_values -> . values COMMA printable_values
    (102) printable_values -> . VARIABLE
    (103) printable_values -> . VARIABLE COMMA printable_values
    (104) printable_values -> . STRING STRING_CONCATENATION STRING
    (105) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (106) printable_values -> . conditional
    (107) printable_values -> . conditional COMMA printable_values
    (108) printable_values -> . structure_object_principal
    (109) printable_values -> . structure_object_principal COMMA printable_values
    (110) printable_values -> . function_invocation
    (111) printable_values -> . function_invocation COMMA printable_values
    (112) printable_values -> . string_special_function
    (113) printable_values -> . string_special_function COMMA printable_values
    (114) printable_values -> . array_special_function
    (115) printable_values -> . array_special_function COMMA printable_values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (171) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (178) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (181) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    array_special_function         shift and go to state 59
    printable_values               shift and go to state 252
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 143

    (52) conditional -> boolean_expression logic_operator . boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 208
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 159
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    boolean_expression             shift and go to state 253
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 157
    expression                     shift and go to state 75
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 144

    (53) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_AND .)


state 145

    (54) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_OR .)


state 146

    (55) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 55 (logic_operator -> LOGIC_XOR .)


state 147

    (155) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 254
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 148

    (171) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (174) string_param -> . STRING
    (175) string_param -> . VARIABLE

    STRING          shift and go to state 260
    VARIABLE        shift and go to state 261

    string_param                   shift and go to state 259

state 149

    (172) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (173) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (174) string_param -> . STRING
    (175) string_param -> . VARIABLE

    STRING          shift and go to state 260
    VARIABLE        shift and go to state 261

    string_param                   shift and go to state 262

state 150

    (178) array_special_function -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (179) array_special_function -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (180) array_special_function -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 265
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 263
    structure_matrix_principal     shift and go to state 264
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 266
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 151

    (181) array_special_function -> ARRAY_POP LEFT_PAREN . VARIABLE RIGHT_PAREN

    VARIABLE        shift and go to state 267


state 152

    (79) comparation -> access_array_element EQUALS_EQUALS . values
    (80) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (83) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 270
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    access_array_element           shift and go to state 268
    values                         shift and go to state 269
    boolean                        shift and go to state 62

state 153

    (77) comparation -> expression comparator_operator . expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    expression                     shift and go to state 271
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 154

    (84) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 275


state 155

    (73) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 73 (logic_not_sentence -> LOGIC_NOT conditional .)


state 156

    (74) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (78) comparation -> VARIABLE . EQUALS_EQUALS values
    (81) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 74 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 135
    LEFT_BRACKET    shift and go to state 136
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    MINUS           reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> VARIABLE .) ]


state 157

    (75) comparation -> values . comparator_operator values
    (76) comparation -> values . comparator_operator expression
    (86) comparator_operator -> . EQUALS_EQUALS
    (87) comparator_operator -> . IDENTICAL
    (88) comparator_operator -> . NOT_EQUALS
    (89) comparator_operator -> . NOT_IDENTICAL
    (90) comparator_operator -> . SMALL_THAN
    (91) comparator_operator -> . GREATER_THAN
    (92) comparator_operator -> . SMALL_EQUALS_TO
    (93) comparator_operator -> . GREATER_EQUALS_TO
    (94) comparator_operator -> . SPACECRAFT
    (95) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 158

    (79) comparation -> access_array_element . EQUALS_EQUALS values
    (80) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (83) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 152


state 159

    (117) values -> STRING .
    (63) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .
    (134) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 117 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 117 (values -> STRING .)
    IDENTICAL       reduce using rule 117 (values -> STRING .)
    NOT_EQUALS      reduce using rule 117 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 117 (values -> STRING .)
    SMALL_THAN      reduce using rule 117 (values -> STRING .)
    GREATER_THAN    reduce using rule 117 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 117 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 117 (values -> STRING .)
    SPACECRAFT      reduce using rule 117 (values -> STRING .)
    NULL_FUSION     reduce using rule 117 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> STRING .) ]


state 160

    (62) true_boolean_types -> TRUE .
    (120) boolean -> TRUE .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 120 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 120 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 120 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 120 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 120 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 120 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 120 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 120 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 120 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 120 (boolean -> TRUE .)


state 161

    (67) false_boolean_types -> FALSE .
    (121) boolean -> FALSE .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 121 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 121 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 121 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 121 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 121 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 121 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 121 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 121 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 121 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 121 (boolean -> FALSE .)


state 162

    (60) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL

    FALSE           shift and go to state 277
    STRING          shift and go to state 278
    INTEGER         shift and go to state 279
    FLOAT           shift and go to state 280
    ARRAY           shift and go to state 281
    NULL            shift and go to state 82

    false_boolean_types            shift and go to state 276

state 163

    (61) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 283
    STRING          shift and go to state 284
    INTEGER         shift and go to state 285
    FLOAT           shift and go to state 286
    ARRAY           shift and go to state 287

    true_boolean_types             shift and go to state 282

state 164

    (123) expression -> term PLUS . expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    term                           shift and go to state 80
    expression                     shift and go to state 288
    factor                         shift and go to state 83

state 165

    (124) expression -> term MINUS . expression
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    term                           shift and go to state 80
    expression                     shift and go to state 289
    factor                         shift and go to state 83

state 166

    (66) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (71) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 291
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 290
    boolean                        shift and go to state 62

state 167

    (126) term -> factor MULTIPLY . term
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    factor                         shift and go to state 83
    term                           shift and go to state 292

state 168

    (127) term -> factor DIVIDE . term
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    factor                         shift and go to state 83
    term                           shift and go to state 293

state 169

    (128) term -> factor MODULE . term
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    factor                         shift and go to state 83
    term                           shift and go to state 294

state 170

    (129) term -> factor POW . term
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    factor                         shift and go to state 83
    term                           shift and go to state 295

state 171

    (97) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 296


state 172

    (246) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (253) class_implements_opt -> . IMPLEMENTS interface_list
    (254) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 298
    LEFT_BRACE      reduce using rule 254 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 297

state 173

    (251) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 299


state 174

    (247) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 300


state 175

    (163) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 301
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 176

    (132) factor -> VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 132 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94

  ! MINUS           [ reduce using rule 132 (factor -> VARIABLE .) ]


state 177

    (137) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 137 (variable_assignment -> VARIABLE assignment_operator values .)


state 178

    (138) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 138 (variable_assignment -> VARIABLE assignment_operator expression .)


state 179

    (139) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 139 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 180

    (140) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 140 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 181

    (141) variable_assignment -> VARIABLE assignment_operator array_special_function .

    SEMICOLON       reduce using rule 141 (variable_assignment -> VARIABLE assignment_operator array_special_function .)


state 182

    (142) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 142 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 183

    (143) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 143 (variable_assignment -> VARIABLE assignment_operator input .)


state 184

    (144) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 144 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 185

    (116) values -> INTEGER .
    (130) factor -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 116 (values -> INTEGER .)
    SEMICOLON       reduce using rule 116 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 116 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 116 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 116 (values -> INTEGER .)
    COMMA           reduce using rule 116 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 116 (values -> INTEGER .)
    MULTIPLY        reduce using rule 130 (factor -> INTEGER .)
    DIVIDE          reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    POW             reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 130 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 130 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 130 (factor -> INTEGER .) ]


state 186

    (117) values -> STRING .
    (134) factor -> STRING .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 117 (values -> STRING .)
    SEMICOLON       reduce using rule 117 (values -> STRING .)
    LOGIC_AND       reduce using rule 117 (values -> STRING .)
    LOGIC_OR        reduce using rule 117 (values -> STRING .)
    LOGIC_XOR       reduce using rule 117 (values -> STRING .)
    COMMA           reduce using rule 117 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 117 (values -> STRING .)
    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)

  ! SEMICOLON       [ reduce using rule 134 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 134 (factor -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 134 (factor -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 134 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 134 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 134 (factor -> STRING .) ]


state 187

    (118) values -> FLOAT .
    (131) factor -> FLOAT .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 118 (values -> FLOAT .)
    SEMICOLON       reduce using rule 118 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 118 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 118 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 118 (values -> FLOAT .)
    COMMA           reduce using rule 118 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 118 (values -> FLOAT .)
    MULTIPLY        reduce using rule 131 (factor -> FLOAT .)
    DIVIDE          reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    POW             reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)

  ! SEMICOLON       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 131 (factor -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 131 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 131 (factor -> FLOAT .) ]


state 188

    (133) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    INTEGER         shift and go to state 272
    FLOAT           shift and go to state 273
    VARIABLE        shift and go to state 240
    LEFT_PAREN      shift and go to state 188
    STRING          shift and go to state 274

    expression                     shift and go to state 302
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 189

    (169) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 303


state 190

    (170) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 304


state 191

    (164) special_function -> arrow_function .

    SEMICOLON       reduce using rule 164 (special_function -> arrow_function .)


state 192

    (165) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 165 (special_function -> anonymous_functions .)


state 193

    (120) boolean -> TRUE .

    SEMICOLON       reduce using rule 120 (boolean -> TRUE .)
    COMMA           reduce using rule 120 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 120 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 120 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 120 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 120 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 120 (boolean -> TRUE .)
    ECHO            reduce using rule 120 (boolean -> TRUE .)
    PRINT           reduce using rule 120 (boolean -> TRUE .)
    CLASS           reduce using rule 120 (boolean -> TRUE .)
    INTERFACE       reduce using rule 120 (boolean -> TRUE .)
    FUNCTION        reduce using rule 120 (boolean -> TRUE .)
    VARIABLE        reduce using rule 120 (boolean -> TRUE .)
    INCREASE        reduce using rule 120 (boolean -> TRUE .)
    DECREMENT       reduce using rule 120 (boolean -> TRUE .)
    IF              reduce using rule 120 (boolean -> TRUE .)
    WHILE           reduce using rule 120 (boolean -> TRUE .)
    FOR             reduce using rule 120 (boolean -> TRUE .)
    CONST           reduce using rule 120 (boolean -> TRUE .)
    DEFINE          reduce using rule 120 (boolean -> TRUE .)
    ARRAY           reduce using rule 120 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 120 (boolean -> TRUE .)
    NEW             reduce using rule 120 (boolean -> TRUE .)
    $end            reduce using rule 120 (boolean -> TRUE .)
    RETURN          reduce using rule 120 (boolean -> TRUE .)
    BREAK           reduce using rule 120 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 120 (boolean -> TRUE .)


state 194

    (121) boolean -> FALSE .

    SEMICOLON       reduce using rule 121 (boolean -> FALSE .)
    COMMA           reduce using rule 121 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 121 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 121 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 121 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 121 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 121 (boolean -> FALSE .)
    ECHO            reduce using rule 121 (boolean -> FALSE .)
    PRINT           reduce using rule 121 (boolean -> FALSE .)
    CLASS           reduce using rule 121 (boolean -> FALSE .)
    INTERFACE       reduce using rule 121 (boolean -> FALSE .)
    FUNCTION        reduce using rule 121 (boolean -> FALSE .)
    VARIABLE        reduce using rule 121 (boolean -> FALSE .)
    INCREASE        reduce using rule 121 (boolean -> FALSE .)
    DECREMENT       reduce using rule 121 (boolean -> FALSE .)
    IF              reduce using rule 121 (boolean -> FALSE .)
    WHILE           reduce using rule 121 (boolean -> FALSE .)
    FOR             reduce using rule 121 (boolean -> FALSE .)
    CONST           reduce using rule 121 (boolean -> FALSE .)
    DEFINE          reduce using rule 121 (boolean -> FALSE .)
    ARRAY           reduce using rule 121 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 121 (boolean -> FALSE .)
    NEW             reduce using rule 121 (boolean -> FALSE .)
    $end            reduce using rule 121 (boolean -> FALSE .)
    RETURN          reduce using rule 121 (boolean -> FALSE .)
    BREAK           reduce using rule 121 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 121 (boolean -> FALSE .)


state 195

    (166) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 305


state 196

    (167) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 306


state 197

    (211) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 307


state 198

    (210) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 308


state 199

    (229) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 309


state 200

    (234) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (235) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (236) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (237) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (244) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (245) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 312

    function_invocation            shift and go to state 310
    accessType                     shift and go to state 311

state 201

    (239) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (240) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (241) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (242) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (155) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (244) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (245) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 312

    function_invocation            shift and go to state 313
    accessType                     shift and go to state 314

state 202

    (227) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 227 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 203

    (228) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 228 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 204

    (116) values -> INTEGER .

    SEMICOLON       reduce using rule 116 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 116 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 116 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 116 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 116 (values -> INTEGER .)
    COMMA           reduce using rule 116 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 116 (values -> INTEGER .)
    ECHO            reduce using rule 116 (values -> INTEGER .)
    PRINT           reduce using rule 116 (values -> INTEGER .)
    CLASS           reduce using rule 116 (values -> INTEGER .)
    INTERFACE       reduce using rule 116 (values -> INTEGER .)
    FUNCTION        reduce using rule 116 (values -> INTEGER .)
    VARIABLE        reduce using rule 116 (values -> INTEGER .)
    INCREASE        reduce using rule 116 (values -> INTEGER .)
    DECREMENT       reduce using rule 116 (values -> INTEGER .)
    IF              reduce using rule 116 (values -> INTEGER .)
    WHILE           reduce using rule 116 (values -> INTEGER .)
    FOR             reduce using rule 116 (values -> INTEGER .)
    CONST           reduce using rule 116 (values -> INTEGER .)
    DEFINE          reduce using rule 116 (values -> INTEGER .)
    ARRAY           reduce using rule 116 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 116 (values -> INTEGER .)
    NEW             reduce using rule 116 (values -> INTEGER .)
    $end            reduce using rule 116 (values -> INTEGER .)
    RETURN          reduce using rule 116 (values -> INTEGER .)
    BREAK           reduce using rule 116 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 116 (values -> INTEGER .)


state 205

    (117) values -> STRING .

    SEMICOLON       reduce using rule 117 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 117 (values -> STRING .)
    LOGIC_AND       reduce using rule 117 (values -> STRING .)
    LOGIC_OR        reduce using rule 117 (values -> STRING .)
    LOGIC_XOR       reduce using rule 117 (values -> STRING .)
    COMMA           reduce using rule 117 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 117 (values -> STRING .)
    ECHO            reduce using rule 117 (values -> STRING .)
    PRINT           reduce using rule 117 (values -> STRING .)
    CLASS           reduce using rule 117 (values -> STRING .)
    INTERFACE       reduce using rule 117 (values -> STRING .)
    FUNCTION        reduce using rule 117 (values -> STRING .)
    VARIABLE        reduce using rule 117 (values -> STRING .)
    INCREASE        reduce using rule 117 (values -> STRING .)
    DECREMENT       reduce using rule 117 (values -> STRING .)
    IF              reduce using rule 117 (values -> STRING .)
    WHILE           reduce using rule 117 (values -> STRING .)
    FOR             reduce using rule 117 (values -> STRING .)
    CONST           reduce using rule 117 (values -> STRING .)
    DEFINE          reduce using rule 117 (values -> STRING .)
    ARRAY           reduce using rule 117 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 117 (values -> STRING .)
    NEW             reduce using rule 117 (values -> STRING .)
    $end            reduce using rule 117 (values -> STRING .)
    RETURN          reduce using rule 117 (values -> STRING .)
    BREAK           reduce using rule 117 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 117 (values -> STRING .)


state 206

    (118) values -> FLOAT .

    SEMICOLON       reduce using rule 118 (values -> FLOAT .)
    COMMA           reduce using rule 118 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 118 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 118 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 118 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 118 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 118 (values -> FLOAT .)
    ECHO            reduce using rule 118 (values -> FLOAT .)
    PRINT           reduce using rule 118 (values -> FLOAT .)
    CLASS           reduce using rule 118 (values -> FLOAT .)
    INTERFACE       reduce using rule 118 (values -> FLOAT .)
    FUNCTION        reduce using rule 118 (values -> FLOAT .)
    VARIABLE        reduce using rule 118 (values -> FLOAT .)
    INCREASE        reduce using rule 118 (values -> FLOAT .)
    DECREMENT       reduce using rule 118 (values -> FLOAT .)
    IF              reduce using rule 118 (values -> FLOAT .)
    WHILE           reduce using rule 118 (values -> FLOAT .)
    FOR             reduce using rule 118 (values -> FLOAT .)
    CONST           reduce using rule 118 (values -> FLOAT .)
    DEFINE          reduce using rule 118 (values -> FLOAT .)
    ARRAY           reduce using rule 118 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 118 (values -> FLOAT .)
    NEW             reduce using rule 118 (values -> FLOAT .)
    $end            reduce using rule 118 (values -> FLOAT .)
    RETURN          reduce using rule 118 (values -> FLOAT .)
    BREAK           reduce using rule 118 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 118 (values -> FLOAT .)


state 207

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 315


state 208

    (78) comparation -> VARIABLE . EQUALS_EQUALS values
    (81) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 135
    LEFT_BRACKET    shift and go to state 136
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    MINUS           reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> VARIABLE .) ]


state 209

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 316


state 210

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 317


state 211

    (153) const_syntax -> CONST IDENTIFIER EQUALS . values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 318
    boolean                        shift and go to state 62

state 212

    (154) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 319


state 213

    (221) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (196) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 320


state 214

    (196) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 321


state 215

    (197) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 322


state 216

    (217) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 323


state 217

    (203) values_array_indexed -> values .
    (204) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 203 (values_array_indexed -> values .)
    COMMA           shift and go to state 324


state 218

    (205) values_array_indexed -> object_creation .
    (206) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 205 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 325


state 219

    (207) values_array_indexed -> indexed_array .
    (208) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 207 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 326


state 220

    (199) structure_array -> key . EQUALS GREATER_THAN values
    (200) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 327


state 221

    (116) values -> INTEGER .
    (201) key -> INTEGER .

    COMMA           reduce using rule 116 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 116 (values -> INTEGER .)
    EQUALS          reduce using rule 201 (key -> INTEGER .)


state 222

    (117) values -> STRING .
    (202) key -> STRING .

    COMMA           reduce using rule 117 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 117 (values -> STRING .)
    EQUALS          reduce using rule 202 (key -> STRING .)


state 223

    (198) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 328


state 224

    (201) key -> INTEGER .

    EQUALS          reduce using rule 201 (key -> INTEGER .)


state 225

    (202) key -> STRING .

    EQUALS          reduce using rule 202 (key -> STRING .)


state 226

    (219) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (220) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 329


state 227

    (218) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 330


state 228

    (233) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 331
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 229

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 235


state 230

    (78) comparation -> VARIABLE . EQUALS_EQUALS values
    (81) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (82) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (85) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (132) factor -> VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 135
    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    MINUS           reduce using rule 132 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 136

  ! EQUALS_EQUALS   [ reduce using rule 132 (factor -> VARIABLE .) ]


state 231

    (130) factor -> INTEGER .
    (116) values -> INTEGER .
    (64) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 116 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 130 (factor -> INTEGER .)
    DIVIDE          reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    POW             reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 130 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 116 (values -> INTEGER .)
    IDENTICAL       reduce using rule 116 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 116 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 116 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 116 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 116 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 116 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 116 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 130 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 130 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 130 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]


state 232

    (131) factor -> FLOAT .
    (118) values -> FLOAT .
    (65) true_boolean_types -> FLOAT .
    (70) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 118 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 131 (factor -> FLOAT .)
    DIVIDE          reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    POW             reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 131 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 118 (values -> FLOAT .)
    IDENTICAL       reduce using rule 118 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 118 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 118 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 118 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 118 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 118 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 118 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)

  ! EQUALS_EQUALS   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 131 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 131 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 131 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> FLOAT .) ]


state 233

    (134) factor -> STRING .
    (117) values -> STRING .
    (63) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 117 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 134 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 117 (values -> STRING .)
    IDENTICAL       reduce using rule 117 (values -> STRING .)
    NOT_EQUALS      reduce using rule 117 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 117 (values -> STRING .)
    SMALL_THAN      reduce using rule 117 (values -> STRING .)
    GREATER_THAN    reduce using rule 117 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 117 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 117 (values -> STRING .)
    SPACECRAFT      reduce using rule 117 (values -> STRING .)
    NULL_FUSION     reduce using rule 117 (values -> STRING .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 134 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 134 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 134 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 134 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 134 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 134 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]


state 234

    (96) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 96 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 235

    (57) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 236

    (133) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 133 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 237

    (101) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 101 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 101 (printable_values -> values COMMA printable_values .)


state 238

    (75) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 75 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 75 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 75 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 75 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 75 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 75 (comparation -> values comparator_operator values .)


state 239

    (76) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 76 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 76 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 76 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 76 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 76 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 76 (comparation -> values comparator_operator expression .)


state 240

    (132) factor -> VARIABLE .

    MULTIPLY        reduce using rule 132 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 132 (factor -> VARIABLE .)
    MODULE          reduce using rule 132 (factor -> VARIABLE .)
    POW             reduce using rule 132 (factor -> VARIABLE .)
    PLUS            reduce using rule 132 (factor -> VARIABLE .)
    MINUS           reduce using rule 132 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 132 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 132 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 132 (factor -> VARIABLE .)
    COMMA           reduce using rule 132 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 132 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 132 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 132 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 132 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 132 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 132 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 132 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 132 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 132 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 132 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 132 (factor -> VARIABLE .)


state 241

    (103) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 103 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> VARIABLE COMMA printable_values .)


state 242

    (105) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 105 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 243

    (82) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 136


state 244

    (78) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 78 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 245

    (81) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 246

    (85) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 247

    (104) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 104 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 248

    (107) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 107 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> conditional COMMA printable_values .)


state 249

    (109) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 109 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> structure_object_principal COMMA printable_values .)


state 250

    (111) printable_values -> function_invocation COMMA printable_values .

    SEMICOLON       reduce using rule 111 (printable_values -> function_invocation COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> function_invocation COMMA printable_values .)


state 251

    (113) printable_values -> string_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 113 (printable_values -> string_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> string_special_function COMMA printable_values .)


state 252

    (115) printable_values -> array_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 115 (printable_values -> array_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 115 (printable_values -> array_special_function COMMA printable_values .)


state 253

    (52) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)


state 254

    (155) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 332


state 255

    (156) params -> real_params .
    (160) real_params -> real_params . COMMA VARIABLE
    (161) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 156 (params -> real_params .)
    COMMA           shift and go to state 333


state 256

    (157) params -> empty .

    RIGHT_PAREN     reduce using rule 157 (params -> empty .)


state 257

    (158) real_params -> VARIABLE .

    COMMA           reduce using rule 158 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 158 (real_params -> VARIABLE .)


state 258

    (159) real_params -> values .

    COMMA           reduce using rule 159 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 159 (real_params -> values .)


state 259

    (171) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 334


state 260

    (174) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 174 (string_param -> STRING .)
    COMMA           reduce using rule 174 (string_param -> STRING .)


state 261

    (175) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 175 (string_param -> VARIABLE .)
    COMMA           reduce using rule 175 (string_param -> VARIABLE .)


state 262

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (173) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 335


state 263

    (178) array_special_function -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 336

state 264

    (179) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 338

state 265

    (180) array_special_function -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 339

state 266

    (195) structure_array_principal -> access_array_element .
    (209) access_array_stucture -> access_array_element . SEMICOLON

    COMMA           reduce using rule 195 (structure_array_principal -> access_array_element .)
    RIGHT_PAREN     reduce using rule 195 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 267

    (181) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 340


state 268

    (83) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 269

    (79) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS values .)


state 270

    (80) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 341


state 271

    (77) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 77 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 77 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 77 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 77 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 77 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 77 (comparation -> expression comparator_operator expression .)


state 272

    (130) factor -> INTEGER .

    MULTIPLY        reduce using rule 130 (factor -> INTEGER .)
    DIVIDE          reduce using rule 130 (factor -> INTEGER .)
    MODULE          reduce using rule 130 (factor -> INTEGER .)
    POW             reduce using rule 130 (factor -> INTEGER .)
    PLUS            reduce using rule 130 (factor -> INTEGER .)
    MINUS           reduce using rule 130 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 130 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 130 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 130 (factor -> INTEGER .)
    COMMA           reduce using rule 130 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 130 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 130 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 130 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 130 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 130 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 130 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 130 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 130 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 130 (factor -> INTEGER .)


state 273

    (131) factor -> FLOAT .

    MULTIPLY        reduce using rule 131 (factor -> FLOAT .)
    DIVIDE          reduce using rule 131 (factor -> FLOAT .)
    MODULE          reduce using rule 131 (factor -> FLOAT .)
    POW             reduce using rule 131 (factor -> FLOAT .)
    PLUS            reduce using rule 131 (factor -> FLOAT .)
    MINUS           reduce using rule 131 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 131 (factor -> FLOAT .)
    LOGIC_OR        reduce using rule 131 (factor -> FLOAT .)
    LOGIC_XOR       reduce using rule 131 (factor -> FLOAT .)
    COMMA           reduce using rule 131 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 131 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 131 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 131 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 131 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 131 (factor -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 131 (factor -> FLOAT .)
    SMALL_THAN      reduce using rule 131 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 131 (factor -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 131 (factor -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 131 (factor -> FLOAT .)
    SPACECRAFT      reduce using rule 131 (factor -> FLOAT .)
    NULL_FUSION     reduce using rule 131 (factor -> FLOAT .)


state 274

    (134) factor -> STRING .

    MULTIPLY        reduce using rule 134 (factor -> STRING .)
    DIVIDE          reduce using rule 134 (factor -> STRING .)
    MODULE          reduce using rule 134 (factor -> STRING .)
    POW             reduce using rule 134 (factor -> STRING .)
    PLUS            reduce using rule 134 (factor -> STRING .)
    MINUS           reduce using rule 134 (factor -> STRING .)
    LOGIC_AND       reduce using rule 134 (factor -> STRING .)
    LOGIC_OR        reduce using rule 134 (factor -> STRING .)
    LOGIC_XOR       reduce using rule 134 (factor -> STRING .)
    COMMA           reduce using rule 134 (factor -> STRING .)
    SEMICOLON       reduce using rule 134 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 134 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 134 (factor -> STRING .)
    IDENTICAL       reduce using rule 134 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 134 (factor -> STRING .)
    NOT_IDENTICAL   reduce using rule 134 (factor -> STRING .)
    SMALL_THAN      reduce using rule 134 (factor -> STRING .)
    GREATER_THAN    reduce using rule 134 (factor -> STRING .)
    SMALL_EQUALS_TO reduce using rule 134 (factor -> STRING .)
    GREATER_EQUALS_TO reduce using rule 134 (factor -> STRING .)
    SPACECRAFT      reduce using rule 134 (factor -> STRING .)
    NULL_FUSION     reduce using rule 134 (factor -> STRING .)


state 275

    (84) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 276

    (60) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 60 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 277

    (67) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 67 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 67 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 67 (false_boolean_types -> FALSE .)


state 278

    (68) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 68 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 68 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 68 (false_boolean_types -> STRING .)


state 279

    (69) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 69 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 69 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 69 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 69 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 69 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 69 (false_boolean_types -> INTEGER .)


state 280

    (70) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 70 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> FLOAT .)


state 281

    (71) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 342


state 282

    (61) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 61 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 283

    (62) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 62 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 62 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 62 (true_boolean_types -> TRUE .)


state 284

    (63) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 63 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 63 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 63 (true_boolean_types -> STRING .)


state 285

    (64) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 64 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> INTEGER .)


state 286

    (65) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 65 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> FLOAT .)


state 287

    (66) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 343


state 288

    (123) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 123 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 123 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 123 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 123 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 123 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 123 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 123 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 123 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 123 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 123 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 123 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 123 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 123 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 123 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 123 (expression -> term PLUS expression .)
    COMMA           reduce using rule 123 (expression -> term PLUS expression .)


state 289

    (124) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 124 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 124 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 124 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 124 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 124 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 124 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 124 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 124 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 124 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 124 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 124 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 124 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 124 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 124 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 124 (expression -> term MINUS expression .)
    COMMA           reduce using rule 124 (expression -> term MINUS expression .)


state 290

    (66) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 344


state 291

    (71) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 292

    (126) term -> factor MULTIPLY term .

    PLUS            reduce using rule 126 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 126 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 126 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 126 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 126 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 126 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 126 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 126 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 126 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 126 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 126 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 126 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 126 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 126 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 126 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 126 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 126 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 126 (term -> factor MULTIPLY term .)


state 293

    (127) term -> factor DIVIDE term .

    PLUS            reduce using rule 127 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 127 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 127 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 127 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 127 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 127 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 127 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 127 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 127 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 127 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 127 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 127 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 127 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 127 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 127 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 127 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 127 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 127 (term -> factor DIVIDE term .)


state 294

    (128) term -> factor MODULE term .

    PLUS            reduce using rule 128 (term -> factor MODULE term .)
    MINUS           reduce using rule 128 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 128 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 128 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 128 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 128 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 128 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 128 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 128 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 128 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 128 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 128 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 128 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 128 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 128 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 128 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 128 (term -> factor MODULE term .)
    COMMA           reduce using rule 128 (term -> factor MODULE term .)


state 295

    (129) term -> factor POW term .

    PLUS            reduce using rule 129 (term -> factor POW term .)
    MINUS           reduce using rule 129 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 129 (term -> factor POW term .)
    IDENTICAL       reduce using rule 129 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 129 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 129 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 129 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 129 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 129 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 129 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 129 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 129 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 129 (term -> factor POW term .)
    SEMICOLON       reduce using rule 129 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 129 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 129 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 129 (term -> factor POW term .)
    COMMA           reduce using rule 129 (term -> factor POW term .)


state 296

    (97) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 97 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 297

    (246) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 345


state 298

    (253) class_implements_opt -> IMPLEMENTS . interface_list
    (255) interface_list -> . IDENTIFIER
    (256) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 347

    interface_list                 shift and go to state 346

state 299

    (251) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 251 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 251 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 300

    (247) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (248) interface_body -> . interface_body interface_method
    (249) interface_body -> .

    RIGHT_BRACE     reduce using rule 249 (interface_body -> .)
    PUBLIC          reduce using rule 249 (interface_body -> .)
    PRIVATE         reduce using rule 249 (interface_body -> .)
    PROTECTED       reduce using rule 249 (interface_body -> .)
    FUNCTION        reduce using rule 249 (interface_body -> .)

    interface_body                 shift and go to state 348

state 301

    (163) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 349


state 302

    (133) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 236


state 303

    (169) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 350


state 304

    (170) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 351


state 305

    (166) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 352
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 306

    (167) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 353
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 307

    (211) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (224) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 354

  ! LEFT_BRACKET    [ reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 308

    (210) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (223) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 355

  ! LEFT_BRACKET    [ reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 309

    (229) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 357

    indexed_array                  shift and go to state 356

state 310

    (234) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 234 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 311

    (235) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (236) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (237) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (238) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 235 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 358


state 312

    (155) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (244) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (245) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 147
    LEFT_BRACKET    shift and go to state 359
    EQUALS          reduce using rule 245 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 245 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 245 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 245 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 245 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 245 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 245 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 245 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 245 (accessType -> IDENTIFIER .)
    IF              reduce using rule 245 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 245 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 245 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 245 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 245 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 245 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 245 (accessType -> IDENTIFIER .)
    $end            reduce using rule 245 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 245 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 245 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 245 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 245 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 245 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 245 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 245 (accessType -> IDENTIFIER .) ]


state 313

    (239) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 239 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 314

    (240) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (241) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (242) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (243) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 240 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 360


state 315

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 361


state 316

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 362


state 317

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (185) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (188) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 365
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 318

    (153) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 153 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 319

    (154) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 373
    boolean                        shift and go to state 62

state 320

    (221) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (196) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357

    values                         shift and go to state 374
    values_array_indexed           shift and go to state 214
    boolean                        shift and go to state 62
    object_creation                shift and go to state 218
    indexed_array                  shift and go to state 219

state 321

    (196) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 196 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 322

    (197) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    COMMA           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 197 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 323

    (217) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 375


state 324

    (204) values_array_indexed -> values COMMA . values_array_indexed
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 217
    values_array_indexed           shift and go to state 376
    object_creation                shift and go to state 218
    indexed_array                  shift and go to state 219
    boolean                        shift and go to state 62

state 325

    (206) values_array_indexed -> object_creation COMMA . values_array_indexed
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    object_creation                shift and go to state 218
    values_array_indexed           shift and go to state 377
    values                         shift and go to state 217
    indexed_array                  shift and go to state 219
    boolean                        shift and go to state 62

state 326

    (208) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    indexed_array                  shift and go to state 219
    values_array_indexed           shift and go to state 378
    values                         shift and go to state 217
    object_creation                shift and go to state 218
    boolean                        shift and go to state 62

state 327

    (199) structure_array -> key EQUALS . GREATER_THAN values
    (200) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 379


state 328

    (198) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    COMMA           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 198 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 329

    (219) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (220) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 219 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 380


state 330

    (218) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    COMMA           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_PAREN     reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 218 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 331

    (233) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 381


state 332

    (155) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 155 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 333

    (160) real_params -> real_params COMMA . VARIABLE
    (161) real_params -> real_params COMMA . values
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 382
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 383
    boolean                        shift and go to state 62

state 334

    (171) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    COMMA           reduce using rule 171 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 171 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 171 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 335

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (173) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (176) int_param -> . INTEGER
    (177) int_param -> . VARIABLE

    INTEGER         shift and go to state 385
    VARIABLE        shift and go to state 386

    int_param                      shift and go to state 384

state 336

    (178) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 387


state 337

    (182) count_param -> COMMA . COUNT_NORMAL
    (183) count_param -> COMMA . COUNT_RECURSIVE

    COUNT_NORMAL    shift and go to state 388
    COUNT_RECURSIVE shift and go to state 389


state 338

    (179) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 390


state 339

    (180) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 391


state 340

    (181) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .

    COMMA           reduce using rule 181 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    SEMICOLON       reduce using rule 181 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 181 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 341

    (210) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 393
    VARIABLE        shift and go to state 392


state 342

    (71) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 291


state 343

    (66) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 290
    boolean                        shift and go to state 62

state 344

    (66) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 345

    (246) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (257) class_body -> . class_body class_member
    (258) class_body -> .

    RIGHT_BRACE     reduce using rule 258 (class_body -> .)
    PUBLIC          reduce using rule 258 (class_body -> .)
    PRIVATE         reduce using rule 258 (class_body -> .)
    PROTECTED       reduce using rule 258 (class_body -> .)
    STATIC          reduce using rule 258 (class_body -> .)
    FUNCTION        reduce using rule 258 (class_body -> .)
    VARIABLE        reduce using rule 258 (class_body -> .)
    CONST           reduce using rule 258 (class_body -> .)
    DEFINE          reduce using rule 258 (class_body -> .)

    class_body                     shift and go to state 394

state 346

    (253) class_implements_opt -> IMPLEMENTS interface_list .
    (256) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 253 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 395


state 347

    (255) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 255 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 255 (interface_list -> IDENTIFIER .)


state 348

    (247) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (248) interface_body -> interface_body . interface_method
    (250) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (265) visibility_opt -> . PUBLIC
    (266) visibility_opt -> . PRIVATE
    (267) visibility_opt -> . PROTECTED
    (268) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 396
    PUBLIC          shift and go to state 399
    PRIVATE         shift and go to state 400
    PROTECTED       shift and go to state 401
    FUNCTION        reduce using rule 268 (visibility_opt -> .)

    interface_method               shift and go to state 397
    visibility_opt                 shift and go to state 398

state 349

    (163) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (168) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 403

    codeblock                      shift and go to state 402

state 350

    (169) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 404


state 351

    (170) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 405


state 352

    (166) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 406


state 353

    (167) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 407


state 354

    (224) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 408
    INTEGER         shift and go to state 409


state 355

    (223) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 411
    VARIABLE        shift and go to state 410


state 356

    (229) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    COMMA           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_PAREN     reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 229 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 357

    (196) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 412


state 358

    (236) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (237) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (238) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 413
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 414
    access_array_element           shift and go to state 415
    boolean                        shift and go to state 62

state 359

    (244) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 416


state 360

    (241) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (242) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (243) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 419
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    access_array_element           shift and go to state 417
    values                         shift and go to state 418
    boolean                        shift and go to state 62

state 361

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 420
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 362

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 424
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 363

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (185) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (188) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 425
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 364

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 365

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 426
    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVIDE          shift and go to state 431
    MODULE          shift and go to state 432
    POW             shift and go to state 433

    operator_aritmetic             shift and go to state 427

state 366

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 367

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 434


state 368

    (42) expression_for -> length_operations .

    SEMICOLON       reduce using rule 42 (expression_for -> length_operations .)
    PLUS            reduce using rule 42 (expression_for -> length_operations .)
    MINUS           reduce using rule 42 (expression_for -> length_operations .)
    MULTIPLY        reduce using rule 42 (expression_for -> length_operations .)
    DIVIDE          reduce using rule 42 (expression_for -> length_operations .)
    MODULE          reduce using rule 42 (expression_for -> length_operations .)
    POW             reduce using rule 42 (expression_for -> length_operations .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> length_operations .)


state 369

    (43) number_values -> INTEGER .

    SEMICOLON       reduce using rule 43 (number_values -> INTEGER .)
    PLUS            reduce using rule 43 (number_values -> INTEGER .)
    MINUS           reduce using rule 43 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 43 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 43 (number_values -> INTEGER .)
    MODULE          reduce using rule 43 (number_values -> INTEGER .)
    POW             reduce using rule 43 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> INTEGER .)


state 370

    (44) number_values -> FLOAT .

    SEMICOLON       reduce using rule 44 (number_values -> FLOAT .)
    PLUS            reduce using rule 44 (number_values -> FLOAT .)
    MINUS           reduce using rule 44 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 44 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 44 (number_values -> FLOAT .)
    MODULE          reduce using rule 44 (number_values -> FLOAT .)
    POW             reduce using rule 44 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 44 (number_values -> FLOAT .)


state 371

    (185) length_operations -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 435


state 372

    (188) length_operations -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 436


state 373

    (154) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 437


state 374

    (221) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (203) values_array_indexed -> values .
    (204) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 438
    COMMA           shift and go to state 324

  ! RIGHT_PAREN     [ reduce using rule 203 (values_array_indexed -> values .) ]


state 375

    (217) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 217 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 376

    (204) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 204 (values_array_indexed -> values COMMA values_array_indexed .)


state 377

    (206) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 206 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 378

    (208) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 208 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 379

    (199) structure_array -> key EQUALS GREATER_THAN . values
    (200) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 439
    boolean                        shift and go to state 62

state 380

    (220) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (219) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (220) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 440

state 381

    (233) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 233 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 382

    (160) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 160 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 160 (real_params -> real_params COMMA VARIABLE .)


state 383

    (161) real_params -> real_params COMMA values .

    COMMA           reduce using rule 161 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 161 (real_params -> real_params COMMA values .)


state 384

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (173) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 442
    COMMA           shift and go to state 441


state 385

    (176) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 176 (int_param -> INTEGER .)
    COMMA           reduce using rule 176 (int_param -> INTEGER .)


state 386

    (177) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 177 (int_param -> VARIABLE .)
    COMMA           reduce using rule 177 (int_param -> VARIABLE .)


state 387

    (178) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 178 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 178 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 178 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 388

    (182) count_param -> COMMA COUNT_NORMAL .

    RIGHT_PAREN     reduce using rule 182 (count_param -> COMMA COUNT_NORMAL .)


state 389

    (183) count_param -> COMMA COUNT_RECURSIVE .

    RIGHT_PAREN     reduce using rule 183 (count_param -> COMMA COUNT_RECURSIVE .)


state 390

    (179) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 179 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 179 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 179 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 391

    (180) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    COMMA           reduce using rule 180 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 180 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 180 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 392

    (211) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 443


state 393

    (210) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 444


state 394

    (246) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (257) class_body -> class_body . class_member
    (259) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (260) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (261) class_member -> . class_attribute
    (265) visibility_opt -> . PUBLIC
    (266) visibility_opt -> . PRIVATE
    (267) visibility_opt -> . PROTECTED
    (268) visibility_opt -> .
    (262) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (263) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (264) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 445
    PUBLIC          shift and go to state 399
    PRIVATE         shift and go to state 400
    PROTECTED       shift and go to state 401
    STATIC          reduce using rule 268 (visibility_opt -> .)
    FUNCTION        reduce using rule 268 (visibility_opt -> .)
    VARIABLE        reduce using rule 268 (visibility_opt -> .)
    CONST           reduce using rule 268 (visibility_opt -> .)
    DEFINE          reduce using rule 268 (visibility_opt -> .)

    class_member                   shift and go to state 446
    visibility_opt                 shift and go to state 447
    class_attribute                shift and go to state 448

state 395

    (256) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 449


state 396

    (247) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 247 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 397

    (248) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 248 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 248 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 248 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 248 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 248 (interface_body -> interface_body interface_method .)


state 398

    (250) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 450


state 399

    (265) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 265 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 265 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 265 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 265 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 265 (visibility_opt -> PUBLIC .)


state 400

    (266) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 266 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 266 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 266 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 266 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 266 (visibility_opt -> PRIVATE .)


state 401

    (267) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 267 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 267 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 267 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 267 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 267 (visibility_opt -> PROTECTED .)


state 402

    (163) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 163 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 403

    (168) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 451
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 404

    (169) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 169 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 405

    (170) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 170 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 406

    (166) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 452


state 407

    (167) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (168) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 403

    codeblock                      shift and go to state 453

state 408

    (224) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 454


state 409

    (225) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 455


state 410

    (226) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 456


state 411

    (223) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 457


state 412

    (196) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (203) values_array_indexed -> . values
    (204) values_array_indexed -> . values COMMA values_array_indexed
    (205) values_array_indexed -> . object_creation
    (206) values_array_indexed -> . object_creation COMMA values_array_indexed
    (207) values_array_indexed -> . indexed_array
    (208) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    NEW             shift and go to state 46
    ARRAY           shift and go to state 357
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values_array_indexed           shift and go to state 214
    values                         shift and go to state 217
    object_creation                shift and go to state 218
    indexed_array                  shift and go to state 219
    boolean                        shift and go to state 62

state 413

    (237) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 341

  ! LEFT_BRACKET    [ reduce using rule 237 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 414

    (236) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 236 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 415

    (238) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 238 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 416

    (244) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 458


state 417

    (243) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 243 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 418

    (241) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 241 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 419

    (242) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 341

  ! LEFT_BRACKET    [ reduce using rule 242 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 420

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 459


state 421

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 460
    BREAK           shift and go to state 461
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 421
    body_statement                 shift and go to state 462
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 422

    (26) body_statement -> RETURN . values SEMICOLON
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 463
    boolean                        shift and go to state 62

state 423

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 464


state 424

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 465


state 425

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 466
    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVIDE          shift and go to state 431
    MODULE          shift and go to state 432
    POW             shift and go to state 433

    operator_aritmetic             shift and go to state 427

state 426

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 467

    condition_for                  shift and go to state 468

state 427

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (185) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (188) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 469
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 428

    (45) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    COUNT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    STRLEN          reduce using rule 45 (operator_aritmetic -> PLUS .)


state 429

    (46) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    COUNT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    STRLEN          reduce using rule 46 (operator_aritmetic -> MINUS .)


state 430

    (47) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    COUNT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    STRLEN          reduce using rule 47 (operator_aritmetic -> MULTIPLY .)


state 431

    (48) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    COUNT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    STRLEN          reduce using rule 48 (operator_aritmetic -> DIVIDE .)


state 432

    (49) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    COUNT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    STRLEN          reduce using rule 49 (operator_aritmetic -> MODULE .)


state 433

    (50) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> POW .)
    COUNT           reduce using rule 50 (operator_aritmetic -> POW .)
    STRLEN          reduce using rule 50 (operator_aritmetic -> POW .)


state 434

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 470

    access_array_element           shift and go to state 471

state 435

    (185) length_operations -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 474
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 472
    structure_matrix_principal     shift and go to state 473
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 266
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 436

    (188) length_operations -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (174) string_param -> . STRING
    (175) string_param -> . VARIABLE

    STRING          shift and go to state 260
    VARIABLE        shift and go to state 261

    string_param                   shift and go to state 475

state 437

    (154) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 154 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 438

    (221) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (222) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 221 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 476


state 439

    (199) structure_array -> key EQUALS GREATER_THAN values .
    (200) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 199 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 199 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 477


state 440

    (220) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 220 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 441

    (173) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (176) int_param -> . INTEGER
    (177) int_param -> . VARIABLE

    INTEGER         shift and go to state 385
    VARIABLE        shift and go to state 386

    int_param                      shift and go to state 478

state 442

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 443

    (211) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 211 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 444

    (210) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 210 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 445

    (246) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 246 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 446

    (257) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 257 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 257 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 257 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 257 (class_body -> class_body class_member .)
    STATIC          reduce using rule 257 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 257 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 257 (class_body -> class_body class_member .)
    CONST           reduce using rule 257 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 257 (class_body -> class_body class_member .)


state 447

    (259) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (260) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (262) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (263) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (264) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 479
    FUNCTION        shift and go to state 480
    VARIABLE        shift and go to state 481
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 482
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 448

    (261) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 261 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 261 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 261 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 261 (class_member -> class_attribute .)
    STATIC          reduce using rule 261 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 261 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 261 (class_member -> class_attribute .)
    CONST           reduce using rule 261 (class_member -> class_attribute .)
    DEFINE          reduce using rule 261 (class_member -> class_attribute .)


state 449

    (256) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 256 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 256 (interface_list -> interface_list COMMA IDENTIFIER .)


state 450

    (250) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 483


state 451

    (168) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 484


state 452

    (166) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 485


state 453

    (167) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 167 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 454

    (224) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 224 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 455

    (225) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 225 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 456

    (226) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 226 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 457

    (223) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 223 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 458

    (244) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 244 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 459

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 488
    ELSE            shift and go to state 489

    elseif_statement               shift and go to state 486
    else_statement                 shift and go to state 487

state 460

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    SEMICOLON       shift and go to state 491
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 490
    boolean                        shift and go to state 62

state 461

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 492


state 462

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 463

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 493


state 464

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 465

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 466

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 467

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (86) comparator_operator -> . EQUALS_EQUALS
    (87) comparator_operator -> . IDENTICAL
    (88) comparator_operator -> . NOT_EQUALS
    (89) comparator_operator -> . NOT_IDENTICAL
    (90) comparator_operator -> . SMALL_THAN
    (91) comparator_operator -> . GREATER_THAN
    (92) comparator_operator -> . SMALL_EQUALS_TO
    (93) comparator_operator -> . GREATER_EQUALS_TO
    (94) comparator_operator -> . SPACECRAFT
    (95) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 494

state 468

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 495


state 469

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVIDE          shift and go to state 431
    MODULE          shift and go to state 432
    POW             shift and go to state 433

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 427

state 470

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 496
    LEFT_BRACKET    shift and go to state 341


state 471

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 497


state 472

    (185) length_operations -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 498

state 473

    (186) length_operations -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 499

state 474

    (187) length_operations -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (182) count_param -> . COMMA COUNT_NORMAL
    (183) count_param -> . COMMA COUNT_RECURSIVE
    (184) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 337
    RIGHT_PAREN     reduce using rule 184 (count_param -> .)

    count_param                    shift and go to state 500

state 475

    (188) length_operations -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 501


state 476

    (222) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (221) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (222) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 502

    structure_matrix_first         shift and go to state 503

state 477

    (200) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (199) structure_array -> . key EQUALS GREATER_THAN values
    (200) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (201) key -> . INTEGER
    (202) key -> . STRING

    INTEGER         shift and go to state 224
    STRING          shift and go to state 225

    key                            shift and go to state 220
    structure_array                shift and go to state 504

state 478

    (173) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 505


state 479

    (259) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 506


state 480

    (260) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 507


state 481

    (262) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (263) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 508
    SEMICOLON       shift and go to state 509


state 482

    (264) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 510


state 483

    (250) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 511


state 484

    (168) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 168 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 485

    (166) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (168) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 403

    codeblock                      shift and go to state 512

state 486

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 487

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 488

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 513


state 489

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 514


state 490

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 515


state 491

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 492

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 493

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 494

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (185) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (186) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (187) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (188) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 364
    LEFT_PAREN      shift and go to state 363
    IDENTIFIER      shift and go to state 367
    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370
    COUNT           shift and go to state 371
    STRLEN          shift and go to state 372

    expression_for                 shift and go to state 516
    number_values                  shift and go to state 366
    length_operations              shift and go to state 368

state 495

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 517
    INCREASE        shift and go to state 519
    DECREMENT       shift and go to state 520

    increment_statement            shift and go to state 518

state 496

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 497

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 498

    (185) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 521


state 499

    (186) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 522


state 500

    (187) length_operations -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 523


state 501

    (188) length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    PLUS            reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MINUS           reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MODULE          reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    POW             reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 188 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 502

    (221) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 524


state 503

    (222) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 222 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 504

    (200) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 200 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 200 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 505

    (173) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 173 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 173 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 173 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 506

    (259) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 525


state 507

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 526


state 508

    (262) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 527
    boolean                        shift and go to state 62

state 509

    (263) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 263 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 510

    (264) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 264 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 511

    (250) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 528
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 512

    (166) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 166 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 513

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (59) boolean_expression -> . logic_expression
    (75) comparation -> . values comparator_operator values
    (76) comparation -> . values comparator_operator expression
    (77) comparation -> . expression comparator_operator expression
    (78) comparation -> . VARIABLE EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (81) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (82) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (83) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (84) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (85) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (73) logic_not_sentence -> . LOGIC_NOT conditional
    (74) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (60) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (61) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (122) expression -> . term
    (123) expression -> . term PLUS expression
    (124) expression -> . term MINUS expression
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (62) true_boolean_types -> . TRUE
    (63) true_boolean_types -> . STRING
    (64) true_boolean_types -> . INTEGER
    (65) true_boolean_types -> . FLOAT
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . FLOAT
    (71) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (72) false_boolean_types -> . NULL
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (125) term -> . factor
    (126) term -> . factor MULTIPLY term
    (127) term -> . factor DIVIDE term
    (128) term -> . factor MODULE term
    (129) term -> . factor POW term
    (130) factor -> . INTEGER
    (131) factor -> . FLOAT
    (132) factor -> . VARIABLE
    (133) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (134) factor -> . STRING

    LEFT_PAREN      shift and go to state 113
    VARIABLE        shift and go to state 208
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 159
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 160
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 161
    NULL            shift and go to state 82

    conditional                    shift and go to state 529
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 157
    expression                     shift and go to state 75
    access_array_element           shift and go to state 158
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 514

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 530
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 515

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 516

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVIDE          shift and go to state 431
    MODULE          shift and go to state 432
    POW             shift and go to state 433

    operator_aritmetic             shift and go to state 427

state 517

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 531
    DECREMENT       shift and go to state 532
    PLUS_EQUALS     shift and go to state 533
    EQUALS          shift and go to state 534


state 518

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 535


state 519

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 536


state 520

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 537


state 521

    (185) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 185 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 522

    (186) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 186 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 523

    (187) length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    PLUS            reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MINUS           reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MODULE          reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    POW             reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 187 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 524

    (221) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 538
    boolean                        shift and go to state 62

state 525

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 539


state 526

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 540
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 527

    (262) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 541


state 528

    (250) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 542


state 529

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 543


state 530

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 544


state 531

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 532

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 533

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 545


state 534

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 546


state 535

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 547


state 536

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 537

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 538

    (221) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (222) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 438


state 539

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (156) params -> . real_params
    (157) params -> . empty
    (158) real_params -> . VARIABLE
    (159) real_params -> . values
    (160) real_params -> . real_params COMMA VARIABLE
    (161) real_params -> . real_params COMMA values
    (162) empty -> .
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    RIGHT_PAREN     reduce using rule 162 (empty -> .)
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    params                         shift and go to state 548
    real_params                    shift and go to state 255
    empty                          shift and go to state 256
    values                         shift and go to state 258
    boolean                        shift and go to state 62

state 540

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 549


state 541

    (262) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 262 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 542

    (250) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 550


state 543

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 551


state 544

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 545

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 546

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    PLUS            shift and go to state 428
    MINUS           shift and go to state 429
    MULTIPLY        shift and go to state 430
    DIVIDE          shift and go to state 431
    MODULE          shift and go to state 432
    POW             shift and go to state 433

    operator_aritmetic             shift and go to state 552

state 547

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 553
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 548

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 554


state 549

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 555


state 550

    (250) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 250 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 250 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 250 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 250 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 250 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 551

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 422
    BREAK           shift and go to state 423
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 556
    sentence                       shift and go to state 421
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 552

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    INTEGER         shift and go to state 369
    FLOAT           shift and go to state 370

    number_values                  shift and go to state 557

state 553

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 558


state 554

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 559


state 555

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (269) method_body -> . classStatement
    (270) method_body -> . classStatement return_form
    (271) method_body -> . return_form
    (272) method_body -> . classStatement BREAK SEMICOLON
    (273) method_body -> . classStatement method_body
    (277) classStatement -> . sentence
    (278) classStatement -> . access_method_object SEMICOLON
    (274) return_form -> . RETURN values SEMICOLON
    (275) return_form -> . RETURN access_method_object SEMICOLON
    (276) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 565
    VARIABLE        shift and go to state 566
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 560
    classStatement                 shift and go to state 561
    return_form                    shift and go to state 562
    sentence                       shift and go to state 563
    access_method_object           shift and go to state 564
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 567
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 556

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 568


state 557

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 558

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 559

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (269) method_body -> . classStatement
    (270) method_body -> . classStatement return_form
    (271) method_body -> . return_form
    (272) method_body -> . classStatement BREAK SEMICOLON
    (273) method_body -> . classStatement method_body
    (277) classStatement -> . sentence
    (278) classStatement -> . access_method_object SEMICOLON
    (274) return_form -> . RETURN values SEMICOLON
    (275) return_form -> . RETURN access_method_object SEMICOLON
    (276) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 565
    VARIABLE        shift and go to state 566
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 569
    classStatement                 shift and go to state 561
    return_form                    shift and go to state 562
    sentence                       shift and go to state 563
    access_method_object           shift and go to state 564
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 567
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 560

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 570


state 561

    (269) method_body -> classStatement .
    (270) method_body -> classStatement . return_form
    (272) method_body -> classStatement . BREAK SEMICOLON
    (273) method_body -> classStatement . method_body
    (274) return_form -> . RETURN values SEMICOLON
    (275) return_form -> . RETURN access_method_object SEMICOLON
    (276) return_form -> . RETURN SEMICOLON
    (269) method_body -> . classStatement
    (270) method_body -> . classStatement return_form
    (271) method_body -> . return_form
    (272) method_body -> . classStatement BREAK SEMICOLON
    (273) method_body -> . classStatement method_body
    (277) classStatement -> . sentence
    (278) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (96) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . ECHO printable_values
    (99) print_statement -> . PRINT printable_values
    (135) assignment -> . variable_assignment
    (136) assignment -> . constant_assignment
    (189) types_structure -> . structure_array_principal
    (190) types_structure -> . structure_matrix_principal
    (191) types_structure -> . structure_object_principal
    (246) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (247) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (163) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (137) variable_assignment -> . VARIABLE assignment_operator values
    (138) variable_assignment -> . VARIABLE assignment_operator expression
    (139) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (140) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (141) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (142) variable_assignment -> . VARIABLE assignment_operator types_structure
    (143) variable_assignment -> . VARIABLE assignment_operator input
    (144) variable_assignment -> . VARIABLE assignment_operator special_function
    (145) variable_assignment -> . VARIABLE INCREASE
    (146) variable_assignment -> . VARIABLE DECREMENT
    (147) variable_assignment -> . INCREASE VARIABLE
    (148) variable_assignment -> . DECREMENT VARIABLE
    (151) constant_assignment -> . const_syntax
    (152) constant_assignment -> . define_syntax
    (192) structure_array_principal -> . indexed_array
    (193) structure_array_principal -> . associative_array
    (194) structure_array_principal -> . access_array_stucture
    (195) structure_array_principal -> . access_array_element
    (212) structure_matrix_principal -> . matrix_firstform
    (213) structure_matrix_principal -> . matrix_secondform
    (214) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (215) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (216) structure_matrix_principal -> . add_element_matrix
    (230) structure_object_principal -> . object_creation
    (231) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (153) const_syntax -> . CONST IDENTIFIER EQUALS values
    (154) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (196) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (197) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (198) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (209) access_array_stucture -> . access_array_element SEMICOLON
    (217) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (218) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (223) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (227) modify_element_matrix -> . access_element_matrix EQUALS values
    (228) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (229) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (232) object_creation -> . NEW IDENTIFIER
    (233) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 269 (method_body -> classStatement .)
    BREAK           shift and go to state 572
    RETURN          shift and go to state 565
    VARIABLE        shift and go to state 566
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 561
    return_form                    shift and go to state 571
    method_body                    shift and go to state 573
    access_method_object           shift and go to state 564
    sentence                       shift and go to state 563
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 567
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 562

    (271) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 271 (method_body -> return_form .)


state 563

    (277) classStatement -> sentence .

    BREAK           reduce using rule 277 (classStatement -> sentence .)
    RETURN          reduce using rule 277 (classStatement -> sentence .)
    VARIABLE        reduce using rule 277 (classStatement -> sentence .)
    ECHO            reduce using rule 277 (classStatement -> sentence .)
    PRINT           reduce using rule 277 (classStatement -> sentence .)
    CLASS           reduce using rule 277 (classStatement -> sentence .)
    INTERFACE       reduce using rule 277 (classStatement -> sentence .)
    FUNCTION        reduce using rule 277 (classStatement -> sentence .)
    INCREASE        reduce using rule 277 (classStatement -> sentence .)
    DECREMENT       reduce using rule 277 (classStatement -> sentence .)
    IF              reduce using rule 277 (classStatement -> sentence .)
    WHILE           reduce using rule 277 (classStatement -> sentence .)
    FOR             reduce using rule 277 (classStatement -> sentence .)
    CONST           reduce using rule 277 (classStatement -> sentence .)
    DEFINE          reduce using rule 277 (classStatement -> sentence .)
    ARRAY           reduce using rule 277 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 277 (classStatement -> sentence .)
    NEW             reduce using rule 277 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 277 (classStatement -> sentence .)


state 564

    (278) classStatement -> access_method_object . SEMICOLON
    (231) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 574
    BREAK           reduce using rule 231 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 231 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 231 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 231 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 231 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 231 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 231 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 231 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 231 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 231 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 231 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 231 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 231 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 231 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 231 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 231 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 231 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 231 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 231 (structure_object_principal -> access_method_object .)


state 565

    (274) return_form -> RETURN . values SEMICOLON
    (275) return_form -> RETURN . access_method_object SEMICOLON
    (276) return_form -> RETURN . SEMICOLON
    (116) values -> . INTEGER
    (117) values -> . STRING
    (118) values -> . FLOAT
    (119) values -> . boolean
    (234) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (235) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (236) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (239) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (240) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (241) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (120) boolean -> . TRUE
    (121) boolean -> . FALSE
    (210) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 576
    INTEGER         shift and go to state 204
    STRING          shift and go to state 205
    FLOAT           shift and go to state 206
    VARIABLE        shift and go to state 578
    TRUE            shift and go to state 193
    FALSE           shift and go to state 194

    values                         shift and go to state 575
    access_method_object           shift and go to state 577
    boolean                        shift and go to state 62
    access_array_element           shift and go to state 579

state 566

    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (137) variable_assignment -> VARIABLE . assignment_operator values
    (138) variable_assignment -> VARIABLE . assignment_operator expression
    (139) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (140) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (141) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (142) variable_assignment -> VARIABLE . assignment_operator types_structure
    (143) variable_assignment -> VARIABLE . assignment_operator input
    (144) variable_assignment -> VARIABLE . assignment_operator special_function
    (145) variable_assignment -> VARIABLE . INCREASE
    (146) variable_assignment -> VARIABLE . DECREMENT
    (223) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (224) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (225) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (226) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (149) assignment_operator -> . EQUALS
    (150) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 92
    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 567

    (239) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (241) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (195) structure_array_principal -> access_array_element .
    (209) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 99
    BREAK           reduce using rule 195 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 195 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 195 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 195 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 195 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 195 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 195 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 195 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 195 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 195 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 195 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 195 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 195 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 195 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 195 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 195 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 195 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 195 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 195 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 568

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 488
    ELSE            shift and go to state 489

    elseif_statement               shift and go to state 580
    else_statement                 shift and go to state 581

state 569

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 582


state 570

    (260) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 260 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 571

    (270) method_body -> classStatement return_form .
    (271) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 270 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 270 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 271 (method_body -> return_form .) ]


state 572

    (272) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 583


state 573

    (273) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 273 (method_body -> classStatement method_body .)


state 574

    (278) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 278 (classStatement -> access_method_object SEMICOLON .)


state 575

    (274) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 584


state 576

    (276) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 276 (return_form -> RETURN SEMICOLON .)


state 577

    (275) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 585


state 578

    (234) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (235) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (236) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (237) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (238) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (211) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 341


state 579

    (239) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (240) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (241) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (242) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (243) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 99


state 580

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 581

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 582

    (259) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 259 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 583

    (272) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 272 (method_body -> classStatement BREAK SEMICOLON .)


state 584

    (274) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 274 (return_form -> RETURN values SEMICOLON .)


state 585

    (275) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 275 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 63 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 156 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 208 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 230 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 307 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 308 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 312 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 374 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 413 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 419 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 469 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 469 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 469 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 469 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 469 resolved as shift
WARNING: shift/reduce conflict for POW in state 469 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 54
WARNING: reduce/reduce conflict in state 60 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 60 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 117 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 118
WARNING: reduce/reduce conflict in state 118 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 119 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 159 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 159
WARNING: reduce/reduce conflict in state 159 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 159
WARNING: reduce/reduce conflict in state 185 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 185
WARNING: reduce/reduce conflict in state 186 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 186
WARNING: reduce/reduce conflict in state 187 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 187
WARNING: reduce/reduce conflict in state 231 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 231
WARNING: reduce/reduce conflict in state 231 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 231
WARNING: reduce/reduce conflict in state 232 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 232
WARNING: reduce/reduce conflict in state 232 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 232
WARNING: reduce/reduce conflict in state 233 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 233
WARNING: reduce/reduce conflict in state 233 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 233
WARNING: reduce/reduce conflict in state 492 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 492
WARNING: reduce/reduce conflict in state 515 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 515
WARNING: reduce/reduce conflict in state 571 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 571
