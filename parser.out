Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY_PUSH
    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    expression_for -> length_operations
Rule 43    number_values -> INTEGER
Rule 44    number_values -> FLOAT
Rule 45    operator_aritmetic -> PLUS
Rule 46    operator_aritmetic -> MINUS
Rule 47    operator_aritmetic -> MULTIPLY
Rule 48    operator_aritmetic -> DIVIDE
Rule 49    operator_aritmetic -> MODULE
Rule 50    operator_aritmetic -> POW
Rule 51    conditional -> boolean_expression
Rule 52    conditional -> boolean_expression logic_operator boolean_expression
Rule 53    logic_operator -> LOGIC_AND
Rule 54    logic_operator -> LOGIC_OR
Rule 55    logic_operator -> LOGIC_XOR
Rule 56    boolean_expression -> comparation
Rule 57    boolean_expression -> VARIABLE
Rule 58    boolean_expression -> IDENTIFIER
Rule 59    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 60    boolean_expression -> logic_not_sentence
Rule 61    boolean_expression -> logic_expression
Rule 62    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 63    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 64    true_boolean_types -> TRUE
Rule 65    true_boolean_types -> STRING
Rule 66    true_boolean_types -> INTEGER
Rule 67    true_boolean_types -> FLOAT
Rule 68    true_boolean_types -> VARIABLE
Rule 69    true_boolean_types -> IDENTIFIER
Rule 70    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 71    false_boolean_types -> FALSE
Rule 72    false_boolean_types -> STRING
Rule 73    false_boolean_types -> INTEGER
Rule 74    false_boolean_types -> VARIABLE
Rule 75    false_boolean_types -> IDENTIFIER
Rule 76    false_boolean_types -> FLOAT
Rule 77    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 78    false_boolean_types -> NULL
Rule 79    logic_not_sentence -> LOGIC_NOT conditional
Rule 80    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 81    comparation -> values comparator_operator values
Rule 82    comparation -> values comparator_operator expression
Rule 83    comparation -> expression comparator_operator expression
Rule 84    comparation -> VARIABLE EQUALS_EQUALS values
Rule 85    comparation -> access_array_element EQUALS_EQUALS values
Rule 86    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 87    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 88    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 89    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 90    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 91    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 92    comparator_operator -> EQUALS_EQUALS
Rule 93    comparator_operator -> IDENTICAL
Rule 94    comparator_operator -> NOT_EQUALS
Rule 95    comparator_operator -> NOT_IDENTICAL
Rule 96    comparator_operator -> SMALL_THAN
Rule 97    comparator_operator -> GREATER_THAN
Rule 98    comparator_operator -> SMALL_EQUALS_TO
Rule 99    comparator_operator -> GREATER_EQUALS_TO
Rule 100   comparator_operator -> SPACECRAFT
Rule 101   comparator_operator -> NULL_FUSION
Rule 102   print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 103   print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 104   print_statement -> ECHO printable_values
Rule 105   print_statement -> PRINT printable_values
Rule 106   printable_values -> values
Rule 107   printable_values -> values COMMA printable_values
Rule 108   printable_values -> VARIABLE
Rule 109   printable_values -> VARIABLE COMMA printable_values
Rule 110   printable_values -> STRING STRING_CONCATENATION STRING
Rule 111   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 112   printable_values -> conditional
Rule 113   printable_values -> conditional COMMA printable_values
Rule 114   printable_values -> structure_object_principal
Rule 115   printable_values -> structure_object_principal COMMA printable_values
Rule 116   printable_values -> function_invocation
Rule 117   printable_values -> function_invocation COMMA printable_values
Rule 118   printable_values -> string_special_function
Rule 119   printable_values -> string_special_function COMMA printable_values
Rule 120   printable_values -> array_special_function
Rule 121   printable_values -> array_special_function COMMA printable_values
Rule 122   values -> INTEGER
Rule 123   values -> STRING
Rule 124   values -> FLOAT
Rule 125   values -> boolean
Rule 126   boolean -> TRUE
Rule 127   boolean -> FALSE
Rule 128   expression -> term
Rule 129   expression -> term PLUS expression
Rule 130   expression -> term MINUS expression
Rule 131   term -> factor
Rule 132   term -> factor MULTIPLY term
Rule 133   term -> factor DIVIDE term
Rule 134   term -> factor MODULE term
Rule 135   term -> factor POW term
Rule 136   factor -> INTEGER
Rule 137   factor -> FLOAT
Rule 138   factor -> VARIABLE
Rule 139   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 140   factor -> STRING
Rule 141   assignment -> variable_assignment
Rule 142   assignment -> constant_assignment
Rule 143   variable_assignment -> VARIABLE assignment_operator values
Rule 144   variable_assignment -> VARIABLE assignment_operator IDENTIFIER
Rule 145   variable_assignment -> VARIABLE assignment_operator expression
Rule 146   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 147   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 148   variable_assignment -> VARIABLE assignment_operator array_special_function
Rule 149   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 150   variable_assignment -> VARIABLE assignment_operator input
Rule 151   variable_assignment -> VARIABLE assignment_operator special_function
Rule 152   variable_assignment -> VARIABLE assignment_operator conditional
Rule 153   variable_assignment -> VARIABLE INCREASE
Rule 154   variable_assignment -> VARIABLE DECREMENT
Rule 155   variable_assignment -> INCREASE VARIABLE
Rule 156   variable_assignment -> DECREMENT VARIABLE
Rule 157   assignment_operator -> EQUALS
Rule 158   assignment_operator -> PLUS_EQUALS
Rule 159   constant_assignment -> const_syntax
Rule 160   constant_assignment -> define_syntax
Rule 161   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 162   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 163   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 164   function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN
Rule 165   params -> real_params
Rule 166   params -> empty
Rule 167   real_params -> VARIABLE
Rule 168   real_params -> values
Rule 169   real_params -> real_params COMMA VARIABLE
Rule 170   real_params -> real_params COMMA values
Rule 171   empty -> <empty>
Rule 172   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 173   special_function -> arrow_function
Rule 174   special_function -> anonymous_functions
Rule 175   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 176   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
Rule 177   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression
Rule 178   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 179   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 180   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 181   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 182   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 183   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 184   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 185   string_param -> STRING
Rule 186   string_param -> VARIABLE
Rule 187   int_param -> INTEGER
Rule 188   int_param -> VARIABLE
Rule 189   array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 190   array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 191   array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 192   array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 193   count_param -> COMMA COUNT_NORMAL
Rule 194   count_param -> COMMA COUNT_RECURSIVE
Rule 195   count_param -> <empty>
Rule 196   length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 197   length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 198   length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 199   length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 200   types_structure -> structure_array_principal
Rule 201   types_structure -> structure_matrix_principal
Rule 202   types_structure -> structure_object_principal
Rule 203   structure_array_principal -> indexed_array
Rule 204   structure_array_principal -> associative_array
Rule 205   structure_array_principal -> access_array_stucture
Rule 206   structure_array_principal -> access_array_element
Rule 207   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 208   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 209   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 210   structure_array -> key EQUALS GREATER_THAN values
Rule 211   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 212   key -> INTEGER
Rule 213   key -> STRING
Rule 214   values_array_indexed -> values
Rule 215   values_array_indexed -> values COMMA values_array_indexed
Rule 216   values_array_indexed -> object_creation
Rule 217   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 218   values_array_indexed -> indexed_array
Rule 219   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 220   access_array_stucture -> access_array_element SEMICOLON
Rule 221   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 222   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 223   structure_matrix_principal -> matrix_firstform
Rule 224   structure_matrix_principal -> matrix_secondform
Rule 225   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 226   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 227   structure_matrix_principal -> add_element_matrix
Rule 228   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 229   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 230   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 231   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 232   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 233   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 234   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 235   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 236   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 237   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 238   modify_element_matrix -> access_element_matrix EQUALS values
Rule 239   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 240   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 241   structure_object_principal -> object_creation
Rule 242   structure_object_principal -> access_method_object
Rule 243   object_creation -> NEW IDENTIFIER
Rule 244   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 245   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 246   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 247   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 248   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 249   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 250   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 251   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 252   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 253   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 254   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 255   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 256   accessType -> IDENTIFIER
Rule 257   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 258   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 259   interface_body -> interface_body interface_method
Rule 260   interface_body -> <empty>
Rule 261   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 262   class_extends_opt -> EXTENDS IDENTIFIER
Rule 263   class_extends_opt -> <empty>
Rule 264   class_implements_opt -> IMPLEMENTS interface_list
Rule 265   class_implements_opt -> <empty>
Rule 266   interface_list -> IDENTIFIER
Rule 267   interface_list -> interface_list COMMA IDENTIFIER
Rule 268   class_body -> class_body class_member
Rule 269   class_body -> <empty>
Rule 270   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 271   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 272   class_member -> class_attribute
Rule 273   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 274   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 275   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 276   visibility_opt -> PUBLIC
Rule 277   visibility_opt -> PRIVATE
Rule 278   visibility_opt -> PROTECTED
Rule 279   visibility_opt -> <empty>
Rule 280   method_body -> classStatement
Rule 281   method_body -> classStatement return_form
Rule 282   method_body -> return_form
Rule 283   method_body -> classStatement BREAK SEMICOLON
Rule 284   method_body -> classStatement method_body
Rule 285   return_form -> RETURN values SEMICOLON
Rule 286   return_form -> RETURN access_method_object SEMICOLON
Rule 287   return_form -> RETURN SEMICOLON
Rule 288   return_form -> RETURN expression SEMICOLON
Rule 289   return_form -> RETURN string_special_function SEMICOLON
Rule 290   return_form -> RETURN array_special_function SEMICOLON
Rule 291   classStatement -> sentence
Rule 292   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 70 77 207 208 209 228 232 233
ARRAY_POP            : 192
ARRAY_PUSH           : 
BREAK                : 24 27 283
CLASS                : 257
COLON                : 
COMMA                : 107 109 113 115 117 119 121 162 169 170 183 184 184 193 194 211 215 217 219 231 233 267
COMMENT              : 
CONST                : 161
COUNT                : 189 190 191 196 197 198
COUNT_NORMAL         : 193
COUNT_RECURSIVE      : 194
DECREMENT            : 30 32 154 156
DEFINE               : 162
DIVIDE               : 48 133
ECHO                 : 102 104
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 157 161 175 176 177 210 211 238 239 240 247 248 249 252 253 254 273
EQUALS_EQUALS        : 84 85 86 87 88 89 90 91 92
EXTENDS              : 262
FALSE                : 71 127
FEGTS                : 180
FLOAT                : 44 67 76 124 137
FN                   : 175 176 177
FOR                  : 28
FUNCTION             : 172 178 261 270 271
GREATER_EQUALS_TO    : 99
GREATER_THAN         : 97 175 176 177 210 211 245 246 247 248 249 250 251 252 253 254
IDENTICAL            : 93
IDENTIFIER           : 40 41 58 69 75 144 161 163 172 243 244 255 256 257 258 261 262 266 267 270 271
IF                   : 14 15 16
IMPLEMENTS           : 264
INCREASE             : 29 31 153 155
INTEGER              : 33 43 66 73 122 136 187 212 221 234 234 236 237 255
INTERFACE            : 258
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 179 257 258 270 271
LEFT_BRACKET         : 209 221 222 229 230 231 234 234 235 235 236 236 237 237 240 255
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 59 70 77 102 103 139 162 163 164 172 175 176 177 178 180 181 182 183 184 189 190 191 192 196 197 198 199 207 208 228 232 233 244 261 270 271
LOGIC_AND            : 53
LOGIC_NOT            : 79 80
LOGIC_OR             : 54
LOGIC_XOR            : 55
MINUS                : 46 130 245 246 247 248 249 250 251 252 253 254
MODULE               : 49 134
MULTIPLY             : 47 132
NEW                  : 243 244
NOT_EQUALS           : 94
NOT_IDENTICAL        : 95
NULL                 : 78
NULL_FUSION          : 101
PLUS                 : 45 129
PLUS_EQUALS          : 33 158
POW                  : 50 135
PRINT                : 103 105
PRIVATE              : 277
PROTECTED            : 278
PUBLIC               : 276
READLINE             : 181
RETURN               : 22 23 26 285 286 287 288 289 290
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 179 257 258 270 271
RIGHT_BRACKET        : 209 221 222 229 230 231 234 234 235 235 236 236 237 237 240 255
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 59 70 77 102 103 139 162 163 164 172 175 176 177 178 180 181 182 183 184 189 190 191 192 196 197 198 199 207 208 228 232 233 244 261 270 271
SEMICOLON            : 3 4 22 23 24 26 27 28 28 220 225 226 228 229 261 273 274 275 283 285 286 287 288 289 290 292
SMALL_EQUALS_TO      : 98
SMALL_THAN           : 96
SPACECRAFT           : 100
STATIC               : 270
STDIN                : 180
STRING               : 65 72 110 110 111 123 140 162 181 185 213
STRING_CONCATENATION : 110 111
STRLEN               : 182 199
SUBSTR               : 183 184
TRUE                 : 64 126
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 57 68 74 80 84 86 87 88 88 90 91 108 109 111 138 143 144 145 146 147 148 149 150 151 152 153 154 155 156 164 167 169 186 188 191 192 198 221 222 222 234 235 235 235 236 236 237 237 239 240 245 246 247 248 248 249 253 273 274
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 246 247 248 249 251 252 253 254
access_array_element : 41 85 86 87 89 89 206 220 249 250 251 252 253 254 254
access_array_stucture : 205
access_element_matrix : 90 91 225 238 239
access_method_object : 242 286 292
add_element_matrix   : 227
anonymous_functions  : 174
array_special_function : 120 121 148 290
arrow_function       : 173
assignment           : 4
assignment_operator  : 143 144 145 146 147 148 149 150 151 152
associative_array    : 204
body_statement       : 13 14 15 16 17 18 19 20 25 28 179
boolean              : 125
boolean_expression   : 51 52 52
classStatement       : 280 281 283 284
class_attribute      : 272
class_body           : 257 268
class_declaration    : 6
class_extends_opt    : 257 258
class_implements_opt : 257
class_member         : 268
codeblock            : 172 175 178
comparation          : 56
comparator_operator  : 35 81 82 83
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 59 79 112 113 152
const_syntax         : 159
constant_assignment  : 142 275
control_structures   : 8
count_param          : 189 190 191 196 197 198
define_syntax        : 160
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 166
expression           : 82 83 83 129 130 139 145 177 288
expression_for       : 28 35 38 38 39
factor               : 131 132 133 134 135
false_boolean_types  : 62 63
for_statement        : 12
function_declaration : 9
function_invocation  : 116 117 146 245 250
if_statement         : 10
increment_statement  : 28
indexed_array        : 203 218 219 240
input                : 150
int_param            : 183 184 184
interface_body       : 258 259
interface_declaration : 7
interface_list       : 264 267
interface_method     : 259
key                  : 210 211
length_operations    : 42
logic_expression     : 61
logic_not_sentence   : 60
logic_operator       : 52 62 63
matrix_firstform     : 223
matrix_secondform    : 224
method_body          : 270 271 284
modify_element_matrix : 226
number_values        : 34 37
object_creation      : 216 217 241
operator_aritmetic   : 34 38
params               : 163 164 172 175 176 177 178 244 261 270 271
print_statement      : 3 176
printable_values     : 102 103 104 105 107 109 113 115 117 119 121
program              : 1 0
real_params          : 165 169 170
return_form          : 281 282
sentence             : 1 2 21 22 23 24 25 291
special_function     : 151
string_param         : 182 183 184 199
string_special_function : 118 119 147 289
structure_array      : 208 209 211
structure_array_principal : 189 196 200
structure_matrix_first : 228 233
structure_matrix_principal : 190 197 201
structure_matrix_second : 229 231
structure_object_principal : 114 115 202
term                 : 128 129 130 132 133 134 135
true_boolean_types   : 62 63
types_structure      : 5 149
values               : 22 26 70 81 81 82 84 85 106 107 143 161 162 168 170 210 211 214 215 230 231 232 233 238 247 252 273 285
values_array_indexed : 207 215 217 219
variable_assignment  : 141
visibility_opt       : 261 270 271 273 274 275
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (102) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> ECHO . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 11

    (103) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> PRINT . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    LEFT_PAREN      shift and go to state 84
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 85
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 12

    (141) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 141 (assignment -> variable_assignment .)


state 13

    (142) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 142 (assignment -> constant_assignment .)


state 14

    (200) types_structure -> structure_array_principal .

    ECHO            reduce using rule 200 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 200 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 200 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 200 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 200 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 200 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 200 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 200 (types_structure -> structure_array_principal .)
    IF              reduce using rule 200 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 200 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 200 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 200 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 200 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 200 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 200 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 200 (types_structure -> structure_array_principal .)
    $end            reduce using rule 200 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 200 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 200 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 200 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 200 (types_structure -> structure_array_principal .)


state 15

    (201) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 201 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 201 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 201 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 201 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 201 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 201 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 201 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 201 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 201 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 201 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 201 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 201 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 201 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 201 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 201 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 201 (types_structure -> structure_matrix_principal .)


state 16

    (202) types_structure -> structure_object_principal .

    ECHO            reduce using rule 202 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 202 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 202 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 202 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 202 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 202 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 202 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 202 (types_structure -> structure_object_principal .)
    IF              reduce using rule 202 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 202 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 202 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 202 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 202 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 202 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 202 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 202 (types_structure -> structure_object_principal .)
    $end            reduce using rule 202 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 202 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 202 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 202 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 202 (types_structure -> structure_object_principal .)


state 17

    (257) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 86


state 18

    (258) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 87


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (172) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 88


state 23

    (143) variable_assignment -> VARIABLE . assignment_operator values
    (144) variable_assignment -> VARIABLE . assignment_operator IDENTIFIER
    (145) variable_assignment -> VARIABLE . assignment_operator expression
    (146) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (147) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (148) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (149) variable_assignment -> VARIABLE . assignment_operator types_structure
    (150) variable_assignment -> VARIABLE . assignment_operator input
    (151) variable_assignment -> VARIABLE . assignment_operator special_function
    (152) variable_assignment -> VARIABLE . assignment_operator conditional
    (153) variable_assignment -> VARIABLE . INCREASE
    (154) variable_assignment -> VARIABLE . DECREMENT
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (157) assignment_operator -> . EQUALS
    (158) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 24

    (155) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 96


state 25

    (156) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 97


state 26

    (159) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 159 (constant_assignment -> const_syntax .)


state 27

    (160) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 160 (constant_assignment -> define_syntax .)


state 28

    (203) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 203 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 203 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 203 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 203 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 203 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 203 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 203 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 203 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 203 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 203 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 203 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 203 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 203 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 203 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 203 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 203 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 203 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 203 (structure_array_principal -> indexed_array .)
    COMMA           reduce using rule 203 (structure_array_principal -> indexed_array .)
    RIGHT_PAREN     reduce using rule 203 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 203 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 203 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 203 (structure_array_principal -> indexed_array .)


state 29

    (204) structure_array_principal -> associative_array .

    ECHO            reduce using rule 204 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 204 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 204 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 204 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 204 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 204 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 204 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 204 (structure_array_principal -> associative_array .)
    IF              reduce using rule 204 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 204 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 204 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 204 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 204 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 204 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 204 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 204 (structure_array_principal -> associative_array .)
    $end            reduce using rule 204 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 204 (structure_array_principal -> associative_array .)
    COMMA           reduce using rule 204 (structure_array_principal -> associative_array .)
    RIGHT_PAREN     reduce using rule 204 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 204 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 204 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 204 (structure_array_principal -> associative_array .)


state 30

    (205) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    COMMA           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    RIGHT_PAREN     reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 205 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 205 (structure_array_principal -> access_array_stucture .)


state 31

    (206) structure_array_principal -> access_array_element .
    (220) access_array_stucture -> access_array_element . SEMICOLON
    (250) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            reduce using rule 206 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 206 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 206 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 206 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 206 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 206 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 206 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 206 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 206 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 206 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 206 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 206 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 206 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 206 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 206 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 206 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 206 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 206 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 206 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 206 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98
    MINUS           shift and go to state 99


state 32

    (223) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    COMMA           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_PAREN     reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 223 (structure_matrix_principal -> matrix_firstform .)


state 33

    (224) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    COMMA           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_PAREN     reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 224 (structure_matrix_principal -> matrix_secondform .)


state 34

    (225) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (238) modify_element_matrix -> access_element_matrix . EQUALS values
    (239) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 100
    EQUALS          shift and go to state 101


state 35

    (226) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 102


state 36

    (227) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    COMMA           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_PAREN     reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 227 (structure_matrix_principal -> add_element_matrix .)


state 37

    (241) structure_object_principal -> object_creation .

    ECHO            reduce using rule 241 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 241 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 241 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 241 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 241 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 241 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 241 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 241 (structure_object_principal -> object_creation .)
    IF              reduce using rule 241 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 241 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 241 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 241 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 241 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 241 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 241 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 241 (structure_object_principal -> object_creation .)
    $end            reduce using rule 241 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 241 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 241 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 241 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 241 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 241 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 241 (structure_object_principal -> object_creation .)


state 38

    (242) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 242 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 242 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 242 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 242 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 242 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 242 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 242 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 242 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 242 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 242 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 242 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 242 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 242 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 242 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 242 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 242 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 242 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 242 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 242 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 242 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 242 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 242 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 242 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 103


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 104


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 105


state 42

    (161) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 106


state 43

    (162) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 107


state 44

    (207) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (228) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 108
    LEFT_BRACKET    shift and go to state 109


state 45

    (229) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (230) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (231) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 111

state 46

    (243) object_creation -> NEW . IDENTIFIER
    (244) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 112


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (102) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (139) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 114
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 51

    (104) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 104 (print_statement -> ECHO printable_values .)


state 52

    (106) printable_values -> values .
    (107) printable_values -> values . COMMA printable_values
    (81) comparation -> values . comparator_operator values
    (82) comparation -> values . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 106 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> values .)
    COMMA           shift and go to state 121
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 53

    (108) printable_values -> VARIABLE .
    (109) printable_values -> VARIABLE . COMMA printable_values
    (111) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (164) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (57) boolean_expression -> VARIABLE .
    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .
    (138) factor -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    LEFT_PAREN      shift and go to state 135
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> VARIABLE .)
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 108 (printable_values -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 108 (printable_values -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 57 (boolean_expression -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]


state 54

    (110) printable_values -> STRING . STRING_CONCATENATION STRING
    (123) values -> STRING .
    (65) true_boolean_types -> STRING .
    (72) false_boolean_types -> STRING .
    (140) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> STRING .)
    STRING_CONCATENATION shift and go to state 138
    COMMA           reduce using rule 123 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 123 (values -> STRING .)
    IDENTICAL       reduce using rule 123 (values -> STRING .)
    NOT_EQUALS      reduce using rule 123 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 123 (values -> STRING .)
    SMALL_THAN      reduce using rule 123 (values -> STRING .)
    GREATER_THAN    reduce using rule 123 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> STRING .)
    SPACECRAFT      reduce using rule 123 (values -> STRING .)
    NULL_FUSION     reduce using rule 123 (values -> STRING .)
    SEMICOLON       reduce using rule 123 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 123 (values -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 140 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 140 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 140 (factor -> STRING .) ]


state 55

    (112) printable_values -> conditional .
    (113) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 112 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> conditional .)
    COMMA           shift and go to state 139


state 56

    (114) printable_values -> structure_object_principal .
    (115) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 114 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 140


state 57

    (116) printable_values -> function_invocation .
    (117) printable_values -> function_invocation . COMMA printable_values

    SEMICOLON       reduce using rule 116 (printable_values -> function_invocation .)
    RIGHT_PAREN     reduce using rule 116 (printable_values -> function_invocation .)
    COMMA           shift and go to state 141


state 58

    (118) printable_values -> string_special_function .
    (119) printable_values -> string_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 118 (printable_values -> string_special_function .)
    RIGHT_PAREN     reduce using rule 118 (printable_values -> string_special_function .)
    COMMA           shift and go to state 142


state 59

    (120) printable_values -> array_special_function .
    (121) printable_values -> array_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 120 (printable_values -> array_special_function .)
    RIGHT_PAREN     reduce using rule 120 (printable_values -> array_special_function .)
    COMMA           shift and go to state 143


state 60

    (122) values -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (73) false_boolean_types -> INTEGER .
    (136) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 122 (values -> INTEGER .)
    COMMA           reduce using rule 122 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 122 (values -> INTEGER .)
    IDENTICAL       reduce using rule 122 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 122 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 122 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 122 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 122 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 122 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 122 (values -> INTEGER .)
    SEMICOLON       reduce using rule 122 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 122 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 136 (factor -> INTEGER .)
    DIVIDE          reduce using rule 136 (factor -> INTEGER .)
    MODULE          reduce using rule 136 (factor -> INTEGER .)
    POW             reduce using rule 136 (factor -> INTEGER .)
    PLUS            reduce using rule 136 (factor -> INTEGER .)
    MINUS           reduce using rule 136 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> INTEGER .) ]


state 61

    (124) values -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (76) false_boolean_types -> FLOAT .
    (137) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> FLOAT .)
    COMMA           reduce using rule 124 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 124 (values -> FLOAT .)
    IDENTICAL       reduce using rule 124 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 124 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 124 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 124 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 124 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 124 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 124 (values -> FLOAT .)
    SEMICOLON       reduce using rule 124 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 124 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 137 (factor -> FLOAT .)
    DIVIDE          reduce using rule 137 (factor -> FLOAT .)
    MODULE          reduce using rule 137 (factor -> FLOAT .)
    POW             reduce using rule 137 (factor -> FLOAT .)
    PLUS            reduce using rule 137 (factor -> FLOAT .)
    MINUS           reduce using rule 137 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> FLOAT .) ]


state 62

    (125) values -> boolean .

    COMMA           reduce using rule 125 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 125 (values -> boolean .)
    IDENTICAL       reduce using rule 125 (values -> boolean .)
    NOT_EQUALS      reduce using rule 125 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 125 (values -> boolean .)
    SMALL_THAN      reduce using rule 125 (values -> boolean .)
    GREATER_THAN    reduce using rule 125 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 125 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 125 (values -> boolean .)
    SPACECRAFT      reduce using rule 125 (values -> boolean .)
    NULL_FUSION     reduce using rule 125 (values -> boolean .)
    SEMICOLON       reduce using rule 125 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 125 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 125 (values -> boolean .)
    LOGIC_AND       reduce using rule 125 (values -> boolean .)
    LOGIC_OR        reduce using rule 125 (values -> boolean .)
    LOGIC_XOR       reduce using rule 125 (values -> boolean .)
    ECHO            reduce using rule 125 (values -> boolean .)
    PRINT           reduce using rule 125 (values -> boolean .)
    CLASS           reduce using rule 125 (values -> boolean .)
    INTERFACE       reduce using rule 125 (values -> boolean .)
    FUNCTION        reduce using rule 125 (values -> boolean .)
    VARIABLE        reduce using rule 125 (values -> boolean .)
    INCREASE        reduce using rule 125 (values -> boolean .)
    DECREMENT       reduce using rule 125 (values -> boolean .)
    IF              reduce using rule 125 (values -> boolean .)
    WHILE           reduce using rule 125 (values -> boolean .)
    FOR             reduce using rule 125 (values -> boolean .)
    CONST           reduce using rule 125 (values -> boolean .)
    DEFINE          reduce using rule 125 (values -> boolean .)
    ARRAY           reduce using rule 125 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 125 (values -> boolean .)
    NEW             reduce using rule 125 (values -> boolean .)
    $end            reduce using rule 125 (values -> boolean .)
    RETURN          reduce using rule 125 (values -> boolean .)
    BREAK           reduce using rule 125 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 125 (values -> boolean .)


state 63

    (51) conditional -> boolean_expression .
    (52) conditional -> boolean_expression . logic_operator boolean_expression
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 51 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

  ! LOGIC_AND       [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 51 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 144

state 64

    (163) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (58) boolean_expression -> IDENTIFIER .
    (69) true_boolean_types -> IDENTIFIER .
    (75) false_boolean_types -> IDENTIFIER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 148
    LOGIC_AND       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    COMMA           reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> IDENTIFIER .)

  ! LOGIC_AND       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]


state 65

    (182) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 149


state 66

    (183) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 150


state 67

    (189) array_special_function -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 151


state 68

    (192) array_special_function -> ARRAY_POP . LEFT_PAREN VARIABLE RIGHT_PAREN

    LEFT_PAREN      shift and go to state 152


state 69

    (126) boolean -> TRUE .
    (64) true_boolean_types -> TRUE .

    COMMA           reduce using rule 126 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 126 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 126 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 126 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 126 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 126 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 126 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 126 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 126 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 126 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 126 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 126 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 126 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)


state 70

    (127) boolean -> FALSE .
    (71) false_boolean_types -> FALSE .

    COMMA           reduce using rule 127 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 127 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 127 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 127 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 127 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 127 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 127 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 127 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 127 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 127 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 127 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 127 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 127 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> FALSE .)


state 71

    (56) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> comparation .)
    COMMA           reduce using rule 56 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> comparation .)


state 72

    (60) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 60 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 60 (boolean_expression -> logic_not_sentence .)


state 73

    (61) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 61 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 61 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 61 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 61 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 61 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 61 (boolean_expression -> logic_expression .)


state 74

    (250) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (85) comparation -> access_array_element . EQUALS_EQUALS values
    (86) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (89) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 99
    EQUALS_EQUALS   shift and go to state 153


state 75

    (83) comparation -> expression . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 76

    (90) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 155


state 77

    (79) logic_not_sentence -> LOGIC_NOT . conditional
    (80) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 157
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 161
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    conditional                    shift and go to state 156
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 159
    expression                     shift and go to state 75
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 78

    (62) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

    logic_operator                 shift and go to state 164

state 79

    (63) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 145
    LOGIC_OR        shift and go to state 146
    LOGIC_XOR       shift and go to state 147

    logic_operator                 shift and go to state 165

state 80

    (128) expression -> term .
    (129) expression -> term . PLUS expression
    (130) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 128 (expression -> term .)
    IDENTICAL       reduce using rule 128 (expression -> term .)
    NOT_EQUALS      reduce using rule 128 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 128 (expression -> term .)
    SMALL_THAN      reduce using rule 128 (expression -> term .)
    GREATER_THAN    reduce using rule 128 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 128 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 128 (expression -> term .)
    SPACECRAFT      reduce using rule 128 (expression -> term .)
    NULL_FUSION     reduce using rule 128 (expression -> term .)
    RIGHT_PAREN     reduce using rule 128 (expression -> term .)
    SEMICOLON       reduce using rule 128 (expression -> term .)
    LOGIC_AND       reduce using rule 128 (expression -> term .)
    LOGIC_OR        reduce using rule 128 (expression -> term .)
    LOGIC_XOR       reduce using rule 128 (expression -> term .)
    COMMA           reduce using rule 128 (expression -> term .)
    PLUS            shift and go to state 166
    MINUS           shift and go to state 167


state 81

    (70) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (77) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 168


state 82

    (78) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 78 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 78 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 78 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 78 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 78 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 78 (false_boolean_types -> NULL .)


state 83

    (131) term -> factor .
    (132) term -> factor . MULTIPLY term
    (133) term -> factor . DIVIDE term
    (134) term -> factor . MODULE term
    (135) term -> factor . POW term

    PLUS            reduce using rule 131 (term -> factor .)
    MINUS           reduce using rule 131 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 131 (term -> factor .)
    IDENTICAL       reduce using rule 131 (term -> factor .)
    NOT_EQUALS      reduce using rule 131 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 131 (term -> factor .)
    SMALL_THAN      reduce using rule 131 (term -> factor .)
    GREATER_THAN    reduce using rule 131 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 131 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 131 (term -> factor .)
    SPACECRAFT      reduce using rule 131 (term -> factor .)
    NULL_FUSION     reduce using rule 131 (term -> factor .)
    RIGHT_PAREN     reduce using rule 131 (term -> factor .)
    SEMICOLON       reduce using rule 131 (term -> factor .)
    LOGIC_AND       reduce using rule 131 (term -> factor .)
    LOGIC_OR        reduce using rule 131 (term -> factor .)
    LOGIC_XOR       reduce using rule 131 (term -> factor .)
    COMMA           reduce using rule 131 (term -> factor .)
    MULTIPLY        shift and go to state 169
    DIVIDE          shift and go to state 170
    MODULE          shift and go to state 171
    POW             shift and go to state 172


state 84

    (103) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (139) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 117
    STRING          shift and go to state 118
    INTEGER         shift and go to state 119
    FLOAT           shift and go to state 120
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    LEFT_PAREN      shift and go to state 113
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 173
    conditional                    shift and go to state 115
    expression                     shift and go to state 116
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    boolean                        shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    access_array_element           shift and go to state 74
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 85

    (105) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 105 (print_statement -> PRINT printable_values .)


state 86

    (257) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (262) class_extends_opt -> . EXTENDS IDENTIFIER
    (263) class_extends_opt -> .

    EXTENDS         shift and go to state 175
    IMPLEMENTS      reduce using rule 263 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 263 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 174

state 87

    (258) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (262) class_extends_opt -> . EXTENDS IDENTIFIER
    (263) class_extends_opt -> .

    EXTENDS         shift and go to state 175
    LEFT_BRACE      reduce using rule 263 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 176

state 88

    (172) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 177


state 89

    (143) variable_assignment -> VARIABLE assignment_operator . values
    (144) variable_assignment -> VARIABLE assignment_operator . IDENTIFIER
    (145) variable_assignment -> VARIABLE assignment_operator . expression
    (146) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (147) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (148) variable_assignment -> VARIABLE assignment_operator . array_special_function
    (149) variable_assignment -> VARIABLE assignment_operator . types_structure
    (150) variable_assignment -> VARIABLE assignment_operator . input
    (151) variable_assignment -> VARIABLE assignment_operator . special_function
    (152) variable_assignment -> VARIABLE assignment_operator . conditional
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (180) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (181) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (173) special_function -> . arrow_function
    (174) special_function -> . anonymous_functions
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (175) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (176) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (177) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression
    (178) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL

    IDENTIFIER      shift and go to state 180
    INTEGER         shift and go to state 119
    STRING          shift and go to state 189
    FLOAT           shift and go to state 120
    VARIABLE        shift and go to state 178
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    FEGTS           shift and go to state 190
    READLINE        shift and go to state 191
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    FN              shift and go to state 196
    FUNCTION        shift and go to state 197
    LEFT_PAREN      shift and go to state 113
    ARRAY           shift and go to state 198
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    NULL            shift and go to state 82

    values                         shift and go to state 179
    expression                     shift and go to state 181
    function_invocation            shift and go to state 182
    string_special_function        shift and go to state 183
    array_special_function         shift and go to state 184
    types_structure                shift and go to state 185
    input                          shift and go to state 186
    special_function               shift and go to state 187
    conditional                    shift and go to state 188
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 192
    anonymous_functions            shift and go to state 193
    boolean_expression             shift and go to state 63
    factor                         shift and go to state 83
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 194
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 195
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79

state 90

    (153) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 153 (variable_assignment -> VARIABLE INCREASE .)


state 91

    (154) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 154 (variable_assignment -> VARIABLE DECREMENT .)


state 92

    (221) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 199
    RIGHT_BRACKET   shift and go to state 201


state 93

    (157) assignment_operator -> EQUALS .

    IDENTIFIER      reduce using rule 157 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 157 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 157 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 157 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 157 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 157 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 157 (assignment_operator -> EQUALS .)
    COUNT           reduce using rule 157 (assignment_operator -> EQUALS .)
    ARRAY_POP       reduce using rule 157 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 157 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 157 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 157 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 157 (assignment_operator -> EQUALS .)
    FN              reduce using rule 157 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 157 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 157 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 157 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 157 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 157 (assignment_operator -> EQUALS .)
    LOGIC_NOT       reduce using rule 157 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 157 (assignment_operator -> EQUALS .)


state 94

    (245) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (247) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 202


state 95

    (158) assignment_operator -> PLUS_EQUALS .

    IDENTIFIER      reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    INTEGER         reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    COUNT           reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    ARRAY_POP       reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    LOGIC_NOT       reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 158 (assignment_operator -> PLUS_EQUALS .)


state 96

    (155) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 155 (variable_assignment -> INCREASE VARIABLE .)


state 97

    (156) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 156 (variable_assignment -> DECREMENT VARIABLE .)


state 98

    (220) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    COMMA           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_PAREN     reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 220 (access_array_stucture -> access_array_element SEMICOLON .)


state 99

    (250) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (252) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 203


state 100

    (225) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    COMMA           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 225 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 101

    (238) modify_element_matrix -> access_element_matrix EQUALS . values
    (239) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 205
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 204
    boolean                        shift and go to state 62

state 102

    (226) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    COMMA           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 226 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 103

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 212
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 161
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    conditional                    shift and go to state 211
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 159
    expression                     shift and go to state 75
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 104

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 212
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 161
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    conditional                    shift and go to state 213
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 159
    expression                     shift and go to state 75
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 105

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 214


state 106

    (161) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 215


state 107

    (162) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 216


state 108

    (207) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (208) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (228) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (210) structure_array -> . key EQUALS GREATER_THAN values
    (211) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (232) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (212) key -> . INTEGER
    (213) key -> . STRING
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    ARRAY           shift and go to state 217
    INTEGER         shift and go to state 225
    STRING          shift and go to state 226
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values_array_indexed           shift and go to state 218
    structure_array                shift and go to state 219
    structure_matrix_first         shift and go to state 220
    values                         shift and go to state 221
    object_creation                shift and go to state 222
    indexed_array                  shift and go to state 223
    key                            shift and go to state 224
    boolean                        shift and go to state 62

state 109

    (209) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (210) structure_array -> . key EQUALS GREATER_THAN values
    (211) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (212) key -> . INTEGER
    (213) key -> . STRING

    INTEGER         shift and go to state 228
    STRING          shift and go to state 229

    structure_array                shift and go to state 227
    key                            shift and go to state 224

state 110

    (230) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (231) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 230
    boolean                        shift and go to state 62

state 111

    (229) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 231


state 112

    (243) object_creation -> NEW IDENTIFIER .
    (244) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 243 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 232


state 113

    (59) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (139) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 234
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 235
    FLOAT           shift and go to state 236
    STRING          shift and go to state 237
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    conditional                    shift and go to state 233
    expression                     shift and go to state 116
    boolean_expression             shift and go to state 63
    term                           shift and go to state 80
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    factor                         shift and go to state 83
    values                         shift and go to state 159
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62

state 114

    (102) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 238


state 115

    (59) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (112) printable_values -> conditional .
    (113) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 239
    COMMA           shift and go to state 139

  ! RIGHT_PAREN     [ reduce using rule 112 (printable_values -> conditional .) ]


state 116

    (139) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (83) comparation -> expression . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 240
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 117

    (108) printable_values -> VARIABLE .
    (109) printable_values -> VARIABLE . COMMA printable_values
    (111) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (164) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (57) boolean_expression -> VARIABLE .
    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (138) factor -> VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
    COMMA           shift and go to state 133
    STRING_CONCATENATION shift and go to state 134
    LEFT_PAREN      shift and go to state 135
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> VARIABLE .)
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 137

  ! RIGHT_PAREN     [ reduce using rule 108 (printable_values -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 57 (boolean_expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]


state 118

    (110) printable_values -> STRING . STRING_CONCATENATION STRING
    (123) values -> STRING .
    (140) factor -> STRING .
    (65) true_boolean_types -> STRING .
    (72) false_boolean_types -> STRING .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 138
    COMMA           reduce using rule 123 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 123 (values -> STRING .)
    IDENTICAL       reduce using rule 123 (values -> STRING .)
    NOT_EQUALS      reduce using rule 123 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 123 (values -> STRING .)
    SMALL_THAN      reduce using rule 123 (values -> STRING .)
    GREATER_THAN    reduce using rule 123 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> STRING .)
    SPACECRAFT      reduce using rule 123 (values -> STRING .)
    NULL_FUSION     reduce using rule 123 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 123 (values -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)

  ! RIGHT_PAREN     [ reduce using rule 140 (factor -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 140 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 140 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 140 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> STRING .) ]


state 119

    (122) values -> INTEGER .
    (136) factor -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (73) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 122 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 122 (values -> INTEGER .)
    IDENTICAL       reduce using rule 122 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 122 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 122 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 122 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 122 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 122 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 122 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 122 (values -> INTEGER .)
    SEMICOLON       reduce using rule 122 (values -> INTEGER .)
    MULTIPLY        reduce using rule 136 (factor -> INTEGER .)
    DIVIDE          reduce using rule 136 (factor -> INTEGER .)
    MODULE          reduce using rule 136 (factor -> INTEGER .)
    POW             reduce using rule 136 (factor -> INTEGER .)
    PLUS            reduce using rule 136 (factor -> INTEGER .)
    MINUS           reduce using rule 136 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 136 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]


state 120

    (124) values -> FLOAT .
    (137) factor -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (76) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 124 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 124 (values -> FLOAT .)
    IDENTICAL       reduce using rule 124 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 124 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 124 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 124 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 124 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 124 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 124 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 124 (values -> FLOAT .)
    SEMICOLON       reduce using rule 124 (values -> FLOAT .)
    MULTIPLY        reduce using rule 137 (factor -> FLOAT .)
    DIVIDE          reduce using rule 137 (factor -> FLOAT .)
    MODULE          reduce using rule 137 (factor -> FLOAT .)
    POW             reduce using rule 137 (factor -> FLOAT .)
    PLUS            reduce using rule 137 (factor -> FLOAT .)
    MINUS           reduce using rule 137 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)

  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]


state 121

    (107) printable_values -> values COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    values                         shift and go to state 52
    printable_values               shift and go to state 241
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 122

    (81) comparation -> values comparator_operator . values
    (82) comparation -> values comparator_operator . expression
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 244
    STRING          shift and go to state 245
    FLOAT           shift and go to state 246
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248

    values                         shift and go to state 242
    expression                     shift and go to state 243
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 123

    (92) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    COUNT           reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)
    STRLEN          reduce using rule 92 (comparator_operator -> EQUALS_EQUALS .)


state 124

    (93) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 93 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 93 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 93 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 93 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 93 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 93 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> IDENTICAL .)
    COUNT           reduce using rule 93 (comparator_operator -> IDENTICAL .)
    STRLEN          reduce using rule 93 (comparator_operator -> IDENTICAL .)


state 125

    (94) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    COUNT           reduce using rule 94 (comparator_operator -> NOT_EQUALS .)
    STRLEN          reduce using rule 94 (comparator_operator -> NOT_EQUALS .)


state 126

    (95) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    COUNT           reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)
    STRLEN          reduce using rule 95 (comparator_operator -> NOT_IDENTICAL .)


state 127

    (96) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    COUNT           reduce using rule 96 (comparator_operator -> SMALL_THAN .)
    STRLEN          reduce using rule 96 (comparator_operator -> SMALL_THAN .)


state 128

    (97) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    COUNT           reduce using rule 97 (comparator_operator -> GREATER_THAN .)
    STRLEN          reduce using rule 97 (comparator_operator -> GREATER_THAN .)


state 129

    (98) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    COUNT           reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)
    STRLEN          reduce using rule 98 (comparator_operator -> SMALL_EQUALS_TO .)


state 130

    (99) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    COUNT           reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)
    STRLEN          reduce using rule 99 (comparator_operator -> GREATER_EQUALS_TO .)


state 131

    (100) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    COUNT           reduce using rule 100 (comparator_operator -> SPACECRAFT .)
    STRLEN          reduce using rule 100 (comparator_operator -> SPACECRAFT .)


state 132

    (101) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    COUNT           reduce using rule 101 (comparator_operator -> NULL_FUSION .)
    STRLEN          reduce using rule 101 (comparator_operator -> NULL_FUSION .)


state 133

    (109) printable_values -> VARIABLE COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    printable_values               shift and go to state 249
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 134

    (111) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 250


state 135

    (164) function_invocation -> VARIABLE LEFT_PAREN . params RIGHT_PAREN
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 252
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 136

    (84) comparation -> VARIABLE EQUALS_EQUALS . values
    (87) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (88) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (91) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 256
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 257
    access_array_element           shift and go to state 258
    access_element_matrix          shift and go to state 259
    boolean                        shift and go to state 62

state 137

    (221) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 199


state 138

    (110) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 260


state 139

    (113) printable_values -> conditional COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    conditional                    shift and go to state 55
    printable_values               shift and go to state 261
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 140

    (115) printable_values -> structure_object_principal COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 262
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 141

    (117) printable_values -> function_invocation COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    function_invocation            shift and go to state 57
    printable_values               shift and go to state 263
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    string_special_function        shift and go to state 58
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 142

    (119) printable_values -> string_special_function COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    string_special_function        shift and go to state 58
    printable_values               shift and go to state 264
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    array_special_function         shift and go to state 59
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 143

    (121) printable_values -> array_special_function COMMA . printable_values
    (106) printable_values -> . values
    (107) printable_values -> . values COMMA printable_values
    (108) printable_values -> . VARIABLE
    (109) printable_values -> . VARIABLE COMMA printable_values
    (110) printable_values -> . STRING STRING_CONCATENATION STRING
    (111) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (112) printable_values -> . conditional
    (113) printable_values -> . conditional COMMA printable_values
    (114) printable_values -> . structure_object_principal
    (115) printable_values -> . structure_object_principal COMMA printable_values
    (116) printable_values -> . function_invocation
    (117) printable_values -> . function_invocation COMMA printable_values
    (118) printable_values -> . string_special_function
    (119) printable_values -> . string_special_function COMMA printable_values
    (120) printable_values -> . array_special_function
    (121) printable_values -> . array_special_function COMMA printable_values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 60
    FLOAT           shift and go to state 61
    IDENTIFIER      shift and go to state 64
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70
    LEFT_PAREN      shift and go to state 113
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 77
    ARRAY           shift and go to state 81
    NULL            shift and go to state 82

    array_special_function         shift and go to state 59
    printable_values               shift and go to state 265
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 62
    boolean_expression             shift and go to state 63
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    access_array_element           shift and go to state 74
    expression                     shift and go to state 75
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 144

    (52) conditional -> boolean_expression logic_operator . boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 212
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 161
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    boolean_expression             shift and go to state 266
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 159
    expression                     shift and go to state 75
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 145

    (53) logic_operator -> LOGIC_AND .

    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 53 (logic_operator -> LOGIC_AND .)
    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_AND .)


state 146

    (54) logic_operator -> LOGIC_OR .

    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 54 (logic_operator -> LOGIC_OR .)
    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_OR .)


state 147

    (55) logic_operator -> LOGIC_XOR .

    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    IDENTIFIER      reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 55 (logic_operator -> LOGIC_XOR .)


state 148

    (163) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 267
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 149

    (182) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (185) string_param -> . STRING
    (186) string_param -> . VARIABLE

    STRING          shift and go to state 269
    VARIABLE        shift and go to state 270

    string_param                   shift and go to state 268

state 150

    (183) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (185) string_param -> . STRING
    (186) string_param -> . VARIABLE

    STRING          shift and go to state 269
    VARIABLE        shift and go to state 270

    string_param                   shift and go to state 271

state 151

    (189) array_special_function -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 274
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 272
    structure_matrix_principal     shift and go to state 273
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 275
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 152

    (192) array_special_function -> ARRAY_POP LEFT_PAREN . VARIABLE RIGHT_PAREN

    VARIABLE        shift and go to state 276


state 153

    (85) comparation -> access_array_element EQUALS_EQUALS . values
    (86) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (89) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 279
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    access_array_element           shift and go to state 277
    values                         shift and go to state 278
    boolean                        shift and go to state 62

state 154

    (83) comparation -> expression comparator_operator . expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    expression                     shift and go to state 280
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 155

    (90) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 284


state 156

    (79) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 79 (logic_not_sentence -> LOGIC_NOT conditional .)


state 157

    (80) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (57) boolean_expression -> VARIABLE .
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .
    (138) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    COMMA           reduce using rule 57 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    MINUS           reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! COMMA           [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 80 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]


state 158

    (58) boolean_expression -> IDENTIFIER .
    (69) true_boolean_types -> IDENTIFIER .
    (75) false_boolean_types -> IDENTIFIER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    COMMA           reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> IDENTIFIER .)

  ! LOGIC_AND       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]


state 159

    (81) comparation -> values . comparator_operator values
    (82) comparation -> values . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 160

    (85) comparation -> access_array_element . EQUALS_EQUALS values
    (86) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (89) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 153


state 161

    (123) values -> STRING .
    (65) true_boolean_types -> STRING .
    (72) false_boolean_types -> STRING .
    (140) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 123 (values -> STRING .)
    IDENTICAL       reduce using rule 123 (values -> STRING .)
    NOT_EQUALS      reduce using rule 123 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 123 (values -> STRING .)
    SMALL_THAN      reduce using rule 123 (values -> STRING .)
    GREATER_THAN    reduce using rule 123 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> STRING .)
    SPACECRAFT      reduce using rule 123 (values -> STRING .)
    NULL_FUSION     reduce using rule 123 (values -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 140 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 140 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 140 (factor -> STRING .) ]


state 162

    (64) true_boolean_types -> TRUE .
    (126) boolean -> TRUE .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 126 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 126 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 126 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 126 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 126 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 126 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 126 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 126 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 126 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 126 (boolean -> TRUE .)


state 163

    (71) false_boolean_types -> FALSE .
    (127) boolean -> FALSE .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 127 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 127 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 127 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 127 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 127 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 127 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 127 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 127 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 127 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 127 (boolean -> FALSE .)


state 164

    (62) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL

    FALSE           shift and go to state 286
    STRING          shift and go to state 287
    INTEGER         shift and go to state 288
    VARIABLE        shift and go to state 289
    IDENTIFIER      shift and go to state 290
    FLOAT           shift and go to state 291
    ARRAY           shift and go to state 292
    NULL            shift and go to state 82

    false_boolean_types            shift and go to state 285

state 165

    (63) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 294
    STRING          shift and go to state 295
    INTEGER         shift and go to state 296
    FLOAT           shift and go to state 297
    VARIABLE        shift and go to state 298
    IDENTIFIER      shift and go to state 299
    ARRAY           shift and go to state 300

    true_boolean_types             shift and go to state 293

state 166

    (129) expression -> term PLUS . expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    term                           shift and go to state 80
    expression                     shift and go to state 301
    factor                         shift and go to state 83

state 167

    (130) expression -> term MINUS . expression
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    term                           shift and go to state 80
    expression                     shift and go to state 302
    factor                         shift and go to state 83

state 168

    (70) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (77) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 304
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 303
    boolean                        shift and go to state 62

state 169

    (132) term -> factor MULTIPLY . term
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    factor                         shift and go to state 83
    term                           shift and go to state 305

state 170

    (133) term -> factor DIVIDE . term
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    factor                         shift and go to state 83
    term                           shift and go to state 306

state 171

    (134) term -> factor MODULE . term
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    factor                         shift and go to state 83
    term                           shift and go to state 307

state 172

    (135) term -> factor POW . term
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    factor                         shift and go to state 83
    term                           shift and go to state 308

state 173

    (103) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 309


state 174

    (257) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (264) class_implements_opt -> . IMPLEMENTS interface_list
    (265) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 311
    LEFT_BRACE      reduce using rule 265 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 310

state 175

    (262) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 312


state 176

    (258) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 313


state 177

    (172) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 314
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 178

    (164) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (57) boolean_expression -> VARIABLE .
    (138) factor -> VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
    LEFT_PAREN      shift and go to state 135
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> VARIABLE .)
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 92
    MINUS           shift and go to state 94
    EQUALS_EQUALS   shift and go to state 136

  ! MINUS           [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]


state 179

    (143) variable_assignment -> VARIABLE assignment_operator values .
    (81) comparation -> values . comparator_operator values
    (82) comparation -> values . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 143 (variable_assignment -> VARIABLE assignment_operator values .)
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 122

state 180

    (144) variable_assignment -> VARIABLE assignment_operator IDENTIFIER .
    (163) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (58) boolean_expression -> IDENTIFIER .
    (69) true_boolean_types -> IDENTIFIER .
    (75) false_boolean_types -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 58 (boolean_expression -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 148
    LOGIC_AND       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 144 (variable_assignment -> VARIABLE assignment_operator IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> IDENTIFIER .) ]


state 181

    (145) variable_assignment -> VARIABLE assignment_operator expression .
    (83) comparation -> expression . comparator_operator expression
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 145 (variable_assignment -> VARIABLE assignment_operator expression .)
    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 154

state 182

    (146) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 146 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 183

    (147) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 147 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 184

    (148) variable_assignment -> VARIABLE assignment_operator array_special_function .

    SEMICOLON       reduce using rule 148 (variable_assignment -> VARIABLE assignment_operator array_special_function .)


state 185

    (149) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 149 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 186

    (150) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 150 (variable_assignment -> VARIABLE assignment_operator input .)


state 187

    (151) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 151 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 188

    (152) variable_assignment -> VARIABLE assignment_operator conditional .

    SEMICOLON       reduce using rule 152 (variable_assignment -> VARIABLE assignment_operator conditional .)


state 189

    (123) values -> STRING .
    (140) factor -> STRING .
    (65) true_boolean_types -> STRING .
    (72) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
    EQUALS_EQUALS   reduce using rule 123 (values -> STRING .)
    IDENTICAL       reduce using rule 123 (values -> STRING .)
    NOT_EQUALS      reduce using rule 123 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 123 (values -> STRING .)
    SMALL_THAN      reduce using rule 123 (values -> STRING .)
    GREATER_THAN    reduce using rule 123 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> STRING .)
    SPACECRAFT      reduce using rule 123 (values -> STRING .)
    NULL_FUSION     reduce using rule 123 (values -> STRING .)
    SEMICOLON       reduce using rule 123 (values -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 140 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 140 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 140 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 140 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> STRING .) ]


state 190

    (180) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 315


state 191

    (181) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 316


state 192

    (173) special_function -> arrow_function .

    SEMICOLON       reduce using rule 173 (special_function -> arrow_function .)


state 193

    (174) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 174 (special_function -> anonymous_functions .)


state 194

    (206) structure_array_principal -> access_array_element .
    (220) access_array_stucture -> access_array_element . SEMICOLON
    (250) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (85) comparation -> access_array_element . EQUALS_EQUALS values
    (86) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (89) comparation -> access_array_element . EQUALS_EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 98
    MINUS           shift and go to state 99
    EQUALS_EQUALS   shift and go to state 153

  ! SEMICOLON       [ reduce using rule 206 (structure_array_principal -> access_array_element .) ]


state 195

    (225) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (238) modify_element_matrix -> access_element_matrix . EQUALS values
    (239) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE
    (90) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    SEMICOLON       shift and go to state 100
    EQUALS          shift and go to state 101
    EQUALS_EQUALS   shift and go to state 155


state 196

    (175) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (176) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (177) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression

    LEFT_PAREN      shift and go to state 317


state 197

    (178) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 318


state 198

    (207) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (228) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (70) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (77) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 319
    LEFT_BRACKET    shift and go to state 109


state 199

    (222) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 320


state 200

    (221) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 321


state 201

    (240) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 322


state 202

    (245) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (246) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (247) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (248) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (255) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (256) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 326
    VARIABLE        shift and go to state 323

    function_invocation            shift and go to state 324
    accessType                     shift and go to state 325

state 203

    (250) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (251) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (252) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (253) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (163) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (164) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (255) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (256) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 326
    VARIABLE        shift and go to state 323

    function_invocation            shift and go to state 327
    accessType                     shift and go to state 328

state 204

    (238) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 238 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 205

    (239) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 239 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 206

    (122) values -> INTEGER .

    SEMICOLON       reduce using rule 122 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 122 (values -> INTEGER .)
    COMMA           reduce using rule 122 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 122 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 122 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 122 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 122 (values -> INTEGER .)
    ECHO            reduce using rule 122 (values -> INTEGER .)
    PRINT           reduce using rule 122 (values -> INTEGER .)
    CLASS           reduce using rule 122 (values -> INTEGER .)
    INTERFACE       reduce using rule 122 (values -> INTEGER .)
    FUNCTION        reduce using rule 122 (values -> INTEGER .)
    VARIABLE        reduce using rule 122 (values -> INTEGER .)
    INCREASE        reduce using rule 122 (values -> INTEGER .)
    DECREMENT       reduce using rule 122 (values -> INTEGER .)
    IF              reduce using rule 122 (values -> INTEGER .)
    WHILE           reduce using rule 122 (values -> INTEGER .)
    FOR             reduce using rule 122 (values -> INTEGER .)
    CONST           reduce using rule 122 (values -> INTEGER .)
    DEFINE          reduce using rule 122 (values -> INTEGER .)
    ARRAY           reduce using rule 122 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 122 (values -> INTEGER .)
    NEW             reduce using rule 122 (values -> INTEGER .)
    $end            reduce using rule 122 (values -> INTEGER .)
    RETURN          reduce using rule 122 (values -> INTEGER .)
    BREAK           reduce using rule 122 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 122 (values -> INTEGER .)


state 207

    (123) values -> STRING .

    SEMICOLON       reduce using rule 123 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 123 (values -> STRING .)
    COMMA           reduce using rule 123 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 123 (values -> STRING .)
    LOGIC_AND       reduce using rule 123 (values -> STRING .)
    LOGIC_OR        reduce using rule 123 (values -> STRING .)
    LOGIC_XOR       reduce using rule 123 (values -> STRING .)
    ECHO            reduce using rule 123 (values -> STRING .)
    PRINT           reduce using rule 123 (values -> STRING .)
    CLASS           reduce using rule 123 (values -> STRING .)
    INTERFACE       reduce using rule 123 (values -> STRING .)
    FUNCTION        reduce using rule 123 (values -> STRING .)
    VARIABLE        reduce using rule 123 (values -> STRING .)
    INCREASE        reduce using rule 123 (values -> STRING .)
    DECREMENT       reduce using rule 123 (values -> STRING .)
    IF              reduce using rule 123 (values -> STRING .)
    WHILE           reduce using rule 123 (values -> STRING .)
    FOR             reduce using rule 123 (values -> STRING .)
    CONST           reduce using rule 123 (values -> STRING .)
    DEFINE          reduce using rule 123 (values -> STRING .)
    ARRAY           reduce using rule 123 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 123 (values -> STRING .)
    NEW             reduce using rule 123 (values -> STRING .)
    $end            reduce using rule 123 (values -> STRING .)
    RETURN          reduce using rule 123 (values -> STRING .)
    BREAK           reduce using rule 123 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 123 (values -> STRING .)


state 208

    (124) values -> FLOAT .

    SEMICOLON       reduce using rule 124 (values -> FLOAT .)
    COMMA           reduce using rule 124 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 124 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 124 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 124 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 124 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 124 (values -> FLOAT .)
    ECHO            reduce using rule 124 (values -> FLOAT .)
    PRINT           reduce using rule 124 (values -> FLOAT .)
    CLASS           reduce using rule 124 (values -> FLOAT .)
    INTERFACE       reduce using rule 124 (values -> FLOAT .)
    FUNCTION        reduce using rule 124 (values -> FLOAT .)
    VARIABLE        reduce using rule 124 (values -> FLOAT .)
    INCREASE        reduce using rule 124 (values -> FLOAT .)
    DECREMENT       reduce using rule 124 (values -> FLOAT .)
    IF              reduce using rule 124 (values -> FLOAT .)
    WHILE           reduce using rule 124 (values -> FLOAT .)
    FOR             reduce using rule 124 (values -> FLOAT .)
    CONST           reduce using rule 124 (values -> FLOAT .)
    DEFINE          reduce using rule 124 (values -> FLOAT .)
    ARRAY           reduce using rule 124 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 124 (values -> FLOAT .)
    NEW             reduce using rule 124 (values -> FLOAT .)
    $end            reduce using rule 124 (values -> FLOAT .)
    RETURN          reduce using rule 124 (values -> FLOAT .)
    BREAK           reduce using rule 124 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 124 (values -> FLOAT .)


state 209

    (126) boolean -> TRUE .

    SEMICOLON       reduce using rule 126 (boolean -> TRUE .)
    COMMA           reduce using rule 126 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 126 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 126 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 126 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 126 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 126 (boolean -> TRUE .)
    ECHO            reduce using rule 126 (boolean -> TRUE .)
    PRINT           reduce using rule 126 (boolean -> TRUE .)
    CLASS           reduce using rule 126 (boolean -> TRUE .)
    INTERFACE       reduce using rule 126 (boolean -> TRUE .)
    FUNCTION        reduce using rule 126 (boolean -> TRUE .)
    VARIABLE        reduce using rule 126 (boolean -> TRUE .)
    INCREASE        reduce using rule 126 (boolean -> TRUE .)
    DECREMENT       reduce using rule 126 (boolean -> TRUE .)
    IF              reduce using rule 126 (boolean -> TRUE .)
    WHILE           reduce using rule 126 (boolean -> TRUE .)
    FOR             reduce using rule 126 (boolean -> TRUE .)
    CONST           reduce using rule 126 (boolean -> TRUE .)
    DEFINE          reduce using rule 126 (boolean -> TRUE .)
    ARRAY           reduce using rule 126 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 126 (boolean -> TRUE .)
    NEW             reduce using rule 126 (boolean -> TRUE .)
    $end            reduce using rule 126 (boolean -> TRUE .)
    RETURN          reduce using rule 126 (boolean -> TRUE .)
    BREAK           reduce using rule 126 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 126 (boolean -> TRUE .)


state 210

    (127) boolean -> FALSE .

    SEMICOLON       reduce using rule 127 (boolean -> FALSE .)
    COMMA           reduce using rule 127 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 127 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 127 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 127 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 127 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 127 (boolean -> FALSE .)
    ECHO            reduce using rule 127 (boolean -> FALSE .)
    PRINT           reduce using rule 127 (boolean -> FALSE .)
    CLASS           reduce using rule 127 (boolean -> FALSE .)
    INTERFACE       reduce using rule 127 (boolean -> FALSE .)
    FUNCTION        reduce using rule 127 (boolean -> FALSE .)
    VARIABLE        reduce using rule 127 (boolean -> FALSE .)
    INCREASE        reduce using rule 127 (boolean -> FALSE .)
    DECREMENT       reduce using rule 127 (boolean -> FALSE .)
    IF              reduce using rule 127 (boolean -> FALSE .)
    WHILE           reduce using rule 127 (boolean -> FALSE .)
    FOR             reduce using rule 127 (boolean -> FALSE .)
    CONST           reduce using rule 127 (boolean -> FALSE .)
    DEFINE          reduce using rule 127 (boolean -> FALSE .)
    ARRAY           reduce using rule 127 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 127 (boolean -> FALSE .)
    NEW             reduce using rule 127 (boolean -> FALSE .)
    $end            reduce using rule 127 (boolean -> FALSE .)
    RETURN          reduce using rule 127 (boolean -> FALSE .)
    BREAK           reduce using rule 127 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 127 (boolean -> FALSE .)


state 211

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 329


state 212

    (57) boolean_expression -> VARIABLE .
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .
    (138) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> VARIABLE .)
    COMMA           reduce using rule 57 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 136
    LEFT_BRACKET    shift and go to state 137
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    MINUS           reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]


state 213

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 330


state 214

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 331


state 215

    (161) const_syntax -> CONST IDENTIFIER EQUALS . values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 332
    boolean                        shift and go to state 62

state 216

    (162) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 333


state 217

    (232) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (207) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 334


state 218

    (207) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 335


state 219

    (208) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 336


state 220

    (228) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 337


state 221

    (214) values_array_indexed -> values .
    (215) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 214 (values_array_indexed -> values .)
    COMMA           shift and go to state 338


state 222

    (216) values_array_indexed -> object_creation .
    (217) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 216 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 339


state 223

    (218) values_array_indexed -> indexed_array .
    (219) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 218 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 340


state 224

    (210) structure_array -> key . EQUALS GREATER_THAN values
    (211) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 341


state 225

    (122) values -> INTEGER .
    (212) key -> INTEGER .

    COMMA           reduce using rule 122 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 122 (values -> INTEGER .)
    EQUALS          reduce using rule 212 (key -> INTEGER .)


state 226

    (123) values -> STRING .
    (213) key -> STRING .

    COMMA           reduce using rule 123 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 123 (values -> STRING .)
    EQUALS          reduce using rule 213 (key -> STRING .)


state 227

    (209) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 342


state 228

    (212) key -> INTEGER .

    EQUALS          reduce using rule 212 (key -> INTEGER .)


state 229

    (213) key -> STRING .

    EQUALS          reduce using rule 213 (key -> STRING .)


state 230

    (230) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (231) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 343


state 231

    (229) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 344


state 232

    (244) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 345
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 233

    (59) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 239


state 234

    (57) boolean_expression -> VARIABLE .
    (84) comparation -> VARIABLE . EQUALS_EQUALS values
    (87) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (88) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (91) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (138) factor -> VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (68) true_boolean_types -> VARIABLE .
    (74) false_boolean_types -> VARIABLE .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_AND       reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 136
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    MINUS           reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 137

  ! RIGHT_PAREN     [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> VARIABLE .) ]


state 235

    (136) factor -> INTEGER .
    (122) values -> INTEGER .
    (66) true_boolean_types -> INTEGER .
    (73) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 66 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 66 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 136 (factor -> INTEGER .)
    DIVIDE          reduce using rule 136 (factor -> INTEGER .)
    MODULE          reduce using rule 136 (factor -> INTEGER .)
    POW             reduce using rule 136 (factor -> INTEGER .)
    PLUS            reduce using rule 136 (factor -> INTEGER .)
    MINUS           reduce using rule 136 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 136 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 122 (values -> INTEGER .)
    IDENTICAL       reduce using rule 122 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 122 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 122 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 122 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 122 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 122 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 122 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 122 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 136 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 136 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 73 (false_boolean_types -> INTEGER .) ]


state 236

    (137) factor -> FLOAT .
    (124) values -> FLOAT .
    (67) true_boolean_types -> FLOAT .
    (76) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 137 (factor -> FLOAT .)
    DIVIDE          reduce using rule 137 (factor -> FLOAT .)
    MODULE          reduce using rule 137 (factor -> FLOAT .)
    POW             reduce using rule 137 (factor -> FLOAT .)
    PLUS            reduce using rule 137 (factor -> FLOAT .)
    MINUS           reduce using rule 137 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 137 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 124 (values -> FLOAT .)
    IDENTICAL       reduce using rule 124 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 124 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 124 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 124 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 124 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 124 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 124 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)

  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> FLOAT .) ]


state 237

    (140) factor -> STRING .
    (123) values -> STRING .
    (65) true_boolean_types -> STRING .
    (72) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 140 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 123 (values -> STRING .)
    IDENTICAL       reduce using rule 123 (values -> STRING .)
    NOT_EQUALS      reduce using rule 123 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 123 (values -> STRING .)
    SMALL_THAN      reduce using rule 123 (values -> STRING .)
    GREATER_THAN    reduce using rule 123 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> STRING .)
    SPACECRAFT      reduce using rule 123 (values -> STRING .)
    NULL_FUSION     reduce using rule 123 (values -> STRING .)
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 140 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 140 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 140 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 140 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 140 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 140 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 72 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 72 (false_boolean_types -> STRING .) ]


state 238

    (102) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 102 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 239

    (59) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 240

    (139) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 139 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 241

    (107) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 107 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> values COMMA printable_values .)


state 242

    (81) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 81 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 81 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 81 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 81 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 81 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> values comparator_operator values .)


state 243

    (82) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 82 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 82 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 82 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 82 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 82 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> values comparator_operator expression .)


state 244

    (122) values -> INTEGER .
    (136) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 122 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 122 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 122 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 122 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 122 (values -> INTEGER .)
    COMMA           reduce using rule 122 (values -> INTEGER .)
    SEMICOLON       reduce using rule 122 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 122 (values -> INTEGER .)
    MULTIPLY        reduce using rule 136 (factor -> INTEGER .)
    DIVIDE          reduce using rule 136 (factor -> INTEGER .)
    MODULE          reduce using rule 136 (factor -> INTEGER .)
    POW             reduce using rule 136 (factor -> INTEGER .)
    PLUS            reduce using rule 136 (factor -> INTEGER .)
    MINUS           reduce using rule 136 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 136 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 136 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 136 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 136 (factor -> INTEGER .) ]


state 245

    (123) values -> STRING .
    (140) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 123 (values -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 123 (values -> STRING .)
    LOGIC_AND       reduce using rule 123 (values -> STRING .)
    LOGIC_OR        reduce using rule 123 (values -> STRING .)
    LOGIC_XOR       reduce using rule 123 (values -> STRING .)
    COMMA           reduce using rule 123 (values -> STRING .)
    SEMICOLON       reduce using rule 123 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 123 (values -> STRING .)
    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 140 (factor -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 140 (factor -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 140 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 140 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 140 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 140 (factor -> STRING .) ]


state 246

    (124) values -> FLOAT .
    (137) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 124 (values -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 124 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 124 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 124 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 124 (values -> FLOAT .)
    COMMA           reduce using rule 124 (values -> FLOAT .)
    SEMICOLON       reduce using rule 124 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 124 (values -> FLOAT .)
    MULTIPLY        reduce using rule 137 (factor -> FLOAT .)
    DIVIDE          reduce using rule 137 (factor -> FLOAT .)
    MODULE          reduce using rule 137 (factor -> FLOAT .)
    POW             reduce using rule 137 (factor -> FLOAT .)
    PLUS            reduce using rule 137 (factor -> FLOAT .)
    MINUS           reduce using rule 137 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 137 (factor -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 137 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> FLOAT .) ]


state 247

    (138) factor -> VARIABLE .

    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    MINUS           reduce using rule 138 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 138 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 138 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 138 (factor -> VARIABLE .)
    COMMA           reduce using rule 138 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 138 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 138 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 138 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 138 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 138 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 138 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 138 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 138 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 138 (factor -> VARIABLE .)


state 248

    (139) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    expression                     shift and go to state 346
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 249

    (109) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 109 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> VARIABLE COMMA printable_values .)


state 250

    (111) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 111 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 251

    (167) real_params -> VARIABLE .

    COMMA           reduce using rule 167 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 167 (real_params -> VARIABLE .)


state 252

    (164) function_invocation -> VARIABLE LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 347


state 253

    (165) params -> real_params .
    (169) real_params -> real_params . COMMA VARIABLE
    (170) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 165 (params -> real_params .)
    COMMA           shift and go to state 348


state 254

    (166) params -> empty .

    RIGHT_PAREN     reduce using rule 166 (params -> empty .)


state 255

    (168) real_params -> values .

    COMMA           reduce using rule 168 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 168 (real_params -> values .)


state 256

    (88) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 137


state 257

    (84) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 258

    (87) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 87 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 259

    (91) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 91 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 260

    (110) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 110 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 261

    (113) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 113 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> conditional COMMA printable_values .)


state 262

    (115) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 115 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 115 (printable_values -> structure_object_principal COMMA printable_values .)


state 263

    (117) printable_values -> function_invocation COMMA printable_values .

    SEMICOLON       reduce using rule 117 (printable_values -> function_invocation COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 117 (printable_values -> function_invocation COMMA printable_values .)


state 264

    (119) printable_values -> string_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 119 (printable_values -> string_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 119 (printable_values -> string_special_function COMMA printable_values .)


state 265

    (121) printable_values -> array_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 121 (printable_values -> array_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 121 (printable_values -> array_special_function COMMA printable_values .)


state 266

    (52) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)


state 267

    (163) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 349


state 268

    (182) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 350


state 269

    (185) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 185 (string_param -> STRING .)
    COMMA           reduce using rule 185 (string_param -> STRING .)


state 270

    (186) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 186 (string_param -> VARIABLE .)
    COMMA           reduce using rule 186 (string_param -> VARIABLE .)


state 271

    (183) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (184) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 351


state 272

    (189) array_special_function -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 352

state 273

    (190) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 354

state 274

    (191) array_special_function -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 355

state 275

    (206) structure_array_principal -> access_array_element .
    (220) access_array_stucture -> access_array_element . SEMICOLON

    COMMA           reduce using rule 206 (structure_array_principal -> access_array_element .)
    RIGHT_PAREN     reduce using rule 206 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 276

    (192) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 356


state 277

    (89) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 89 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 278

    (85) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> access_array_element EQUALS_EQUALS values .)


state 279

    (86) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 86 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 357


state 280

    (83) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 83 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 83 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 83 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 83 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 83 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> expression comparator_operator expression .)


state 281

    (136) factor -> INTEGER .

    MULTIPLY        reduce using rule 136 (factor -> INTEGER .)
    DIVIDE          reduce using rule 136 (factor -> INTEGER .)
    MODULE          reduce using rule 136 (factor -> INTEGER .)
    POW             reduce using rule 136 (factor -> INTEGER .)
    PLUS            reduce using rule 136 (factor -> INTEGER .)
    MINUS           reduce using rule 136 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 136 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 136 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 136 (factor -> INTEGER .)
    COMMA           reduce using rule 136 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 136 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 136 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 136 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 136 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 136 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 136 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 136 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 136 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 136 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 136 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 136 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 136 (factor -> INTEGER .)


state 282

    (137) factor -> FLOAT .

    MULTIPLY        reduce using rule 137 (factor -> FLOAT .)
    DIVIDE          reduce using rule 137 (factor -> FLOAT .)
    MODULE          reduce using rule 137 (factor -> FLOAT .)
    POW             reduce using rule 137 (factor -> FLOAT .)
    PLUS            reduce using rule 137 (factor -> FLOAT .)
    MINUS           reduce using rule 137 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 137 (factor -> FLOAT .)
    LOGIC_OR        reduce using rule 137 (factor -> FLOAT .)
    LOGIC_XOR       reduce using rule 137 (factor -> FLOAT .)
    COMMA           reduce using rule 137 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 137 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 137 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 137 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 137 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 137 (factor -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 137 (factor -> FLOAT .)
    SMALL_THAN      reduce using rule 137 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 137 (factor -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 137 (factor -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 137 (factor -> FLOAT .)
    SPACECRAFT      reduce using rule 137 (factor -> FLOAT .)
    NULL_FUSION     reduce using rule 137 (factor -> FLOAT .)


state 283

    (140) factor -> STRING .

    MULTIPLY        reduce using rule 140 (factor -> STRING .)
    DIVIDE          reduce using rule 140 (factor -> STRING .)
    MODULE          reduce using rule 140 (factor -> STRING .)
    POW             reduce using rule 140 (factor -> STRING .)
    PLUS            reduce using rule 140 (factor -> STRING .)
    MINUS           reduce using rule 140 (factor -> STRING .)
    LOGIC_AND       reduce using rule 140 (factor -> STRING .)
    LOGIC_OR        reduce using rule 140 (factor -> STRING .)
    LOGIC_XOR       reduce using rule 140 (factor -> STRING .)
    COMMA           reduce using rule 140 (factor -> STRING .)
    SEMICOLON       reduce using rule 140 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 140 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 140 (factor -> STRING .)
    IDENTICAL       reduce using rule 140 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 140 (factor -> STRING .)
    NOT_IDENTICAL   reduce using rule 140 (factor -> STRING .)
    SMALL_THAN      reduce using rule 140 (factor -> STRING .)
    GREATER_THAN    reduce using rule 140 (factor -> STRING .)
    SMALL_EQUALS_TO reduce using rule 140 (factor -> STRING .)
    GREATER_EQUALS_TO reduce using rule 140 (factor -> STRING .)
    SPACECRAFT      reduce using rule 140 (factor -> STRING .)
    NULL_FUSION     reduce using rule 140 (factor -> STRING .)


state 284

    (90) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 90 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 285

    (62) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 62 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 286

    (71) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 71 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> FALSE .)


state 287

    (72) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 72 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 72 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 72 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 72 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 72 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 72 (false_boolean_types -> STRING .)


state 288

    (73) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 73 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 73 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 73 (false_boolean_types -> INTEGER .)


state 289

    (74) false_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 74 (false_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 74 (false_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 74 (false_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 74 (false_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 74 (false_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 74 (false_boolean_types -> VARIABLE .)


state 290

    (75) false_boolean_types -> IDENTIFIER .

    LOGIC_AND       reduce using rule 75 (false_boolean_types -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 75 (false_boolean_types -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 75 (false_boolean_types -> IDENTIFIER .)
    COMMA           reduce using rule 75 (false_boolean_types -> IDENTIFIER .)
    SEMICOLON       reduce using rule 75 (false_boolean_types -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 75 (false_boolean_types -> IDENTIFIER .)


state 291

    (76) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 76 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 76 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 76 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 76 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 76 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 76 (false_boolean_types -> FLOAT .)


state 292

    (77) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 358


state 293

    (63) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 63 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 294

    (64) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 64 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> TRUE .)


state 295

    (65) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 65 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> STRING .)


state 296

    (66) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 66 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> INTEGER .)


state 297

    (67) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 67 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 67 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 67 (true_boolean_types -> FLOAT .)


state 298

    (68) true_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 68 (true_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 68 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 68 (true_boolean_types -> VARIABLE .)


state 299

    (69) true_boolean_types -> IDENTIFIER .

    LOGIC_AND       reduce using rule 69 (true_boolean_types -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> IDENTIFIER .)
    COMMA           reduce using rule 69 (true_boolean_types -> IDENTIFIER .)
    SEMICOLON       reduce using rule 69 (true_boolean_types -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 69 (true_boolean_types -> IDENTIFIER .)


state 300

    (70) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 359


state 301

    (129) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 129 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 129 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 129 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 129 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 129 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 129 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 129 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 129 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 129 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 129 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 129 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 129 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 129 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 129 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 129 (expression -> term PLUS expression .)
    COMMA           reduce using rule 129 (expression -> term PLUS expression .)


state 302

    (130) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 130 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 130 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 130 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 130 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 130 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 130 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 130 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 130 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 130 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 130 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 130 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 130 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 130 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 130 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 130 (expression -> term MINUS expression .)
    COMMA           reduce using rule 130 (expression -> term MINUS expression .)


state 303

    (70) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 360


state 304

    (77) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 77 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 305

    (132) term -> factor MULTIPLY term .

    PLUS            reduce using rule 132 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 132 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 132 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 132 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 132 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 132 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 132 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 132 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 132 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 132 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 132 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 132 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 132 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 132 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 132 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 132 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 132 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 132 (term -> factor MULTIPLY term .)


state 306

    (133) term -> factor DIVIDE term .

    PLUS            reduce using rule 133 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 133 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 133 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 133 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 133 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 133 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 133 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 133 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 133 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 133 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 133 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 133 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 133 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 133 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 133 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 133 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 133 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 133 (term -> factor DIVIDE term .)


state 307

    (134) term -> factor MODULE term .

    PLUS            reduce using rule 134 (term -> factor MODULE term .)
    MINUS           reduce using rule 134 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 134 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 134 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 134 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 134 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 134 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 134 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 134 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 134 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 134 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 134 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 134 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 134 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 134 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 134 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 134 (term -> factor MODULE term .)
    COMMA           reduce using rule 134 (term -> factor MODULE term .)


state 308

    (135) term -> factor POW term .

    PLUS            reduce using rule 135 (term -> factor POW term .)
    MINUS           reduce using rule 135 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 135 (term -> factor POW term .)
    IDENTICAL       reduce using rule 135 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 135 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 135 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 135 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 135 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 135 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 135 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 135 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 135 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 135 (term -> factor POW term .)
    SEMICOLON       reduce using rule 135 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 135 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 135 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 135 (term -> factor POW term .)
    COMMA           reduce using rule 135 (term -> factor POW term .)


state 309

    (103) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 103 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 310

    (257) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 361


state 311

    (264) class_implements_opt -> IMPLEMENTS . interface_list
    (266) interface_list -> . IDENTIFIER
    (267) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 363

    interface_list                 shift and go to state 362

state 312

    (262) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 262 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 262 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 313

    (258) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (259) interface_body -> . interface_body interface_method
    (260) interface_body -> .

    RIGHT_BRACE     reduce using rule 260 (interface_body -> .)
    PUBLIC          reduce using rule 260 (interface_body -> .)
    PRIVATE         reduce using rule 260 (interface_body -> .)
    PROTECTED       reduce using rule 260 (interface_body -> .)
    FUNCTION        reduce using rule 260 (interface_body -> .)

    interface_body                 shift and go to state 364

state 314

    (172) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 365


state 315

    (180) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 366


state 316

    (181) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 367


state 317

    (175) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (176) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (177) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN expression
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 368
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 318

    (178) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 369
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 319

    (207) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (208) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (228) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (70) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (77) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (210) structure_array -> . key EQUALS GREATER_THAN values
    (211) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (232) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (212) key -> . INTEGER
    (213) key -> . STRING
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 304
    ARRAY           shift and go to state 217
    INTEGER         shift and go to state 225
    STRING          shift and go to state 226
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values_array_indexed           shift and go to state 218
    structure_array                shift and go to state 219
    structure_matrix_first         shift and go to state 220
    values                         shift and go to state 370
    object_creation                shift and go to state 222
    indexed_array                  shift and go to state 223
    key                            shift and go to state 224
    boolean                        shift and go to state 62

state 320

    (222) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 371

  ! LEFT_BRACKET    [ reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 321

    (221) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (234) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 372

  ! LEFT_BRACKET    [ reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 322

    (240) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 374

    indexed_array                  shift and go to state 373

state 323

    (164) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 135


state 324

    (245) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 245 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 325

    (246) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (247) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 375


state 326

    (163) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (255) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (256) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 148
    LEFT_BRACKET    shift and go to state 376
    EQUALS          reduce using rule 256 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 256 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 256 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 256 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 256 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 256 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 256 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 256 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 256 (accessType -> IDENTIFIER .)
    IF              reduce using rule 256 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 256 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 256 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 256 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 256 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 256 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 256 (accessType -> IDENTIFIER .)
    $end            reduce using rule 256 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 256 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 256 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 256 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 256 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 256 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 256 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 256 (accessType -> IDENTIFIER .) ]


state 327

    (250) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 250 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 328

    (251) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (252) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 377


state 329

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 378


state 330

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 379


state 331

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (196) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (199) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 381
    LEFT_PAREN      shift and go to state 380
    IDENTIFIER      shift and go to state 384
    INTEGER         shift and go to state 386
    FLOAT           shift and go to state 387
    COUNT           shift and go to state 388
    STRLEN          shift and go to state 389

    expression_for                 shift and go to state 382
    number_values                  shift and go to state 383
    length_operations              shift and go to state 385

state 332

    (161) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 161 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 333

    (162) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 390
    boolean                        shift and go to state 62

state 334

    (232) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (207) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210
    NEW             shift and go to state 46
    ARRAY           shift and go to state 374

    values                         shift and go to state 391
    values_array_indexed           shift and go to state 218
    boolean                        shift and go to state 62
    object_creation                shift and go to state 222
    indexed_array                  shift and go to state 223

state 335

    (207) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 207 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 336

    (208) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    COMMA           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 208 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 337

    (228) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 392


state 338

    (215) values_array_indexed -> values COMMA . values_array_indexed
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    ARRAY           shift and go to state 374
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 221
    values_array_indexed           shift and go to state 393
    object_creation                shift and go to state 222
    indexed_array                  shift and go to state 223
    boolean                        shift and go to state 62

state 339

    (217) values_array_indexed -> object_creation COMMA . values_array_indexed
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    ARRAY           shift and go to state 374
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    object_creation                shift and go to state 222
    values_array_indexed           shift and go to state 394
    values                         shift and go to state 221
    indexed_array                  shift and go to state 223
    boolean                        shift and go to state 62

state 340

    (219) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    ARRAY           shift and go to state 374
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    indexed_array                  shift and go to state 223
    values_array_indexed           shift and go to state 395
    values                         shift and go to state 221
    object_creation                shift and go to state 222
    boolean                        shift and go to state 62

state 341

    (210) structure_array -> key EQUALS . GREATER_THAN values
    (211) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 396


state 342

    (209) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    COMMA           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 209 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 343

    (230) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (231) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 230 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 397


state 344

    (229) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    COMMA           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_PAREN     reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 229 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 345

    (244) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 398


state 346

    (139) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 240


state 347

    (164) function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 164 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)


state 348

    (169) real_params -> real_params COMMA . VARIABLE
    (170) real_params -> real_params COMMA . values
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 399
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 400
    boolean                        shift and go to state 62

state 349

    (163) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 163 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 350

    (182) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    COMMA           reduce using rule 182 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 182 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 182 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 351

    (183) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (187) int_param -> . INTEGER
    (188) int_param -> . VARIABLE

    INTEGER         shift and go to state 402
    VARIABLE        shift and go to state 403

    int_param                      shift and go to state 401

state 352

    (189) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 404


state 353

    (193) count_param -> COMMA . COUNT_NORMAL
    (194) count_param -> COMMA . COUNT_RECURSIVE

    COUNT_NORMAL    shift and go to state 405
    COUNT_RECURSIVE shift and go to state 406


state 354

    (190) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 407


state 355

    (191) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 408


state 356

    (192) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .

    COMMA           reduce using rule 192 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    SEMICOLON       reduce using rule 192 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 192 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 357

    (221) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 410
    VARIABLE        shift and go to state 409


state 358

    (77) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 304


state 359

    (70) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 303
    boolean                        shift and go to state 62

state 360

    (70) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 70 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 361

    (257) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (268) class_body -> . class_body class_member
    (269) class_body -> .

    RIGHT_BRACE     reduce using rule 269 (class_body -> .)
    PUBLIC          reduce using rule 269 (class_body -> .)
    PRIVATE         reduce using rule 269 (class_body -> .)
    PROTECTED       reduce using rule 269 (class_body -> .)
    STATIC          reduce using rule 269 (class_body -> .)
    FUNCTION        reduce using rule 269 (class_body -> .)
    VARIABLE        reduce using rule 269 (class_body -> .)
    CONST           reduce using rule 269 (class_body -> .)
    DEFINE          reduce using rule 269 (class_body -> .)

    class_body                     shift and go to state 411

state 362

    (264) class_implements_opt -> IMPLEMENTS interface_list .
    (267) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 264 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 412


state 363

    (266) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 266 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 266 (interface_list -> IDENTIFIER .)


state 364

    (258) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (259) interface_body -> interface_body . interface_method
    (261) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (276) visibility_opt -> . PUBLIC
    (277) visibility_opt -> . PRIVATE
    (278) visibility_opt -> . PROTECTED
    (279) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 413
    PUBLIC          shift and go to state 416
    PRIVATE         shift and go to state 417
    PROTECTED       shift and go to state 418
    FUNCTION        reduce using rule 279 (visibility_opt -> .)

    interface_method               shift and go to state 414
    visibility_opt                 shift and go to state 415

state 365

    (172) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (179) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 420

    codeblock                      shift and go to state 419

state 366

    (180) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 421


state 367

    (181) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 422


state 368

    (175) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (176) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (177) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN expression

    RIGHT_PAREN     shift and go to state 423


state 369

    (178) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 424


state 370

    (70) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (214) values_array_indexed -> values .
    (215) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 360
    COMMA           shift and go to state 338

  ! RIGHT_PAREN     [ reduce using rule 214 (values_array_indexed -> values .) ]


state 371

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 425
    INTEGER         shift and go to state 426


state 372

    (234) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 428
    VARIABLE        shift and go to state 427


state 373

    (240) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    COMMA           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_PAREN     reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 240 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 374

    (207) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 429


state 375

    (247) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 430
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 431
    access_array_element           shift and go to state 432
    boolean                        shift and go to state 62

state 376

    (255) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 433


state 377

    (252) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 436
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    access_array_element           shift and go to state 434
    values                         shift and go to state 435
    boolean                        shift and go to state 62

state 378

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 437
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 379

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 441
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 380

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (196) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (199) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 381
    LEFT_PAREN      shift and go to state 380
    IDENTIFIER      shift and go to state 384
    INTEGER         shift and go to state 386
    FLOAT           shift and go to state 387
    COUNT           shift and go to state 388
    STRLEN          shift and go to state 389

    expression_for                 shift and go to state 442
    number_values                  shift and go to state 383
    length_operations              shift and go to state 385

state 381

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 382

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 443
    PLUS            shift and go to state 445
    MINUS           shift and go to state 446
    MULTIPLY        shift and go to state 447
    DIVIDE          shift and go to state 448
    MODULE          shift and go to state 449
    POW             shift and go to state 450

    operator_aritmetic             shift and go to state 444

state 383

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 384

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 451


state 385

    (42) expression_for -> length_operations .

    SEMICOLON       reduce using rule 42 (expression_for -> length_operations .)
    PLUS            reduce using rule 42 (expression_for -> length_operations .)
    MINUS           reduce using rule 42 (expression_for -> length_operations .)
    MULTIPLY        reduce using rule 42 (expression_for -> length_operations .)
    DIVIDE          reduce using rule 42 (expression_for -> length_operations .)
    MODULE          reduce using rule 42 (expression_for -> length_operations .)
    POW             reduce using rule 42 (expression_for -> length_operations .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> length_operations .)


state 386

    (43) number_values -> INTEGER .

    SEMICOLON       reduce using rule 43 (number_values -> INTEGER .)
    PLUS            reduce using rule 43 (number_values -> INTEGER .)
    MINUS           reduce using rule 43 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 43 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 43 (number_values -> INTEGER .)
    MODULE          reduce using rule 43 (number_values -> INTEGER .)
    POW             reduce using rule 43 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> INTEGER .)


state 387

    (44) number_values -> FLOAT .

    SEMICOLON       reduce using rule 44 (number_values -> FLOAT .)
    PLUS            reduce using rule 44 (number_values -> FLOAT .)
    MINUS           reduce using rule 44 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 44 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 44 (number_values -> FLOAT .)
    MODULE          reduce using rule 44 (number_values -> FLOAT .)
    POW             reduce using rule 44 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 44 (number_values -> FLOAT .)


state 388

    (196) length_operations -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 452


state 389

    (199) length_operations -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 453


state 390

    (162) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 454


state 391

    (232) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (214) values_array_indexed -> values .
    (215) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 455
    COMMA           shift and go to state 338

  ! RIGHT_PAREN     [ reduce using rule 214 (values_array_indexed -> values .) ]


state 392

    (228) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 228 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 393

    (215) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 215 (values_array_indexed -> values COMMA values_array_indexed .)


state 394

    (217) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 217 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 395

    (219) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 219 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 396

    (210) structure_array -> key EQUALS GREATER_THAN . values
    (211) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 456
    boolean                        shift and go to state 62

state 397

    (231) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (230) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (231) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 110

    structure_matrix_second        shift and go to state 457

state 398

    (244) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 244 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 399

    (169) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 169 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 169 (real_params -> real_params COMMA VARIABLE .)


state 400

    (170) real_params -> real_params COMMA values .

    COMMA           reduce using rule 170 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 170 (real_params -> real_params COMMA values .)


state 401

    (183) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 459
    COMMA           shift and go to state 458


state 402

    (187) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 187 (int_param -> INTEGER .)
    COMMA           reduce using rule 187 (int_param -> INTEGER .)


state 403

    (188) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 188 (int_param -> VARIABLE .)
    COMMA           reduce using rule 188 (int_param -> VARIABLE .)


state 404

    (189) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 189 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 189 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 189 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 405

    (193) count_param -> COMMA COUNT_NORMAL .

    RIGHT_PAREN     reduce using rule 193 (count_param -> COMMA COUNT_NORMAL .)


state 406

    (194) count_param -> COMMA COUNT_RECURSIVE .

    RIGHT_PAREN     reduce using rule 194 (count_param -> COMMA COUNT_RECURSIVE .)


state 407

    (190) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    COMMA           reduce using rule 190 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 190 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 190 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 408

    (191) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    COMMA           reduce using rule 191 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 191 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 191 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 409

    (222) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 460


state 410

    (221) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 461


state 411

    (257) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (268) class_body -> class_body . class_member
    (270) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (271) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (272) class_member -> . class_attribute
    (276) visibility_opt -> . PUBLIC
    (277) visibility_opt -> . PRIVATE
    (278) visibility_opt -> . PROTECTED
    (279) visibility_opt -> .
    (273) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (274) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (275) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 462
    PUBLIC          shift and go to state 416
    PRIVATE         shift and go to state 417
    PROTECTED       shift and go to state 418
    STATIC          reduce using rule 279 (visibility_opt -> .)
    FUNCTION        reduce using rule 279 (visibility_opt -> .)
    VARIABLE        reduce using rule 279 (visibility_opt -> .)
    CONST           reduce using rule 279 (visibility_opt -> .)
    DEFINE          reduce using rule 279 (visibility_opt -> .)

    class_member                   shift and go to state 463
    visibility_opt                 shift and go to state 464
    class_attribute                shift and go to state 465

state 412

    (267) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 466


state 413

    (258) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 258 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 414

    (259) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 259 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 259 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 259 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 259 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 259 (interface_body -> interface_body interface_method .)


state 415

    (261) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 467


state 416

    (276) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 276 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 276 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 276 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 276 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 276 (visibility_opt -> PUBLIC .)


state 417

    (277) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 277 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 277 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 277 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 277 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 277 (visibility_opt -> PRIVATE .)


state 418

    (278) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 278 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 278 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 278 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 278 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 278 (visibility_opt -> PROTECTED .)


state 419

    (172) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 172 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 420

    (179) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 468
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 421

    (180) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 180 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 422

    (181) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 181 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 423

    (175) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock
    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN print_statement
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN expression

    EQUALS          shift and go to state 469


state 424

    (178) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (179) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 420

    codeblock                      shift and go to state 470

state 425

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 471


state 426

    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 472


state 427

    (237) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 473


state 428

    (234) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 474


state 429

    (207) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (214) values_array_indexed -> . values
    (215) values_array_indexed -> . values COMMA values_array_indexed
    (216) values_array_indexed -> . object_creation
    (217) values_array_indexed -> . object_creation COMMA values_array_indexed
    (218) values_array_indexed -> . indexed_array
    (219) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    NEW             shift and go to state 46
    ARRAY           shift and go to state 374
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values_array_indexed           shift and go to state 218
    values                         shift and go to state 221
    object_creation                shift and go to state 222
    indexed_array                  shift and go to state 223
    boolean                        shift and go to state 62

state 430

    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 357

  ! LEFT_BRACKET    [ reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 431

    (247) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 432

    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 433

    (255) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 475


state 434

    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 435

    (252) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 436

    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 357

  ! LEFT_BRACKET    [ reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 437

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 476


state 438

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 477
    BREAK           shift and go to state 478
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 438
    body_statement                 shift and go to state 479
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 439

    (26) body_statement -> RETURN . values SEMICOLON
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 480
    boolean                        shift and go to state 62

state 440

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 481


state 441

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 482


state 442

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 483
    PLUS            shift and go to state 445
    MINUS           shift and go to state 446
    MULTIPLY        shift and go to state 447
    DIVIDE          shift and go to state 448
    MODULE          shift and go to state 449
    POW             shift and go to state 450

    operator_aritmetic             shift and go to state 444

state 443

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 484

    condition_for                  shift and go to state 485

state 444

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (196) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (199) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 381
    LEFT_PAREN      shift and go to state 380
    IDENTIFIER      shift and go to state 384
    INTEGER         shift and go to state 386
    FLOAT           shift and go to state 387
    COUNT           shift and go to state 388
    STRLEN          shift and go to state 389

    expression_for                 shift and go to state 486
    number_values                  shift and go to state 383
    length_operations              shift and go to state 385

state 445

    (45) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    COUNT           reduce using rule 45 (operator_aritmetic -> PLUS .)
    STRLEN          reduce using rule 45 (operator_aritmetic -> PLUS .)


state 446

    (46) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    COUNT           reduce using rule 46 (operator_aritmetic -> MINUS .)
    STRLEN          reduce using rule 46 (operator_aritmetic -> MINUS .)


state 447

    (47) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    COUNT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    STRLEN          reduce using rule 47 (operator_aritmetic -> MULTIPLY .)


state 448

    (48) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    COUNT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    STRLEN          reduce using rule 48 (operator_aritmetic -> DIVIDE .)


state 449

    (49) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    COUNT           reduce using rule 49 (operator_aritmetic -> MODULE .)
    STRLEN          reduce using rule 49 (operator_aritmetic -> MODULE .)


state 450

    (50) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> POW .)
    COUNT           reduce using rule 50 (operator_aritmetic -> POW .)
    STRLEN          reduce using rule 50 (operator_aritmetic -> POW .)


state 451

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 487

    access_array_element           shift and go to state 488

state 452

    (196) length_operations -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 491
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 489
    structure_matrix_principal     shift and go to state 490
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 275
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 453

    (199) length_operations -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (185) string_param -> . STRING
    (186) string_param -> . VARIABLE

    STRING          shift and go to state 269
    VARIABLE        shift and go to state 270

    string_param                   shift and go to state 492

state 454

    (162) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 162 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 455

    (232) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (233) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 232 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 493


state 456

    (210) structure_array -> key EQUALS GREATER_THAN values .
    (211) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 210 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 210 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 494


state 457

    (231) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 231 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 458

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (187) int_param -> . INTEGER
    (188) int_param -> . VARIABLE

    INTEGER         shift and go to state 402
    VARIABLE        shift and go to state 403

    int_param                      shift and go to state 495

state 459

    (183) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 183 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 183 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 183 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 460

    (222) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 461

    (221) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 221 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 462

    (257) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 257 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 463

    (268) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 268 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 268 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 268 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 268 (class_body -> class_body class_member .)
    STATIC          reduce using rule 268 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 268 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 268 (class_body -> class_body class_member .)
    CONST           reduce using rule 268 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 268 (class_body -> class_body class_member .)


state 464

    (270) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (271) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (273) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (274) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (275) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 496
    FUNCTION        shift and go to state 497
    VARIABLE        shift and go to state 498
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 499
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 465

    (272) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 272 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 272 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 272 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 272 (class_member -> class_attribute .)
    STATIC          reduce using rule 272 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 272 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 272 (class_member -> class_attribute .)
    CONST           reduce using rule 272 (class_member -> class_attribute .)
    DEFINE          reduce using rule 272 (class_member -> class_attribute .)


state 466

    (267) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 267 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 267 (interface_list -> interface_list COMMA IDENTIFIER .)


state 467

    (261) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 500


state 468

    (179) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 501


state 469

    (175) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock
    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN print_statement
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 502


state 470

    (178) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 178 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 471

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 472

    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 473

    (237) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 474

    (234) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 234 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 475

    (255) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 255 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 476

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 505
    ELSE            shift and go to state 506

    elseif_statement               shift and go to state 503
    else_statement                 shift and go to state 504

state 477

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    SEMICOLON       shift and go to state 508
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 507
    boolean                        shift and go to state 62

state 478

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 509


state 479

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 480

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 510


state 481

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 482

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 483

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 484

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (92) comparator_operator -> . EQUALS_EQUALS
    (93) comparator_operator -> . IDENTICAL
    (94) comparator_operator -> . NOT_EQUALS
    (95) comparator_operator -> . NOT_IDENTICAL
    (96) comparator_operator -> . SMALL_THAN
    (97) comparator_operator -> . GREATER_THAN
    (98) comparator_operator -> . SMALL_EQUALS_TO
    (99) comparator_operator -> . GREATER_EQUALS_TO
    (100) comparator_operator -> . SPACECRAFT
    (101) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 123
    IDENTICAL       shift and go to state 124
    NOT_EQUALS      shift and go to state 125
    NOT_IDENTICAL   shift and go to state 126
    SMALL_THAN      shift and go to state 127
    GREATER_THAN    shift and go to state 128
    SMALL_EQUALS_TO shift and go to state 129
    GREATER_EQUALS_TO shift and go to state 130
    SPACECRAFT      shift and go to state 131
    NULL_FUSION     shift and go to state 132

    comparator_operator            shift and go to state 511

state 485

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 512


state 486

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 445
    MINUS           shift and go to state 446
    MULTIPLY        shift and go to state 447
    DIVIDE          shift and go to state 448
    MODULE          shift and go to state 449
    POW             shift and go to state 450

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 444

state 487

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 513
    LEFT_BRACKET    shift and go to state 357


state 488

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 514


state 489

    (196) length_operations -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 515

state 490

    (197) length_operations -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 516

state 491

    (198) length_operations -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (193) count_param -> . COMMA COUNT_NORMAL
    (194) count_param -> . COMMA COUNT_RECURSIVE
    (195) count_param -> .

    LEFT_BRACKET    shift and go to state 92
    COMMA           shift and go to state 353
    RIGHT_PAREN     reduce using rule 195 (count_param -> .)

    count_param                    shift and go to state 517

state 492

    (199) length_operations -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 518


state 493

    (233) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (232) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 519

    structure_matrix_first         shift and go to state 520

state 494

    (211) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (210) structure_array -> . key EQUALS GREATER_THAN values
    (211) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (212) key -> . INTEGER
    (213) key -> . STRING

    INTEGER         shift and go to state 228
    STRING          shift and go to state 229

    key                            shift and go to state 224
    structure_array                shift and go to state 521

state 495

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 522


state 496

    (270) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 523


state 497

    (271) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 524


state 498

    (273) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (274) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 525
    SEMICOLON       shift and go to state 526


state 499

    (275) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 527


state 500

    (261) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 528


state 501

    (179) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 179 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 502

    (175) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . print_statement
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . expression
    (179) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    LEFT_BRACE      shift and go to state 420
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    INTEGER         shift and go to state 281
    FLOAT           shift and go to state 282
    VARIABLE        shift and go to state 247
    LEFT_PAREN      shift and go to state 248
    STRING          shift and go to state 283

    codeblock                      shift and go to state 529
    print_statement                shift and go to state 530
    expression                     shift and go to state 531
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 503

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 504

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 505

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 532


state 506

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 533


state 507

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 534


state 508

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 509

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 510

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 511

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) expression_for -> . length_operations
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT
    (196) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (197) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (199) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 381
    LEFT_PAREN      shift and go to state 380
    IDENTIFIER      shift and go to state 384
    INTEGER         shift and go to state 386
    FLOAT           shift and go to state 387
    COUNT           shift and go to state 388
    STRLEN          shift and go to state 389

    expression_for                 shift and go to state 535
    number_values                  shift and go to state 383
    length_operations              shift and go to state 385

state 512

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 536
    INCREASE        shift and go to state 538
    DECREMENT       shift and go to state 539

    increment_statement            shift and go to state 537

state 513

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 514

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 515

    (196) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 540


state 516

    (197) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 541


state 517

    (198) length_operations -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 542


state 518

    (199) length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    PLUS            reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MINUS           reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MODULE          reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    POW             reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 199 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 519

    (232) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 543


state 520

    (233) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 233 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 521

    (211) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 211 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 211 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 522

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 184 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 184 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 184 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 523

    (270) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 544


state 524

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 545


state 525

    (273) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 546
    boolean                        shift and go to state 62

state 526

    (274) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 527

    (275) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 275 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 528

    (261) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 547
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 529

    (175) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 175 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 530

    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .

    SEMICOLON       reduce using rule 176 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .)


state 531

    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression .

    SEMICOLON       reduce using rule 177 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression .)


state 532

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . VARIABLE
    (58) boolean_expression -> . IDENTIFIER
    (59) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (60) boolean_expression -> . logic_not_sentence
    (61) boolean_expression -> . logic_expression
    (81) comparation -> . values comparator_operator values
    (82) comparation -> . values comparator_operator expression
    (83) comparation -> . expression comparator_operator expression
    (84) comparation -> . VARIABLE EQUALS_EQUALS values
    (85) comparation -> . access_array_element EQUALS_EQUALS values
    (86) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (87) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (88) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (89) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (90) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (91) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (79) logic_not_sentence -> . LOGIC_NOT conditional
    (80) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (62) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (63) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (64) true_boolean_types -> . TRUE
    (65) true_boolean_types -> . STRING
    (66) true_boolean_types -> . INTEGER
    (67) true_boolean_types -> . FLOAT
    (68) true_boolean_types -> . VARIABLE
    (69) true_boolean_types -> . IDENTIFIER
    (70) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (71) false_boolean_types -> . FALSE
    (72) false_boolean_types -> . STRING
    (73) false_boolean_types -> . INTEGER
    (74) false_boolean_types -> . VARIABLE
    (75) false_boolean_types -> . IDENTIFIER
    (76) false_boolean_types -> . FLOAT
    (77) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (78) false_boolean_types -> . NULL
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    VARIABLE        shift and go to state 212
    IDENTIFIER      shift and go to state 158
    LEFT_PAREN      shift and go to state 113
    LOGIC_NOT       shift and go to state 77
    INTEGER         shift and go to state 60
    STRING          shift and go to state 161
    FLOAT           shift and go to state 61
    TRUE            shift and go to state 162
    ARRAY           shift and go to state 81
    FALSE           shift and go to state 163
    NULL            shift and go to state 82

    conditional                    shift and go to state 548
    boolean_expression             shift and go to state 63
    comparation                    shift and go to state 71
    logic_not_sentence             shift and go to state 72
    logic_expression               shift and go to state 73
    values                         shift and go to state 159
    expression                     shift and go to state 75
    access_array_element           shift and go to state 160
    access_element_matrix          shift and go to state 76
    true_boolean_types             shift and go to state 78
    false_boolean_types            shift and go to state 79
    boolean                        shift and go to state 62
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 533

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 549
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 534

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 535

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 445
    MINUS           shift and go to state 446
    MULTIPLY        shift and go to state 447
    DIVIDE          shift and go to state 448
    MODULE          shift and go to state 449
    POW             shift and go to state 450

    operator_aritmetic             shift and go to state 444

state 536

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 550
    DECREMENT       shift and go to state 551
    PLUS_EQUALS     shift and go to state 552
    EQUALS          shift and go to state 553


state 537

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 554


state 538

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 555


state 539

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 556


state 540

    (196) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 196 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 541

    (197) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 542

    (198) length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    PLUS            reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MINUS           reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MODULE          reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    POW             reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 198 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 543

    (232) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    values                         shift and go to state 557
    boolean                        shift and go to state 62

state 544

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 558


state 545

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 559
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 546

    (273) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 560


state 547

    (261) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 561


state 548

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 562


state 549

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 563


state 550

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 551

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 552

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 564


state 553

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 565


state 554

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 566


state 555

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 556

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 557

    (232) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (233) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 455


state 558

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (165) params -> . real_params
    (166) params -> . empty
    (167) real_params -> . VARIABLE
    (168) real_params -> . values
    (169) real_params -> . real_params COMMA VARIABLE
    (170) real_params -> . real_params COMMA values
    (171) empty -> .
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE

    VARIABLE        shift and go to state 251
    RIGHT_PAREN     reduce using rule 171 (empty -> .)
    INTEGER         shift and go to state 206
    STRING          shift and go to state 207
    FLOAT           shift and go to state 208
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210

    params                         shift and go to state 567
    real_params                    shift and go to state 253
    empty                          shift and go to state 254
    values                         shift and go to state 255
    boolean                        shift and go to state 62

state 559

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 568


state 560

    (273) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 273 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 561

    (261) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 569


state 562

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 570


state 563

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 564

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 565

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    PLUS            shift and go to state 445
    MINUS           shift and go to state 446
    MULTIPLY        shift and go to state 447
    DIVIDE          shift and go to state 448
    MODULE          shift and go to state 449
    POW             shift and go to state 450

    operator_aritmetic             shift and go to state 571

state 566

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 572
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 567

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 573


state 568

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 574


state 569

    (261) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 261 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 261 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 261 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 261 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 261 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 570

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 439
    BREAK           shift and go to state 440
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 575
    sentence                       shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 571

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    INTEGER         shift and go to state 386
    FLOAT           shift and go to state 387

    number_values                  shift and go to state 576

state 572

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 577


state 573

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 578


state 574

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (280) method_body -> . classStatement
    (281) method_body -> . classStatement return_form
    (282) method_body -> . return_form
    (283) method_body -> . classStatement BREAK SEMICOLON
    (284) method_body -> . classStatement method_body
    (291) classStatement -> . sentence
    (292) classStatement -> . access_method_object SEMICOLON
    (285) return_form -> . RETURN values SEMICOLON
    (286) return_form -> . RETURN access_method_object SEMICOLON
    (287) return_form -> . RETURN SEMICOLON
    (288) return_form -> . RETURN expression SEMICOLON
    (289) return_form -> . RETURN string_special_function SEMICOLON
    (290) return_form -> . RETURN array_special_function SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 584
    VARIABLE        shift and go to state 585
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 579
    classStatement                 shift and go to state 580
    return_form                    shift and go to state 581
    sentence                       shift and go to state 582
    access_method_object           shift and go to state 583
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 586
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 575

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 587


state 576

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 577

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 578

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (280) method_body -> . classStatement
    (281) method_body -> . classStatement return_form
    (282) method_body -> . return_form
    (283) method_body -> . classStatement BREAK SEMICOLON
    (284) method_body -> . classStatement method_body
    (291) classStatement -> . sentence
    (292) classStatement -> . access_method_object SEMICOLON
    (285) return_form -> . RETURN values SEMICOLON
    (286) return_form -> . RETURN access_method_object SEMICOLON
    (287) return_form -> . RETURN SEMICOLON
    (288) return_form -> . RETURN expression SEMICOLON
    (289) return_form -> . RETURN string_special_function SEMICOLON
    (290) return_form -> . RETURN array_special_function SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 584
    VARIABLE        shift and go to state 585
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 588
    classStatement                 shift and go to state 580
    return_form                    shift and go to state 581
    sentence                       shift and go to state 582
    access_method_object           shift and go to state 583
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 586
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 579

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 589


state 580

    (280) method_body -> classStatement .
    (281) method_body -> classStatement . return_form
    (283) method_body -> classStatement . BREAK SEMICOLON
    (284) method_body -> classStatement . method_body
    (285) return_form -> . RETURN values SEMICOLON
    (286) return_form -> . RETURN access_method_object SEMICOLON
    (287) return_form -> . RETURN SEMICOLON
    (288) return_form -> . RETURN expression SEMICOLON
    (289) return_form -> . RETURN string_special_function SEMICOLON
    (290) return_form -> . RETURN array_special_function SEMICOLON
    (280) method_body -> . classStatement
    (281) method_body -> . classStatement return_form
    (282) method_body -> . return_form
    (283) method_body -> . classStatement BREAK SEMICOLON
    (284) method_body -> . classStatement method_body
    (291) classStatement -> . sentence
    (292) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (102) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (103) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (104) print_statement -> . ECHO printable_values
    (105) print_statement -> . PRINT printable_values
    (141) assignment -> . variable_assignment
    (142) assignment -> . constant_assignment
    (200) types_structure -> . structure_array_principal
    (201) types_structure -> . structure_matrix_principal
    (202) types_structure -> . structure_object_principal
    (257) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (258) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (172) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (143) variable_assignment -> . VARIABLE assignment_operator values
    (144) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (145) variable_assignment -> . VARIABLE assignment_operator expression
    (146) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (147) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (148) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator types_structure
    (150) variable_assignment -> . VARIABLE assignment_operator input
    (151) variable_assignment -> . VARIABLE assignment_operator special_function
    (152) variable_assignment -> . VARIABLE assignment_operator conditional
    (153) variable_assignment -> . VARIABLE INCREASE
    (154) variable_assignment -> . VARIABLE DECREMENT
    (155) variable_assignment -> . INCREASE VARIABLE
    (156) variable_assignment -> . DECREMENT VARIABLE
    (159) constant_assignment -> . const_syntax
    (160) constant_assignment -> . define_syntax
    (203) structure_array_principal -> . indexed_array
    (204) structure_array_principal -> . associative_array
    (205) structure_array_principal -> . access_array_stucture
    (206) structure_array_principal -> . access_array_element
    (223) structure_matrix_principal -> . matrix_firstform
    (224) structure_matrix_principal -> . matrix_secondform
    (225) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (226) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . add_element_matrix
    (241) structure_object_principal -> . object_creation
    (242) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (161) const_syntax -> . CONST IDENTIFIER EQUALS values
    (162) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (207) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (208) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (220) access_array_stucture -> . access_array_element SEMICOLON
    (228) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (229) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (234) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (238) modify_element_matrix -> . access_element_matrix EQUALS values
    (239) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (240) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (243) object_creation -> . NEW IDENTIFIER
    (244) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 280 (method_body -> classStatement .)
    BREAK           shift and go to state 591
    RETURN          shift and go to state 584
    VARIABLE        shift and go to state 585
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 580
    return_form                    shift and go to state 590
    method_body                    shift and go to state 592
    access_method_object           shift and go to state 583
    sentence                       shift and go to state 582
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 586
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 581

    (282) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 282 (method_body -> return_form .)


state 582

    (291) classStatement -> sentence .

    BREAK           reduce using rule 291 (classStatement -> sentence .)
    RETURN          reduce using rule 291 (classStatement -> sentence .)
    VARIABLE        reduce using rule 291 (classStatement -> sentence .)
    ECHO            reduce using rule 291 (classStatement -> sentence .)
    PRINT           reduce using rule 291 (classStatement -> sentence .)
    CLASS           reduce using rule 291 (classStatement -> sentence .)
    INTERFACE       reduce using rule 291 (classStatement -> sentence .)
    FUNCTION        reduce using rule 291 (classStatement -> sentence .)
    INCREASE        reduce using rule 291 (classStatement -> sentence .)
    DECREMENT       reduce using rule 291 (classStatement -> sentence .)
    IF              reduce using rule 291 (classStatement -> sentence .)
    WHILE           reduce using rule 291 (classStatement -> sentence .)
    FOR             reduce using rule 291 (classStatement -> sentence .)
    CONST           reduce using rule 291 (classStatement -> sentence .)
    DEFINE          reduce using rule 291 (classStatement -> sentence .)
    ARRAY           reduce using rule 291 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 291 (classStatement -> sentence .)
    NEW             reduce using rule 291 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 291 (classStatement -> sentence .)


state 583

    (292) classStatement -> access_method_object . SEMICOLON
    (242) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 593
    BREAK           reduce using rule 242 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 242 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 242 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 242 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 242 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 242 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 242 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 242 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 242 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 242 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 242 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 242 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 242 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 242 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 242 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 242 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 242 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 242 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 242 (structure_object_principal -> access_method_object .)


state 584

    (285) return_form -> RETURN . values SEMICOLON
    (286) return_form -> RETURN . access_method_object SEMICOLON
    (287) return_form -> RETURN . SEMICOLON
    (288) return_form -> RETURN . expression SEMICOLON
    (289) return_form -> RETURN . string_special_function SEMICOLON
    (290) return_form -> RETURN . array_special_function SEMICOLON
    (122) values -> . INTEGER
    (123) values -> . STRING
    (124) values -> . FLOAT
    (125) values -> . boolean
    (245) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (250) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (128) expression -> . term
    (129) expression -> . term PLUS expression
    (130) expression -> . term MINUS expression
    (182) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (183) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (189) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (192) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (126) boolean -> . TRUE
    (127) boolean -> . FALSE
    (221) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (131) term -> . factor
    (132) term -> . factor MULTIPLY term
    (133) term -> . factor DIVIDE term
    (134) term -> . factor MODULE term
    (135) term -> . factor POW term
    (136) factor -> . INTEGER
    (137) factor -> . FLOAT
    (138) factor -> . VARIABLE
    (139) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (140) factor -> . STRING

    SEMICOLON       shift and go to state 595
    INTEGER         shift and go to state 244
    STRING          shift and go to state 245
    FLOAT           shift and go to state 246
    VARIABLE        shift and go to state 600
    STRLEN          shift and go to state 65
    SUBSTR          shift and go to state 66
    COUNT           shift and go to state 67
    ARRAY_POP       shift and go to state 68
    TRUE            shift and go to state 209
    FALSE           shift and go to state 210
    LEFT_PAREN      shift and go to state 248

    values                         shift and go to state 594
    access_method_object           shift and go to state 596
    expression                     shift and go to state 597
    string_special_function        shift and go to state 598
    array_special_function         shift and go to state 599
    boolean                        shift and go to state 62
    access_array_element           shift and go to state 601
    term                           shift and go to state 80
    factor                         shift and go to state 83

state 585

    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (143) variable_assignment -> VARIABLE . assignment_operator values
    (144) variable_assignment -> VARIABLE . assignment_operator IDENTIFIER
    (145) variable_assignment -> VARIABLE . assignment_operator expression
    (146) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (147) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (148) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (149) variable_assignment -> VARIABLE . assignment_operator types_structure
    (150) variable_assignment -> VARIABLE . assignment_operator input
    (151) variable_assignment -> VARIABLE . assignment_operator special_function
    (152) variable_assignment -> VARIABLE . assignment_operator conditional
    (153) variable_assignment -> VARIABLE . INCREASE
    (154) variable_assignment -> VARIABLE . DECREMENT
    (234) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (240) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) assignment_operator -> . EQUALS
    (158) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 92
    INCREASE        shift and go to state 90
    DECREMENT       shift and go to state 91
    EQUALS          shift and go to state 93
    PLUS_EQUALS     shift and go to state 95

    assignment_operator            shift and go to state 89

state 586

    (250) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (206) structure_array_principal -> access_array_element .
    (220) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 99
    BREAK           reduce using rule 206 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 206 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 206 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 206 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 206 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 206 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 206 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 206 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 206 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 206 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 206 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 206 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 206 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 206 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 206 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 206 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 206 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 206 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 206 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 98


state 587

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 505
    ELSE            shift and go to state 506

    elseif_statement               shift and go to state 602
    else_statement                 shift and go to state 603

state 588

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 604


state 589

    (271) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 271 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 590

    (281) method_body -> classStatement return_form .
    (282) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 281 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 281 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 282 (method_body -> return_form .) ]


state 591

    (283) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 605


state 592

    (284) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 284 (method_body -> classStatement method_body .)


state 593

    (292) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 292 (classStatement -> access_method_object SEMICOLON .)


state 594

    (285) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 606


state 595

    (287) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 287 (return_form -> RETURN SEMICOLON .)


state 596

    (286) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 607


state 597

    (288) return_form -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 608


state 598

    (289) return_form -> RETURN string_special_function . SEMICOLON

    SEMICOLON       shift and go to state 609


state 599

    (290) return_form -> RETURN array_special_function . SEMICOLON

    SEMICOLON       shift and go to state 610


state 600

    (245) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (221) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (222) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (138) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
    MINUS           shift and go to state 94
    LEFT_BRACKET    shift and go to state 357
    MULTIPLY        reduce using rule 138 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 138 (factor -> VARIABLE .)
    MODULE          reduce using rule 138 (factor -> VARIABLE .)
    POW             reduce using rule 138 (factor -> VARIABLE .)
    PLUS            reduce using rule 138 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 138 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 138 (factor -> VARIABLE .) ]


state 601

    (250) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 99


state 602

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 603

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 604

    (270) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 270 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 605

    (283) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 283 (method_body -> classStatement BREAK SEMICOLON .)


state 606

    (285) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 285 (return_form -> RETURN values SEMICOLON .)


state 607

    (286) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 286 (return_form -> RETURN access_method_object SEMICOLON .)


state 608

    (288) return_form -> RETURN expression SEMICOLON .

    RIGHT_BRACE     reduce using rule 288 (return_form -> RETURN expression SEMICOLON .)


state 609

    (289) return_form -> RETURN string_special_function SEMICOLON .

    RIGHT_BRACE     reduce using rule 289 (return_form -> RETURN string_special_function SEMICOLON .)


state 610

    (290) return_form -> RETURN array_special_function SEMICOLON .

    RIGHT_BRACE     reduce using rule 290 (return_form -> RETURN array_special_function SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 63 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 63 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 178 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 194 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 212 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 234 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 320 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 321 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 326 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 370 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 391 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 430 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 436 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 486 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 486 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 486 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 486 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 486 resolved as shift
WARNING: shift/reduce conflict for POW in state 486 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 600 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (printable_values -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 54
WARNING: reduce/reduce conflict in state 60 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 60 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 64 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (true_boolean_types -> IDENTIFIER) in state 64
WARNING: reduce/reduce conflict in state 64 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (false_boolean_types -> IDENTIFIER) in state 64
WARNING: reduce/reduce conflict in state 117 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (printable_values -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 117 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 117 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 117 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 117
WARNING: reduce/reduce conflict in state 118 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 118
WARNING: reduce/reduce conflict in state 118 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 118
WARNING: reduce/reduce conflict in state 119 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 119 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 119
WARNING: reduce/reduce conflict in state 120 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 120 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 120
WARNING: reduce/reduce conflict in state 157 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (logic_not_sentence -> LOGIC_NOT VARIABLE) in state 157
WARNING: reduce/reduce conflict in state 157 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 157
WARNING: reduce/reduce conflict in state 157 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (true_boolean_types -> IDENTIFIER) in state 158
WARNING: reduce/reduce conflict in state 158 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (false_boolean_types -> IDENTIFIER) in state 158
WARNING: reduce/reduce conflict in state 161 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 161
WARNING: reduce/reduce conflict in state 161 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 161
WARNING: reduce/reduce conflict in state 178 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 178
WARNING: reduce/reduce conflict in state 178 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 178
WARNING: reduce/reduce conflict in state 178 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 178
WARNING: reduce/reduce conflict in state 180 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (variable_assignment -> VARIABLE assignment_operator IDENTIFIER) in state 180
WARNING: reduce/reduce conflict in state 180 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (true_boolean_types -> IDENTIFIER) in state 180
WARNING: reduce/reduce conflict in state 180 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (false_boolean_types -> IDENTIFIER) in state 180
WARNING: reduce/reduce conflict in state 189 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 189
WARNING: reduce/reduce conflict in state 189 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 189
WARNING: reduce/reduce conflict in state 212 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 212
WARNING: reduce/reduce conflict in state 212 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 212
WARNING: reduce/reduce conflict in state 234 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 234
WARNING: reduce/reduce conflict in state 234 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 234
WARNING: reduce/reduce conflict in state 234 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 235
WARNING: reduce/reduce conflict in state 235 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 235
WARNING: reduce/reduce conflict in state 236 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 236
WARNING: reduce/reduce conflict in state 236 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 236
WARNING: reduce/reduce conflict in state 237 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 237
WARNING: reduce/reduce conflict in state 237 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 237
WARNING: reduce/reduce conflict in state 244 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 244
WARNING: reduce/reduce conflict in state 245 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 245
WARNING: reduce/reduce conflict in state 246 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 246
WARNING: reduce/reduce conflict in state 509 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 509
WARNING: reduce/reduce conflict in state 534 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 534
WARNING: reduce/reduce conflict in state 590 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 590
WARNING: Rule (printable_values -> VARIABLE) is never reduced
WARNING: Rule (logic_not_sentence -> LOGIC_NOT VARIABLE) is never reduced
WARNING: Rule (variable_assignment -> VARIABLE assignment_operator IDENTIFIER) is never reduced
