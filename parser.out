Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> control_structures
Rule 8     sentence -> function_declaration
Rule 9     control_structures -> if_statement
Rule 10    control_structures -> while_statement
Rule 11    control_structures -> for_statement
Rule 12    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 19    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 20    body_statement -> sentence
Rule 21    body_statement -> sentence RETURN values SEMICOLON
Rule 22    body_statement -> sentence RETURN SEMICOLON
Rule 23    body_statement -> sentence BREAK SEMICOLON
Rule 24    body_statement -> sentence body_statement
Rule 25    body_statement -> RETURN values SEMICOLON
Rule 26    body_statement -> BREAK SEMICOLON
Rule 27    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 30    increment_statement -> VARIABLE INCREASE
Rule 31    increment_statement -> VARIABLE DECREMENT
Rule 32    increment_statement -> INCREASE VARIABLE
Rule 33    increment_statement -> DECREMENT VARIABLE
Rule 34    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 35    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 36    condition_for -> VARIABLE comparator_operator expression_for
Rule 37    expression_for -> VARIABLE
Rule 38    expression_for -> number_values
Rule 39    expression_for -> expression_for operator_aritmetic expression_for
Rule 40    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 42    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 43    number_values -> INTEGER
Rule 44    number_values -> FLOAT
Rule 45    operator_aritmetic -> PLUS
Rule 46    operator_aritmetic -> MINUS
Rule 47    operator_aritmetic -> MULTIPLY
Rule 48    operator_aritmetic -> DIVIDE
Rule 49    operator_aritmetic -> MODULE
Rule 50    operator_aritmetic -> POW
Rule 51    conditional -> boolean_expression
Rule 52    conditional -> boolean_expression logic_operator boolean_expression
Rule 53    logic_operator -> LOGIC_AND
Rule 54    logic_operator -> LOGIC_OR
Rule 55    logic_operator -> LOGIC_XOR
Rule 56    boolean_expression -> comparation
Rule 57    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 58    boolean_expression -> logic_not_sentence
Rule 59    logic_not_sentence -> LOGIC_NOT conditional
Rule 60    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 61    comparation -> values comparator_operator values
Rule 62    comparation -> values comparator_operator expression
Rule 63    comparation -> expression comparator_operator expression
Rule 64    comparation -> VARIABLE EQUALS_EQUALS values
Rule 65    comparation -> access_array_element EQUALS_EQUALS values
Rule 66    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 67    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 68    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 69    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 70    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 71    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 72    comparator_operator -> EQUALS_EQUALS
Rule 73    comparator_operator -> IDENTICAL
Rule 74    comparator_operator -> NOT_EQUALS
Rule 75    comparator_operator -> NOT_IDENTICAL
Rule 76    comparator_operator -> SMALL_THAN
Rule 77    comparator_operator -> GREATER_THAN
Rule 78    comparator_operator -> SMALL_EQUALS_TO
Rule 79    comparator_operator -> GREATER_EQUALS_TO
Rule 80    comparator_operator -> SPACECRAFT
Rule 81    comparator_operator -> NULL_FUSION
Rule 82    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 83    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 84    print_statement -> ECHO printable_values
Rule 85    print_statement -> PRINT printable_values
Rule 86    printable_values -> values
Rule 87    printable_values -> values COMMA printable_values
Rule 88    printable_values -> VARIABLE
Rule 89    printable_values -> VARIABLE COMMA printable_values
Rule 90    printable_values -> conditional
Rule 91    printable_values -> conditional COMMA printable_values
Rule 92    printable_values -> structure_object_principal
Rule 93    printable_values -> structure_object_principal COMMA printable_values
Rule 94    values -> INTEGER
Rule 95    values -> STRING
Rule 96    values -> FLOAT
Rule 97    values -> boolean
Rule 98    boolean -> TRUE
Rule 99    boolean -> FALSE
Rule 100   expression -> term
Rule 101   expression -> term PLUS expression
Rule 102   expression -> term MINUS expression
Rule 103   term -> factor
Rule 104   term -> factor MULTIPLY term
Rule 105   term -> factor DIVIDE term
Rule 106   term -> factor MODULE term
Rule 107   term -> factor POW term
Rule 108   factor -> INTEGER
Rule 109   factor -> VARIABLE
Rule 110   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 111   assignment -> variable_assignment
Rule 112   assignment -> constant_assignment
Rule 113   variable_assignment -> VARIABLE assignment_operator values
Rule 114   variable_assignment -> VARIABLE assignment_operator expression
Rule 115   variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON
Rule 116   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 117   variable_assignment -> VARIABLE assignment_operator input
Rule 118   variable_assignment -> VARIABLE assignment_operator special_function
Rule 119   variable_assignment -> VARIABLE INCREASE
Rule 120   variable_assignment -> VARIABLE DECREMENT
Rule 121   variable_assignment -> INCREASE VARIABLE
Rule 122   variable_assignment -> DECREMENT VARIABLE
Rule 123   assignment_operator -> EQUALS
Rule 124   assignment_operator -> PLUS_EQUALS
Rule 125   constant_assignment -> const_syntax
Rule 126   constant_assignment -> define_syntax
Rule 127   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 128   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 129   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 130   params -> real_params
Rule 131   params -> empty
Rule 132   real_params -> VARIABLE
Rule 133   real_params -> values
Rule 134   real_params -> real_params COMMA VARIABLE
Rule 135   real_params -> real_params COMMA values
Rule 136   empty -> <empty>
Rule 137   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 138   special_function -> arrow_function
Rule 139   special_function -> anonymous_functions
Rule 140   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 141   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 142   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 143   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 144   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 145   types_structure -> structure_array_principal
Rule 146   types_structure -> structure_matrix_principal
Rule 147   types_structure -> structure_object_principal
Rule 148   structure_array_principal -> indexed_array
Rule 149   structure_array_principal -> associative_array
Rule 150   structure_array_principal -> access_array_stucture
Rule 151   structure_array_principal -> access_array_element
Rule 152   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 153   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 154   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 155   structure_array -> key EQUALS GREATER_THAN values
Rule 156   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 157   key -> INTEGER
Rule 158   key -> STRING
Rule 159   values_array_indexed -> values
Rule 160   values_array_indexed -> values COMMA values_array_indexed
Rule 161   values_array_indexed -> object_creation
Rule 162   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 163   values_array_indexed -> indexed_array
Rule 164   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 165   access_array_stucture -> access_array_element SEMICOLON
Rule 166   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 167   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 168   structure_matrix_principal -> matrix_firstform
Rule 169   structure_matrix_principal -> matrix_secondform
Rule 170   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 171   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 172   structure_matrix_principal -> add_element_matrix
Rule 173   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 174   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 175   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 176   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 177   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 178   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 179   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 180   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 181   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 182   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 183   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
Rule 184   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 185   structure_object_principal -> object_creation
Rule 186   structure_object_principal -> access_method_object
Rule 187   object_creation -> NEW IDENTIFIER
Rule 188   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 189   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 190   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER
Rule 191   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
Rule 192   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
Rule 193   class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 194   class_extends_opt -> EXTENDS IDENTIFIER
Rule 195   class_extends_opt -> <empty>
Rule 196   class_body -> class_body class_member
Rule 197   class_body -> <empty>
Rule 198   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 199   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 200   class_member -> class_attribute
Rule 201   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 202   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 203   visibility_opt -> PUBLIC
Rule 204   visibility_opt -> PRIVATE
Rule 205   visibility_opt -> PROTECTED
Rule 206   visibility_opt -> <empty>
Rule 207   method_body -> classStatement
Rule 208   method_body -> classStatement return_form
Rule 209   method_body -> return_form
Rule 210   method_body -> classStatement BREAK SEMICOLON
Rule 211   method_body -> classStatement method_body
Rule 212   return_form -> RETURN values SEMICOLON
Rule 213   return_form -> RETURN access_method_object SEMICOLON
Rule 214   return_form -> RETURN SEMICOLON
Rule 215   classStatement -> sentence
Rule 216   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 152 153 154 173 177 178
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 23 26 210
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 193
CLONE                : 
COLON                : 
COMMA                : 87 89 91 93 128 134 135 156 160 162 164 176 178
COMMENT              : 
CONCATENATION        : 
CONST                : 127
CONTINUE             : 
DECLARE              : 
DECREMENT            : 31 33 120 122
DEFAULT              : 
DEFINE               : 128
DIE                  : 
DIVIDE               : 48 105
DO                   : 
ECHO                 : 82 84
ELSE                 : 19
ELSEIF               : 16 17 18
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 27 28 35 123 127 140 155 156 183 184 191 192 201
EQUALS_EQUALS        : 64 65 66 67 68 69 70 71 72
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 194
FALSE                : 99
FEGTS                : 143
FINAL                : 
FINALLY              : 
FLOAT                : 44 96
FN                   : 140
FOR                  : 27 28 29
FOREACH              : 
FUNCTION             : 137 141 198 199
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 79
GREATER_THAN         : 77 140 155 156 189 190 191 192
HALT_COMPILER        : 
IDENTICAL            : 73
IDENTIFIER           : 41 42 127 129 137 187 188 190 191 192 193 194 198 199
IF                   : 13 14 15
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 30 32 119 121
INSTEADOF            : 
INTEGER              : 34 43 94 108 157 166 179 179 181 182 183 183
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 12 13 14 15 16 17 18 19 27 28 29 142 193 198 199
LEFT_BRACKET         : 154 166 167 174 175 176 179 179 180 180 181 181 182 182 183 183 184
LEFT_PAREN           : 12 13 14 15 16 17 18 27 28 29 40 41 42 57 82 83 110 128 129 137 140 141 143 144 152 153 173 177 178 188 198 199
LIST                 : 
LOGIC_AND            : 53
LOGIC_NOT            : 59 60
LOGIC_OR             : 54
LOGIC_XOR            : 55
MATCH                : 
MINUS                : 46 102 189 190 191 192
MODULE               : 49 106
MULTIPLY             : 47 104
NAMESPACE            : 
NEW                  : 187 188
NOT_EQUALS           : 74
NOT_IDENTICAL        : 75
NULL_FUSION          : 81
PLUS                 : 45 101
PLUS_EQUALS          : 34 124
POW                  : 50 107
PRINT                : 83 85
PRIVATE              : 204
PROTECTED            : 205
PUBLIC               : 203
READLINE             : 144
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 21 22 25 212 213 214
RIGHT_BRACE          : 12 13 14 15 16 17 18 19 27 28 29 142 193 198 199
RIGHT_BRACKET        : 154 166 167 174 175 176 179 179 180 180 181 181 182 182 183 183 184
RIGHT_PAREN          : 12 13 14 15 16 17 18 27 28 29 40 41 42 57 82 83 110 128 129 137 140 141 143 144 152 153 173 177 178 188 198 199
SEMICOLON            : 3 4 21 22 23 25 26 27 27 28 28 29 29 115 165 170 171 173 174 201 202 210 212 213 214 216
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 78
SMALL_THAN           : 76
SPACECRAFT           : 80
STATIC               : 198
STDIN                : 143
STRING               : 95 128 144 158
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 98
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 27 28 30 31 32 33 34 35 35 36 37 41 60 64 66 67 68 68 70 71 88 89 109 113 114 115 116 117 118 119 120 121 122 132 134 166 167 167 179 180 180 180 181 181 182 182 183 184 189 190 191 192 192 201 202
WHILE                : 12
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_array_element : 42 65 66 67 69 69 151 165
access_array_stucture : 150
access_element_matrix : 70 71 170
access_method_object : 186 213 216
add_element_matrix   : 172
anonymous_functions  : 139
arrow_function       : 138
assignment           : 4
assignment_operator  : 113 114 115 116 117 118
associative_array    : 149
body_statement       : 12 13 14 15 16 17 18 19 24 27 28 29 142
boolean              : 97
boolean_expression   : 51 52 52
classStatement       : 207 208 210 211
class_attribute      : 200
class_body           : 193 196
class_declaration    : 6
class_extends_opt    : 193
class_member         : 196
codeblock            : 137 140 141
comparation          : 56
comparator_operator  : 36 61 62 63
condition_for        : 27
conditional          : 12 13 14 15 16 17 18 57 59 90 91
const_syntax         : 125
constant_assignment  : 112
control_structures   : 7
define_syntax        : 126
else_statement       : 15 18
elseif_statement     : 14 17
empty                : 131
expression           : 62 63 63 101 102 110 114
expression_for       : 27 28 36 39 39 40
factor               : 103 104 105 106 107
for_statement        : 11
function_declaration : 8
function_invocation  : 115 189
if_statement         : 9
increment_statement  : 27 28
indexed_array        : 148 163 164 184
input                : 117
key                  : 155 156
logic_not_sentence   : 58
logic_operator       : 52
matrix_firstform     : 168
matrix_secondform    : 169
method_body          : 198 199 211
modify_element_matrix : 171
number_values        : 35 38
object_creation      : 161 162 185
operator_aritmetic   : 35 39
params               : 129 137 140 141 188 198 199
print_statement      : 3
printable_values     : 82 83 84 85 87 89 91 93
program              : 1 0
real_params          : 130 134 135
return_form          : 208 209
sentence             : 1 2 20 21 22 23 24 215
special_function     : 118
structure_array      : 153 154 156
structure_array_principal : 145
structure_matrix_first : 173 178
structure_matrix_principal : 146
structure_matrix_second : 174 176
structure_object_principal : 92 93 147
term                 : 100 101 102 104 105 106 107
types_structure      : 5 116
values               : 21 25 61 61 62 64 65 86 87 113 127 128 133 135 155 156 159 160 175 176 177 178 183 191 201 212
values_array_indexed : 152 160 162 164
variable_assignment  : 111
visibility_opt       : 198 199 201 202
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    sentence                       shift and go to state 2
    program                        shift and go to state 45
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 46


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 47


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> control_structures .

    ECHO            reduce using rule 7 (sentence -> control_structures .)
    PRINT           reduce using rule 7 (sentence -> control_structures .)
    CLASS           reduce using rule 7 (sentence -> control_structures .)
    FUNCTION        reduce using rule 7 (sentence -> control_structures .)
    VARIABLE        reduce using rule 7 (sentence -> control_structures .)
    INCREASE        reduce using rule 7 (sentence -> control_structures .)
    DECREMENT       reduce using rule 7 (sentence -> control_structures .)
    IF              reduce using rule 7 (sentence -> control_structures .)
    WHILE           reduce using rule 7 (sentence -> control_structures .)
    FOR             reduce using rule 7 (sentence -> control_structures .)
    CONST           reduce using rule 7 (sentence -> control_structures .)
    DEFINE          reduce using rule 7 (sentence -> control_structures .)
    ARRAY           reduce using rule 7 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> control_structures .)
    NEW             reduce using rule 7 (sentence -> control_structures .)
    $end            reduce using rule 7 (sentence -> control_structures .)
    RETURN          reduce using rule 7 (sentence -> control_structures .)
    BREAK           reduce using rule 7 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> control_structures .)


state 8

    (8) sentence -> function_declaration .

    ECHO            reduce using rule 8 (sentence -> function_declaration .)
    PRINT           reduce using rule 8 (sentence -> function_declaration .)
    CLASS           reduce using rule 8 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 8 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 8 (sentence -> function_declaration .)
    INCREASE        reduce using rule 8 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 8 (sentence -> function_declaration .)
    IF              reduce using rule 8 (sentence -> function_declaration .)
    WHILE           reduce using rule 8 (sentence -> function_declaration .)
    FOR             reduce using rule 8 (sentence -> function_declaration .)
    CONST           reduce using rule 8 (sentence -> function_declaration .)
    DEFINE          reduce using rule 8 (sentence -> function_declaration .)
    ARRAY           reduce using rule 8 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> function_declaration .)
    NEW             reduce using rule 8 (sentence -> function_declaration .)
    $end            reduce using rule 8 (sentence -> function_declaration .)
    RETURN          reduce using rule 8 (sentence -> function_declaration .)
    BREAK           reduce using rule 8 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> function_declaration .)


state 9

    (82) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> ECHO . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 48
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    printable_values               shift and go to state 49
    values                         shift and go to state 50
    conditional                    shift and go to state 52
    structure_object_principal     shift and go to state 53
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 10

    (83) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (85) print_statement -> PRINT . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 69
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    printable_values               shift and go to state 70
    values                         shift and go to state 50
    conditional                    shift and go to state 52
    structure_object_principal     shift and go to state 53
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 11

    (111) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 111 (assignment -> variable_assignment .)


state 12

    (112) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 112 (assignment -> constant_assignment .)


state 13

    (145) types_structure -> structure_array_principal .

    ECHO            reduce using rule 145 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 145 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 145 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 145 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 145 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 145 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 145 (types_structure -> structure_array_principal .)
    IF              reduce using rule 145 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 145 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 145 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 145 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 145 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 145 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 145 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 145 (types_structure -> structure_array_principal .)
    $end            reduce using rule 145 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 145 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 145 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 145 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 145 (types_structure -> structure_array_principal .)


state 14

    (146) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 146 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 146 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 146 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 146 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 146 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 146 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 146 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 146 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 146 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 146 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 146 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 146 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 146 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 146 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 146 (types_structure -> structure_matrix_principal .)


state 15

    (147) types_structure -> structure_object_principal .

    ECHO            reduce using rule 147 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 147 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 147 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 147 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 147 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 147 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 147 (types_structure -> structure_object_principal .)
    IF              reduce using rule 147 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 147 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 147 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 147 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 147 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 147 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 147 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 147 (types_structure -> structure_object_principal .)
    $end            reduce using rule 147 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 147 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 147 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 147 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 147 (types_structure -> structure_object_principal .)


state 16

    (193) class_declaration -> CLASS . IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 71


state 17

    (9) control_structures -> if_statement .

    ECHO            reduce using rule 9 (control_structures -> if_statement .)
    PRINT           reduce using rule 9 (control_structures -> if_statement .)
    CLASS           reduce using rule 9 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> if_statement .)
    INCREASE        reduce using rule 9 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> if_statement .)
    IF              reduce using rule 9 (control_structures -> if_statement .)
    WHILE           reduce using rule 9 (control_structures -> if_statement .)
    FOR             reduce using rule 9 (control_structures -> if_statement .)
    CONST           reduce using rule 9 (control_structures -> if_statement .)
    DEFINE          reduce using rule 9 (control_structures -> if_statement .)
    ARRAY           reduce using rule 9 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> if_statement .)
    NEW             reduce using rule 9 (control_structures -> if_statement .)
    $end            reduce using rule 9 (control_structures -> if_statement .)
    RETURN          reduce using rule 9 (control_structures -> if_statement .)
    BREAK           reduce using rule 9 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> if_statement .)


state 18

    (10) control_structures -> while_statement .

    ECHO            reduce using rule 10 (control_structures -> while_statement .)
    PRINT           reduce using rule 10 (control_structures -> while_statement .)
    CLASS           reduce using rule 10 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> while_statement .)
    INCREASE        reduce using rule 10 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> while_statement .)
    IF              reduce using rule 10 (control_structures -> while_statement .)
    WHILE           reduce using rule 10 (control_structures -> while_statement .)
    FOR             reduce using rule 10 (control_structures -> while_statement .)
    CONST           reduce using rule 10 (control_structures -> while_statement .)
    DEFINE          reduce using rule 10 (control_structures -> while_statement .)
    ARRAY           reduce using rule 10 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> while_statement .)
    NEW             reduce using rule 10 (control_structures -> while_statement .)
    $end            reduce using rule 10 (control_structures -> while_statement .)
    RETURN          reduce using rule 10 (control_structures -> while_statement .)
    BREAK           reduce using rule 10 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> while_statement .)


state 19

    (11) control_structures -> for_statement .

    ECHO            reduce using rule 11 (control_structures -> for_statement .)
    PRINT           reduce using rule 11 (control_structures -> for_statement .)
    CLASS           reduce using rule 11 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> for_statement .)
    INCREASE        reduce using rule 11 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> for_statement .)
    IF              reduce using rule 11 (control_structures -> for_statement .)
    WHILE           reduce using rule 11 (control_structures -> for_statement .)
    FOR             reduce using rule 11 (control_structures -> for_statement .)
    CONST           reduce using rule 11 (control_structures -> for_statement .)
    DEFINE          reduce using rule 11 (control_structures -> for_statement .)
    ARRAY           reduce using rule 11 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> for_statement .)
    NEW             reduce using rule 11 (control_structures -> for_statement .)
    $end            reduce using rule 11 (control_structures -> for_statement .)
    RETURN          reduce using rule 11 (control_structures -> for_statement .)
    BREAK           reduce using rule 11 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> for_statement .)


state 20

    (137) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 72


state 21

    (113) variable_assignment -> VARIABLE . assignment_operator values
    (114) variable_assignment -> VARIABLE . assignment_operator expression
    (115) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> VARIABLE . assignment_operator types_structure
    (117) variable_assignment -> VARIABLE . assignment_operator input
    (118) variable_assignment -> VARIABLE . assignment_operator special_function
    (119) variable_assignment -> VARIABLE . INCREASE
    (120) variable_assignment -> VARIABLE . DECREMENT
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (123) assignment_operator -> . EQUALS
    (124) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 74
    DECREMENT       shift and go to state 75
    LEFT_BRACKET    shift and go to state 76
    MINUS           shift and go to state 78
    EQUALS          shift and go to state 77
    PLUS_EQUALS     shift and go to state 79

    assignment_operator            shift and go to state 73

state 22

    (121) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 80


state 23

    (122) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 81


state 24

    (125) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 125 (constant_assignment -> const_syntax .)


state 25

    (126) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 126 (constant_assignment -> define_syntax .)


state 26

    (148) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 148 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 148 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 148 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 148 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 148 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 148 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 148 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 148 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 148 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 148 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 148 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 148 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 148 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 148 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 148 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 148 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 148 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 148 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 148 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 148 (structure_array_principal -> indexed_array .)


state 27

    (149) structure_array_principal -> associative_array .

    ECHO            reduce using rule 149 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 149 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 149 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 149 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 149 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 149 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 149 (structure_array_principal -> associative_array .)
    IF              reduce using rule 149 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 149 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 149 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 149 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 149 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 149 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 149 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 149 (structure_array_principal -> associative_array .)
    $end            reduce using rule 149 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 149 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 149 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 149 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 149 (structure_array_principal -> associative_array .)


state 28

    (150) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 150 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 150 (structure_array_principal -> access_array_stucture .)


state 29

    (151) structure_array_principal -> access_array_element .
    (165) access_array_stucture -> access_array_element . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ECHO            reduce using rule 151 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 151 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 151 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 151 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 151 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 151 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 151 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 151 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 151 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 151 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 151 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 151 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 151 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 151 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 151 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 151 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 151 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 151 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 151 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 82

  ! SEMICOLON       [ reduce using rule 151 (structure_array_principal -> access_array_element .) ]


state 30

    (168) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 168 (structure_matrix_principal -> matrix_firstform .)


state 31

    (169) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 169 (structure_matrix_principal -> matrix_secondform .)


state 32

    (170) structure_matrix_principal -> access_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 83


state 33

    (171) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 84


state 34

    (172) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 172 (structure_matrix_principal -> add_element_matrix .)


state 35

    (185) structure_object_principal -> object_creation .

    ECHO            reduce using rule 185 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 185 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 185 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 185 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 185 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 185 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 185 (structure_object_principal -> object_creation .)
    IF              reduce using rule 185 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 185 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 185 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 185 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 185 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 185 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 185 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 185 (structure_object_principal -> object_creation .)
    $end            reduce using rule 185 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 185 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 185 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 185 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 185 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 185 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 185 (structure_object_principal -> object_creation .)


state 36

    (186) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 186 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 186 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 186 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 186 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 186 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 186 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 186 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 186 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 186 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 186 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 186 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 186 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 186 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 186 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 186 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 186 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 186 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 186 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 186 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 186 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 186 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 186 (structure_object_principal -> access_method_object .)


state 37

    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 85


state 38

    (12) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 86


state 39

    (27) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> FOR . LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 87


state 40

    (127) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 88


state 41

    (128) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 89


state 42

    (152) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (173) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 90
    LEFT_BRACKET    shift and go to state 91


state 43

    (174) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (175) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (176) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 92

    structure_matrix_second        shift and go to state 93

state 44

    (187) object_creation -> NEW . IDENTIFIER
    (188) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 94


state 45

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 46

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 47

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 48

    (82) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (110) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 99
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    LEFT_PAREN      shift and go to state 95
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    printable_values               shift and go to state 96
    conditional                    shift and go to state 97
    expression                     shift and go to state 98
    values                         shift and go to state 50
    structure_object_principal     shift and go to state 53
    boolean_expression             shift and go to state 58
    term                           shift and go to state 67
    boolean                        shift and go to state 57
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    factor                         shift and go to state 68
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65

state 49

    (84) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 84 (print_statement -> ECHO printable_values .)


state 50

    (86) printable_values -> values .
    (87) printable_values -> values . COMMA printable_values
    (61) comparation -> values . comparator_operator values
    (62) comparation -> values . comparator_operator expression
    (72) comparator_operator -> . EQUALS_EQUALS
    (73) comparator_operator -> . IDENTICAL
    (74) comparator_operator -> . NOT_EQUALS
    (75) comparator_operator -> . NOT_IDENTICAL
    (76) comparator_operator -> . SMALL_THAN
    (77) comparator_operator -> . GREATER_THAN
    (78) comparator_operator -> . SMALL_EQUALS_TO
    (79) comparator_operator -> . GREATER_EQUALS_TO
    (80) comparator_operator -> . SPACECRAFT
    (81) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 86 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 86 (printable_values -> values .)
    COMMA           shift and go to state 100
    EQUALS_EQUALS   shift and go to state 102
    IDENTICAL       shift and go to state 103
    NOT_EQUALS      shift and go to state 104
    NOT_IDENTICAL   shift and go to state 105
    SMALL_THAN      shift and go to state 106
    GREATER_THAN    shift and go to state 107
    SMALL_EQUALS_TO shift and go to state 108
    GREATER_EQUALS_TO shift and go to state 109
    SPACECRAFT      shift and go to state 110
    NULL_FUSION     shift and go to state 111

    comparator_operator            shift and go to state 101

state 51

    (88) printable_values -> VARIABLE .
    (89) printable_values -> VARIABLE . COMMA printable_values
    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (64) comparation -> VARIABLE . EQUALS_EQUALS values
    (67) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (68) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (71) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (109) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 88 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 112
    MINUS           shift and go to state 78
    EQUALS_EQUALS   shift and go to state 113
    LEFT_BRACKET    shift and go to state 114
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 109 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> VARIABLE .) ]


state 52

    (90) printable_values -> conditional .
    (91) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 90 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 90 (printable_values -> conditional .)
    COMMA           shift and go to state 115


state 53

    (92) printable_values -> structure_object_principal .
    (93) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 92 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 92 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 116


state 54

    (94) values -> INTEGER .
    (108) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 94 (values -> INTEGER .)
    COMMA           reduce using rule 94 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 94 (values -> INTEGER .)
    IDENTICAL       reduce using rule 94 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 94 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 94 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 94 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 94 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 94 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 94 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 94 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 94 (values -> INTEGER .)
    SEMICOLON       reduce using rule 94 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 94 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 94 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 94 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 94 (values -> INTEGER .)
    MULTIPLY        reduce using rule 108 (factor -> INTEGER .)
    DIVIDE          reduce using rule 108 (factor -> INTEGER .)
    MODULE          reduce using rule 108 (factor -> INTEGER .)
    POW             reduce using rule 108 (factor -> INTEGER .)
    PLUS            reduce using rule 108 (factor -> INTEGER .)
    MINUS           reduce using rule 108 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 108 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 108 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 108 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 108 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 108 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 108 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 108 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 108 (factor -> INTEGER .) ]


state 55

    (95) values -> STRING .

    COMMA           reduce using rule 95 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 95 (values -> STRING .)
    IDENTICAL       reduce using rule 95 (values -> STRING .)
    NOT_EQUALS      reduce using rule 95 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 95 (values -> STRING .)
    SMALL_THAN      reduce using rule 95 (values -> STRING .)
    GREATER_THAN    reduce using rule 95 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 95 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 95 (values -> STRING .)
    SPACECRAFT      reduce using rule 95 (values -> STRING .)
    NULL_FUSION     reduce using rule 95 (values -> STRING .)
    SEMICOLON       reduce using rule 95 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 95 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 95 (values -> STRING .)
    LOGIC_AND       reduce using rule 95 (values -> STRING .)
    LOGIC_OR        reduce using rule 95 (values -> STRING .)
    LOGIC_XOR       reduce using rule 95 (values -> STRING .)
    ECHO            reduce using rule 95 (values -> STRING .)
    PRINT           reduce using rule 95 (values -> STRING .)
    CLASS           reduce using rule 95 (values -> STRING .)
    FUNCTION        reduce using rule 95 (values -> STRING .)
    VARIABLE        reduce using rule 95 (values -> STRING .)
    INCREASE        reduce using rule 95 (values -> STRING .)
    DECREMENT       reduce using rule 95 (values -> STRING .)
    IF              reduce using rule 95 (values -> STRING .)
    WHILE           reduce using rule 95 (values -> STRING .)
    FOR             reduce using rule 95 (values -> STRING .)
    CONST           reduce using rule 95 (values -> STRING .)
    DEFINE          reduce using rule 95 (values -> STRING .)
    ARRAY           reduce using rule 95 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 95 (values -> STRING .)
    NEW             reduce using rule 95 (values -> STRING .)
    $end            reduce using rule 95 (values -> STRING .)
    RETURN          reduce using rule 95 (values -> STRING .)
    BREAK           reduce using rule 95 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 95 (values -> STRING .)


state 56

    (96) values -> FLOAT .

    COMMA           reduce using rule 96 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 96 (values -> FLOAT .)
    IDENTICAL       reduce using rule 96 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 96 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 96 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 96 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 96 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 96 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 96 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 96 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 96 (values -> FLOAT .)
    SEMICOLON       reduce using rule 96 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 96 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 96 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 96 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 96 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 96 (values -> FLOAT .)
    ECHO            reduce using rule 96 (values -> FLOAT .)
    PRINT           reduce using rule 96 (values -> FLOAT .)
    CLASS           reduce using rule 96 (values -> FLOAT .)
    FUNCTION        reduce using rule 96 (values -> FLOAT .)
    VARIABLE        reduce using rule 96 (values -> FLOAT .)
    INCREASE        reduce using rule 96 (values -> FLOAT .)
    DECREMENT       reduce using rule 96 (values -> FLOAT .)
    IF              reduce using rule 96 (values -> FLOAT .)
    WHILE           reduce using rule 96 (values -> FLOAT .)
    FOR             reduce using rule 96 (values -> FLOAT .)
    CONST           reduce using rule 96 (values -> FLOAT .)
    DEFINE          reduce using rule 96 (values -> FLOAT .)
    ARRAY           reduce using rule 96 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 96 (values -> FLOAT .)
    NEW             reduce using rule 96 (values -> FLOAT .)
    $end            reduce using rule 96 (values -> FLOAT .)
    RETURN          reduce using rule 96 (values -> FLOAT .)
    BREAK           reduce using rule 96 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 96 (values -> FLOAT .)


state 57

    (97) values -> boolean .

    COMMA           reduce using rule 97 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 97 (values -> boolean .)
    IDENTICAL       reduce using rule 97 (values -> boolean .)
    NOT_EQUALS      reduce using rule 97 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 97 (values -> boolean .)
    SMALL_THAN      reduce using rule 97 (values -> boolean .)
    GREATER_THAN    reduce using rule 97 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 97 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 97 (values -> boolean .)
    SPACECRAFT      reduce using rule 97 (values -> boolean .)
    NULL_FUSION     reduce using rule 97 (values -> boolean .)
    SEMICOLON       reduce using rule 97 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 97 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 97 (values -> boolean .)
    LOGIC_AND       reduce using rule 97 (values -> boolean .)
    LOGIC_OR        reduce using rule 97 (values -> boolean .)
    LOGIC_XOR       reduce using rule 97 (values -> boolean .)
    ECHO            reduce using rule 97 (values -> boolean .)
    PRINT           reduce using rule 97 (values -> boolean .)
    CLASS           reduce using rule 97 (values -> boolean .)
    FUNCTION        reduce using rule 97 (values -> boolean .)
    VARIABLE        reduce using rule 97 (values -> boolean .)
    INCREASE        reduce using rule 97 (values -> boolean .)
    DECREMENT       reduce using rule 97 (values -> boolean .)
    IF              reduce using rule 97 (values -> boolean .)
    WHILE           reduce using rule 97 (values -> boolean .)
    FOR             reduce using rule 97 (values -> boolean .)
    CONST           reduce using rule 97 (values -> boolean .)
    DEFINE          reduce using rule 97 (values -> boolean .)
    ARRAY           reduce using rule 97 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 97 (values -> boolean .)
    NEW             reduce using rule 97 (values -> boolean .)
    $end            reduce using rule 97 (values -> boolean .)
    RETURN          reduce using rule 97 (values -> boolean .)
    BREAK           reduce using rule 97 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 97 (values -> boolean .)


state 58

    (51) conditional -> boolean_expression .
    (52) conditional -> boolean_expression . logic_operator boolean_expression
    (53) logic_operator -> . LOGIC_AND
    (54) logic_operator -> . LOGIC_OR
    (55) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 51 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 118
    LOGIC_OR        shift and go to state 119
    LOGIC_XOR       shift and go to state 120

  ! LOGIC_AND       [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 51 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 51 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 117

state 59

    (98) boolean -> TRUE .

    COMMA           reduce using rule 98 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 98 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 98 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 98 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 98 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 98 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 98 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 98 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 98 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 98 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 98 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 98 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 98 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 98 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 98 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 98 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 98 (boolean -> TRUE .)
    ECHO            reduce using rule 98 (boolean -> TRUE .)
    PRINT           reduce using rule 98 (boolean -> TRUE .)
    CLASS           reduce using rule 98 (boolean -> TRUE .)
    FUNCTION        reduce using rule 98 (boolean -> TRUE .)
    VARIABLE        reduce using rule 98 (boolean -> TRUE .)
    INCREASE        reduce using rule 98 (boolean -> TRUE .)
    DECREMENT       reduce using rule 98 (boolean -> TRUE .)
    IF              reduce using rule 98 (boolean -> TRUE .)
    WHILE           reduce using rule 98 (boolean -> TRUE .)
    FOR             reduce using rule 98 (boolean -> TRUE .)
    CONST           reduce using rule 98 (boolean -> TRUE .)
    DEFINE          reduce using rule 98 (boolean -> TRUE .)
    ARRAY           reduce using rule 98 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 98 (boolean -> TRUE .)
    NEW             reduce using rule 98 (boolean -> TRUE .)
    $end            reduce using rule 98 (boolean -> TRUE .)
    RETURN          reduce using rule 98 (boolean -> TRUE .)
    BREAK           reduce using rule 98 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 98 (boolean -> TRUE .)


state 60

    (99) boolean -> FALSE .

    COMMA           reduce using rule 99 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 99 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 99 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 99 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 99 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 99 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 99 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 99 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 99 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 99 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 99 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 99 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 99 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 99 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 99 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 99 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 99 (boolean -> FALSE .)
    ECHO            reduce using rule 99 (boolean -> FALSE .)
    PRINT           reduce using rule 99 (boolean -> FALSE .)
    CLASS           reduce using rule 99 (boolean -> FALSE .)
    FUNCTION        reduce using rule 99 (boolean -> FALSE .)
    VARIABLE        reduce using rule 99 (boolean -> FALSE .)
    INCREASE        reduce using rule 99 (boolean -> FALSE .)
    DECREMENT       reduce using rule 99 (boolean -> FALSE .)
    IF              reduce using rule 99 (boolean -> FALSE .)
    WHILE           reduce using rule 99 (boolean -> FALSE .)
    FOR             reduce using rule 99 (boolean -> FALSE .)
    CONST           reduce using rule 99 (boolean -> FALSE .)
    DEFINE          reduce using rule 99 (boolean -> FALSE .)
    ARRAY           reduce using rule 99 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 99 (boolean -> FALSE .)
    NEW             reduce using rule 99 (boolean -> FALSE .)
    $end            reduce using rule 99 (boolean -> FALSE .)
    RETURN          reduce using rule 99 (boolean -> FALSE .)
    BREAK           reduce using rule 99 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 99 (boolean -> FALSE .)


state 61

    (56) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> comparation .)
    COMMA           reduce using rule 56 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> comparation .)


state 62

    (58) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_not_sentence .)


state 63

    (63) comparation -> expression . comparator_operator expression
    (72) comparator_operator -> . EQUALS_EQUALS
    (73) comparator_operator -> . IDENTICAL
    (74) comparator_operator -> . NOT_EQUALS
    (75) comparator_operator -> . NOT_IDENTICAL
    (76) comparator_operator -> . SMALL_THAN
    (77) comparator_operator -> . GREATER_THAN
    (78) comparator_operator -> . SMALL_EQUALS_TO
    (79) comparator_operator -> . GREATER_EQUALS_TO
    (80) comparator_operator -> . SPACECRAFT
    (81) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 102
    IDENTICAL       shift and go to state 103
    NOT_EQUALS      shift and go to state 104
    NOT_IDENTICAL   shift and go to state 105
    SMALL_THAN      shift and go to state 106
    GREATER_THAN    shift and go to state 107
    SMALL_EQUALS_TO shift and go to state 108
    GREATER_EQUALS_TO shift and go to state 109
    SPACECRAFT      shift and go to state 110
    NULL_FUSION     shift and go to state 111

    comparator_operator            shift and go to state 121

state 64

    (65) comparation -> access_array_element . EQUALS_EQUALS values
    (66) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (69) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 122


state 65

    (70) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 123


state 66

    (59) logic_not_sentence -> LOGIC_NOT . conditional
    (60) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 125
    LEFT_PAREN      shift and go to state 95
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    conditional                    shift and go to state 124
    boolean_expression             shift and go to state 58
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    values                         shift and go to state 126
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 67

    (100) expression -> term .
    (101) expression -> term . PLUS expression
    (102) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 100 (expression -> term .)
    IDENTICAL       reduce using rule 100 (expression -> term .)
    NOT_EQUALS      reduce using rule 100 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 100 (expression -> term .)
    SMALL_THAN      reduce using rule 100 (expression -> term .)
    GREATER_THAN    reduce using rule 100 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 100 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 100 (expression -> term .)
    SPACECRAFT      reduce using rule 100 (expression -> term .)
    NULL_FUSION     reduce using rule 100 (expression -> term .)
    RIGHT_PAREN     reduce using rule 100 (expression -> term .)
    SEMICOLON       reduce using rule 100 (expression -> term .)
    LOGIC_AND       reduce using rule 100 (expression -> term .)
    LOGIC_OR        reduce using rule 100 (expression -> term .)
    LOGIC_XOR       reduce using rule 100 (expression -> term .)
    COMMA           reduce using rule 100 (expression -> term .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 128


state 68

    (103) term -> factor .
    (104) term -> factor . MULTIPLY term
    (105) term -> factor . DIVIDE term
    (106) term -> factor . MODULE term
    (107) term -> factor . POW term

    PLUS            reduce using rule 103 (term -> factor .)
    MINUS           reduce using rule 103 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 103 (term -> factor .)
    IDENTICAL       reduce using rule 103 (term -> factor .)
    NOT_EQUALS      reduce using rule 103 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 103 (term -> factor .)
    SMALL_THAN      reduce using rule 103 (term -> factor .)
    GREATER_THAN    reduce using rule 103 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 103 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 103 (term -> factor .)
    SPACECRAFT      reduce using rule 103 (term -> factor .)
    NULL_FUSION     reduce using rule 103 (term -> factor .)
    RIGHT_PAREN     reduce using rule 103 (term -> factor .)
    SEMICOLON       reduce using rule 103 (term -> factor .)
    LOGIC_AND       reduce using rule 103 (term -> factor .)
    LOGIC_OR        reduce using rule 103 (term -> factor .)
    LOGIC_XOR       reduce using rule 103 (term -> factor .)
    COMMA           reduce using rule 103 (term -> factor .)
    MULTIPLY        shift and go to state 129
    DIVIDE          shift and go to state 130
    MODULE          shift and go to state 131
    POW             shift and go to state 132


state 69

    (83) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (110) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 99
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    LEFT_PAREN      shift and go to state 95
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    printable_values               shift and go to state 133
    conditional                    shift and go to state 97
    expression                     shift and go to state 98
    values                         shift and go to state 50
    structure_object_principal     shift and go to state 53
    boolean_expression             shift and go to state 58
    term                           shift and go to state 67
    boolean                        shift and go to state 57
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    factor                         shift and go to state 68
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65

state 70

    (85) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 85 (print_statement -> PRINT printable_values .)


state 71

    (193) class_declaration -> CLASS IDENTIFIER . class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (194) class_extends_opt -> . EXTENDS IDENTIFIER
    (195) class_extends_opt -> .

    EXTENDS         shift and go to state 135
    LEFT_BRACE      reduce using rule 195 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 134

state 72

    (137) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 136


state 73

    (113) variable_assignment -> VARIABLE assignment_operator . values
    (114) variable_assignment -> VARIABLE assignment_operator . expression
    (115) variable_assignment -> VARIABLE assignment_operator . function_invocation SEMICOLON
    (116) variable_assignment -> VARIABLE assignment_operator . types_structure
    (117) variable_assignment -> VARIABLE assignment_operator . input
    (118) variable_assignment -> VARIABLE assignment_operator . special_function
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (129) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (143) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (144) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (138) special_function -> . arrow_function
    (139) special_function -> . anonymous_functions
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (140) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (141) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    IDENTIFIER      shift and go to state 144
    FEGTS           shift and go to state 146
    READLINE        shift and go to state 147
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    FN              shift and go to state 150
    FUNCTION        shift and go to state 151
    VARIABLE        shift and go to state 137
    LEFT_PAREN      shift and go to state 145
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    values                         shift and go to state 138
    expression                     shift and go to state 139
    function_invocation            shift and go to state 140
    types_structure                shift and go to state 141
    input                          shift and go to state 142
    special_function               shift and go to state 143
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    arrow_function                 shift and go to state 148
    anonymous_functions            shift and go to state 149
    factor                         shift and go to state 68
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 74

    (119) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 119 (variable_assignment -> VARIABLE INCREASE .)


state 75

    (120) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 120 (variable_assignment -> VARIABLE DECREMENT .)


state 76

    (166) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 153
    VARIABLE        shift and go to state 152
    RIGHT_BRACKET   shift and go to state 154


state 77

    (123) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 123 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 123 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 123 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 123 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 123 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 123 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 123 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 123 (assignment_operator -> EQUALS .)
    FN              reduce using rule 123 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 123 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 123 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 123 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 123 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 123 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 123 (assignment_operator -> EQUALS .)


state 78

    (189) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS VARIABLE

    GREATER_THAN    shift and go to state 155


state 79

    (124) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 124 (assignment_operator -> PLUS_EQUALS .)


state 80

    (121) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 121 (variable_assignment -> INCREASE VARIABLE .)


state 81

    (122) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 122 (variable_assignment -> DECREMENT VARIABLE .)


state 82

    (165) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 165 (access_array_stucture -> access_array_element SEMICOLON .)


state 83

    (170) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 170 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 84

    (171) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 171 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 85

    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 95
    VARIABLE        shift and go to state 157
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    conditional                    shift and go to state 156
    boolean_expression             shift and go to state 58
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    values                         shift and go to state 126
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 86

    (12) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 95
    VARIABLE        shift and go to state 157
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    conditional                    shift and go to state 158
    boolean_expression             shift and go to state 58
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    values                         shift and go to state 126
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 87

    (27) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> FOR LEFT_PAREN . SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 159
    SEMICOLON       shift and go to state 160


state 88

    (127) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 161


state 89

    (128) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 162


state 90

    (152) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (153) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (173) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (155) structure_array -> . key EQUALS GREATER_THAN values
    (156) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (177) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (178) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (157) key -> . INTEGER
    (158) key -> . STRING
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ARRAY           shift and go to state 163
    INTEGER         shift and go to state 171
    STRING          shift and go to state 172
    FLOAT           shift and go to state 56
    NEW             shift and go to state 44
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values_array_indexed           shift and go to state 164
    structure_array                shift and go to state 165
    structure_matrix_first         shift and go to state 166
    values                         shift and go to state 167
    object_creation                shift and go to state 168
    indexed_array                  shift and go to state 169
    key                            shift and go to state 170
    boolean                        shift and go to state 57

state 91

    (154) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (155) structure_array -> . key EQUALS GREATER_THAN values
    (156) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (157) key -> . INTEGER
    (158) key -> . STRING

    INTEGER         shift and go to state 174
    STRING          shift and go to state 175

    structure_array                shift and go to state 173
    key                            shift and go to state 170

state 92

    (175) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (176) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 176
    boolean                        shift and go to state 57

state 93

    (174) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 178


state 94

    (187) object_creation -> NEW IDENTIFIER .
    (188) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 187 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 179


state 95

    (57) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (110) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 95
    VARIABLE        shift and go to state 181
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 182
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    conditional                    shift and go to state 180
    expression                     shift and go to state 98
    boolean_expression             shift and go to state 58
    term                           shift and go to state 67
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    factor                         shift and go to state 68
    values                         shift and go to state 126
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57

state 96

    (82) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 183


state 97

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (90) printable_values -> conditional .
    (91) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 184
    COMMA           shift and go to state 115

  ! RIGHT_PAREN     [ reduce using rule 90 (printable_values -> conditional .) ]


state 98

    (110) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (63) comparation -> expression . comparator_operator expression
    (72) comparator_operator -> . EQUALS_EQUALS
    (73) comparator_operator -> . IDENTICAL
    (74) comparator_operator -> . NOT_EQUALS
    (75) comparator_operator -> . NOT_IDENTICAL
    (76) comparator_operator -> . SMALL_THAN
    (77) comparator_operator -> . GREATER_THAN
    (78) comparator_operator -> . SMALL_EQUALS_TO
    (79) comparator_operator -> . GREATER_EQUALS_TO
    (80) comparator_operator -> . SPACECRAFT
    (81) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 185
    EQUALS_EQUALS   shift and go to state 102
    IDENTICAL       shift and go to state 103
    NOT_EQUALS      shift and go to state 104
    NOT_IDENTICAL   shift and go to state 105
    SMALL_THAN      shift and go to state 106
    GREATER_THAN    shift and go to state 107
    SMALL_EQUALS_TO shift and go to state 108
    GREATER_EQUALS_TO shift and go to state 109
    SPACECRAFT      shift and go to state 110
    NULL_FUSION     shift and go to state 111

    comparator_operator            shift and go to state 121

state 99

    (88) printable_values -> VARIABLE .
    (89) printable_values -> VARIABLE . COMMA printable_values
    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (64) comparation -> VARIABLE . EQUALS_EQUALS values
    (67) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (68) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (71) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (109) factor -> VARIABLE .
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 88 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    RIGHT_PAREN     reduce using rule 88 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 112
    MINUS           shift and go to state 78
    EQUALS_EQUALS   shift and go to state 113
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 114

  ! MINUS           [ reduce using rule 109 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 109 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> VARIABLE .) ]


state 100

    (87) printable_values -> values COMMA . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    LEFT_PAREN      shift and go to state 95
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    values                         shift and go to state 50
    printable_values               shift and go to state 186
    conditional                    shift and go to state 52
    structure_object_principal     shift and go to state 53
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 101

    (61) comparation -> values comparator_operator . values
    (62) comparation -> values comparator_operator . expression
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    values                         shift and go to state 187
    expression                     shift and go to state 188
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 102

    (72) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 72 (comparator_operator -> EQUALS_EQUALS .)


state 103

    (73) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 73 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 73 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 73 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 73 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 73 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 73 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 73 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 73 (comparator_operator -> IDENTICAL .)


state 104

    (74) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 74 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 74 (comparator_operator -> NOT_EQUALS .)


state 105

    (75) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 75 (comparator_operator -> NOT_IDENTICAL .)


state 106

    (76) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 76 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 76 (comparator_operator -> SMALL_THAN .)


state 107

    (77) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 77 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 77 (comparator_operator -> GREATER_THAN .)


state 108

    (78) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 78 (comparator_operator -> SMALL_EQUALS_TO .)


state 109

    (79) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 79 (comparator_operator -> GREATER_EQUALS_TO .)


state 110

    (80) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 80 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 80 (comparator_operator -> SPACECRAFT .)


state 111

    (81) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 81 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 81 (comparator_operator -> NULL_FUSION .)


state 112

    (89) printable_values -> VARIABLE COMMA . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    LEFT_PAREN      shift and go to state 95
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    printable_values               shift and go to state 190
    values                         shift and go to state 50
    conditional                    shift and go to state 52
    structure_object_principal     shift and go to state 53
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 113

    (64) comparation -> VARIABLE EQUALS_EQUALS . values
    (67) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (68) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (71) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 191
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 192
    access_array_element           shift and go to state 193
    access_element_matrix          shift and go to state 194
    boolean                        shift and go to state 57

state 114

    (166) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 195
    VARIABLE        shift and go to state 152


state 115

    (91) printable_values -> conditional COMMA . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    LEFT_PAREN      shift and go to state 95
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    conditional                    shift and go to state 52
    printable_values               shift and go to state 196
    values                         shift and go to state 50
    structure_object_principal     shift and go to state 53
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 116

    (93) printable_values -> structure_object_principal COMMA . printable_values
    (86) printable_values -> . values
    (87) printable_values -> . values COMMA printable_values
    (88) printable_values -> . VARIABLE
    (89) printable_values -> . VARIABLE COMMA printable_values
    (90) printable_values -> . conditional
    (91) printable_values -> . conditional COMMA printable_values
    (92) printable_values -> . structure_object_principal
    (93) printable_values -> . structure_object_principal COMMA printable_values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    LEFT_PAREN      shift and go to state 95
    NEW             shift and go to state 44
    LOGIC_NOT       shift and go to state 66

    structure_object_principal     shift and go to state 53
    printable_values               shift and go to state 197
    values                         shift and go to state 50
    conditional                    shift and go to state 52
    boolean                        shift and go to state 57
    boolean_expression             shift and go to state 58
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 117

    (52) conditional -> boolean_expression logic_operator . boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 95
    VARIABLE        shift and go to state 157
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    boolean_expression             shift and go to state 198
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    values                         shift and go to state 126
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 118

    (53) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_AND .)


state 119

    (54) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_OR .)


state 120

    (55) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_XOR .)


state 121

    (63) comparation -> expression comparator_operator . expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    expression                     shift and go to state 199
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 122

    (65) comparation -> access_array_element EQUALS_EQUALS . values
    (66) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (69) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 203
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    access_array_element           shift and go to state 201
    values                         shift and go to state 202
    boolean                        shift and go to state 57

state 123

    (70) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 204


state 124

    (59) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 59 (logic_not_sentence -> LOGIC_NOT conditional .)


state 125

    (60) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (64) comparation -> VARIABLE . EQUALS_EQUALS values
    (67) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (68) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (71) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (109) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 60 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 113
    LEFT_BRACKET    shift and go to state 114
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    MINUS           reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> VARIABLE .) ]


state 126

    (61) comparation -> values . comparator_operator values
    (62) comparation -> values . comparator_operator expression
    (72) comparator_operator -> . EQUALS_EQUALS
    (73) comparator_operator -> . IDENTICAL
    (74) comparator_operator -> . NOT_EQUALS
    (75) comparator_operator -> . NOT_IDENTICAL
    (76) comparator_operator -> . SMALL_THAN
    (77) comparator_operator -> . GREATER_THAN
    (78) comparator_operator -> . SMALL_EQUALS_TO
    (79) comparator_operator -> . GREATER_EQUALS_TO
    (80) comparator_operator -> . SPACECRAFT
    (81) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 102
    IDENTICAL       shift and go to state 103
    NOT_EQUALS      shift and go to state 104
    NOT_IDENTICAL   shift and go to state 105
    SMALL_THAN      shift and go to state 106
    GREATER_THAN    shift and go to state 107
    SMALL_EQUALS_TO shift and go to state 108
    GREATER_EQUALS_TO shift and go to state 109
    SPACECRAFT      shift and go to state 110
    NULL_FUSION     shift and go to state 111

    comparator_operator            shift and go to state 101

state 127

    (101) expression -> term PLUS . expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    term                           shift and go to state 67
    expression                     shift and go to state 205
    factor                         shift and go to state 68

state 128

    (102) expression -> term MINUS . expression
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    term                           shift and go to state 67
    expression                     shift and go to state 206
    factor                         shift and go to state 68

state 129

    (104) term -> factor MULTIPLY . term
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    factor                         shift and go to state 68
    term                           shift and go to state 207

state 130

    (105) term -> factor DIVIDE . term
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    factor                         shift and go to state 68
    term                           shift and go to state 208

state 131

    (106) term -> factor MODULE . term
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    factor                         shift and go to state 68
    term                           shift and go to state 209

state 132

    (107) term -> factor POW . term
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    factor                         shift and go to state 68
    term                           shift and go to state 210

state 133

    (83) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 211


state 134

    (193) class_declaration -> CLASS IDENTIFIER class_extends_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 212


state 135

    (194) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 213


state 136

    (137) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 214
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 137

    (109) factor -> VARIABLE .
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 109 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 76
    MINUS           shift and go to state 78

  ! MINUS           [ reduce using rule 109 (factor -> VARIABLE .) ]


state 138

    (113) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 113 (variable_assignment -> VARIABLE assignment_operator values .)


state 139

    (114) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 114 (variable_assignment -> VARIABLE assignment_operator expression .)


state 140

    (115) variable_assignment -> VARIABLE assignment_operator function_invocation . SEMICOLON

    SEMICOLON       shift and go to state 219


state 141

    (116) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 116 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 142

    (117) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 117 (variable_assignment -> VARIABLE assignment_operator input .)


state 143

    (118) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 118 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 144

    (129) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 220


state 145

    (110) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 200
    VARIABLE        shift and go to state 189
    LEFT_PAREN      shift and go to state 145

    expression                     shift and go to state 221
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 146

    (143) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 222


state 147

    (144) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 223


state 148

    (138) special_function -> arrow_function .

    SEMICOLON       reduce using rule 138 (special_function -> arrow_function .)


state 149

    (139) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 139 (special_function -> anonymous_functions .)


state 150

    (140) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 224


state 151

    (141) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 225


state 152

    (167) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 226


state 153

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values

    RIGHT_BRACKET   shift and go to state 227


state 154

    (184) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 228


state 155

    (189) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (190) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER
    (191) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS VARIABLE
    (129) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 230

    function_invocation            shift and go to state 229

state 156

    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 231


state 157

    (64) comparation -> VARIABLE . EQUALS_EQUALS values
    (67) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (68) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (71) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (109) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 113
    LEFT_BRACKET    shift and go to state 114
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    MINUS           reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> VARIABLE .) ]


state 158

    (12) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 232


state 159

    (27) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 233


state 160

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON . SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 234


state 161

    (127) const_syntax -> CONST IDENTIFIER EQUALS . values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 235
    boolean                        shift and go to state 57

state 162

    (128) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 236


state 163

    (177) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (152) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 237


state 164

    (152) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 238


state 165

    (153) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 239


state 166

    (173) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 240


state 167

    (159) values_array_indexed -> values .
    (160) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 159 (values_array_indexed -> values .)
    COMMA           shift and go to state 241


state 168

    (161) values_array_indexed -> object_creation .
    (162) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 161 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 242


state 169

    (163) values_array_indexed -> indexed_array .
    (164) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 163 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 243


state 170

    (155) structure_array -> key . EQUALS GREATER_THAN values
    (156) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 244


state 171

    (94) values -> INTEGER .
    (157) key -> INTEGER .

    COMMA           reduce using rule 94 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 94 (values -> INTEGER .)
    EQUALS          reduce using rule 157 (key -> INTEGER .)


state 172

    (95) values -> STRING .
    (158) key -> STRING .

    COMMA           reduce using rule 95 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 95 (values -> STRING .)
    EQUALS          reduce using rule 158 (key -> STRING .)


state 173

    (154) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 245


state 174

    (157) key -> INTEGER .

    EQUALS          reduce using rule 157 (key -> INTEGER .)


state 175

    (158) key -> STRING .

    EQUALS          reduce using rule 158 (key -> STRING .)


state 176

    (175) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (176) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 246


state 177

    (94) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 94 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 94 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 94 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 94 (values -> INTEGER .)
    COMMA           reduce using rule 94 (values -> INTEGER .)
    SEMICOLON       reduce using rule 94 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 94 (values -> INTEGER .)
    ECHO            reduce using rule 94 (values -> INTEGER .)
    PRINT           reduce using rule 94 (values -> INTEGER .)
    CLASS           reduce using rule 94 (values -> INTEGER .)
    FUNCTION        reduce using rule 94 (values -> INTEGER .)
    VARIABLE        reduce using rule 94 (values -> INTEGER .)
    INCREASE        reduce using rule 94 (values -> INTEGER .)
    DECREMENT       reduce using rule 94 (values -> INTEGER .)
    IF              reduce using rule 94 (values -> INTEGER .)
    WHILE           reduce using rule 94 (values -> INTEGER .)
    FOR             reduce using rule 94 (values -> INTEGER .)
    CONST           reduce using rule 94 (values -> INTEGER .)
    DEFINE          reduce using rule 94 (values -> INTEGER .)
    ARRAY           reduce using rule 94 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 94 (values -> INTEGER .)
    NEW             reduce using rule 94 (values -> INTEGER .)
    $end            reduce using rule 94 (values -> INTEGER .)
    RETURN          reduce using rule 94 (values -> INTEGER .)
    BREAK           reduce using rule 94 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 94 (values -> INTEGER .)


state 178

    (174) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 247


state 179

    (188) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 248
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 180

    (57) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 184


state 181

    (64) comparation -> VARIABLE . EQUALS_EQUALS values
    (67) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (68) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (71) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (109) factor -> VARIABLE .
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 113
    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    MINUS           reduce using rule 109 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 114

  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> VARIABLE .) ]


state 182

    (108) factor -> INTEGER .
    (94) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 94 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 94 (values -> INTEGER .)
    MULTIPLY        reduce using rule 108 (factor -> INTEGER .)
    DIVIDE          reduce using rule 108 (factor -> INTEGER .)
    MODULE          reduce using rule 108 (factor -> INTEGER .)
    POW             reduce using rule 108 (factor -> INTEGER .)
    PLUS            reduce using rule 108 (factor -> INTEGER .)
    MINUS           reduce using rule 108 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 108 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 94 (values -> INTEGER .)
    IDENTICAL       reduce using rule 94 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 94 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 94 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 94 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 94 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 94 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 94 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 94 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 94 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 108 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 108 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 108 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 108 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 108 (factor -> INTEGER .) ]


state 183

    (82) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 82 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 184

    (57) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 185

    (110) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 110 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 186

    (87) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 87 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 87 (printable_values -> values COMMA printable_values .)


state 187

    (61) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 61 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 61 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 61 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 61 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 61 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 61 (comparation -> values comparator_operator values .)


state 188

    (62) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 62 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 62 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 62 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 62 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 62 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 62 (comparation -> values comparator_operator expression .)


state 189

    (109) factor -> VARIABLE .

    MULTIPLY        reduce using rule 109 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 109 (factor -> VARIABLE .)
    MODULE          reduce using rule 109 (factor -> VARIABLE .)
    POW             reduce using rule 109 (factor -> VARIABLE .)
    PLUS            reduce using rule 109 (factor -> VARIABLE .)
    MINUS           reduce using rule 109 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 109 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 109 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 109 (factor -> VARIABLE .)
    COMMA           reduce using rule 109 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 109 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 109 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 109 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 109 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 109 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 109 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 109 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 109 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 109 (factor -> VARIABLE .)


state 190

    (89) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 89 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 89 (printable_values -> VARIABLE COMMA printable_values .)


state 191

    (68) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 68 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 114


state 192

    (64) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 64 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 193

    (67) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 194

    (71) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 71 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 195

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 249


state 196

    (91) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 91 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 91 (printable_values -> conditional COMMA printable_values .)


state 197

    (93) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 93 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 93 (printable_values -> structure_object_principal COMMA printable_values .)


state 198

    (52) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 52 (conditional -> boolean_expression logic_operator boolean_expression .)


state 199

    (63) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 63 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 63 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 63 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 63 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 63 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 63 (comparation -> expression comparator_operator expression .)


state 200

    (108) factor -> INTEGER .

    MULTIPLY        reduce using rule 108 (factor -> INTEGER .)
    DIVIDE          reduce using rule 108 (factor -> INTEGER .)
    MODULE          reduce using rule 108 (factor -> INTEGER .)
    POW             reduce using rule 108 (factor -> INTEGER .)
    PLUS            reduce using rule 108 (factor -> INTEGER .)
    MINUS           reduce using rule 108 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 108 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 108 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 108 (factor -> INTEGER .)
    COMMA           reduce using rule 108 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 108 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 108 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 108 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 108 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 108 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 108 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 108 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 108 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 108 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 108 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 108 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 108 (factor -> INTEGER .)


state 201

    (69) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 69 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 202

    (65) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS values .)


state 203

    (66) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 66 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 250


state 204

    (70) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 70 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 205

    (101) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 101 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 101 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 101 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 101 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 101 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 101 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 101 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 101 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 101 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 101 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 101 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 101 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 101 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 101 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 101 (expression -> term PLUS expression .)
    COMMA           reduce using rule 101 (expression -> term PLUS expression .)


state 206

    (102) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 102 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 102 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 102 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 102 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 102 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 102 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 102 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 102 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 102 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 102 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 102 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 102 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 102 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 102 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 102 (expression -> term MINUS expression .)
    COMMA           reduce using rule 102 (expression -> term MINUS expression .)


state 207

    (104) term -> factor MULTIPLY term .

    PLUS            reduce using rule 104 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 104 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 104 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 104 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 104 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 104 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 104 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 104 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 104 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 104 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 104 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 104 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 104 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 104 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 104 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 104 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 104 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 104 (term -> factor MULTIPLY term .)


state 208

    (105) term -> factor DIVIDE term .

    PLUS            reduce using rule 105 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 105 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 105 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 105 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 105 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 105 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 105 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 105 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 105 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 105 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 105 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 105 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 105 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 105 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 105 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 105 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 105 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 105 (term -> factor DIVIDE term .)


state 209

    (106) term -> factor MODULE term .

    PLUS            reduce using rule 106 (term -> factor MODULE term .)
    MINUS           reduce using rule 106 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 106 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 106 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 106 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 106 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 106 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 106 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 106 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 106 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 106 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 106 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 106 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 106 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 106 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 106 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 106 (term -> factor MODULE term .)
    COMMA           reduce using rule 106 (term -> factor MODULE term .)


state 210

    (107) term -> factor POW term .

    PLUS            reduce using rule 107 (term -> factor POW term .)
    MINUS           reduce using rule 107 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 107 (term -> factor POW term .)
    IDENTICAL       reduce using rule 107 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 107 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 107 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 107 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 107 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 107 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 107 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 107 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 107 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 107 (term -> factor POW term .)
    SEMICOLON       reduce using rule 107 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 107 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 107 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 107 (term -> factor POW term .)
    COMMA           reduce using rule 107 (term -> factor POW term .)


state 211

    (83) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 83 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 212

    (193) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE . class_body RIGHT_BRACE
    (196) class_body -> . class_body class_member
    (197) class_body -> .

    RIGHT_BRACE     reduce using rule 197 (class_body -> .)
    PUBLIC          reduce using rule 197 (class_body -> .)
    PRIVATE         reduce using rule 197 (class_body -> .)
    PROTECTED       reduce using rule 197 (class_body -> .)
    STATIC          reduce using rule 197 (class_body -> .)
    FUNCTION        reduce using rule 197 (class_body -> .)
    VARIABLE        reduce using rule 197 (class_body -> .)

    class_body                     shift and go to state 251

state 213

    (194) class_extends_opt -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 194 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 214

    (137) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 252


state 215

    (130) params -> real_params .
    (134) real_params -> real_params . COMMA VARIABLE
    (135) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 130 (params -> real_params .)
    COMMA           shift and go to state 253


state 216

    (131) params -> empty .

    RIGHT_PAREN     reduce using rule 131 (params -> empty .)


state 217

    (132) real_params -> VARIABLE .

    COMMA           reduce using rule 132 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 132 (real_params -> VARIABLE .)


state 218

    (133) real_params -> values .

    COMMA           reduce using rule 133 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 133 (real_params -> values .)


state 219

    (115) variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .

    SEMICOLON       reduce using rule 115 (variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .)


state 220

    (129) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 254
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 221

    (110) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 185


state 222

    (143) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 255


state 223

    (144) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 256


state 224

    (140) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 257
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 225

    (141) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 258
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 226

    (167) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 259

  ! LEFT_BRACKET    [ reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 227

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 260

  ! LEFT_BRACKET    [ reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 228

    (184) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 262

    indexed_array                  shift and go to state 261

state 229

    (189) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 189 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 230

    (190) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .
    (191) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS values
    (192) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS VARIABLE
    (129) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    PRINT           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CLASS           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    FUNCTION        reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    VARIABLE        reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    INCREASE        reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DECREMENT       reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    IF              reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    WHILE           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    FOR             reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CONST           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DEFINE          reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    ARRAY           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    NEW             reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    $end            reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    COMMA           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    SEMICOLON       reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RETURN          reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    BREAK           reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 190 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    EQUALS          shift and go to state 263
    LEFT_PAREN      shift and go to state 220


state 231

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 264


state 232

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 265


state 233

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (37) expression_for -> . VARIABLE
    (38) expression_for -> . number_values
    (39) expression_for -> . expression_for operator_aritmetic expression_for
    (40) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    VARIABLE        shift and go to state 267
    LEFT_PAREN      shift and go to state 266
    IDENTIFIER      shift and go to state 270
    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272

    expression_for                 shift and go to state 268
    number_values                  shift and go to state 269

state 234

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 273


state 235

    (127) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 127 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 236

    (128) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 274
    boolean                        shift and go to state 57

state 237

    (177) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (152) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    NEW             shift and go to state 44
    ARRAY           shift and go to state 262

    values                         shift and go to state 275
    values_array_indexed           shift and go to state 164
    boolean                        shift and go to state 57
    object_creation                shift and go to state 168
    indexed_array                  shift and go to state 169

state 238

    (152) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 152 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 239

    (153) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 153 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 240

    (173) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 276


state 241

    (160) values_array_indexed -> values COMMA . values_array_indexed
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    NEW             shift and go to state 44
    ARRAY           shift and go to state 262
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 167
    values_array_indexed           shift and go to state 277
    object_creation                shift and go to state 168
    indexed_array                  shift and go to state 169
    boolean                        shift and go to state 57

state 242

    (162) values_array_indexed -> object_creation COMMA . values_array_indexed
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    NEW             shift and go to state 44
    ARRAY           shift and go to state 262
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    object_creation                shift and go to state 168
    values_array_indexed           shift and go to state 278
    values                         shift and go to state 167
    indexed_array                  shift and go to state 169
    boolean                        shift and go to state 57

state 243

    (164) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    NEW             shift and go to state 44
    ARRAY           shift and go to state 262
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    indexed_array                  shift and go to state 169
    values_array_indexed           shift and go to state 279
    values                         shift and go to state 167
    object_creation                shift and go to state 168
    boolean                        shift and go to state 57

state 244

    (155) structure_array -> key EQUALS . GREATER_THAN values
    (156) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 280


state 245

    (154) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 154 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 246

    (175) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (176) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 175 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 281


state 247

    (174) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 174 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 248

    (188) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 282


state 249

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    EQUALS_EQUALS   reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 283


state 250

    (166) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 285
    VARIABLE        shift and go to state 284


state 251

    (193) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body . RIGHT_BRACE
    (196) class_body -> class_body . class_member
    (198) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (199) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (200) class_member -> . class_attribute
    (203) visibility_opt -> . PUBLIC
    (204) visibility_opt -> . PRIVATE
    (205) visibility_opt -> . PROTECTED
    (206) visibility_opt -> .
    (201) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (202) class_attribute -> . visibility_opt VARIABLE SEMICOLON

    RIGHT_BRACE     shift and go to state 286
    PUBLIC          shift and go to state 290
    PRIVATE         shift and go to state 291
    PROTECTED       shift and go to state 292
    STATIC          reduce using rule 206 (visibility_opt -> .)
    FUNCTION        reduce using rule 206 (visibility_opt -> .)
    VARIABLE        reduce using rule 206 (visibility_opt -> .)

    class_member                   shift and go to state 287
    visibility_opt                 shift and go to state 288
    class_attribute                shift and go to state 289

state 252

    (137) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (142) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 294

    codeblock                      shift and go to state 293

state 253

    (134) real_params -> real_params COMMA . VARIABLE
    (135) real_params -> real_params COMMA . values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 295
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 296
    boolean                        shift and go to state 57

state 254

    (129) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 297


state 255

    (143) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 298


state 256

    (144) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 299


state 257

    (140) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 300


state 258

    (141) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 301


state 259

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 302
    INTEGER         shift and go to state 303


state 260

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values

    INTEGER         shift and go to state 305
    VARIABLE        shift and go to state 304


state 261

    (184) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 184 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 262

    (152) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 306


state 263

    (191) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . values
    (192) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 307
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 308
    boolean                        shift and go to state 57

state 264

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 309
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 265

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 313
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 266

    (40) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (37) expression_for -> . VARIABLE
    (38) expression_for -> . number_values
    (39) expression_for -> . expression_for operator_aritmetic expression_for
    (40) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    VARIABLE        shift and go to state 267
    LEFT_PAREN      shift and go to state 266
    IDENTIFIER      shift and go to state 270
    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272

    expression_for                 shift and go to state 314
    number_values                  shift and go to state 269

state 267

    (37) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 37 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 37 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 37 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 37 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 37 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 37 (expression_for -> VARIABLE .)
    POW             reduce using rule 37 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> VARIABLE .)


state 268

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (39) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 315
    PLUS            shift and go to state 317
    MINUS           shift and go to state 318
    MULTIPLY        shift and go to state 319
    DIVIDE          shift and go to state 320
    MODULE          shift and go to state 321
    POW             shift and go to state 322

    operator_aritmetic             shift and go to state 316

state 269

    (38) expression_for -> number_values .

    SEMICOLON       reduce using rule 38 (expression_for -> number_values .)
    PLUS            reduce using rule 38 (expression_for -> number_values .)
    MINUS           reduce using rule 38 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 38 (expression_for -> number_values .)
    DIVIDE          reduce using rule 38 (expression_for -> number_values .)
    MODULE          reduce using rule 38 (expression_for -> number_values .)
    POW             reduce using rule 38 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> number_values .)


state 270

    (41) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (42) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 323


state 271

    (43) number_values -> INTEGER .

    SEMICOLON       reduce using rule 43 (number_values -> INTEGER .)
    PLUS            reduce using rule 43 (number_values -> INTEGER .)
    MINUS           reduce using rule 43 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 43 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 43 (number_values -> INTEGER .)
    MODULE          reduce using rule 43 (number_values -> INTEGER .)
    POW             reduce using rule 43 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> INTEGER .)


state 272

    (44) number_values -> FLOAT .

    SEMICOLON       reduce using rule 44 (number_values -> FLOAT .)
    PLUS            reduce using rule 44 (number_values -> FLOAT .)
    MINUS           reduce using rule 44 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 44 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 44 (number_values -> FLOAT .)
    MODULE          reduce using rule 44 (number_values -> FLOAT .)
    POW             reduce using rule 44 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 44 (number_values -> FLOAT .)


state 273

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 324


state 274

    (128) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 325


state 275

    (177) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (159) values_array_indexed -> values .
    (160) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 326
    COMMA           shift and go to state 241

  ! RIGHT_PAREN     [ reduce using rule 159 (values_array_indexed -> values .) ]


state 276

    (173) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 173 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 277

    (160) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 160 (values_array_indexed -> values COMMA values_array_indexed .)


state 278

    (162) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 162 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 279

    (164) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 164 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 280

    (155) structure_array -> key EQUALS GREATER_THAN . values
    (156) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 327
    boolean                        shift and go to state 57

state 281

    (176) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (175) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (176) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 92

    structure_matrix_second        shift and go to state 328

state 282

    (188) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 188 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 283

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 329
    VARIABLE        shift and go to state 304


state 284

    (167) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 330


state 285

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 331


state 286

    (193) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 193 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 287

    (196) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 196 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 196 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 196 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 196 (class_body -> class_body class_member .)
    STATIC          reduce using rule 196 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 196 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 196 (class_body -> class_body class_member .)


state 288

    (198) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (199) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (201) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (202) class_attribute -> visibility_opt . VARIABLE SEMICOLON

    STATIC          shift and go to state 332
    FUNCTION        shift and go to state 333
    VARIABLE        shift and go to state 334


state 289

    (200) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 200 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 200 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 200 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 200 (class_member -> class_attribute .)
    STATIC          reduce using rule 200 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 200 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 200 (class_member -> class_attribute .)


state 290

    (203) visibility_opt -> PUBLIC .

    STATIC          reduce using rule 203 (visibility_opt -> PUBLIC .)
    FUNCTION        reduce using rule 203 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 203 (visibility_opt -> PUBLIC .)


state 291

    (204) visibility_opt -> PRIVATE .

    STATIC          reduce using rule 204 (visibility_opt -> PRIVATE .)
    FUNCTION        reduce using rule 204 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 204 (visibility_opt -> PRIVATE .)


state 292

    (205) visibility_opt -> PROTECTED .

    STATIC          reduce using rule 205 (visibility_opt -> PROTECTED .)
    FUNCTION        reduce using rule 205 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 205 (visibility_opt -> PROTECTED .)


state 293

    (137) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 137 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 294

    (142) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 335
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 295

    (134) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 134 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 134 (real_params -> real_params COMMA VARIABLE .)


state 296

    (135) real_params -> real_params COMMA values .

    COMMA           reduce using rule 135 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 135 (real_params -> real_params COMMA values .)


state 297

    (129) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 129 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 298

    (143) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 143 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 299

    (144) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 144 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 300

    (140) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 336


state 301

    (141) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (142) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 294

    codeblock                      shift and go to state 337

state 302

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 338


state 303

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 339


state 304

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 340


state 305

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values

    RIGHT_BRACKET   shift and go to state 341


state 306

    (152) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (159) values_array_indexed -> . values
    (160) values_array_indexed -> . values COMMA values_array_indexed
    (161) values_array_indexed -> . object_creation
    (162) values_array_indexed -> . object_creation COMMA values_array_indexed
    (163) values_array_indexed -> . indexed_array
    (164) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    NEW             shift and go to state 44
    ARRAY           shift and go to state 262
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values_array_indexed           shift and go to state 164
    values                         shift and go to state 167
    object_creation                shift and go to state 168
    indexed_array                  shift and go to state 169
    boolean                        shift and go to state 57

state 307

    (192) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .

    ECHO            reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    PRINT           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CLASS           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    FUNCTION        reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    VARIABLE        reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    INCREASE        reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DECREMENT       reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    IF              reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    WHILE           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    FOR             reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CONST           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DEFINE          reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    ARRAY           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    LEFT_BRACKET    reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    NEW             reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    $end            reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    COMMA           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RETURN          reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    BREAK           reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 192 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)


state 308

    (191) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .

    ECHO            reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    PRINT           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CLASS           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    FUNCTION        reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    VARIABLE        reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    INCREASE        reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DECREMENT       reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    IF              reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    WHILE           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    FOR             reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CONST           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DEFINE          reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    ARRAY           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    LEFT_BRACKET    reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    NEW             reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    $end            reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    COMMA           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    SEMICOLON       reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_PAREN     reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RETURN          reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    BREAK           reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_BRACE     reduce using rule 191 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)


state 309

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 342


state 310

    (20) body_statement -> sentence .
    (21) body_statement -> sentence . RETURN values SEMICOLON
    (22) body_statement -> sentence . RETURN SEMICOLON
    (23) body_statement -> sentence . BREAK SEMICOLON
    (24) body_statement -> sentence . body_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence .)
    RETURN          shift and go to state 343
    BREAK           shift and go to state 344
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    sentence                       shift and go to state 310
    body_statement                 shift and go to state 345
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 311

    (25) body_statement -> RETURN . values SEMICOLON
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 346
    boolean                        shift and go to state 57

state 312

    (26) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 347


state 313

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 348


state 314

    (40) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (39) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 349
    PLUS            shift and go to state 317
    MINUS           shift and go to state 318
    MULTIPLY        shift and go to state 319
    DIVIDE          shift and go to state 320
    MODULE          shift and go to state 321
    POW             shift and go to state 322

    operator_aritmetic             shift and go to state 316

state 315

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) condition_for -> . VARIABLE comparator_operator expression_for

    SEMICOLON       shift and go to state 351
    VARIABLE        shift and go to state 350

    condition_for                  shift and go to state 352

state 316

    (39) expression_for -> expression_for operator_aritmetic . expression_for
    (37) expression_for -> . VARIABLE
    (38) expression_for -> . number_values
    (39) expression_for -> . expression_for operator_aritmetic expression_for
    (40) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    VARIABLE        shift and go to state 267
    LEFT_PAREN      shift and go to state 266
    IDENTIFIER      shift and go to state 270
    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272

    expression_for                 shift and go to state 353
    number_values                  shift and go to state 269

state 317

    (45) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> PLUS .)


state 318

    (46) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MINUS .)


state 319

    (47) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> MULTIPLY .)


state 320

    (48) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> DIVIDE .)


state 321

    (49) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MODULE .)


state 322

    (50) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> POW .)


state 323

    (41) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (42) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 354

    access_array_element           shift and go to state 355

state 324

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 356
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 325

    (128) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 128 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 326

    (177) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (178) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 177 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 357


state 327

    (155) structure_array -> key EQUALS GREATER_THAN values .
    (156) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 155 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 155 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 358


state 328

    (176) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 176 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 329

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 359


state 330

    (167) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 331

    (166) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 166 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 332

    (198) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 360


state 333

    (199) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 361


state 334

    (201) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (202) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 362
    SEMICOLON       shift and go to state 363


state 335

    (142) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 364


state 336

    (140) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 365


state 337

    (141) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 141 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 338

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 339

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 340

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 341

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values

    SEMICOLON       reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          shift and go to state 366


state 342

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (19) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 369
    ELSE            shift and go to state 370

    elseif_statement               shift and go to state 367
    else_statement                 shift and go to state 368

state 343

    (21) body_statement -> sentence RETURN . values SEMICOLON
    (22) body_statement -> sentence RETURN . SEMICOLON
    (25) body_statement -> RETURN . values SEMICOLON
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    SEMICOLON       shift and go to state 372
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 371
    boolean                        shift and go to state 57

state 344

    (23) body_statement -> sentence BREAK . SEMICOLON
    (26) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 373


state 345

    (24) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence body_statement .)


state 346

    (25) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 374


state 347

    (26) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> BREAK SEMICOLON .)


state 348

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 349

    (40) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 350

    (36) condition_for -> VARIABLE . comparator_operator expression_for
    (72) comparator_operator -> . EQUALS_EQUALS
    (73) comparator_operator -> . IDENTICAL
    (74) comparator_operator -> . NOT_EQUALS
    (75) comparator_operator -> . NOT_IDENTICAL
    (76) comparator_operator -> . SMALL_THAN
    (77) comparator_operator -> . GREATER_THAN
    (78) comparator_operator -> . SMALL_EQUALS_TO
    (79) comparator_operator -> . GREATER_EQUALS_TO
    (80) comparator_operator -> . SPACECRAFT
    (81) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 102
    IDENTICAL       shift and go to state 103
    NOT_EQUALS      shift and go to state 104
    NOT_IDENTICAL   shift and go to state 105
    SMALL_THAN      shift and go to state 106
    GREATER_THAN    shift and go to state 107
    SMALL_EQUALS_TO shift and go to state 108
    GREATER_EQUALS_TO shift and go to state 109
    SPACECRAFT      shift and go to state 110
    NULL_FUSION     shift and go to state 111

    comparator_operator            shift and go to state 375

state 351

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) increment_statement -> . VARIABLE INCREASE
    (31) increment_statement -> . VARIABLE DECREMENT
    (32) increment_statement -> . INCREASE VARIABLE
    (33) increment_statement -> . DECREMENT VARIABLE
    (34) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (35) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 376
    INCREASE        shift and go to state 378
    DECREMENT       shift and go to state 379

    increment_statement            shift and go to state 377

state 352

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 380


state 353

    (39) expression_for -> expression_for operator_aritmetic expression_for .
    (39) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 317
    MINUS           shift and go to state 318
    MULTIPLY        shift and go to state 319
    DIVIDE          shift and go to state 320
    MODULE          shift and go to state 321
    POW             shift and go to state 322

  ! PLUS            [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 39 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 316

state 354

    (41) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 381
    LEFT_BRACKET    shift and go to state 250


state 355

    (42) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 382


state 356

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 383


state 357

    (178) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (177) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (178) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 384

    structure_matrix_first         shift and go to state 385

state 358

    (156) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (155) structure_array -> . key EQUALS GREATER_THAN values
    (156) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (157) key -> . INTEGER
    (158) key -> . STRING

    INTEGER         shift and go to state 174
    STRING          shift and go to state 175

    key                            shift and go to state 170
    structure_array                shift and go to state 386

state 359

    (179) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS_EQUALS   reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 179 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 360

    (198) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 387


state 361

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 388


state 362

    (201) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 389
    boolean                        shift and go to state 57

state 363

    (202) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 202 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 364

    (142) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 142 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 365

    (140) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (142) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 294

    codeblock                      shift and go to state 390

state 366

    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 391
    boolean                        shift and go to state 57

state 367

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 368

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 369

    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 392


state 370

    (19) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 393


state 371

    (21) body_statement -> sentence RETURN values . SEMICOLON
    (25) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 394


state 372

    (22) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN SEMICOLON .)


state 373

    (23) body_statement -> sentence BREAK SEMICOLON .
    (26) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 23 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> BREAK SEMICOLON .) ]


state 374

    (25) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> RETURN values SEMICOLON .)


state 375

    (36) condition_for -> VARIABLE comparator_operator . expression_for
    (37) expression_for -> . VARIABLE
    (38) expression_for -> . number_values
    (39) expression_for -> . expression_for operator_aritmetic expression_for
    (40) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    VARIABLE        shift and go to state 267
    LEFT_PAREN      shift and go to state 266
    IDENTIFIER      shift and go to state 270
    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272

    expression_for                 shift and go to state 395
    number_values                  shift and go to state 269

state 376

    (30) increment_statement -> VARIABLE . INCREASE
    (31) increment_statement -> VARIABLE . DECREMENT
    (34) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (35) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 396
    DECREMENT       shift and go to state 397
    PLUS_EQUALS     shift and go to state 398
    EQUALS          shift and go to state 399


state 377

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 400


state 378

    (32) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 401


state 379

    (33) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 402


state 380

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) increment_statement -> . VARIABLE INCREASE
    (31) increment_statement -> . VARIABLE DECREMENT
    (32) increment_statement -> . INCREASE VARIABLE
    (33) increment_statement -> . DECREMENT VARIABLE
    (34) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (35) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 376
    INCREASE        shift and go to state 378
    DECREMENT       shift and go to state 379

    increment_statement            shift and go to state 403

state 381

    (41) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 382

    (42) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 383

    (29) for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 29 (for_statement -> FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 384

    (177) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 404


state 385

    (178) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 178 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 386

    (156) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 156 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 156 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 387

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 405


state 388

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 406
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 389

    (201) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 407


state 390

    (140) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 140 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 391

    (183) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .

    SEMICOLON       reduce using rule 183 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .)


state 392

    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (51) conditional -> . boolean_expression
    (52) conditional -> . boolean_expression logic_operator boolean_expression
    (56) boolean_expression -> . comparation
    (57) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (58) boolean_expression -> . logic_not_sentence
    (61) comparation -> . values comparator_operator values
    (62) comparation -> . values comparator_operator expression
    (63) comparation -> . expression comparator_operator expression
    (64) comparation -> . VARIABLE EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS values
    (66) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (67) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (68) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (69) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (70) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (71) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (59) logic_not_sentence -> . LOGIC_NOT conditional
    (60) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (100) expression -> . term
    (101) expression -> . term PLUS expression
    (102) expression -> . term MINUS expression
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE
    (103) term -> . factor
    (104) term -> . factor MULTIPLY term
    (105) term -> . factor DIVIDE term
    (106) term -> . factor MODULE term
    (107) term -> . factor POW term
    (108) factor -> . INTEGER
    (109) factor -> . VARIABLE
    (110) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 95
    VARIABLE        shift and go to state 157
    LOGIC_NOT       shift and go to state 66
    INTEGER         shift and go to state 54
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    conditional                    shift and go to state 408
    boolean_expression             shift and go to state 58
    comparation                    shift and go to state 61
    logic_not_sentence             shift and go to state 62
    values                         shift and go to state 126
    expression                     shift and go to state 63
    access_array_element           shift and go to state 64
    access_element_matrix          shift and go to state 65
    boolean                        shift and go to state 57
    term                           shift and go to state 67
    factor                         shift and go to state 68

state 393

    (19) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 409
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 394

    (21) body_statement -> sentence RETURN values SEMICOLON .
    (25) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 21 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 25 (body_statement -> RETURN values SEMICOLON .) ]


state 395

    (36) condition_for -> VARIABLE comparator_operator expression_for .
    (39) expression_for -> expression_for . operator_aritmetic expression_for
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 36 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 317
    MINUS           shift and go to state 318
    MULTIPLY        shift and go to state 319
    DIVIDE          shift and go to state 320
    MODULE          shift and go to state 321
    POW             shift and go to state 322

    operator_aritmetic             shift and go to state 316

state 396

    (30) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE INCREASE .)


state 397

    (31) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> VARIABLE DECREMENT .)


state 398

    (34) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 410


state 399

    (35) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 411


state 400

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 412


state 401

    (32) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> INCREASE VARIABLE .)


state 402

    (33) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> DECREMENT VARIABLE .)


state 403

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 413


state 404

    (177) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 414
    boolean                        shift and go to state 57

state 405

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (130) params -> . real_params
    (131) params -> . empty
    (132) real_params -> . VARIABLE
    (133) real_params -> . values
    (134) real_params -> . real_params COMMA VARIABLE
    (135) real_params -> . real_params COMMA values
    (136) empty -> .
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    VARIABLE        shift and go to state 217
    RIGHT_PAREN     reduce using rule 136 (empty -> .)
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    params                         shift and go to state 415
    real_params                    shift and go to state 215
    empty                          shift and go to state 216
    values                         shift and go to state 218
    boolean                        shift and go to state 57

state 406

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 416


state 407

    (201) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 201 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 408

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 417


state 409

    (19) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 418


state 410

    (34) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 411

    (35) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (45) operator_aritmetic -> . PLUS
    (46) operator_aritmetic -> . MINUS
    (47) operator_aritmetic -> . MULTIPLY
    (48) operator_aritmetic -> . DIVIDE
    (49) operator_aritmetic -> . MODULE
    (50) operator_aritmetic -> . POW

    PLUS            shift and go to state 317
    MINUS           shift and go to state 318
    MULTIPLY        shift and go to state 319
    DIVIDE          shift and go to state 320
    MODULE          shift and go to state 321
    POW             shift and go to state 322

    operator_aritmetic             shift and go to state 419

state 412

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 420
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 413

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 421


state 414

    (177) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (178) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 326


state 415

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 422


state 416

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 423


state 417

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 424


state 418

    (19) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 419

    (35) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (43) number_values -> . INTEGER
    (44) number_values -> . FLOAT

    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272

    number_values                  shift and go to state 425

state 420

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 426


state 421

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 427
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 422

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 428


state 423

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (207) method_body -> . classStatement
    (208) method_body -> . classStatement return_form
    (209) method_body -> . return_form
    (210) method_body -> . classStatement BREAK SEMICOLON
    (211) method_body -> . classStatement method_body
    (215) classStatement -> . sentence
    (216) classStatement -> . access_method_object SEMICOLON
    (212) return_form -> . RETURN values SEMICOLON
    (213) return_form -> . RETURN access_method_object SEMICOLON
    (214) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 434
    VARIABLE        shift and go to state 435
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    method_body                    shift and go to state 429
    classStatement                 shift and go to state 430
    return_form                    shift and go to state 431
    sentence                       shift and go to state 432
    access_method_object           shift and go to state 433
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35

state 424

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (25) body_statement -> . RETURN values SEMICOLON
    (26) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RETURN          shift and go to state 311
    BREAK           shift and go to state 312
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    body_statement                 shift and go to state 436
    sentence                       shift and go to state 310
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35
    access_method_object           shift and go to state 36

state 425

    (35) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 35 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 426

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 427

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 437


state 428

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (207) method_body -> . classStatement
    (208) method_body -> . classStatement return_form
    (209) method_body -> . return_form
    (210) method_body -> . classStatement BREAK SEMICOLON
    (211) method_body -> . classStatement method_body
    (215) classStatement -> . sentence
    (216) classStatement -> . access_method_object SEMICOLON
    (212) return_form -> . RETURN values SEMICOLON
    (213) return_form -> . RETURN access_method_object SEMICOLON
    (214) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 434
    VARIABLE        shift and go to state 435
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    method_body                    shift and go to state 438
    classStatement                 shift and go to state 430
    return_form                    shift and go to state 431
    sentence                       shift and go to state 432
    access_method_object           shift and go to state 433
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35

state 429

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 439


state 430

    (207) method_body -> classStatement .
    (208) method_body -> classStatement . return_form
    (210) method_body -> classStatement . BREAK SEMICOLON
    (211) method_body -> classStatement . method_body
    (212) return_form -> . RETURN values SEMICOLON
    (213) return_form -> . RETURN access_method_object SEMICOLON
    (214) return_form -> . RETURN SEMICOLON
    (207) method_body -> . classStatement
    (208) method_body -> . classStatement return_form
    (209) method_body -> . return_form
    (210) method_body -> . classStatement BREAK SEMICOLON
    (211) method_body -> . classStatement method_body
    (215) classStatement -> . sentence
    (216) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (82) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> . ECHO printable_values
    (85) print_statement -> . PRINT printable_values
    (111) assignment -> . variable_assignment
    (112) assignment -> . constant_assignment
    (145) types_structure -> . structure_array_principal
    (146) types_structure -> . structure_matrix_principal
    (147) types_structure -> . structure_object_principal
    (193) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (137) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (113) variable_assignment -> . VARIABLE assignment_operator values
    (114) variable_assignment -> . VARIABLE assignment_operator expression
    (115) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> . VARIABLE assignment_operator types_structure
    (117) variable_assignment -> . VARIABLE assignment_operator input
    (118) variable_assignment -> . VARIABLE assignment_operator special_function
    (119) variable_assignment -> . VARIABLE INCREASE
    (120) variable_assignment -> . VARIABLE DECREMENT
    (121) variable_assignment -> . INCREASE VARIABLE
    (122) variable_assignment -> . DECREMENT VARIABLE
    (125) constant_assignment -> . const_syntax
    (126) constant_assignment -> . define_syntax
    (148) structure_array_principal -> . indexed_array
    (149) structure_array_principal -> . associative_array
    (150) structure_array_principal -> . access_array_stucture
    (151) structure_array_principal -> . access_array_element
    (168) structure_matrix_principal -> . matrix_firstform
    (169) structure_matrix_principal -> . matrix_secondform
    (170) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (171) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . add_element_matrix
    (185) structure_object_principal -> . object_creation
    (186) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (27) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) for_statement -> . FOR LEFT_PAREN SEMICOLON SEMICOLON RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (127) const_syntax -> . CONST IDENTIFIER EQUALS values
    (128) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (152) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (153) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (165) access_array_stucture -> . access_array_element SEMICOLON
    (166) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (173) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (179) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (187) object_creation -> . NEW IDENTIFIER
    (188) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 207 (method_body -> classStatement .)
    BREAK           shift and go to state 441
    RETURN          shift and go to state 434
    VARIABLE        shift and go to state 435
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 37
    WHILE           shift and go to state 38
    FOR             shift and go to state 39
    CONST           shift and go to state 40
    DEFINE          shift and go to state 41
    ARRAY           shift and go to state 42
    LEFT_BRACKET    shift and go to state 43
    NEW             shift and go to state 44

    classStatement                 shift and go to state 430
    return_form                    shift and go to state 440
    method_body                    shift and go to state 442
    access_method_object           shift and go to state 433
    sentence                       shift and go to state 432
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    access_array_stucture          shift and go to state 28
    access_array_element           shift and go to state 29
    matrix_firstform               shift and go to state 30
    matrix_secondform              shift and go to state 31
    access_element_matrix          shift and go to state 32
    modify_element_matrix          shift and go to state 33
    add_element_matrix             shift and go to state 34
    object_creation                shift and go to state 35

state 431

    (209) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 209 (method_body -> return_form .)


state 432

    (215) classStatement -> sentence .

    BREAK           reduce using rule 215 (classStatement -> sentence .)
    RETURN          reduce using rule 215 (classStatement -> sentence .)
    VARIABLE        reduce using rule 215 (classStatement -> sentence .)
    ECHO            reduce using rule 215 (classStatement -> sentence .)
    PRINT           reduce using rule 215 (classStatement -> sentence .)
    CLASS           reduce using rule 215 (classStatement -> sentence .)
    FUNCTION        reduce using rule 215 (classStatement -> sentence .)
    INCREASE        reduce using rule 215 (classStatement -> sentence .)
    DECREMENT       reduce using rule 215 (classStatement -> sentence .)
    IF              reduce using rule 215 (classStatement -> sentence .)
    WHILE           reduce using rule 215 (classStatement -> sentence .)
    FOR             reduce using rule 215 (classStatement -> sentence .)
    CONST           reduce using rule 215 (classStatement -> sentence .)
    DEFINE          reduce using rule 215 (classStatement -> sentence .)
    ARRAY           reduce using rule 215 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 215 (classStatement -> sentence .)
    NEW             reduce using rule 215 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 215 (classStatement -> sentence .)


state 433

    (216) classStatement -> access_method_object . SEMICOLON
    (186) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 443
    BREAK           reduce using rule 186 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 186 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 186 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 186 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 186 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 186 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 186 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 186 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 186 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 186 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 186 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 186 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 186 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 186 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 186 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 186 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 186 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 186 (structure_object_principal -> access_method_object .)


state 434

    (212) return_form -> RETURN . values SEMICOLON
    (213) return_form -> RETURN . access_method_object SEMICOLON
    (214) return_form -> RETURN . SEMICOLON
    (94) values -> . INTEGER
    (95) values -> . STRING
    (96) values -> . FLOAT
    (97) values -> . boolean
    (189) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (190) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    SEMICOLON       shift and go to state 445
    INTEGER         shift and go to state 177
    STRING          shift and go to state 55
    FLOAT           shift and go to state 56
    VARIABLE        shift and go to state 447
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    values                         shift and go to state 444
    access_method_object           shift and go to state 446
    boolean                        shift and go to state 57

state 435

    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (113) variable_assignment -> VARIABLE . assignment_operator values
    (114) variable_assignment -> VARIABLE . assignment_operator expression
    (115) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (116) variable_assignment -> VARIABLE . assignment_operator types_structure
    (117) variable_assignment -> VARIABLE . assignment_operator input
    (118) variable_assignment -> VARIABLE . assignment_operator special_function
    (119) variable_assignment -> VARIABLE . INCREASE
    (120) variable_assignment -> VARIABLE . DECREMENT
    (166) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (167) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (179) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (183) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (184) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (123) assignment_operator -> . EQUALS
    (124) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 78
    INCREASE        shift and go to state 74
    DECREMENT       shift and go to state 75
    LEFT_BRACKET    shift and go to state 76
    EQUALS          shift and go to state 77
    PLUS_EQUALS     shift and go to state 79

    assignment_operator            shift and go to state 73

state 436

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 448


state 437

    (27) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 27 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 438

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 449


state 439

    (199) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 199 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 440

    (208) method_body -> classStatement return_form .
    (209) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 208 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 208 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 209 (method_body -> return_form .) ]


state 441

    (210) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 450


state 442

    (211) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 211 (method_body -> classStatement method_body .)


state 443

    (216) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 216 (classStatement -> access_method_object SEMICOLON .)


state 444

    (212) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 451


state 445

    (214) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 214 (return_form -> RETURN SEMICOLON .)


state 446

    (213) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 452


state 447

    (189) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (190) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (191) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (192) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    MINUS           shift and go to state 78


state 448

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (19) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 369
    ELSE            shift and go to state 370

    elseif_statement               shift and go to state 453
    else_statement                 shift and go to state 454

state 449

    (198) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 198 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 450

    (210) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 210 (method_body -> classStatement BREAK SEMICOLON .)


state 451

    (212) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 212 (return_form -> RETURN values SEMICOLON .)


state 452

    (213) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 213 (return_form -> RETURN access_method_object SEMICOLON .)


state 453

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 454

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 51 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 51 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 58 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 58 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 58 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 157 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 181 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 226 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 227 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 275 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 353 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 353 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 353 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 353 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 353 resolved as shift
WARNING: shift/reduce conflict for POW in state 353 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 54
WARNING: reduce/reduce conflict in state 99 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 99
WARNING: reduce/reduce conflict in state 182 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 182
WARNING: reduce/reduce conflict in state 373 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 373
WARNING: reduce/reduce conflict in state 394 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 394
WARNING: reduce/reduce conflict in state 440 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 440
