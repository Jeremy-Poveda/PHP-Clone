Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    number_values -> INTEGER
Rule 43    number_values -> FLOAT
Rule 44    operator_aritmetic -> PLUS
Rule 45    operator_aritmetic -> MINUS
Rule 46    operator_aritmetic -> MULTIPLY
Rule 47    operator_aritmetic -> DIVIDE
Rule 48    operator_aritmetic -> MODULE
Rule 49    operator_aritmetic -> POW
Rule 50    conditional -> boolean_expression
Rule 51    conditional -> boolean_expression logic_operator boolean_expression
Rule 52    logic_operator -> LOGIC_AND
Rule 53    logic_operator -> LOGIC_OR
Rule 54    logic_operator -> LOGIC_XOR
Rule 55    boolean_expression -> comparation
Rule 56    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 57    boolean_expression -> logic_not_sentence
Rule 58    logic_not_sentence -> LOGIC_NOT conditional
Rule 59    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 60    comparation -> values comparator_operator values
Rule 61    comparation -> values comparator_operator expression
Rule 62    comparation -> expression comparator_operator expression
Rule 63    comparation -> VARIABLE EQUALS_EQUALS values
Rule 64    comparation -> access_array_element EQUALS_EQUALS values
Rule 65    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 66    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 67    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 68    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 69    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 70    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 71    comparator_operator -> EQUALS_EQUALS
Rule 72    comparator_operator -> IDENTICAL
Rule 73    comparator_operator -> NOT_EQUALS
Rule 74    comparator_operator -> NOT_IDENTICAL
Rule 75    comparator_operator -> SMALL_THAN
Rule 76    comparator_operator -> GREATER_THAN
Rule 77    comparator_operator -> SMALL_EQUALS_TO
Rule 78    comparator_operator -> GREATER_EQUALS_TO
Rule 79    comparator_operator -> SPACECRAFT
Rule 80    comparator_operator -> NULL_FUSION
Rule 81    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 82    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 83    print_statement -> ECHO printable_values
Rule 84    print_statement -> PRINT printable_values
Rule 85    printable_values -> values
Rule 86    printable_values -> values printable_dividers printable_values
Rule 87    printable_values -> VARIABLE
Rule 88    printable_values -> VARIABLE printable_dividers printable_values
Rule 89    printable_values -> conditional
Rule 90    printable_values -> conditional printable_dividers printable_values
Rule 91    printable_values -> structure_object_principal
Rule 92    printable_values -> structure_object_principal printable_dividers printable_values
Rule 93    printable_dividers -> COMMA
Rule 94    printable_dividers -> STRING_CONCATENATION
Rule 95    values -> INTEGER
Rule 96    values -> STRING
Rule 97    values -> FLOAT
Rule 98    values -> boolean
Rule 99    boolean -> TRUE
Rule 100   boolean -> FALSE
Rule 101   expression -> term
Rule 102   expression -> term PLUS expression
Rule 103   expression -> term MINUS expression
Rule 104   term -> factor
Rule 105   term -> factor MULTIPLY term
Rule 106   term -> factor DIVIDE term
Rule 107   term -> factor MODULE term
Rule 108   term -> factor POW term
Rule 109   factor -> INTEGER
Rule 110   factor -> VARIABLE
Rule 111   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 112   assignment -> variable_assignment
Rule 113   assignment -> constant_assignment
Rule 114   variable_assignment -> VARIABLE assignment_operator values
Rule 115   variable_assignment -> VARIABLE assignment_operator expression
Rule 116   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 117   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 118   variable_assignment -> VARIABLE assignment_operator input
Rule 119   variable_assignment -> VARIABLE assignment_operator special_function
Rule 120   variable_assignment -> VARIABLE INCREASE
Rule 121   variable_assignment -> VARIABLE DECREMENT
Rule 122   variable_assignment -> INCREASE VARIABLE
Rule 123   variable_assignment -> DECREMENT VARIABLE
Rule 124   assignment_operator -> EQUALS
Rule 125   assignment_operator -> PLUS_EQUALS
Rule 126   constant_assignment -> const_syntax
Rule 127   constant_assignment -> define_syntax
Rule 128   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 129   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 130   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 131   params -> real_params
Rule 132   params -> empty
Rule 133   real_params -> VARIABLE
Rule 134   real_params -> values
Rule 135   real_params -> real_params COMMA VARIABLE
Rule 136   real_params -> real_params COMMA values
Rule 137   empty -> <empty>
Rule 138   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 139   special_function -> arrow_function
Rule 140   special_function -> anonymous_functions
Rule 141   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 142   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 143   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 144   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 145   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 146   types_structure -> structure_array_principal
Rule 147   types_structure -> structure_matrix_principal
Rule 148   types_structure -> structure_object_principal
Rule 149   structure_array_principal -> indexed_array
Rule 150   structure_array_principal -> associative_array
Rule 151   structure_array_principal -> access_array_stucture
Rule 152   structure_array_principal -> access_array_element
Rule 153   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 154   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 155   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 156   structure_array -> key EQUALS GREATER_THAN values
Rule 157   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 158   key -> INTEGER
Rule 159   key -> STRING
Rule 160   values_array_indexed -> values
Rule 161   values_array_indexed -> values COMMA values_array_indexed
Rule 162   values_array_indexed -> object_creation
Rule 163   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 164   values_array_indexed -> indexed_array
Rule 165   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 166   access_array_stucture -> access_array_element SEMICOLON
Rule 167   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 168   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 169   structure_matrix_principal -> matrix_firstform
Rule 170   structure_matrix_principal -> matrix_secondform
Rule 171   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 172   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 173   structure_matrix_principal -> add_element_matrix
Rule 174   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 175   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 176   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 177   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 178   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 179   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 180   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 181   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 182   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 183   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 184   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
Rule 185   modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
Rule 186   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
Rule 187   modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
Rule 188   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
Rule 189   modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
Rule 190   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
Rule 191   modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
Rule 192   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 193   structure_object_principal -> object_creation
Rule 194   structure_object_principal -> access_method_object
Rule 195   object_creation -> NEW IDENTIFIER
Rule 196   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 197   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 198   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 199   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 200   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 201   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 202   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 203   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 204   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 205   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 206   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 207   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 208   accessType -> IDENTIFIER
Rule 209   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 210   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 211   interface_body -> interface_body interface_method
Rule 212   interface_body -> <empty>
Rule 213   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 214   class_extends_opt -> EXTENDS IDENTIFIER
Rule 215   class_extends_opt -> <empty>
Rule 216   class_implements_opt -> IMPLEMENTS interface_list
Rule 217   class_implements_opt -> <empty>
Rule 218   interface_list -> IDENTIFIER
Rule 219   interface_list -> interface_list COMMA IDENTIFIER
Rule 220   class_body -> class_body class_member
Rule 221   class_body -> <empty>
Rule 222   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 223   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 224   class_member -> class_attribute
Rule 225   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 226   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 227   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 228   visibility_opt -> PUBLIC
Rule 229   visibility_opt -> PRIVATE
Rule 230   visibility_opt -> PROTECTED
Rule 231   visibility_opt -> <empty>
Rule 232   method_body -> classStatement
Rule 233   method_body -> classStatement return_form
Rule 234   method_body -> return_form
Rule 235   method_body -> classStatement BREAK SEMICOLON
Rule 236   method_body -> classStatement method_body
Rule 237   return_form -> RETURN values SEMICOLON
Rule 238   return_form -> RETURN access_method_object SEMICOLON
Rule 239   return_form -> RETURN SEMICOLON
Rule 240   classStatement -> sentence
Rule 241   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 153 154 155 174 178 179
BREAK                : 24 27 235
CLASS                : 209
COLON                : 
COMMA                : 93 129 135 136 157 161 163 165 177 179 219
COMMENT              : 
CONST                : 128
DECREMENT            : 30 32 121 123
DEFINE               : 129
DIVIDE               : 47 106
ECHO                 : 81 83
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 124 128 141 156 157 184 185 186 187 188 189 190 191 192 199 200 201 204 205 206 225
EQUALS_EQUALS        : 63 64 65 66 67 68 69 70 71
EXTENDS              : 214
FALSE                : 100
FEGTS                : 144
FLOAT                : 43 97
FN                   : 141
FOR                  : 28
FUNCTION             : 138 142 213 222 223
GREATER_EQUALS_TO    : 78
GREATER_THAN         : 76 141 156 157 197 198 199 200 201 202 203 204 205 206
IDENTICAL            : 72
IDENTIFIER           : 40 41 128 130 138 195 196 207 208 209 210 213 214 218 219 222 223
IF                   : 14 15 16
IMPLEMENTS           : 216
INCREASE             : 29 31 120 122
INTEGER              : 33 42 95 109 158 167 180 180 182 183 184 184 186 187 188 188 190 191 207
INTERFACE            : 210
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 143 209 210 222 223
LEFT_BRACKET         : 155 167 168 175 176 177 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 189 190 190 191 191 192 207
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 56 81 82 111 129 130 138 141 142 144 145 153 154 174 178 179 196 213 222 223
LOGIC_AND            : 52
LOGIC_NOT            : 58 59
LOGIC_OR             : 53
LOGIC_XOR            : 54
MINUS                : 45 103 197 198 199 200 201 202 203 204 205 206
MODULE               : 48 107
MULTIPLY             : 46 105
NEW                  : 195 196
NOT_EQUALS           : 73
NOT_IDENTICAL        : 74
NULL_FUSION          : 80
PLUS                 : 44 102
PLUS_EQUALS          : 33 125
POW                  : 49 108
PRINT                : 82 84
PRIVATE              : 229
PROTECTED            : 230
PUBLIC               : 228
READLINE             : 145
RETURN               : 22 23 26 237 238 239
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 143 209 210 222 223
RIGHT_BRACKET        : 155 167 168 175 176 177 180 180 181 181 182 182 183 183 184 184 185 185 186 186 187 187 188 188 189 189 190 190 191 191 192 207
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 56 81 82 111 129 130 138 141 142 144 145 153 154 174 178 179 196 213 222 223
SEMICOLON            : 3 4 22 23 24 26 27 28 28 166 171 172 174 175 213 225 226 227 235 237 238 239 241
SMALL_EQUALS_TO      : 77
SMALL_THAN           : 75
SPACECRAFT           : 79
STATIC               : 222
STDIN                : 144
STRING               : 96 129 145 159
STRING_CONCATENATION : 94
TRUE                 : 99
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 59 63 65 66 67 67 69 70 87 88 110 114 115 116 117 118 119 120 121 122 123 133 135 167 168 168 180 181 181 181 182 182 183 183 184 185 185 185 186 186 187 187 188 188 189 189 189 189 190 190 190 191 191 191 192 197 198 199 200 200 201 205 225 226
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 198 199 200 201 203 204 205 206
access_array_element : 41 64 65 66 68 68 152 166 201 202 203 204 205 206 206
access_array_stucture : 151
access_element_matrix : 69 70 171
access_method_object : 194 238 241
add_element_matrix   : 173
anonymous_functions  : 140
arrow_function       : 139
assignment           : 4
assignment_operator  : 114 115 116 117 118 119
associative_array    : 150
body_statement       : 13 14 15 16 17 18 19 20 25 28 143
boolean              : 98
boolean_expression   : 50 51 51
classStatement       : 232 233 235 236
class_attribute      : 224
class_body           : 209 220
class_declaration    : 6
class_extends_opt    : 209 210
class_implements_opt : 209
class_member         : 220
codeblock            : 138 141 142
comparation          : 55
comparator_operator  : 35 60 61 62
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 56 58 89 90
const_syntax         : 126
constant_assignment  : 113 227
control_structures   : 8
define_syntax        : 127
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 132
expression           : 61 62 62 102 103 111 115
expression_for       : 28 35 38 38 39
factor               : 104 105 106 107 108
for_statement        : 12
function_declaration : 9
function_invocation  : 116 197 202
if_statement         : 10
increment_statement  : 28
indexed_array        : 149 164 165 192
input                : 118
interface_body       : 210 211
interface_declaration : 7
interface_list       : 216 219
interface_method     : 211
key                  : 156 157
logic_not_sentence   : 57
logic_operator       : 51
matrix_firstform     : 169
matrix_secondform    : 170
method_body          : 222 223 236
modify_element_matrix : 172
number_values        : 34 37
object_creation      : 162 163 193
operator_aritmetic   : 34 38
params               : 130 138 141 142 196 213 222 223
print_statement      : 3
printable_dividers   : 86 88 90 92
printable_values     : 81 82 83 84 86 88 90 92
program              : 1 0
real_params          : 131 135 136
return_form          : 233 234
sentence             : 1 2 21 22 23 24 25 240
special_function     : 119
structure_array      : 154 155 157
structure_array_principal : 146
structure_matrix_first : 174 179
structure_matrix_principal : 147
structure_matrix_second : 175 177
structure_object_principal : 91 92 148
term                 : 101 102 103 105 106 107 108
types_structure      : 5 117
values               : 22 26 60 60 61 63 64 85 86 114 128 129 134 136 156 157 160 161 176 177 178 179 184 185 186 187 199 204 225 237
values_array_indexed : 153 161 163 165
variable_assignment  : 112
visibility_opt       : 213 222 223 225 226 227
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (81) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> ECHO . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 54
    structure_object_principal     shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 11

    (82) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (84) print_statement -> PRINT . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 71
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    printable_values               shift and go to state 72
    values                         shift and go to state 52
    conditional                    shift and go to state 54
    structure_object_principal     shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 12

    (112) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 112 (assignment -> variable_assignment .)


state 13

    (113) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 113 (assignment -> constant_assignment .)


state 14

    (146) types_structure -> structure_array_principal .

    ECHO            reduce using rule 146 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 146 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 146 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 146 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 146 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 146 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 146 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 146 (types_structure -> structure_array_principal .)
    IF              reduce using rule 146 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 146 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 146 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 146 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 146 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 146 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 146 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 146 (types_structure -> structure_array_principal .)
    $end            reduce using rule 146 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 146 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 146 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 146 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 146 (types_structure -> structure_array_principal .)


state 15

    (147) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 147 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 147 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 147 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 147 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 147 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 147 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 147 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 147 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 147 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 147 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 147 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 147 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 147 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 147 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 147 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 147 (types_structure -> structure_matrix_principal .)


state 16

    (148) types_structure -> structure_object_principal .

    ECHO            reduce using rule 148 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 148 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 148 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 148 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 148 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 148 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 148 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 148 (types_structure -> structure_object_principal .)
    IF              reduce using rule 148 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 148 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 148 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 148 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 148 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 148 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 148 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 148 (types_structure -> structure_object_principal .)
    $end            reduce using rule 148 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 148 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 148 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 148 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 148 (types_structure -> structure_object_principal .)


state 17

    (209) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 73


state 18

    (210) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 74


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (138) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 75


state 23

    (114) variable_assignment -> VARIABLE . assignment_operator values
    (115) variable_assignment -> VARIABLE . assignment_operator expression
    (116) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (117) variable_assignment -> VARIABLE . assignment_operator types_structure
    (118) variable_assignment -> VARIABLE . assignment_operator input
    (119) variable_assignment -> VARIABLE . assignment_operator special_function
    (120) variable_assignment -> VARIABLE . INCREASE
    (121) variable_assignment -> VARIABLE . DECREMENT
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (124) assignment_operator -> . EQUALS
    (125) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 77
    DECREMENT       shift and go to state 78
    LEFT_BRACKET    shift and go to state 79
    MINUS           shift and go to state 81
    EQUALS          shift and go to state 80
    PLUS_EQUALS     shift and go to state 82

    assignment_operator            shift and go to state 76

state 24

    (122) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 83


state 25

    (123) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 84


state 26

    (126) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 126 (constant_assignment -> const_syntax .)


state 27

    (127) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 127 (constant_assignment -> define_syntax .)


state 28

    (149) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 149 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 149 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 149 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 149 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 149 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 149 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 149 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 149 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 149 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 149 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 149 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 149 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 149 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 149 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 149 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 149 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 149 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 149 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 149 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 149 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 149 (structure_array_principal -> indexed_array .)


state 29

    (150) structure_array_principal -> associative_array .

    ECHO            reduce using rule 150 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 150 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 150 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 150 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 150 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 150 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 150 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 150 (structure_array_principal -> associative_array .)
    IF              reduce using rule 150 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 150 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 150 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 150 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 150 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 150 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 150 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 150 (structure_array_principal -> associative_array .)
    $end            reduce using rule 150 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 150 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 150 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 150 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 150 (structure_array_principal -> associative_array .)


state 30

    (151) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 151 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 151 (structure_array_principal -> access_array_stucture .)


state 31

    (152) structure_array_principal -> access_array_element .
    (166) access_array_stucture -> access_array_element . SEMICOLON
    (202) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (203) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (204) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ECHO            reduce using rule 152 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 152 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 152 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 152 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 152 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 152 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 152 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 152 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 152 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 152 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 152 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 152 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 152 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 152 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 152 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 152 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 152 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 152 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 152 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 152 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 85
    MINUS           shift and go to state 86

  ! SEMICOLON       [ reduce using rule 152 (structure_array_principal -> access_array_element .) ]


state 32

    (169) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 169 (structure_matrix_principal -> matrix_firstform .)


state 33

    (170) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 170 (structure_matrix_principal -> matrix_secondform .)


state 34

    (171) structure_matrix_principal -> access_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 87


state 35

    (172) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 88


state 36

    (173) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 173 (structure_matrix_principal -> add_element_matrix .)


state 37

    (193) structure_object_principal -> object_creation .

    ECHO            reduce using rule 193 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 193 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 193 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 193 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 193 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 193 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 193 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 193 (structure_object_principal -> object_creation .)
    IF              reduce using rule 193 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 193 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 193 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 193 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 193 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 193 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 193 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 193 (structure_object_principal -> object_creation .)
    $end            reduce using rule 193 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 193 (structure_object_principal -> object_creation .)
    STRING_CONCATENATION reduce using rule 193 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 193 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 193 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 193 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 193 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 193 (structure_object_principal -> object_creation .)


state 38

    (194) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 194 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 194 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 194 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 194 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 194 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 194 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 194 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 194 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 194 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 194 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 194 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 194 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 194 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 194 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 194 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 194 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 194 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 194 (structure_object_principal -> access_method_object .)
    STRING_CONCATENATION reduce using rule 194 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 194 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 194 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 194 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 194 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 194 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 89


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 90


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 91


state 42

    (128) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 92


state 43

    (129) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 93


state 44

    (153) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (174) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 94
    LEFT_BRACKET    shift and go to state 95


state 45

    (175) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (176) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (177) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 96

    structure_matrix_second        shift and go to state 97

state 46

    (195) object_creation -> NEW . IDENTIFIER
    (196) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 98


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (81) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (111) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 103
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 99
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    printable_values               shift and go to state 100
    conditional                    shift and go to state 101
    expression                     shift and go to state 102
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 55
    boolean_expression             shift and go to state 60
    term                           shift and go to state 69
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    factor                         shift and go to state 70
    access_array_element           shift and go to state 65
    access_element_matrix          shift and go to state 67

state 51

    (83) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 83 (print_statement -> ECHO printable_values .)


state 52

    (85) printable_values -> values .
    (86) printable_values -> values . printable_dividers printable_values
    (60) comparation -> values . comparator_operator values
    (61) comparation -> values . comparator_operator expression
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION
    (71) comparator_operator -> . EQUALS_EQUALS
    (72) comparator_operator -> . IDENTICAL
    (73) comparator_operator -> . NOT_EQUALS
    (74) comparator_operator -> . NOT_IDENTICAL
    (75) comparator_operator -> . SMALL_THAN
    (76) comparator_operator -> . GREATER_THAN
    (77) comparator_operator -> . SMALL_EQUALS_TO
    (78) comparator_operator -> . GREATER_EQUALS_TO
    (79) comparator_operator -> . SPACECRAFT
    (80) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 85 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 85 (printable_values -> values .)
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107
    EQUALS_EQUALS   shift and go to state 108
    IDENTICAL       shift and go to state 109
    NOT_EQUALS      shift and go to state 110
    NOT_IDENTICAL   shift and go to state 111
    SMALL_THAN      shift and go to state 112
    GREATER_THAN    shift and go to state 113
    SMALL_EQUALS_TO shift and go to state 114
    GREATER_EQUALS_TO shift and go to state 115
    SPACECRAFT      shift and go to state 116
    NULL_FUSION     shift and go to state 117

    printable_dividers             shift and go to state 104
    comparator_operator            shift and go to state 105

state 53

    (87) printable_values -> VARIABLE .
    (88) printable_values -> VARIABLE . printable_dividers printable_values
    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (63) comparation -> VARIABLE . EQUALS_EQUALS values
    (66) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (67) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (70) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (110) factor -> VARIABLE .
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 87 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 87 (printable_values -> VARIABLE .)
    MINUS           shift and go to state 81
    EQUALS_EQUALS   shift and go to state 119
    LEFT_BRACKET    shift and go to state 120
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107

  ! MINUS           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 110 (factor -> VARIABLE .) ]

    printable_dividers             shift and go to state 118

state 54

    (89) printable_values -> conditional .
    (90) printable_values -> conditional . printable_dividers printable_values
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 89 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 89 (printable_values -> conditional .)
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107

    printable_dividers             shift and go to state 121

state 55

    (91) printable_values -> structure_object_principal .
    (92) printable_values -> structure_object_principal . printable_dividers printable_values
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 91 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 91 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107

    printable_dividers             shift and go to state 122

state 56

    (95) values -> INTEGER .
    (109) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 95 (values -> INTEGER .)
    COMMA           reduce using rule 95 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 95 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 95 (values -> INTEGER .)
    IDENTICAL       reduce using rule 95 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 95 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 95 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 95 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 95 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 95 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 95 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 95 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 95 (values -> INTEGER .)
    SEMICOLON       reduce using rule 95 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 95 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 95 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 95 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 95 (values -> INTEGER .)
    MULTIPLY        reduce using rule 109 (factor -> INTEGER .)
    DIVIDE          reduce using rule 109 (factor -> INTEGER .)
    MODULE          reduce using rule 109 (factor -> INTEGER .)
    POW             reduce using rule 109 (factor -> INTEGER .)
    PLUS            reduce using rule 109 (factor -> INTEGER .)
    MINUS           reduce using rule 109 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 109 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 109 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 109 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 109 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 109 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 109 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 109 (factor -> INTEGER .) ]
  ! STRING_CONCATENATION [ reduce using rule 109 (factor -> INTEGER .) ]


state 57

    (96) values -> STRING .

    COMMA           reduce using rule 96 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 96 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 96 (values -> STRING .)
    IDENTICAL       reduce using rule 96 (values -> STRING .)
    NOT_EQUALS      reduce using rule 96 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 96 (values -> STRING .)
    SMALL_THAN      reduce using rule 96 (values -> STRING .)
    GREATER_THAN    reduce using rule 96 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 96 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 96 (values -> STRING .)
    SPACECRAFT      reduce using rule 96 (values -> STRING .)
    NULL_FUSION     reduce using rule 96 (values -> STRING .)
    SEMICOLON       reduce using rule 96 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 96 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 96 (values -> STRING .)
    LOGIC_AND       reduce using rule 96 (values -> STRING .)
    LOGIC_OR        reduce using rule 96 (values -> STRING .)
    LOGIC_XOR       reduce using rule 96 (values -> STRING .)
    ECHO            reduce using rule 96 (values -> STRING .)
    PRINT           reduce using rule 96 (values -> STRING .)
    CLASS           reduce using rule 96 (values -> STRING .)
    INTERFACE       reduce using rule 96 (values -> STRING .)
    FUNCTION        reduce using rule 96 (values -> STRING .)
    VARIABLE        reduce using rule 96 (values -> STRING .)
    INCREASE        reduce using rule 96 (values -> STRING .)
    DECREMENT       reduce using rule 96 (values -> STRING .)
    IF              reduce using rule 96 (values -> STRING .)
    WHILE           reduce using rule 96 (values -> STRING .)
    FOR             reduce using rule 96 (values -> STRING .)
    CONST           reduce using rule 96 (values -> STRING .)
    DEFINE          reduce using rule 96 (values -> STRING .)
    ARRAY           reduce using rule 96 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 96 (values -> STRING .)
    NEW             reduce using rule 96 (values -> STRING .)
    $end            reduce using rule 96 (values -> STRING .)
    RETURN          reduce using rule 96 (values -> STRING .)
    BREAK           reduce using rule 96 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 96 (values -> STRING .)


state 58

    (97) values -> FLOAT .

    COMMA           reduce using rule 97 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 97 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 97 (values -> FLOAT .)
    IDENTICAL       reduce using rule 97 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 97 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 97 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 97 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 97 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 97 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 97 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 97 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 97 (values -> FLOAT .)
    SEMICOLON       reduce using rule 97 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 97 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 97 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 97 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 97 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 97 (values -> FLOAT .)
    ECHO            reduce using rule 97 (values -> FLOAT .)
    PRINT           reduce using rule 97 (values -> FLOAT .)
    CLASS           reduce using rule 97 (values -> FLOAT .)
    INTERFACE       reduce using rule 97 (values -> FLOAT .)
    FUNCTION        reduce using rule 97 (values -> FLOAT .)
    VARIABLE        reduce using rule 97 (values -> FLOAT .)
    INCREASE        reduce using rule 97 (values -> FLOAT .)
    DECREMENT       reduce using rule 97 (values -> FLOAT .)
    IF              reduce using rule 97 (values -> FLOAT .)
    WHILE           reduce using rule 97 (values -> FLOAT .)
    FOR             reduce using rule 97 (values -> FLOAT .)
    CONST           reduce using rule 97 (values -> FLOAT .)
    DEFINE          reduce using rule 97 (values -> FLOAT .)
    ARRAY           reduce using rule 97 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 97 (values -> FLOAT .)
    NEW             reduce using rule 97 (values -> FLOAT .)
    $end            reduce using rule 97 (values -> FLOAT .)
    RETURN          reduce using rule 97 (values -> FLOAT .)
    BREAK           reduce using rule 97 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 97 (values -> FLOAT .)


state 59

    (98) values -> boolean .

    COMMA           reduce using rule 98 (values -> boolean .)
    STRING_CONCATENATION reduce using rule 98 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 98 (values -> boolean .)
    IDENTICAL       reduce using rule 98 (values -> boolean .)
    NOT_EQUALS      reduce using rule 98 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 98 (values -> boolean .)
    SMALL_THAN      reduce using rule 98 (values -> boolean .)
    GREATER_THAN    reduce using rule 98 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 98 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 98 (values -> boolean .)
    SPACECRAFT      reduce using rule 98 (values -> boolean .)
    NULL_FUSION     reduce using rule 98 (values -> boolean .)
    SEMICOLON       reduce using rule 98 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 98 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 98 (values -> boolean .)
    LOGIC_AND       reduce using rule 98 (values -> boolean .)
    LOGIC_OR        reduce using rule 98 (values -> boolean .)
    LOGIC_XOR       reduce using rule 98 (values -> boolean .)
    ECHO            reduce using rule 98 (values -> boolean .)
    PRINT           reduce using rule 98 (values -> boolean .)
    CLASS           reduce using rule 98 (values -> boolean .)
    INTERFACE       reduce using rule 98 (values -> boolean .)
    FUNCTION        reduce using rule 98 (values -> boolean .)
    VARIABLE        reduce using rule 98 (values -> boolean .)
    INCREASE        reduce using rule 98 (values -> boolean .)
    DECREMENT       reduce using rule 98 (values -> boolean .)
    IF              reduce using rule 98 (values -> boolean .)
    WHILE           reduce using rule 98 (values -> boolean .)
    FOR             reduce using rule 98 (values -> boolean .)
    CONST           reduce using rule 98 (values -> boolean .)
    DEFINE          reduce using rule 98 (values -> boolean .)
    ARRAY           reduce using rule 98 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 98 (values -> boolean .)
    NEW             reduce using rule 98 (values -> boolean .)
    $end            reduce using rule 98 (values -> boolean .)
    RETURN          reduce using rule 98 (values -> boolean .)
    BREAK           reduce using rule 98 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 98 (values -> boolean .)


state 60

    (50) conditional -> boolean_expression .
    (51) conditional -> boolean_expression . logic_operator boolean_expression
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 50 (conditional -> boolean_expression .)
    STRING_CONCATENATION reduce using rule 50 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 50 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 50 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 124
    LOGIC_OR        shift and go to state 125
    LOGIC_XOR       shift and go to state 126

  ! LOGIC_AND       [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 50 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 123

state 61

    (99) boolean -> TRUE .

    COMMA           reduce using rule 99 (boolean -> TRUE .)
    STRING_CONCATENATION reduce using rule 99 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 99 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 99 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 99 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 99 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 99 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 99 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 99 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 99 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 99 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 99 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 99 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 99 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 99 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 99 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 99 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 99 (boolean -> TRUE .)
    ECHO            reduce using rule 99 (boolean -> TRUE .)
    PRINT           reduce using rule 99 (boolean -> TRUE .)
    CLASS           reduce using rule 99 (boolean -> TRUE .)
    INTERFACE       reduce using rule 99 (boolean -> TRUE .)
    FUNCTION        reduce using rule 99 (boolean -> TRUE .)
    VARIABLE        reduce using rule 99 (boolean -> TRUE .)
    INCREASE        reduce using rule 99 (boolean -> TRUE .)
    DECREMENT       reduce using rule 99 (boolean -> TRUE .)
    IF              reduce using rule 99 (boolean -> TRUE .)
    WHILE           reduce using rule 99 (boolean -> TRUE .)
    FOR             reduce using rule 99 (boolean -> TRUE .)
    CONST           reduce using rule 99 (boolean -> TRUE .)
    DEFINE          reduce using rule 99 (boolean -> TRUE .)
    ARRAY           reduce using rule 99 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 99 (boolean -> TRUE .)
    NEW             reduce using rule 99 (boolean -> TRUE .)
    $end            reduce using rule 99 (boolean -> TRUE .)
    RETURN          reduce using rule 99 (boolean -> TRUE .)
    BREAK           reduce using rule 99 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 99 (boolean -> TRUE .)


state 62

    (100) boolean -> FALSE .

    COMMA           reduce using rule 100 (boolean -> FALSE .)
    STRING_CONCATENATION reduce using rule 100 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 100 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 100 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 100 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 100 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 100 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 100 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 100 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 100 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 100 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 100 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 100 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 100 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 100 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 100 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 100 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 100 (boolean -> FALSE .)
    ECHO            reduce using rule 100 (boolean -> FALSE .)
    PRINT           reduce using rule 100 (boolean -> FALSE .)
    CLASS           reduce using rule 100 (boolean -> FALSE .)
    INTERFACE       reduce using rule 100 (boolean -> FALSE .)
    FUNCTION        reduce using rule 100 (boolean -> FALSE .)
    VARIABLE        reduce using rule 100 (boolean -> FALSE .)
    INCREASE        reduce using rule 100 (boolean -> FALSE .)
    DECREMENT       reduce using rule 100 (boolean -> FALSE .)
    IF              reduce using rule 100 (boolean -> FALSE .)
    WHILE           reduce using rule 100 (boolean -> FALSE .)
    FOR             reduce using rule 100 (boolean -> FALSE .)
    CONST           reduce using rule 100 (boolean -> FALSE .)
    DEFINE          reduce using rule 100 (boolean -> FALSE .)
    ARRAY           reduce using rule 100 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 100 (boolean -> FALSE .)
    NEW             reduce using rule 100 (boolean -> FALSE .)
    $end            reduce using rule 100 (boolean -> FALSE .)
    RETURN          reduce using rule 100 (boolean -> FALSE .)
    BREAK           reduce using rule 100 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 100 (boolean -> FALSE .)


state 63

    (55) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 55 (boolean_expression -> comparation .)
    COMMA           reduce using rule 55 (boolean_expression -> comparation .)
    STRING_CONCATENATION reduce using rule 55 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 55 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 55 (boolean_expression -> comparation .)


state 64

    (57) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    STRING_CONCATENATION reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> logic_not_sentence .)


state 65

    (202) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (203) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (204) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (64) comparation -> access_array_element . EQUALS_EQUALS values
    (65) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (68) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 127


state 66

    (62) comparation -> expression . comparator_operator expression
    (71) comparator_operator -> . EQUALS_EQUALS
    (72) comparator_operator -> . IDENTICAL
    (73) comparator_operator -> . NOT_EQUALS
    (74) comparator_operator -> . NOT_IDENTICAL
    (75) comparator_operator -> . SMALL_THAN
    (76) comparator_operator -> . GREATER_THAN
    (77) comparator_operator -> . SMALL_EQUALS_TO
    (78) comparator_operator -> . GREATER_EQUALS_TO
    (79) comparator_operator -> . SPACECRAFT
    (80) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 108
    IDENTICAL       shift and go to state 109
    NOT_EQUALS      shift and go to state 110
    NOT_IDENTICAL   shift and go to state 111
    SMALL_THAN      shift and go to state 112
    GREATER_THAN    shift and go to state 113
    SMALL_EQUALS_TO shift and go to state 114
    GREATER_EQUALS_TO shift and go to state 115
    SPACECRAFT      shift and go to state 116
    NULL_FUSION     shift and go to state 117

    comparator_operator            shift and go to state 128

state 67

    (69) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 129


state 68

    (58) logic_not_sentence -> LOGIC_NOT . conditional
    (59) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 131
    LEFT_PAREN      shift and go to state 99
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    conditional                    shift and go to state 130
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    values                         shift and go to state 132
    expression                     shift and go to state 66
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 69

    (101) expression -> term .
    (102) expression -> term . PLUS expression
    (103) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 101 (expression -> term .)
    IDENTICAL       reduce using rule 101 (expression -> term .)
    NOT_EQUALS      reduce using rule 101 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 101 (expression -> term .)
    SMALL_THAN      reduce using rule 101 (expression -> term .)
    GREATER_THAN    reduce using rule 101 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 101 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 101 (expression -> term .)
    SPACECRAFT      reduce using rule 101 (expression -> term .)
    NULL_FUSION     reduce using rule 101 (expression -> term .)
    RIGHT_PAREN     reduce using rule 101 (expression -> term .)
    SEMICOLON       reduce using rule 101 (expression -> term .)
    LOGIC_AND       reduce using rule 101 (expression -> term .)
    LOGIC_OR        reduce using rule 101 (expression -> term .)
    LOGIC_XOR       reduce using rule 101 (expression -> term .)
    COMMA           reduce using rule 101 (expression -> term .)
    STRING_CONCATENATION reduce using rule 101 (expression -> term .)
    PLUS            shift and go to state 134
    MINUS           shift and go to state 135


state 70

    (104) term -> factor .
    (105) term -> factor . MULTIPLY term
    (106) term -> factor . DIVIDE term
    (107) term -> factor . MODULE term
    (108) term -> factor . POW term

    PLUS            reduce using rule 104 (term -> factor .)
    MINUS           reduce using rule 104 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 104 (term -> factor .)
    IDENTICAL       reduce using rule 104 (term -> factor .)
    NOT_EQUALS      reduce using rule 104 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 104 (term -> factor .)
    SMALL_THAN      reduce using rule 104 (term -> factor .)
    GREATER_THAN    reduce using rule 104 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 104 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 104 (term -> factor .)
    SPACECRAFT      reduce using rule 104 (term -> factor .)
    NULL_FUSION     reduce using rule 104 (term -> factor .)
    RIGHT_PAREN     reduce using rule 104 (term -> factor .)
    SEMICOLON       reduce using rule 104 (term -> factor .)
    LOGIC_AND       reduce using rule 104 (term -> factor .)
    LOGIC_OR        reduce using rule 104 (term -> factor .)
    LOGIC_XOR       reduce using rule 104 (term -> factor .)
    COMMA           reduce using rule 104 (term -> factor .)
    STRING_CONCATENATION reduce using rule 104 (term -> factor .)
    MULTIPLY        shift and go to state 136
    DIVIDE          shift and go to state 137
    MODULE          shift and go to state 138
    POW             shift and go to state 139


state 71

    (82) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (111) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 103
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 99
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    printable_values               shift and go to state 140
    conditional                    shift and go to state 101
    expression                     shift and go to state 102
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 55
    boolean_expression             shift and go to state 60
    term                           shift and go to state 69
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    factor                         shift and go to state 70
    access_array_element           shift and go to state 65
    access_element_matrix          shift and go to state 67

state 72

    (84) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 84 (print_statement -> PRINT printable_values .)


state 73

    (209) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (214) class_extends_opt -> . EXTENDS IDENTIFIER
    (215) class_extends_opt -> .

    EXTENDS         shift and go to state 142
    IMPLEMENTS      reduce using rule 215 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 215 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 141

state 74

    (210) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (214) class_extends_opt -> . EXTENDS IDENTIFIER
    (215) class_extends_opt -> .

    EXTENDS         shift and go to state 142
    LEFT_BRACE      reduce using rule 215 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 143

state 75

    (138) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 144


state 76

    (114) variable_assignment -> VARIABLE assignment_operator . values
    (115) variable_assignment -> VARIABLE assignment_operator . expression
    (116) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (117) variable_assignment -> VARIABLE assignment_operator . types_structure
    (118) variable_assignment -> VARIABLE assignment_operator . input
    (119) variable_assignment -> VARIABLE assignment_operator . special_function
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (130) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (144) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (145) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (139) special_function -> . arrow_function
    (140) special_function -> . anonymous_functions
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (141) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (142) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    IDENTIFIER      shift and go to state 152
    FEGTS           shift and go to state 154
    READLINE        shift and go to state 155
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    FN              shift and go to state 158
    FUNCTION        shift and go to state 159
    VARIABLE        shift and go to state 145
    LEFT_PAREN      shift and go to state 153
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    values                         shift and go to state 146
    expression                     shift and go to state 147
    function_invocation            shift and go to state 148
    types_structure                shift and go to state 149
    input                          shift and go to state 150
    special_function               shift and go to state 151
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 156
    anonymous_functions            shift and go to state 157
    factor                         shift and go to state 70
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 77

    (120) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 120 (variable_assignment -> VARIABLE INCREASE .)


state 78

    (121) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 121 (variable_assignment -> VARIABLE DECREMENT .)


state 79

    (167) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 161
    VARIABLE        shift and go to state 160
    RIGHT_BRACKET   shift and go to state 162


state 80

    (124) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 124 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 124 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 124 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 124 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 124 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 124 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 124 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 124 (assignment_operator -> EQUALS .)
    FN              reduce using rule 124 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 124 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 124 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 124 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 124 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 124 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 124 (assignment_operator -> EQUALS .)


state 81

    (197) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (199) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 163


state 82

    (125) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 125 (assignment_operator -> PLUS_EQUALS .)


state 83

    (122) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 122 (variable_assignment -> INCREASE VARIABLE .)


state 84

    (123) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 123 (variable_assignment -> DECREMENT VARIABLE .)


state 85

    (166) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 166 (access_array_stucture -> access_array_element SEMICOLON .)


state 86

    (202) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (203) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (204) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (205) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 164


state 87

    (171) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 171 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 88

    (172) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 172 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 89

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99
    VARIABLE        shift and go to state 166
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    conditional                    shift and go to state 165
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    values                         shift and go to state 132
    expression                     shift and go to state 66
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 90

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99
    VARIABLE        shift and go to state 166
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    conditional                    shift and go to state 167
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    values                         shift and go to state 132
    expression                     shift and go to state 66
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 91

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 168


state 92

    (128) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 169


state 93

    (129) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 170


state 94

    (153) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (154) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (174) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (156) structure_array -> . key EQUALS GREATER_THAN values
    (157) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (178) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (179) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (158) key -> . INTEGER
    (159) key -> . STRING
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    ARRAY           shift and go to state 171
    INTEGER         shift and go to state 179
    STRING          shift and go to state 180
    FLOAT           shift and go to state 58
    NEW             shift and go to state 46
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values_array_indexed           shift and go to state 172
    structure_array                shift and go to state 173
    structure_matrix_first         shift and go to state 174
    values                         shift and go to state 175
    object_creation                shift and go to state 176
    indexed_array                  shift and go to state 177
    key                            shift and go to state 178
    boolean                        shift and go to state 59

state 95

    (155) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (156) structure_array -> . key EQUALS GREATER_THAN values
    (157) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (158) key -> . INTEGER
    (159) key -> . STRING

    INTEGER         shift and go to state 182
    STRING          shift and go to state 183

    structure_array                shift and go to state 181
    key                            shift and go to state 178

state 96

    (176) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (177) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 184
    boolean                        shift and go to state 59

state 97

    (175) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 186


state 98

    (195) object_creation -> NEW IDENTIFIER .
    (196) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 195 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 187


state 99

    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (111) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 99
    VARIABLE        shift and go to state 189
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 190
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    conditional                    shift and go to state 188
    expression                     shift and go to state 102
    boolean_expression             shift and go to state 60
    term                           shift and go to state 69
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    factor                         shift and go to state 70
    values                         shift and go to state 132
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59

state 100

    (81) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 191


state 101

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (89) printable_values -> conditional .
    (90) printable_values -> conditional . printable_dividers printable_values
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 192
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107

  ! RIGHT_PAREN     [ reduce using rule 89 (printable_values -> conditional .) ]

    printable_dividers             shift and go to state 121

state 102

    (111) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (62) comparation -> expression . comparator_operator expression
    (71) comparator_operator -> . EQUALS_EQUALS
    (72) comparator_operator -> . IDENTICAL
    (73) comparator_operator -> . NOT_EQUALS
    (74) comparator_operator -> . NOT_IDENTICAL
    (75) comparator_operator -> . SMALL_THAN
    (76) comparator_operator -> . GREATER_THAN
    (77) comparator_operator -> . SMALL_EQUALS_TO
    (78) comparator_operator -> . GREATER_EQUALS_TO
    (79) comparator_operator -> . SPACECRAFT
    (80) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 193
    EQUALS_EQUALS   shift and go to state 108
    IDENTICAL       shift and go to state 109
    NOT_EQUALS      shift and go to state 110
    NOT_IDENTICAL   shift and go to state 111
    SMALL_THAN      shift and go to state 112
    GREATER_THAN    shift and go to state 113
    SMALL_EQUALS_TO shift and go to state 114
    GREATER_EQUALS_TO shift and go to state 115
    SPACECRAFT      shift and go to state 116
    NULL_FUSION     shift and go to state 117

    comparator_operator            shift and go to state 128

state 103

    (87) printable_values -> VARIABLE .
    (88) printable_values -> VARIABLE . printable_dividers printable_values
    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (63) comparation -> VARIABLE . EQUALS_EQUALS values
    (66) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (67) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (70) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (110) factor -> VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (93) printable_dividers -> . COMMA
    (94) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 87 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    RIGHT_PAREN     reduce using rule 87 (printable_values -> VARIABLE .)
    MINUS           shift and go to state 81
    EQUALS_EQUALS   shift and go to state 119
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 120
    COMMA           shift and go to state 106
    STRING_CONCATENATION shift and go to state 107

  ! MINUS           [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 110 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 110 (factor -> VARIABLE .) ]

    printable_dividers             shift and go to state 118

state 104

    (86) printable_values -> values printable_dividers . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 99
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    values                         shift and go to state 52
    printable_values               shift and go to state 194
    conditional                    shift and go to state 54
    structure_object_principal     shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 105

    (60) comparation -> values comparator_operator . values
    (61) comparation -> values comparator_operator . expression
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    values                         shift and go to state 195
    expression                     shift and go to state 196
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 106

    (93) printable_dividers -> COMMA .

    VARIABLE        reduce using rule 93 (printable_dividers -> COMMA .)
    INTEGER         reduce using rule 93 (printable_dividers -> COMMA .)
    STRING          reduce using rule 93 (printable_dividers -> COMMA .)
    FLOAT           reduce using rule 93 (printable_dividers -> COMMA .)
    TRUE            reduce using rule 93 (printable_dividers -> COMMA .)
    FALSE           reduce using rule 93 (printable_dividers -> COMMA .)
    LEFT_PAREN      reduce using rule 93 (printable_dividers -> COMMA .)
    NEW             reduce using rule 93 (printable_dividers -> COMMA .)
    LOGIC_NOT       reduce using rule 93 (printable_dividers -> COMMA .)


state 107

    (94) printable_dividers -> STRING_CONCATENATION .

    VARIABLE        reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    INTEGER         reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    STRING          reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    FLOAT           reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    TRUE            reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    FALSE           reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    LEFT_PAREN      reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    NEW             reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)
    LOGIC_NOT       reduce using rule 94 (printable_dividers -> STRING_CONCATENATION .)


state 108

    (71) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 71 (comparator_operator -> EQUALS_EQUALS .)


state 109

    (72) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 72 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 72 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 72 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 72 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 72 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 72 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 72 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 72 (comparator_operator -> IDENTICAL .)


state 110

    (73) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 73 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 73 (comparator_operator -> NOT_EQUALS .)


state 111

    (74) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 74 (comparator_operator -> NOT_IDENTICAL .)


state 112

    (75) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 75 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 75 (comparator_operator -> SMALL_THAN .)


state 113

    (76) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 76 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 76 (comparator_operator -> GREATER_THAN .)


state 114

    (77) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 77 (comparator_operator -> SMALL_EQUALS_TO .)


state 115

    (78) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 78 (comparator_operator -> GREATER_EQUALS_TO .)


state 116

    (79) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 79 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 79 (comparator_operator -> SPACECRAFT .)


state 117

    (80) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 80 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 80 (comparator_operator -> NULL_FUSION .)


state 118

    (88) printable_values -> VARIABLE printable_dividers . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 99
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    printable_values               shift and go to state 198
    values                         shift and go to state 52
    conditional                    shift and go to state 54
    structure_object_principal     shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 119

    (63) comparation -> VARIABLE EQUALS_EQUALS . values
    (66) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (67) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (70) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 199
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 200
    access_array_element           shift and go to state 201
    access_element_matrix          shift and go to state 202
    boolean                        shift and go to state 59

state 120

    (167) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 204
    VARIABLE        shift and go to state 203


state 121

    (90) printable_values -> conditional printable_dividers . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 99
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    conditional                    shift and go to state 54
    printable_values               shift and go to state 205
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 122

    (92) printable_values -> structure_object_principal printable_dividers . printable_values
    (85) printable_values -> . values
    (86) printable_values -> . values printable_dividers printable_values
    (87) printable_values -> . VARIABLE
    (88) printable_values -> . VARIABLE printable_dividers printable_values
    (89) printable_values -> . conditional
    (90) printable_values -> . conditional printable_dividers printable_values
    (91) printable_values -> . structure_object_principal
    (92) printable_values -> . structure_object_principal printable_dividers printable_values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 99
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 68

    structure_object_principal     shift and go to state 55
    printable_values               shift and go to state 206
    values                         shift and go to state 52
    conditional                    shift and go to state 54
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    access_array_element           shift and go to state 65
    expression                     shift and go to state 66
    access_element_matrix          shift and go to state 67
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 123

    (51) conditional -> boolean_expression logic_operator . boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99
    VARIABLE        shift and go to state 166
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    boolean_expression             shift and go to state 207
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    values                         shift and go to state 132
    expression                     shift and go to state 66
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 124

    (52) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 52 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 52 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 52 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 52 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 52 (logic_operator -> LOGIC_AND .)


state 125

    (53) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_OR .)


state 126

    (54) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_XOR .)


state 127

    (64) comparation -> access_array_element EQUALS_EQUALS . values
    (65) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (68) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 210
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    access_array_element           shift and go to state 208
    values                         shift and go to state 209
    boolean                        shift and go to state 59

state 128

    (62) comparation -> expression comparator_operator . expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    expression                     shift and go to state 211
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 129

    (69) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 213


state 130

    (58) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    STRING_CONCATENATION reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 58 (logic_not_sentence -> LOGIC_NOT conditional .)


state 131

    (59) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (63) comparation -> VARIABLE . EQUALS_EQUALS values
    (66) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (67) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (70) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (110) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    STRING_CONCATENATION reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 119
    LEFT_BRACKET    shift and go to state 120
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 110 (factor -> VARIABLE .) ]


state 132

    (60) comparation -> values . comparator_operator values
    (61) comparation -> values . comparator_operator expression
    (71) comparator_operator -> . EQUALS_EQUALS
    (72) comparator_operator -> . IDENTICAL
    (73) comparator_operator -> . NOT_EQUALS
    (74) comparator_operator -> . NOT_IDENTICAL
    (75) comparator_operator -> . SMALL_THAN
    (76) comparator_operator -> . GREATER_THAN
    (77) comparator_operator -> . SMALL_EQUALS_TO
    (78) comparator_operator -> . GREATER_EQUALS_TO
    (79) comparator_operator -> . SPACECRAFT
    (80) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 108
    IDENTICAL       shift and go to state 109
    NOT_EQUALS      shift and go to state 110
    NOT_IDENTICAL   shift and go to state 111
    SMALL_THAN      shift and go to state 112
    GREATER_THAN    shift and go to state 113
    SMALL_EQUALS_TO shift and go to state 114
    GREATER_EQUALS_TO shift and go to state 115
    SPACECRAFT      shift and go to state 116
    NULL_FUSION     shift and go to state 117

    comparator_operator            shift and go to state 105

state 133

    (64) comparation -> access_array_element . EQUALS_EQUALS values
    (65) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (68) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 127


state 134

    (102) expression -> term PLUS . expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    term                           shift and go to state 69
    expression                     shift and go to state 214
    factor                         shift and go to state 70

state 135

    (103) expression -> term MINUS . expression
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    term                           shift and go to state 69
    expression                     shift and go to state 215
    factor                         shift and go to state 70

state 136

    (105) term -> factor MULTIPLY . term
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    factor                         shift and go to state 70
    term                           shift and go to state 216

state 137

    (106) term -> factor DIVIDE . term
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    factor                         shift and go to state 70
    term                           shift and go to state 217

state 138

    (107) term -> factor MODULE . term
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    factor                         shift and go to state 70
    term                           shift and go to state 218

state 139

    (108) term -> factor POW . term
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    factor                         shift and go to state 70
    term                           shift and go to state 219

state 140

    (82) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 220


state 141

    (209) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (216) class_implements_opt -> . IMPLEMENTS interface_list
    (217) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 222
    LEFT_BRACE      reduce using rule 217 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 221

state 142

    (214) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 223


state 143

    (210) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 224


state 144

    (138) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 225
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 145

    (110) factor -> VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 79
    MINUS           shift and go to state 81

  ! MINUS           [ reduce using rule 110 (factor -> VARIABLE .) ]


state 146

    (114) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 114 (variable_assignment -> VARIABLE assignment_operator values .)


state 147

    (115) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 115 (variable_assignment -> VARIABLE assignment_operator expression .)


state 148

    (116) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 116 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 149

    (117) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 117 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 150

    (118) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 118 (variable_assignment -> VARIABLE assignment_operator input .)


state 151

    (119) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 119 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 152

    (130) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 230


state 153

    (111) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 212
    VARIABLE        shift and go to state 197
    LEFT_PAREN      shift and go to state 153

    expression                     shift and go to state 231
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 154

    (144) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 232


state 155

    (145) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 233


state 156

    (139) special_function -> arrow_function .

    SEMICOLON       reduce using rule 139 (special_function -> arrow_function .)


state 157

    (140) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 140 (special_function -> anonymous_functions .)


state 158

    (141) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 234


state 159

    (142) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 235


state 160

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 236


state 161

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 237


state 162

    (192) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 238


state 163

    (197) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (198) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (199) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (200) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (130) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (208) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 241

    function_invocation            shift and go to state 239
    accessType                     shift and go to state 240

state 164

    (202) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (203) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (204) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (205) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (130) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (207) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (208) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 241

    function_invocation            shift and go to state 242
    accessType                     shift and go to state 243

state 165

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 244


state 166

    (63) comparation -> VARIABLE . EQUALS_EQUALS values
    (66) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (67) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (70) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (110) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 119
    LEFT_BRACKET    shift and go to state 120
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 110 (factor -> VARIABLE .) ]


state 167

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 245


state 168

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 246


state 169

    (128) const_syntax -> CONST IDENTIFIER EQUALS . values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 247
    boolean                        shift and go to state 59

state 170

    (129) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 248


state 171

    (178) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (153) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 249


state 172

    (153) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 250


state 173

    (154) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 251


state 174

    (174) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 252


state 175

    (160) values_array_indexed -> values .
    (161) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 160 (values_array_indexed -> values .)
    COMMA           shift and go to state 253


state 176

    (162) values_array_indexed -> object_creation .
    (163) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 162 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 254


state 177

    (164) values_array_indexed -> indexed_array .
    (165) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 164 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 255


state 178

    (156) structure_array -> key . EQUALS GREATER_THAN values
    (157) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 256


state 179

    (95) values -> INTEGER .
    (158) key -> INTEGER .

    COMMA           reduce using rule 95 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 95 (values -> INTEGER .)
    EQUALS          reduce using rule 158 (key -> INTEGER .)


state 180

    (96) values -> STRING .
    (159) key -> STRING .

    COMMA           reduce using rule 96 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 96 (values -> STRING .)
    EQUALS          reduce using rule 159 (key -> STRING .)


state 181

    (155) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 257


state 182

    (158) key -> INTEGER .

    EQUALS          reduce using rule 158 (key -> INTEGER .)


state 183

    (159) key -> STRING .

    EQUALS          reduce using rule 159 (key -> STRING .)


state 184

    (176) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (177) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 258


state 185

    (95) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 95 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 95 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 95 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 95 (values -> INTEGER .)
    COMMA           reduce using rule 95 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 95 (values -> INTEGER .)
    SEMICOLON       reduce using rule 95 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 95 (values -> INTEGER .)
    ECHO            reduce using rule 95 (values -> INTEGER .)
    PRINT           reduce using rule 95 (values -> INTEGER .)
    CLASS           reduce using rule 95 (values -> INTEGER .)
    INTERFACE       reduce using rule 95 (values -> INTEGER .)
    FUNCTION        reduce using rule 95 (values -> INTEGER .)
    VARIABLE        reduce using rule 95 (values -> INTEGER .)
    INCREASE        reduce using rule 95 (values -> INTEGER .)
    DECREMENT       reduce using rule 95 (values -> INTEGER .)
    IF              reduce using rule 95 (values -> INTEGER .)
    WHILE           reduce using rule 95 (values -> INTEGER .)
    FOR             reduce using rule 95 (values -> INTEGER .)
    CONST           reduce using rule 95 (values -> INTEGER .)
    DEFINE          reduce using rule 95 (values -> INTEGER .)
    ARRAY           reduce using rule 95 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 95 (values -> INTEGER .)
    NEW             reduce using rule 95 (values -> INTEGER .)
    $end            reduce using rule 95 (values -> INTEGER .)
    RETURN          reduce using rule 95 (values -> INTEGER .)
    BREAK           reduce using rule 95 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 95 (values -> INTEGER .)


state 186

    (175) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 259


state 187

    (196) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 260
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 188

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 192


state 189

    (63) comparation -> VARIABLE . EQUALS_EQUALS values
    (66) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (67) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (70) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (110) factor -> VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 119
    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 120

  ! EQUALS_EQUALS   [ reduce using rule 110 (factor -> VARIABLE .) ]


state 190

    (109) factor -> INTEGER .
    (95) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 95 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 95 (values -> INTEGER .)
    MULTIPLY        reduce using rule 109 (factor -> INTEGER .)
    DIVIDE          reduce using rule 109 (factor -> INTEGER .)
    MODULE          reduce using rule 109 (factor -> INTEGER .)
    POW             reduce using rule 109 (factor -> INTEGER .)
    PLUS            reduce using rule 109 (factor -> INTEGER .)
    MINUS           reduce using rule 109 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 95 (values -> INTEGER .)
    IDENTICAL       reduce using rule 95 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 95 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 95 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 95 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 95 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 95 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 95 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 95 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 95 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 109 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 109 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 109 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 109 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 109 (factor -> INTEGER .) ]


state 191

    (81) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 81 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 192

    (56) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 193

    (111) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 111 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 194

    (86) printable_values -> values printable_dividers printable_values .

    SEMICOLON       reduce using rule 86 (printable_values -> values printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 86 (printable_values -> values printable_dividers printable_values .)


state 195

    (60) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 60 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 60 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 60 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 60 (comparation -> values comparator_operator values .)
    STRING_CONCATENATION reduce using rule 60 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 60 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 60 (comparation -> values comparator_operator values .)


state 196

    (61) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 61 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 61 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 61 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 61 (comparation -> values comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 61 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 61 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 61 (comparation -> values comparator_operator expression .)


state 197

    (110) factor -> VARIABLE .

    MULTIPLY        reduce using rule 110 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 110 (factor -> VARIABLE .)
    MODULE          reduce using rule 110 (factor -> VARIABLE .)
    POW             reduce using rule 110 (factor -> VARIABLE .)
    PLUS            reduce using rule 110 (factor -> VARIABLE .)
    MINUS           reduce using rule 110 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 110 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 110 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 110 (factor -> VARIABLE .)
    COMMA           reduce using rule 110 (factor -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 110 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 110 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 110 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 110 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 110 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 110 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 110 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 110 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 110 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 110 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 110 (factor -> VARIABLE .)


state 198

    (88) printable_values -> VARIABLE printable_dividers printable_values .

    SEMICOLON       reduce using rule 88 (printable_values -> VARIABLE printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 88 (printable_values -> VARIABLE printable_dividers printable_values .)


state 199

    (67) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 67 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 120


state 200

    (63) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 63 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 201

    (66) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 66 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 202

    (70) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    STRING_CONCATENATION reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 70 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 203

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 261


state 204

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 262


state 205

    (90) printable_values -> conditional printable_dividers printable_values .

    SEMICOLON       reduce using rule 90 (printable_values -> conditional printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 90 (printable_values -> conditional printable_dividers printable_values .)


state 206

    (92) printable_values -> structure_object_principal printable_dividers printable_values .

    SEMICOLON       reduce using rule 92 (printable_values -> structure_object_principal printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 92 (printable_values -> structure_object_principal printable_dividers printable_values .)


state 207

    (51) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    STRING_CONCATENATION reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)


state 208

    (68) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 68 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 209

    (64) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 64 (comparation -> access_array_element EQUALS_EQUALS values .)


state 210

    (65) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 65 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 263


state 211

    (62) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 62 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 62 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 62 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 62 (comparation -> expression comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 62 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 62 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 62 (comparation -> expression comparator_operator expression .)


state 212

    (109) factor -> INTEGER .

    MULTIPLY        reduce using rule 109 (factor -> INTEGER .)
    DIVIDE          reduce using rule 109 (factor -> INTEGER .)
    MODULE          reduce using rule 109 (factor -> INTEGER .)
    POW             reduce using rule 109 (factor -> INTEGER .)
    PLUS            reduce using rule 109 (factor -> INTEGER .)
    MINUS           reduce using rule 109 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 109 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 109 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 109 (factor -> INTEGER .)
    COMMA           reduce using rule 109 (factor -> INTEGER .)
    STRING_CONCATENATION reduce using rule 109 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 109 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 109 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 109 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 109 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 109 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 109 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 109 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 109 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 109 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 109 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 109 (factor -> INTEGER .)


state 213

    (69) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 69 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 214

    (102) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 102 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 102 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 102 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 102 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 102 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 102 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 102 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 102 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 102 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 102 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 102 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 102 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 102 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 102 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 102 (expression -> term PLUS expression .)
    COMMA           reduce using rule 102 (expression -> term PLUS expression .)
    STRING_CONCATENATION reduce using rule 102 (expression -> term PLUS expression .)


state 215

    (103) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 103 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 103 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 103 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 103 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 103 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 103 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 103 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 103 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 103 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 103 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 103 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 103 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 103 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 103 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 103 (expression -> term MINUS expression .)
    COMMA           reduce using rule 103 (expression -> term MINUS expression .)
    STRING_CONCATENATION reduce using rule 103 (expression -> term MINUS expression .)


state 216

    (105) term -> factor MULTIPLY term .

    PLUS            reduce using rule 105 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 105 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 105 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 105 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 105 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 105 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 105 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 105 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 105 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 105 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 105 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 105 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 105 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 105 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 105 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 105 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 105 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 105 (term -> factor MULTIPLY term .)
    STRING_CONCATENATION reduce using rule 105 (term -> factor MULTIPLY term .)


state 217

    (106) term -> factor DIVIDE term .

    PLUS            reduce using rule 106 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 106 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 106 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 106 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 106 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 106 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 106 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 106 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 106 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 106 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 106 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 106 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 106 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 106 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 106 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 106 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 106 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 106 (term -> factor DIVIDE term .)
    STRING_CONCATENATION reduce using rule 106 (term -> factor DIVIDE term .)


state 218

    (107) term -> factor MODULE term .

    PLUS            reduce using rule 107 (term -> factor MODULE term .)
    MINUS           reduce using rule 107 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 107 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 107 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 107 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 107 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 107 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 107 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 107 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 107 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 107 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 107 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 107 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 107 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 107 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 107 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 107 (term -> factor MODULE term .)
    COMMA           reduce using rule 107 (term -> factor MODULE term .)
    STRING_CONCATENATION reduce using rule 107 (term -> factor MODULE term .)


state 219

    (108) term -> factor POW term .

    PLUS            reduce using rule 108 (term -> factor POW term .)
    MINUS           reduce using rule 108 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 108 (term -> factor POW term .)
    IDENTICAL       reduce using rule 108 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 108 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 108 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 108 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 108 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 108 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 108 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 108 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 108 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 108 (term -> factor POW term .)
    SEMICOLON       reduce using rule 108 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 108 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 108 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 108 (term -> factor POW term .)
    COMMA           reduce using rule 108 (term -> factor POW term .)
    STRING_CONCATENATION reduce using rule 108 (term -> factor POW term .)


state 220

    (82) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 82 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 221

    (209) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 264


state 222

    (216) class_implements_opt -> IMPLEMENTS . interface_list
    (218) interface_list -> . IDENTIFIER
    (219) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 266

    interface_list                 shift and go to state 265

state 223

    (214) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 214 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 214 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 224

    (210) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (211) interface_body -> . interface_body interface_method
    (212) interface_body -> .

    RIGHT_BRACE     reduce using rule 212 (interface_body -> .)
    PUBLIC          reduce using rule 212 (interface_body -> .)
    PRIVATE         reduce using rule 212 (interface_body -> .)
    PROTECTED       reduce using rule 212 (interface_body -> .)
    FUNCTION        reduce using rule 212 (interface_body -> .)

    interface_body                 shift and go to state 267

state 225

    (138) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 268


state 226

    (131) params -> real_params .
    (135) real_params -> real_params . COMMA VARIABLE
    (136) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 131 (params -> real_params .)
    COMMA           shift and go to state 269


state 227

    (132) params -> empty .

    RIGHT_PAREN     reduce using rule 132 (params -> empty .)


state 228

    (133) real_params -> VARIABLE .

    COMMA           reduce using rule 133 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 133 (real_params -> VARIABLE .)


state 229

    (134) real_params -> values .

    COMMA           reduce using rule 134 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 134 (real_params -> values .)


state 230

    (130) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 270
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 231

    (111) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 193


state 232

    (144) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 271


state 233

    (145) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 272


state 234

    (141) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 273
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 235

    (142) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 274
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 236

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 275

  ! LEFT_BRACKET    [ reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 237

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 276

  ! LEFT_BRACKET    [ reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 238

    (192) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 278

    indexed_array                  shift and go to state 277

state 239

    (197) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 197 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 240

    (198) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (199) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (200) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (201) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 198 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 279


state 241

    (130) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (207) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (208) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 230
    LEFT_BRACKET    shift and go to state 280
    EQUALS          reduce using rule 208 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 208 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 208 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 208 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 208 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 208 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 208 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 208 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 208 (accessType -> IDENTIFIER .)
    IF              reduce using rule 208 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 208 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 208 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 208 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 208 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 208 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 208 (accessType -> IDENTIFIER .)
    $end            reduce using rule 208 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 208 (accessType -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 208 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 208 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 208 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 208 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 208 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 208 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 208 (accessType -> IDENTIFIER .) ]


state 242

    (202) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 202 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 243

    (203) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (204) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (205) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (206) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 203 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 281


state 244

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 282


state 245

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 283


state 246

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 285
    LEFT_PAREN      shift and go to state 284
    IDENTIFIER      shift and go to state 288
    INTEGER         shift and go to state 289
    FLOAT           shift and go to state 290

    expression_for                 shift and go to state 286
    number_values                  shift and go to state 287

state 247

    (128) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 128 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 248

    (129) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 291
    boolean                        shift and go to state 59

state 249

    (178) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (153) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    ARRAY           shift and go to state 278

    values                         shift and go to state 292
    values_array_indexed           shift and go to state 172
    boolean                        shift and go to state 59
    object_creation                shift and go to state 176
    indexed_array                  shift and go to state 177

state 250

    (153) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 153 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 251

    (154) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 154 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 252

    (174) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 293


state 253

    (161) values_array_indexed -> values COMMA . values_array_indexed
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    NEW             shift and go to state 46
    ARRAY           shift and go to state 278
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 175
    values_array_indexed           shift and go to state 294
    object_creation                shift and go to state 176
    indexed_array                  shift and go to state 177
    boolean                        shift and go to state 59

state 254

    (163) values_array_indexed -> object_creation COMMA . values_array_indexed
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    NEW             shift and go to state 46
    ARRAY           shift and go to state 278
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    object_creation                shift and go to state 176
    values_array_indexed           shift and go to state 295
    values                         shift and go to state 175
    indexed_array                  shift and go to state 177
    boolean                        shift and go to state 59

state 255

    (165) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    NEW             shift and go to state 46
    ARRAY           shift and go to state 278
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    indexed_array                  shift and go to state 177
    values_array_indexed           shift and go to state 296
    values                         shift and go to state 175
    object_creation                shift and go to state 176
    boolean                        shift and go to state 59

state 256

    (156) structure_array -> key EQUALS . GREATER_THAN values
    (157) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 297


state 257

    (155) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 155 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 258

    (176) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (177) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 176 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 298


state 259

    (175) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 175 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 260

    (196) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 299


state 261

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

    MINUS           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 300


state 262

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 301


state 263

    (167) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 303
    VARIABLE        shift and go to state 302


state 264

    (209) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (220) class_body -> . class_body class_member
    (221) class_body -> .

    RIGHT_BRACE     reduce using rule 221 (class_body -> .)
    PUBLIC          reduce using rule 221 (class_body -> .)
    PRIVATE         reduce using rule 221 (class_body -> .)
    PROTECTED       reduce using rule 221 (class_body -> .)
    STATIC          reduce using rule 221 (class_body -> .)
    FUNCTION        reduce using rule 221 (class_body -> .)
    VARIABLE        reduce using rule 221 (class_body -> .)
    CONST           reduce using rule 221 (class_body -> .)
    DEFINE          reduce using rule 221 (class_body -> .)

    class_body                     shift and go to state 304

state 265

    (216) class_implements_opt -> IMPLEMENTS interface_list .
    (219) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 216 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 305


state 266

    (218) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 218 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 218 (interface_list -> IDENTIFIER .)


state 267

    (210) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (211) interface_body -> interface_body . interface_method
    (213) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (228) visibility_opt -> . PUBLIC
    (229) visibility_opt -> . PRIVATE
    (230) visibility_opt -> . PROTECTED
    (231) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 306
    PUBLIC          shift and go to state 309
    PRIVATE         shift and go to state 310
    PROTECTED       shift and go to state 311
    FUNCTION        reduce using rule 231 (visibility_opt -> .)

    interface_method               shift and go to state 307
    visibility_opt                 shift and go to state 308

state 268

    (138) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (143) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 313

    codeblock                      shift and go to state 312

state 269

    (135) real_params -> real_params COMMA . VARIABLE
    (136) real_params -> real_params COMMA . values
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 314
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 315
    boolean                        shift and go to state 59

state 270

    (130) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 316


state 271

    (144) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 317


state 272

    (145) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 318


state 273

    (141) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 319


state 274

    (142) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 320


state 275

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS VARIABLE

    VARIABLE        shift and go to state 321
    INTEGER         shift and go to state 322


state 276

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET EQUALS VARIABLE

    INTEGER         shift and go to state 324
    VARIABLE        shift and go to state 323


state 277

    (192) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 192 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 278

    (153) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 325


state 279

    (199) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (200) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (201) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 326
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 327
    access_array_element           shift and go to state 328
    boolean                        shift and go to state 59

state 280

    (207) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 329


state 281

    (204) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (205) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (206) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 332
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    access_array_element           shift and go to state 330
    values                         shift and go to state 331
    boolean                        shift and go to state 59

state 282

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 333
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 283

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 337
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 284

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 285
    LEFT_PAREN      shift and go to state 284
    IDENTIFIER      shift and go to state 288
    INTEGER         shift and go to state 289
    FLOAT           shift and go to state 290

    expression_for                 shift and go to state 338
    number_values                  shift and go to state 287

state 285

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 286

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 339
    PLUS            shift and go to state 341
    MINUS           shift and go to state 342
    MULTIPLY        shift and go to state 343
    DIVIDE          shift and go to state 344
    MODULE          shift and go to state 345
    POW             shift and go to state 346

    operator_aritmetic             shift and go to state 340

state 287

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 288

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 347


state 289

    (42) number_values -> INTEGER .

    SEMICOLON       reduce using rule 42 (number_values -> INTEGER .)
    PLUS            reduce using rule 42 (number_values -> INTEGER .)
    MINUS           reduce using rule 42 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 42 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 42 (number_values -> INTEGER .)
    MODULE          reduce using rule 42 (number_values -> INTEGER .)
    POW             reduce using rule 42 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 42 (number_values -> INTEGER .)


state 290

    (43) number_values -> FLOAT .

    SEMICOLON       reduce using rule 43 (number_values -> FLOAT .)
    PLUS            reduce using rule 43 (number_values -> FLOAT .)
    MINUS           reduce using rule 43 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 43 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 43 (number_values -> FLOAT .)
    MODULE          reduce using rule 43 (number_values -> FLOAT .)
    POW             reduce using rule 43 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> FLOAT .)


state 291

    (129) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 348


state 292

    (178) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (160) values_array_indexed -> values .
    (161) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 349
    COMMA           shift and go to state 253

  ! RIGHT_PAREN     [ reduce using rule 160 (values_array_indexed -> values .) ]


state 293

    (174) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 174 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 294

    (161) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 161 (values_array_indexed -> values COMMA values_array_indexed .)


state 295

    (163) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 163 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 296

    (165) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 165 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 297

    (156) structure_array -> key EQUALS GREATER_THAN . values
    (157) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 350
    boolean                        shift and go to state 59

state 298

    (177) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (176) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (177) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 96

    structure_matrix_second        shift and go to state 351

state 299

    (196) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 196 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 300

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 352
    INTEGER         shift and go to state 353


state 301

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 355
    VARIABLE        shift and go to state 354


state 302

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 356


state 303

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 357


state 304

    (209) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (220) class_body -> class_body . class_member
    (222) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (223) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (224) class_member -> . class_attribute
    (228) visibility_opt -> . PUBLIC
    (229) visibility_opt -> . PRIVATE
    (230) visibility_opt -> . PROTECTED
    (231) visibility_opt -> .
    (225) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (226) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (227) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 358
    PUBLIC          shift and go to state 309
    PRIVATE         shift and go to state 310
    PROTECTED       shift and go to state 311
    STATIC          reduce using rule 231 (visibility_opt -> .)
    FUNCTION        reduce using rule 231 (visibility_opt -> .)
    VARIABLE        reduce using rule 231 (visibility_opt -> .)
    CONST           reduce using rule 231 (visibility_opt -> .)
    DEFINE          reduce using rule 231 (visibility_opt -> .)

    class_member                   shift and go to state 359
    visibility_opt                 shift and go to state 360
    class_attribute                shift and go to state 361

state 305

    (219) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 362


state 306

    (210) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 210 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 307

    (211) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 211 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 211 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 211 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 211 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 211 (interface_body -> interface_body interface_method .)


state 308

    (213) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 363


state 309

    (228) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 228 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 228 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 228 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 228 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 228 (visibility_opt -> PUBLIC .)


state 310

    (229) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 229 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 229 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 229 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 229 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 229 (visibility_opt -> PRIVATE .)


state 311

    (230) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 230 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 230 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 230 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 230 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 230 (visibility_opt -> PROTECTED .)


state 312

    (138) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 138 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 313

    (143) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 364
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 314

    (135) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 135 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 135 (real_params -> real_params COMMA VARIABLE .)


state 315

    (136) real_params -> real_params COMMA values .

    COMMA           reduce using rule 136 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 136 (real_params -> real_params COMMA values .)


state 316

    (130) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 130 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 317

    (144) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 144 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 318

    (145) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 145 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 319

    (141) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 365


state 320

    (142) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (143) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 313

    codeblock                      shift and go to state 366

state 321

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET EQUALS values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 367


state 322

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 368


state 323

    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET EQUALS values
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 369


state 324

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS VARIABLE

    RIGHT_BRACKET   shift and go to state 370


state 325

    (153) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (160) values_array_indexed -> . values
    (161) values_array_indexed -> . values COMMA values_array_indexed
    (162) values_array_indexed -> . object_creation
    (163) values_array_indexed -> . object_creation COMMA values_array_indexed
    (164) values_array_indexed -> . indexed_array
    (165) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    NEW             shift and go to state 46
    ARRAY           shift and go to state 278
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values_array_indexed           shift and go to state 172
    values                         shift and go to state 175
    object_creation                shift and go to state 176
    indexed_array                  shift and go to state 177
    boolean                        shift and go to state 59

state 326

    (200) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 263

  ! LEFT_BRACKET    [ reduce using rule 200 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 327

    (199) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 199 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 328

    (201) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 201 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 329

    (207) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 371


state 330

    (206) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 206 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 331

    (204) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 204 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 332

    (205) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 263

  ! LEFT_BRACKET    [ reduce using rule 205 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 333

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 372


state 334

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 373
    BREAK           shift and go to state 374
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 334
    body_statement                 shift and go to state 375
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 335

    (26) body_statement -> RETURN . values SEMICOLON
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 376
    boolean                        shift and go to state 59

state 336

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 377


state 337

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 378


state 338

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 379
    PLUS            shift and go to state 341
    MINUS           shift and go to state 342
    MULTIPLY        shift and go to state 343
    DIVIDE          shift and go to state 344
    MODULE          shift and go to state 345
    POW             shift and go to state 346

    operator_aritmetic             shift and go to state 340

state 339

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 380

    condition_for                  shift and go to state 381

state 340

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 285
    LEFT_PAREN      shift and go to state 284
    IDENTIFIER      shift and go to state 288
    INTEGER         shift and go to state 289
    FLOAT           shift and go to state 290

    expression_for                 shift and go to state 382
    number_values                  shift and go to state 287

state 341

    (44) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 44 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 44 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 44 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 44 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 44 (operator_aritmetic -> PLUS .)


state 342

    (45) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> MINUS .)


state 343

    (46) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MULTIPLY .)


state 344

    (47) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> DIVIDE .)


state 345

    (48) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MODULE .)


state 346

    (49) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> POW .)


state 347

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 383

    access_array_element           shift and go to state 384

state 348

    (129) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 129 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 349

    (178) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (179) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 178 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 385


state 350

    (156) structure_array -> key EQUALS GREATER_THAN values .
    (157) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 156 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 156 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 386


state 351

    (177) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 177 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 352

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 387


state 353

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 388


state 354

    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 389


state 355

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 390


state 356

    (168) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 168 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 357

    (167) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 167 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 358

    (209) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 209 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 359

    (220) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 220 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 220 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 220 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 220 (class_body -> class_body class_member .)
    STATIC          reduce using rule 220 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 220 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 220 (class_body -> class_body class_member .)
    CONST           reduce using rule 220 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 220 (class_body -> class_body class_member .)


state 360

    (222) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (223) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (225) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (226) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (227) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 391
    FUNCTION        shift and go to state 392
    VARIABLE        shift and go to state 393
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 394
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 361

    (224) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 224 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 224 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 224 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 224 (class_member -> class_attribute .)
    STATIC          reduce using rule 224 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 224 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 224 (class_member -> class_attribute .)
    CONST           reduce using rule 224 (class_member -> class_attribute .)
    DEFINE          reduce using rule 224 (class_member -> class_attribute .)


state 362

    (219) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 219 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 219 (interface_list -> interface_list COMMA IDENTIFIER .)


state 363

    (213) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 395


state 364

    (143) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 396


state 365

    (141) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 397


state 366

    (142) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 142 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 367

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET . EQUALS values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET . EQUALS VARIABLE

    SEMICOLON       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          shift and go to state 398


state 368

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS VARIABLE

    SEMICOLON       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          shift and go to state 399


state 369

    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET . EQUALS values
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET . EQUALS VARIABLE

    SEMICOLON       reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          shift and go to state 400


state 370

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS VARIABLE

    SEMICOLON       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          shift and go to state 401


state 371

    (207) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 207 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 372

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 404
    ELSE            shift and go to state 405

    elseif_statement               shift and go to state 402
    else_statement                 shift and go to state 403

state 373

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    SEMICOLON       shift and go to state 407
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 406
    boolean                        shift and go to state 59

state 374

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 408


state 375

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 376

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 409


state 377

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 378

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 379

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 380

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (71) comparator_operator -> . EQUALS_EQUALS
    (72) comparator_operator -> . IDENTICAL
    (73) comparator_operator -> . NOT_EQUALS
    (74) comparator_operator -> . NOT_IDENTICAL
    (75) comparator_operator -> . SMALL_THAN
    (76) comparator_operator -> . GREATER_THAN
    (77) comparator_operator -> . SMALL_EQUALS_TO
    (78) comparator_operator -> . GREATER_EQUALS_TO
    (79) comparator_operator -> . SPACECRAFT
    (80) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 108
    IDENTICAL       shift and go to state 109
    NOT_EQUALS      shift and go to state 110
    NOT_IDENTICAL   shift and go to state 111
    SMALL_THAN      shift and go to state 112
    GREATER_THAN    shift and go to state 113
    SMALL_EQUALS_TO shift and go to state 114
    GREATER_EQUALS_TO shift and go to state 115
    SPACECRAFT      shift and go to state 116
    NULL_FUSION     shift and go to state 117

    comparator_operator            shift and go to state 410

state 381

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 411


state 382

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 341
    MINUS           shift and go to state 342
    MULTIPLY        shift and go to state 343
    DIVIDE          shift and go to state 344
    MODULE          shift and go to state 345
    POW             shift and go to state 346

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 340

state 383

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 412
    LEFT_BRACKET    shift and go to state 263


state 384

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 413


state 385

    (179) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (178) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (179) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 414

    structure_matrix_first         shift and go to state 415

state 386

    (157) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (156) structure_array -> . key EQUALS GREATER_THAN values
    (157) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (158) key -> . INTEGER
    (159) key -> . STRING

    INTEGER         shift and go to state 182
    STRING          shift and go to state 183

    key                            shift and go to state 178
    structure_array                shift and go to state 416

state 387

    (181) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    EQUALS_EQUALS   reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 181 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 388

    (182) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS_EQUALS   reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 182 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 389

    (183) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    EQUALS_EQUALS   reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 183 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 390

    (180) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS_EQUALS   reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 180 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 391

    (222) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 417


state 392

    (223) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 418


state 393

    (225) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (226) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 419
    SEMICOLON       shift and go to state 420


state 394

    (227) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 421


state 395

    (213) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 422


state 396

    (143) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 143 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 397

    (141) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (143) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 313

    codeblock                      shift and go to state 423

state 398

    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS . values
    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS . VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 424
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 425
    boolean                        shift and go to state 59

state 399

    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values
    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 426
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 427
    boolean                        shift and go to state 59

state 400

    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS . values
    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS . VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 428
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 429
    boolean                        shift and go to state 59

state 401

    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values
    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 430
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 431
    boolean                        shift and go to state 59

state 402

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 403

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 404

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 432


state 405

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 433


state 406

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 434


state 407

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 408

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 409

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 410

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 285
    LEFT_PAREN      shift and go to state 284
    IDENTIFIER      shift and go to state 288
    INTEGER         shift and go to state 289
    FLOAT           shift and go to state 290

    expression_for                 shift and go to state 435
    number_values                  shift and go to state 287

state 411

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 436
    INCREASE        shift and go to state 438
    DECREMENT       shift and go to state 439

    increment_statement            shift and go to state 437

state 412

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 413

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 414

    (178) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 440


state 415

    (179) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 179 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 416

    (157) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 157 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 157 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 417

    (222) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 441


state 418

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 442


state 419

    (225) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 443
    boolean                        shift and go to state 59

state 420

    (226) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 226 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 421

    (227) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 227 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 422

    (213) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 444
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 423

    (141) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 141 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 424

    (189) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE .

    SEMICOLON       reduce using rule 189 (modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE .)


state 425

    (185) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values .

    SEMICOLON       reduce using rule 185 (modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values .)


state 426

    (191) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE .

    SEMICOLON       reduce using rule 191 (modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE .)


state 427

    (187) modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .

    SEMICOLON       reduce using rule 187 (modify_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .)


state 428

    (190) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE .

    SEMICOLON       reduce using rule 190 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE .)


state 429

    (186) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values .

    SEMICOLON       reduce using rule 186 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values .)


state 430

    (188) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE .

    SEMICOLON       reduce using rule 188 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE .)


state 431

    (184) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .

    SEMICOLON       reduce using rule 184 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values .)


state 432

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (60) comparation -> . values comparator_operator values
    (61) comparation -> . values comparator_operator expression
    (62) comparation -> . expression comparator_operator expression
    (63) comparation -> . VARIABLE EQUALS_EQUALS values
    (64) comparation -> . access_array_element EQUALS_EQUALS values
    (65) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (66) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (67) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (68) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (69) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (70) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (58) logic_not_sentence -> . LOGIC_NOT conditional
    (59) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (101) expression -> . term
    (102) expression -> . term PLUS expression
    (103) expression -> . term MINUS expression
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (104) term -> . factor
    (105) term -> . factor MULTIPLY term
    (106) term -> . factor DIVIDE term
    (107) term -> . factor MODULE term
    (108) term -> . factor POW term
    (109) factor -> . INTEGER
    (110) factor -> . VARIABLE
    (111) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99
    VARIABLE        shift and go to state 166
    LOGIC_NOT       shift and go to state 68
    INTEGER         shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    conditional                    shift and go to state 445
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    values                         shift and go to state 132
    expression                     shift and go to state 66
    access_array_element           shift and go to state 133
    access_element_matrix          shift and go to state 67
    boolean                        shift and go to state 59
    term                           shift and go to state 69
    factor                         shift and go to state 70

state 433

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 446
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 434

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 435

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 341
    MINUS           shift and go to state 342
    MULTIPLY        shift and go to state 343
    DIVIDE          shift and go to state 344
    MODULE          shift and go to state 345
    POW             shift and go to state 346

    operator_aritmetic             shift and go to state 340

state 436

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 447
    DECREMENT       shift and go to state 448
    PLUS_EQUALS     shift and go to state 449
    EQUALS          shift and go to state 450


state 437

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 451


state 438

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 452


state 439

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 453


state 440

    (178) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 454
    boolean                        shift and go to state 59

state 441

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 455


state 442

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 456
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 443

    (225) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 457


state 444

    (213) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 458


state 445

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 459


state 446

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 460


state 447

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 448

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 449

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 461


state 450

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 462


state 451

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 463


state 452

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 453

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 454

    (178) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (179) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 349


state 455

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (131) params -> . real_params
    (132) params -> . empty
    (133) real_params -> . VARIABLE
    (134) real_params -> . values
    (135) real_params -> . real_params COMMA VARIABLE
    (136) real_params -> . real_params COMMA values
    (137) empty -> .
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE

    VARIABLE        shift and go to state 228
    RIGHT_PAREN     reduce using rule 137 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    params                         shift and go to state 464
    real_params                    shift and go to state 226
    empty                          shift and go to state 227
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 456

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 465


state 457

    (225) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 225 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 458

    (213) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 466


state 459

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 467


state 460

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 461

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 462

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    PLUS            shift and go to state 341
    MINUS           shift and go to state 342
    MULTIPLY        shift and go to state 343
    DIVIDE          shift and go to state 344
    MODULE          shift and go to state 345
    POW             shift and go to state 346

    operator_aritmetic             shift and go to state 468

state 463

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 469
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 464

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 470


state 465

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 471


state 466

    (213) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 213 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 213 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 213 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 213 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 213 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 467

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 335
    BREAK           shift and go to state 336
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 472
    sentence                       shift and go to state 334
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 468

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    INTEGER         shift and go to state 289
    FLOAT           shift and go to state 290

    number_values                  shift and go to state 473

state 469

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 474


state 470

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 475


state 471

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (232) method_body -> . classStatement
    (233) method_body -> . classStatement return_form
    (234) method_body -> . return_form
    (235) method_body -> . classStatement BREAK SEMICOLON
    (236) method_body -> . classStatement method_body
    (240) classStatement -> . sentence
    (241) classStatement -> . access_method_object SEMICOLON
    (237) return_form -> . RETURN values SEMICOLON
    (238) return_form -> . RETURN access_method_object SEMICOLON
    (239) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 481
    VARIABLE        shift and go to state 482
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 476
    classStatement                 shift and go to state 477
    return_form                    shift and go to state 478
    sentence                       shift and go to state 479
    access_method_object           shift and go to state 480
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 483
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 472

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 484


state 473

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 474

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 475

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (232) method_body -> . classStatement
    (233) method_body -> . classStatement return_form
    (234) method_body -> . return_form
    (235) method_body -> . classStatement BREAK SEMICOLON
    (236) method_body -> . classStatement method_body
    (240) classStatement -> . sentence
    (241) classStatement -> . access_method_object SEMICOLON
    (237) return_form -> . RETURN values SEMICOLON
    (238) return_form -> . RETURN access_method_object SEMICOLON
    (239) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 481
    VARIABLE        shift and go to state 482
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 485
    classStatement                 shift and go to state 477
    return_form                    shift and go to state 478
    sentence                       shift and go to state 479
    access_method_object           shift and go to state 480
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 483
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 476

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 486


state 477

    (232) method_body -> classStatement .
    (233) method_body -> classStatement . return_form
    (235) method_body -> classStatement . BREAK SEMICOLON
    (236) method_body -> classStatement . method_body
    (237) return_form -> . RETURN values SEMICOLON
    (238) return_form -> . RETURN access_method_object SEMICOLON
    (239) return_form -> . RETURN SEMICOLON
    (232) method_body -> . classStatement
    (233) method_body -> . classStatement return_form
    (234) method_body -> . return_form
    (235) method_body -> . classStatement BREAK SEMICOLON
    (236) method_body -> . classStatement method_body
    (240) classStatement -> . sentence
    (241) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (81) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (82) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (83) print_statement -> . ECHO printable_values
    (84) print_statement -> . PRINT printable_values
    (112) assignment -> . variable_assignment
    (113) assignment -> . constant_assignment
    (146) types_structure -> . structure_array_principal
    (147) types_structure -> . structure_matrix_principal
    (148) types_structure -> . structure_object_principal
    (209) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (210) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (138) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (114) variable_assignment -> . VARIABLE assignment_operator values
    (115) variable_assignment -> . VARIABLE assignment_operator expression
    (116) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (117) variable_assignment -> . VARIABLE assignment_operator types_structure
    (118) variable_assignment -> . VARIABLE assignment_operator input
    (119) variable_assignment -> . VARIABLE assignment_operator special_function
    (120) variable_assignment -> . VARIABLE INCREASE
    (121) variable_assignment -> . VARIABLE DECREMENT
    (122) variable_assignment -> . INCREASE VARIABLE
    (123) variable_assignment -> . DECREMENT VARIABLE
    (126) constant_assignment -> . const_syntax
    (127) constant_assignment -> . define_syntax
    (149) structure_array_principal -> . indexed_array
    (150) structure_array_principal -> . associative_array
    (151) structure_array_principal -> . access_array_stucture
    (152) structure_array_principal -> . access_array_element
    (169) structure_matrix_principal -> . matrix_firstform
    (170) structure_matrix_principal -> . matrix_secondform
    (171) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (172) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (173) structure_matrix_principal -> . add_element_matrix
    (193) structure_object_principal -> . object_creation
    (194) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (128) const_syntax -> . CONST IDENTIFIER EQUALS values
    (129) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (153) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (154) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (155) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (166) access_array_stucture -> . access_array_element SEMICOLON
    (174) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (175) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (180) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (195) object_creation -> . NEW IDENTIFIER
    (196) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 232 (method_body -> classStatement .)
    BREAK           shift and go to state 488
    RETURN          shift and go to state 481
    VARIABLE        shift and go to state 482
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 477
    return_form                    shift and go to state 487
    method_body                    shift and go to state 489
    access_method_object           shift and go to state 480
    sentence                       shift and go to state 479
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 483
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 478

    (234) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 234 (method_body -> return_form .)


state 479

    (240) classStatement -> sentence .

    BREAK           reduce using rule 240 (classStatement -> sentence .)
    RETURN          reduce using rule 240 (classStatement -> sentence .)
    VARIABLE        reduce using rule 240 (classStatement -> sentence .)
    ECHO            reduce using rule 240 (classStatement -> sentence .)
    PRINT           reduce using rule 240 (classStatement -> sentence .)
    CLASS           reduce using rule 240 (classStatement -> sentence .)
    INTERFACE       reduce using rule 240 (classStatement -> sentence .)
    FUNCTION        reduce using rule 240 (classStatement -> sentence .)
    INCREASE        reduce using rule 240 (classStatement -> sentence .)
    DECREMENT       reduce using rule 240 (classStatement -> sentence .)
    IF              reduce using rule 240 (classStatement -> sentence .)
    WHILE           reduce using rule 240 (classStatement -> sentence .)
    FOR             reduce using rule 240 (classStatement -> sentence .)
    CONST           reduce using rule 240 (classStatement -> sentence .)
    DEFINE          reduce using rule 240 (classStatement -> sentence .)
    ARRAY           reduce using rule 240 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 240 (classStatement -> sentence .)
    NEW             reduce using rule 240 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 240 (classStatement -> sentence .)


state 480

    (241) classStatement -> access_method_object . SEMICOLON
    (194) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 490
    BREAK           reduce using rule 194 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 194 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 194 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 194 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 194 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 194 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 194 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 194 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 194 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 194 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 194 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 194 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 194 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 194 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 194 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 194 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 194 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 194 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 194 (structure_object_principal -> access_method_object .)


state 481

    (237) return_form -> RETURN . values SEMICOLON
    (238) return_form -> RETURN . access_method_object SEMICOLON
    (239) return_form -> RETURN . SEMICOLON
    (95) values -> . INTEGER
    (96) values -> . STRING
    (97) values -> . FLOAT
    (98) values -> . boolean
    (197) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (198) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (199) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (202) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (203) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (204) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (99) boolean -> . TRUE
    (100) boolean -> . FALSE
    (167) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 492
    INTEGER         shift and go to state 185
    STRING          shift and go to state 57
    FLOAT           shift and go to state 58
    VARIABLE        shift and go to state 494
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62

    values                         shift and go to state 491
    access_method_object           shift and go to state 493
    boolean                        shift and go to state 59
    access_array_element           shift and go to state 495

state 482

    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (114) variable_assignment -> VARIABLE . assignment_operator values
    (115) variable_assignment -> VARIABLE . assignment_operator expression
    (116) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (117) variable_assignment -> VARIABLE . assignment_operator types_structure
    (118) variable_assignment -> VARIABLE . assignment_operator input
    (119) variable_assignment -> VARIABLE . assignment_operator special_function
    (120) variable_assignment -> VARIABLE . INCREASE
    (121) variable_assignment -> VARIABLE . DECREMENT
    (180) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (181) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (182) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (183) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (184) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (185) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (186) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS values
    (187) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values
    (188) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (189) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (190) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET EQUALS VARIABLE
    (191) modify_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS VARIABLE
    (192) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (124) assignment_operator -> . EQUALS
    (125) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 81
    LEFT_BRACKET    shift and go to state 79
    INCREASE        shift and go to state 77
    DECREMENT       shift and go to state 78
    EQUALS          shift and go to state 80
    PLUS_EQUALS     shift and go to state 82

    assignment_operator            shift and go to state 76

state 483

    (202) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (203) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (204) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (152) structure_array_principal -> access_array_element .
    (166) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 86
    BREAK           reduce using rule 152 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 152 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 152 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 152 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 152 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 152 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 152 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 152 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 152 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 152 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 152 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 152 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 152 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 152 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 152 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 152 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 152 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 152 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 152 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 85


state 484

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 404
    ELSE            shift and go to state 405

    elseif_statement               shift and go to state 496
    else_statement                 shift and go to state 497

state 485

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 498


state 486

    (223) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 223 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 487

    (233) method_body -> classStatement return_form .
    (234) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 233 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 233 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 234 (method_body -> return_form .) ]


state 488

    (235) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 499


state 489

    (236) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 236 (method_body -> classStatement method_body .)


state 490

    (241) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 241 (classStatement -> access_method_object SEMICOLON .)


state 491

    (237) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 500


state 492

    (239) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 239 (return_form -> RETURN SEMICOLON .)


state 493

    (238) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 501


state 494

    (197) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (198) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (199) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (200) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (201) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (167) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (168) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 81
    LEFT_BRACKET    shift and go to state 263


state 495

    (202) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (203) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (204) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (205) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (206) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 86


state 496

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 497

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 498

    (222) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 222 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 499

    (235) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 235 (method_body -> classStatement BREAK SEMICOLON .)


state 500

    (237) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 237 (return_form -> RETURN values SEMICOLON .)


state 501

    (238) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 238 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 60 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 145 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 166 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 189 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 236 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 237 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 241 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 292 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 326 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 332 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 382 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 382 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 382 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 382 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 382 resolved as shift
WARNING: shift/reduce conflict for POW in state 382 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 56
WARNING: reduce/reduce conflict in state 103 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 103
WARNING: reduce/reduce conflict in state 190 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 190
WARNING: reduce/reduce conflict in state 408 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 408
WARNING: reduce/reduce conflict in state 434 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 434
WARNING: reduce/reduce conflict in state 487 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 487
