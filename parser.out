Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    ELSE
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EQUALS_EQUALS
    ERROR_CONTROL
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FOR
    FOREACH
    GLOBAL
    GOTO
    GREATER_EQUALS_TO
    HALT_COMPILER
    IDENTICAL
    IF
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INPUT
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    LOGIC_AND
    LOGIC_NOT
    LOGIC_OR
    LOGIC_XOR
    MATCH
    NAMESPACE
    NOT_EQUALS
    NOT_IDENTICAL
    NULL_FUSION
    OR
    PLUS_EQUALS
    POST_DECREMENT
    POST_INCREASE
    PRE_DECREMENT
    PRE_INCREASE
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    RETURN
    SHIF_LEFT
    SHIF_RIGHT
    SMALL_EQUALS_TO
    SMALL_THAN
    SPACECRAFT
    STATIC
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    WHILE
    XOR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment
Rule 5     sentence -> types_structure
Rule 6     print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 7     print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 8     print_statement -> ECHO printable_values
Rule 9     print_statement -> PRINT printable_values
Rule 10    printable_values -> values
Rule 11    printable_values -> values COMMA printable_values
Rule 12    printable_values -> VARIABLE
Rule 13    printable_values -> VARIABLE COMMA printable_values
Rule 14    values -> INTEGER
Rule 15    values -> STRING
Rule 16    values -> FLOAT
Rule 17    values -> boolean
Rule 18    boolean -> TRUE
Rule 19    boolean -> FALSE
Rule 20    expression -> term
Rule 21    expression -> term PLUS expression
Rule 22    expression -> term MINUS expression
Rule 23    term -> factor
Rule 24    term -> factor MULTIPLY term
Rule 25    term -> factor DIVIDE term
Rule 26    term -> factor MODULE term
Rule 27    term -> factor POW term
Rule 28    factor -> INTEGER
Rule 29    factor -> VARIABLE
Rule 30    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 31    assignment -> variable_assignment
Rule 32    assignment -> function_assignment
Rule 33    assignment -> constant_assignment
Rule 34    variable_assignment -> VARIABLE EQUALS values SEMICOLON
Rule 35    variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON
Rule 36    variable_assignment -> VARIABLE EQUALS expression SEMICOLON
Rule 37    constant_assignment -> const_syntax
Rule 38    constant_assignment -> define_syntax
Rule 39    const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON
Rule 40    define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
Rule 41    function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 42    params -> real_params
Rule 43    params -> empty
Rule 44    real_params -> VARIABLE
Rule 45    real_params -> real_params COMMA VARIABLE
Rule 46    empty -> <empty>
Rule 47    function_assignment -> VARIABLE EQUALS special_function SEMICOLON
Rule 48    function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 49    special_function -> arrow_function
Rule 50    special_function -> anonymous_functions
Rule 51    arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 52    anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 53    codeblock -> LEFT_BRACE RIGHT_BRACE
Rule 54    types_structure -> structure_array_principal
Rule 55    types_structure -> structure_matrix_principal
Rule 56    types_structure -> structure_object_principal
Rule 57    structure_array_principal -> indexed_array
Rule 58    structure_array_principal -> associative_array
Rule 59    indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
Rule 60    associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
Rule 61    associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
Rule 62    structure_array -> key EQUALS GREATER_THAN values
Rule 63    structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 64    key -> INTEGER
Rule 65    key -> STRING
Rule 66    values_array_indexed -> values
Rule 67    values_array_indexed -> values COMMA values_array_indexed
Rule 68    structure_matrix_principal -> matrix_firstform
Rule 69    structure_matrix_principal -> matrix_secondform
Rule 70    structure_matrix_principal -> access_element_matrix
Rule 71    structure_matrix_principal -> modify_element_matrix
Rule 72    structure_matrix_principal -> add_element_matrix
Rule 73    matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 74    matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 75    structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 76    structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 77    structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 78    structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 79    access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 80    modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 81    add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 82    structure_object_principal -> object_creation
Rule 83    structure_object_principal -> access_method_object
Rule 84    object_creation -> NEW class_name SEMICOLON
Rule 85    class_name -> IDENTIFIER
Rule 86    access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ARRAY                : 59 60 61 73 77 78
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
COLON                : 
COMMA                : 11 13 40 45 63 67 76 78
COMMENT              : 
CONCATENATION        : 
CONST                : 39
CONTINUE             : 
DECLARE              : 
DEFAULT              : 
DEFINE               : 40
DIE                  : 
DIVIDE               : 25
DO                   : 
ECHO                 : 6 8
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 34 35 36 39 47 51 62 63 80 81
EQUALS_EQUALS        : 
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 19
FINAL                : 
FINALLY              : 
FLOAT                : 16
FN                   : 51
FOR                  : 
FOREACH              : 
FUNCTION             : 48 52
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 
GREATER_THAN         : 51 62 63 86
HALT_COMPILER        : 
IDENTICAL            : 
IDENTIFIER           : 39 41 48 85 86
IF                   : 
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INPUT                : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 14 28 64 79 79 80 80
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 53
LEFT_BRACKET         : 61 74 75 76 79 79 80 80 81
LEFT_PAREN           : 6 7 30 40 41 48 51 52 59 60 73 77 78 86
LIST                 : 
LOGIC_AND            : 
LOGIC_NOT            : 
LOGIC_OR             : 
LOGIC_XOR            : 
MATCH                : 
MINUS                : 22 86
MODULE               : 26
MULTIPLY             : 24
NAMESPACE            : 
NEW                  : 84
NOT_EQUALS           : 
NOT_IDENTICAL        : 
NULL_FUSION          : 
OR                   : 
PLUS                 : 21
PLUS_EQUALS          : 
POST_DECREMENT       : 
POST_INCREASE        : 
POW                  : 27
PRE_DECREMENT        : 
PRE_INCREASE         : 
PRINT                : 7 9
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RIGHT_BRACE          : 53
RIGHT_BRACKET        : 61 74 75 76 79 79 80 80 81
RIGHT_PAREN          : 6 7 30 40 41 48 51 52 59 60 73 77 78 86
SEMICOLON            : 3 34 35 36 39 40 41 47 59 60 61 73 74 79 80 84 86
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 
SMALL_THAN           : 
SPACECRAFT           : 
STATIC               : 
STRING               : 15 40 65
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 18
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 12 13 29 34 35 36 44 45 47 79 80 81 86
WHILE                : 
XOR                  : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 70
access_method_object : 83
add_element_matrix   : 72
anonymous_functions  : 50
arrow_function       : 49
assignment           : 4
associative_array    : 58
boolean              : 17
class_name           : 84
codeblock            : 48 51 52
const_syntax         : 37
constant_assignment  : 33
define_syntax        : 38
empty                : 43
expression           : 21 22 30 36
factor               : 23 24 25 26 27
function_assignment  : 32
function_invocation  : 35
indexed_array        : 57 81
key                  : 62 63
matrix_firstform     : 68
matrix_secondform    : 69
modify_element_matrix : 71
object_creation      : 82
params               : 41 48 51 52
print_statement      : 3
printable_values     : 6 7 8 9 11 13
program              : 1 0
real_params          : 42 45
sentence             : 1 2
special_function     : 47
structure_array      : 60 61 63
structure_array_principal : 54
structure_matrix_first : 73 78
structure_matrix_principal : 55
structure_matrix_second : 74 76
structure_object_principal : 56
term                 : 20 21 22 24 25 26 27
types_structure      : 5
values               : 10 11 34 39 40 62 63 66 67 75 76 77 78 80
values_array_indexed : 59 67
variable_assignment  : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment
    (5) sentence -> . types_structure
    (6) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (7) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> . ECHO printable_values
    (9) print_statement -> . PRINT printable_values
    (31) assignment -> . variable_assignment
    (32) assignment -> . function_assignment
    (33) assignment -> . constant_assignment
    (54) types_structure -> . structure_array_principal
    (55) types_structure -> . structure_matrix_principal
    (56) types_structure -> . structure_object_principal
    (34) variable_assignment -> . VARIABLE EQUALS values SEMICOLON
    (35) variable_assignment -> . VARIABLE EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> . VARIABLE EQUALS expression SEMICOLON
    (47) function_assignment -> . VARIABLE EQUALS special_function SEMICOLON
    (48) function_assignment -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (37) constant_assignment -> . const_syntax
    (38) constant_assignment -> . define_syntax
    (57) structure_array_principal -> . indexed_array
    (58) structure_array_principal -> . associative_array
    (68) structure_matrix_principal -> . matrix_firstform
    (69) structure_matrix_principal -> . matrix_secondform
    (70) structure_matrix_principal -> . access_element_matrix
    (71) structure_matrix_principal -> . modify_element_matrix
    (72) structure_matrix_principal -> . add_element_matrix
    (82) structure_object_principal -> . object_creation
    (83) structure_object_principal -> . access_method_object
    (39) const_syntax -> . CONST IDENTIFIER EQUALS values SEMICOLON
    (40) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
    (59) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (60) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (61) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (73) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (74) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (79) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (81) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (84) object_creation -> . NEW class_name SEMICOLON
    (86) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 14
    FUNCTION        shift and go to state 15
    CONST           shift and go to state 27
    DEFINE          shift and go to state 28
    ARRAY           shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    NEW             shift and go to state 31

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    variable_assignment            shift and go to state 8
    function_assignment            shift and go to state 9
    constant_assignment            shift and go to state 10
    structure_array_principal      shift and go to state 11
    structure_matrix_principal     shift and go to state 12
    structure_object_principal     shift and go to state 13
    const_syntax                   shift and go to state 16
    define_syntax                  shift and go to state 17
    indexed_array                  shift and go to state 18
    associative_array              shift and go to state 19
    matrix_firstform               shift and go to state 20
    matrix_secondform              shift and go to state 21
    access_element_matrix          shift and go to state 22
    modify_element_matrix          shift and go to state 23
    add_element_matrix             shift and go to state 24
    object_creation                shift and go to state 25
    access_method_object           shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment
    (5) sentence -> . types_structure
    (6) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (7) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> . ECHO printable_values
    (9) print_statement -> . PRINT printable_values
    (31) assignment -> . variable_assignment
    (32) assignment -> . function_assignment
    (33) assignment -> . constant_assignment
    (54) types_structure -> . structure_array_principal
    (55) types_structure -> . structure_matrix_principal
    (56) types_structure -> . structure_object_principal
    (34) variable_assignment -> . VARIABLE EQUALS values SEMICOLON
    (35) variable_assignment -> . VARIABLE EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> . VARIABLE EQUALS expression SEMICOLON
    (47) function_assignment -> . VARIABLE EQUALS special_function SEMICOLON
    (48) function_assignment -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (37) constant_assignment -> . const_syntax
    (38) constant_assignment -> . define_syntax
    (57) structure_array_principal -> . indexed_array
    (58) structure_array_principal -> . associative_array
    (68) structure_matrix_principal -> . matrix_firstform
    (69) structure_matrix_principal -> . matrix_secondform
    (70) structure_matrix_principal -> . access_element_matrix
    (71) structure_matrix_principal -> . modify_element_matrix
    (72) structure_matrix_principal -> . add_element_matrix
    (82) structure_object_principal -> . object_creation
    (83) structure_object_principal -> . access_method_object
    (39) const_syntax -> . CONST IDENTIFIER EQUALS values SEMICOLON
    (40) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
    (59) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (60) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (61) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (73) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (74) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (79) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (81) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (84) object_creation -> . NEW class_name SEMICOLON
    (86) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 14
    FUNCTION        shift and go to state 15
    CONST           shift and go to state 27
    DEFINE          shift and go to state 28
    ARRAY           shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    NEW             shift and go to state 31

    sentence                       shift and go to state 2
    program                        shift and go to state 32
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    variable_assignment            shift and go to state 8
    function_assignment            shift and go to state 9
    constant_assignment            shift and go to state 10
    structure_array_principal      shift and go to state 11
    structure_matrix_principal     shift and go to state 12
    structure_object_principal     shift and go to state 13
    const_syntax                   shift and go to state 16
    define_syntax                  shift and go to state 17
    indexed_array                  shift and go to state 18
    associative_array              shift and go to state 19
    matrix_firstform               shift and go to state 20
    matrix_secondform              shift and go to state 21
    access_element_matrix          shift and go to state 22
    modify_element_matrix          shift and go to state 23
    add_element_matrix             shift and go to state 24
    object_creation                shift and go to state 25
    access_method_object           shift and go to state 26

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 33


state 4

    (4) sentence -> assignment .

    ECHO            reduce using rule 4 (sentence -> assignment .)
    PRINT           reduce using rule 4 (sentence -> assignment .)
    VARIABLE        reduce using rule 4 (sentence -> assignment .)
    FUNCTION        reduce using rule 4 (sentence -> assignment .)
    CONST           reduce using rule 4 (sentence -> assignment .)
    DEFINE          reduce using rule 4 (sentence -> assignment .)
    ARRAY           reduce using rule 4 (sentence -> assignment .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment .)
    NEW             reduce using rule 4 (sentence -> assignment .)
    $end            reduce using rule 4 (sentence -> assignment .)


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> ECHO . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 34
    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 35
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 7

    (7) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (9) print_statement -> PRINT . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 44
    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 45
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 8

    (31) assignment -> variable_assignment .

    ECHO            reduce using rule 31 (assignment -> variable_assignment .)
    PRINT           reduce using rule 31 (assignment -> variable_assignment .)
    VARIABLE        reduce using rule 31 (assignment -> variable_assignment .)
    FUNCTION        reduce using rule 31 (assignment -> variable_assignment .)
    CONST           reduce using rule 31 (assignment -> variable_assignment .)
    DEFINE          reduce using rule 31 (assignment -> variable_assignment .)
    ARRAY           reduce using rule 31 (assignment -> variable_assignment .)
    LEFT_BRACKET    reduce using rule 31 (assignment -> variable_assignment .)
    NEW             reduce using rule 31 (assignment -> variable_assignment .)
    $end            reduce using rule 31 (assignment -> variable_assignment .)


state 9

    (32) assignment -> function_assignment .

    ECHO            reduce using rule 32 (assignment -> function_assignment .)
    PRINT           reduce using rule 32 (assignment -> function_assignment .)
    VARIABLE        reduce using rule 32 (assignment -> function_assignment .)
    FUNCTION        reduce using rule 32 (assignment -> function_assignment .)
    CONST           reduce using rule 32 (assignment -> function_assignment .)
    DEFINE          reduce using rule 32 (assignment -> function_assignment .)
    ARRAY           reduce using rule 32 (assignment -> function_assignment .)
    LEFT_BRACKET    reduce using rule 32 (assignment -> function_assignment .)
    NEW             reduce using rule 32 (assignment -> function_assignment .)
    $end            reduce using rule 32 (assignment -> function_assignment .)


state 10

    (33) assignment -> constant_assignment .

    ECHO            reduce using rule 33 (assignment -> constant_assignment .)
    PRINT           reduce using rule 33 (assignment -> constant_assignment .)
    VARIABLE        reduce using rule 33 (assignment -> constant_assignment .)
    FUNCTION        reduce using rule 33 (assignment -> constant_assignment .)
    CONST           reduce using rule 33 (assignment -> constant_assignment .)
    DEFINE          reduce using rule 33 (assignment -> constant_assignment .)
    ARRAY           reduce using rule 33 (assignment -> constant_assignment .)
    LEFT_BRACKET    reduce using rule 33 (assignment -> constant_assignment .)
    NEW             reduce using rule 33 (assignment -> constant_assignment .)
    $end            reduce using rule 33 (assignment -> constant_assignment .)


state 11

    (54) types_structure -> structure_array_principal .

    ECHO            reduce using rule 54 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 54 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 54 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 54 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 54 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 54 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 54 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 54 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 54 (types_structure -> structure_array_principal .)
    $end            reduce using rule 54 (types_structure -> structure_array_principal .)


state 12

    (55) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 55 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 55 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 55 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 55 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 55 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 55 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 55 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 55 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 55 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 55 (types_structure -> structure_matrix_principal .)


state 13

    (56) types_structure -> structure_object_principal .

    ECHO            reduce using rule 56 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 56 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 56 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 56 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 56 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 56 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 56 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 56 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 56 (types_structure -> structure_object_principal .)
    $end            reduce using rule 56 (types_structure -> structure_object_principal .)


state 14

    (34) variable_assignment -> VARIABLE . EQUALS values SEMICOLON
    (35) variable_assignment -> VARIABLE . EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> VARIABLE . EQUALS expression SEMICOLON
    (47) function_assignment -> VARIABLE . EQUALS special_function SEMICOLON
    (79) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (81) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (86) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    EQUALS          shift and go to state 46
    LEFT_BRACKET    shift and go to state 47
    MINUS           shift and go to state 48


state 15

    (48) function_assignment -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 49


state 16

    (37) constant_assignment -> const_syntax .

    ECHO            reduce using rule 37 (constant_assignment -> const_syntax .)
    PRINT           reduce using rule 37 (constant_assignment -> const_syntax .)
    VARIABLE        reduce using rule 37 (constant_assignment -> const_syntax .)
    FUNCTION        reduce using rule 37 (constant_assignment -> const_syntax .)
    CONST           reduce using rule 37 (constant_assignment -> const_syntax .)
    DEFINE          reduce using rule 37 (constant_assignment -> const_syntax .)
    ARRAY           reduce using rule 37 (constant_assignment -> const_syntax .)
    LEFT_BRACKET    reduce using rule 37 (constant_assignment -> const_syntax .)
    NEW             reduce using rule 37 (constant_assignment -> const_syntax .)
    $end            reduce using rule 37 (constant_assignment -> const_syntax .)


state 17

    (38) constant_assignment -> define_syntax .

    ECHO            reduce using rule 38 (constant_assignment -> define_syntax .)
    PRINT           reduce using rule 38 (constant_assignment -> define_syntax .)
    VARIABLE        reduce using rule 38 (constant_assignment -> define_syntax .)
    FUNCTION        reduce using rule 38 (constant_assignment -> define_syntax .)
    CONST           reduce using rule 38 (constant_assignment -> define_syntax .)
    DEFINE          reduce using rule 38 (constant_assignment -> define_syntax .)
    ARRAY           reduce using rule 38 (constant_assignment -> define_syntax .)
    LEFT_BRACKET    reduce using rule 38 (constant_assignment -> define_syntax .)
    NEW             reduce using rule 38 (constant_assignment -> define_syntax .)
    $end            reduce using rule 38 (constant_assignment -> define_syntax .)


state 18

    (57) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 57 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 57 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 57 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 57 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 57 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 57 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 57 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 57 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 57 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 57 (structure_array_principal -> indexed_array .)


state 19

    (58) structure_array_principal -> associative_array .

    ECHO            reduce using rule 58 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 58 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 58 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 58 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 58 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 58 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 58 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 58 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 58 (structure_array_principal -> associative_array .)
    $end            reduce using rule 58 (structure_array_principal -> associative_array .)


state 20

    (68) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 68 (structure_matrix_principal -> matrix_firstform .)


state 21

    (69) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 69 (structure_matrix_principal -> matrix_secondform .)


state 22

    (70) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 70 (structure_matrix_principal -> access_element_matrix .)


state 23

    (71) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 71 (structure_matrix_principal -> modify_element_matrix .)


state 24

    (72) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 72 (structure_matrix_principal -> add_element_matrix .)


state 25

    (82) structure_object_principal -> object_creation .

    ECHO            reduce using rule 82 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 82 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 82 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 82 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 82 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 82 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 82 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 82 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 82 (structure_object_principal -> object_creation .)
    $end            reduce using rule 82 (structure_object_principal -> object_creation .)


state 26

    (83) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 83 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 83 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 83 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 83 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 83 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 83 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 83 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 83 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 83 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 83 (structure_object_principal -> access_method_object .)


state 27

    (39) const_syntax -> CONST . IDENTIFIER EQUALS values SEMICOLON

    IDENTIFIER      shift and go to state 50


state 28

    (40) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 51


state 29

    (59) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (60) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (61) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (73) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 52
    LEFT_BRACKET    shift and go to state 53


state 30

    (74) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (75) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (76) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 54

    structure_matrix_second        shift and go to state 55

state 31

    (84) object_creation -> NEW . class_name SEMICOLON
    (85) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 57

    class_name                     shift and go to state 56

state 32

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 33

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 34

    (6) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 58
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 35

    (8) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 8 (print_statement -> ECHO printable_values .)


state 36

    (10) printable_values -> values .
    (11) printable_values -> values . COMMA printable_values

    SEMICOLON       reduce using rule 10 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 10 (printable_values -> values .)
    COMMA           shift and go to state 59


state 37

    (12) printable_values -> VARIABLE .
    (13) printable_values -> VARIABLE . COMMA printable_values

    SEMICOLON       reduce using rule 12 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 12 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 60


state 38

    (14) values -> INTEGER .

    COMMA           reduce using rule 14 (values -> INTEGER .)
    SEMICOLON       reduce using rule 14 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 14 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 14 (values -> INTEGER .)


state 39

    (15) values -> STRING .

    COMMA           reduce using rule 15 (values -> STRING .)
    SEMICOLON       reduce using rule 15 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 15 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 15 (values -> STRING .)


state 40

    (16) values -> FLOAT .

    COMMA           reduce using rule 16 (values -> FLOAT .)
    SEMICOLON       reduce using rule 16 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 16 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 16 (values -> FLOAT .)


state 41

    (17) values -> boolean .

    COMMA           reduce using rule 17 (values -> boolean .)
    SEMICOLON       reduce using rule 17 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 17 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 17 (values -> boolean .)


state 42

    (18) boolean -> TRUE .

    COMMA           reduce using rule 18 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 18 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 18 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 18 (boolean -> TRUE .)


state 43

    (19) boolean -> FALSE .

    COMMA           reduce using rule 19 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 19 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 19 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 19 (boolean -> FALSE .)


state 44

    (7) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 61
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 45

    (9) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 9 (print_statement -> PRINT printable_values .)


state 46

    (34) variable_assignment -> VARIABLE EQUALS . values SEMICOLON
    (35) variable_assignment -> VARIABLE EQUALS . function_invocation SEMICOLON
    (36) variable_assignment -> VARIABLE EQUALS . expression SEMICOLON
    (47) function_assignment -> VARIABLE EQUALS . special_function SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (41) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (49) special_function -> . arrow_function
    (50) special_function -> . anonymous_functions
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (51) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (52) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 67
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    IDENTIFIER      shift and go to state 68
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FN              shift and go to state 74
    FUNCTION        shift and go to state 75
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    values                         shift and go to state 63
    function_invocation            shift and go to state 64
    expression                     shift and go to state 65
    special_function               shift and go to state 66
    boolean                        shift and go to state 41
    term                           shift and go to state 70
    arrow_function                 shift and go to state 71
    anonymous_functions            shift and go to state 72
    factor                         shift and go to state 73

state 47

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (81) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 76
    RIGHT_BRACKET   shift and go to state 77


state 48

    (86) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 78


state 49

    (48) function_assignment -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 79


state 50

    (39) const_syntax -> CONST IDENTIFIER . EQUALS values SEMICOLON

    EQUALS          shift and go to state 80


state 51

    (40) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN SEMICOLON

    STRING          shift and go to state 81


state 52

    (59) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN SEMICOLON
    (60) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN SEMICOLON
    (73) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (66) values_array_indexed -> . values
    (67) values_array_indexed -> . values COMMA values_array_indexed
    (62) structure_array -> . key EQUALS GREATER_THAN values
    (63) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (77) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (78) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (64) key -> . INTEGER
    (65) key -> . STRING
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    ARRAY           shift and go to state 82
    INTEGER         shift and go to state 88
    STRING          shift and go to state 89
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values_array_indexed           shift and go to state 83
    structure_array                shift and go to state 84
    structure_matrix_first         shift and go to state 85
    values                         shift and go to state 86
    key                            shift and go to state 87
    boolean                        shift and go to state 41

state 53

    (61) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET SEMICOLON
    (62) structure_array -> . key EQUALS GREATER_THAN values
    (63) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (64) key -> . INTEGER
    (65) key -> . STRING

    INTEGER         shift and go to state 91
    STRING          shift and go to state 92

    structure_array                shift and go to state 90
    key                            shift and go to state 87

state 54

    (75) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (76) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 93
    boolean                        shift and go to state 41

state 55

    (74) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 94


state 56

    (84) object_creation -> NEW class_name . SEMICOLON

    SEMICOLON       shift and go to state 95


state 57

    (85) class_name -> IDENTIFIER .

    SEMICOLON       reduce using rule 85 (class_name -> IDENTIFIER .)


state 58

    (6) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 96


state 59

    (11) printable_values -> values COMMA . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 36
    printable_values               shift and go to state 97
    boolean                        shift and go to state 41

state 60

    (13) printable_values -> VARIABLE COMMA . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 98
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 61

    (7) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 99


state 62

    (29) factor -> VARIABLE .

    MULTIPLY        reduce using rule 29 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 29 (factor -> VARIABLE .)
    MODULE          reduce using rule 29 (factor -> VARIABLE .)
    POW             reduce using rule 29 (factor -> VARIABLE .)
    PLUS            reduce using rule 29 (factor -> VARIABLE .)
    MINUS           reduce using rule 29 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 29 (factor -> VARIABLE .)


state 63

    (34) variable_assignment -> VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 100


state 64

    (35) variable_assignment -> VARIABLE EQUALS function_invocation . SEMICOLON

    SEMICOLON       shift and go to state 101


state 65

    (36) variable_assignment -> VARIABLE EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 102


state 66

    (47) function_assignment -> VARIABLE EQUALS special_function . SEMICOLON

    SEMICOLON       shift and go to state 103


state 67

    (14) values -> INTEGER .
    (28) factor -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (values -> INTEGER .)
    SEMICOLON       reduce using rule 14 (values -> INTEGER .)
    MULTIPLY        reduce using rule 28 (factor -> INTEGER .)
    DIVIDE          reduce using rule 28 (factor -> INTEGER .)
    MODULE          reduce using rule 28 (factor -> INTEGER .)
    POW             reduce using rule 28 (factor -> INTEGER .)
    PLUS            reduce using rule 28 (factor -> INTEGER .)
    MINUS           reduce using rule 28 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 28 (factor -> INTEGER .) ]


state 68

    (41) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 104


state 69

    (30) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    expression                     shift and go to state 105
    term                           shift and go to state 70
    factor                         shift and go to state 73

state 70

    (20) expression -> term .
    (21) expression -> term . PLUS expression
    (22) expression -> term . MINUS expression

    SEMICOLON       reduce using rule 20 (expression -> term .)
    RIGHT_PAREN     reduce using rule 20 (expression -> term .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108


state 71

    (49) special_function -> arrow_function .

    SEMICOLON       reduce using rule 49 (special_function -> arrow_function .)


state 72

    (50) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 50 (special_function -> anonymous_functions .)


state 73

    (23) term -> factor .
    (24) term -> factor . MULTIPLY term
    (25) term -> factor . DIVIDE term
    (26) term -> factor . MODULE term
    (27) term -> factor . POW term

    PLUS            reduce using rule 23 (term -> factor .)
    MINUS           reduce using rule 23 (term -> factor .)
    SEMICOLON       reduce using rule 23 (term -> factor .)
    RIGHT_PAREN     reduce using rule 23 (term -> factor .)
    MULTIPLY        shift and go to state 109
    DIVIDE          shift and go to state 110
    MODULE          shift and go to state 111
    POW             shift and go to state 112


state 74

    (51) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 113


state 75

    (52) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 114


state 76

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 115


state 77

    (81) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 116


state 78

    (86) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 117


state 79

    (48) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (42) params -> . real_params
    (43) params -> . empty
    (44) real_params -> . VARIABLE
    (45) real_params -> . real_params COMMA VARIABLE
    (46) empty -> .

    VARIABLE        shift and go to state 121
    RIGHT_PAREN     reduce using rule 46 (empty -> .)

    params                         shift and go to state 118
    real_params                    shift and go to state 119
    empty                          shift and go to state 120

state 80

    (39) const_syntax -> CONST IDENTIFIER EQUALS . values SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 122
    boolean                        shift and go to state 41

state 81

    (40) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN SEMICOLON

    COMMA           shift and go to state 123


state 82

    (77) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (78) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 124


state 83

    (59) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 125


state 84

    (60) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 126


state 85

    (73) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 127


state 86

    (66) values_array_indexed -> values .
    (67) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 66 (values_array_indexed -> values .)
    COMMA           shift and go to state 128


state 87

    (62) structure_array -> key . EQUALS GREATER_THAN values
    (63) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 129


state 88

    (14) values -> INTEGER .
    (64) key -> INTEGER .

    COMMA           reduce using rule 14 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 14 (values -> INTEGER .)
    EQUALS          reduce using rule 64 (key -> INTEGER .)


state 89

    (15) values -> STRING .
    (65) key -> STRING .

    COMMA           reduce using rule 15 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 15 (values -> STRING .)
    EQUALS          reduce using rule 65 (key -> STRING .)


state 90

    (61) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 130


state 91

    (64) key -> INTEGER .

    EQUALS          reduce using rule 64 (key -> INTEGER .)


state 92

    (65) key -> STRING .

    EQUALS          reduce using rule 65 (key -> STRING .)


state 93

    (75) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (76) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 131


state 94

    (74) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 132


state 95

    (84) object_creation -> NEW class_name SEMICOLON .

    ECHO            reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    PRINT           reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    VARIABLE        reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    FUNCTION        reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    CONST           reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    DEFINE          reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    ARRAY           reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    LEFT_BRACKET    reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    NEW             reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)
    $end            reduce using rule 84 (object_creation -> NEW class_name SEMICOLON .)


state 96

    (6) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 6 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 97

    (11) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 11 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 11 (printable_values -> values COMMA printable_values .)


state 98

    (13) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 13 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 13 (printable_values -> VARIABLE COMMA printable_values .)


state 99

    (7) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 7 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 100

    (34) variable_assignment -> VARIABLE EQUALS values SEMICOLON .

    ECHO            reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    PRINT           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    NEW             reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    $end            reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)


state 101

    (35) variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .

    ECHO            reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    PRINT           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    VARIABLE        reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    FUNCTION        reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    CONST           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    DEFINE          reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    ARRAY           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    LEFT_BRACKET    reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    NEW             reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    $end            reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)


state 102

    (36) variable_assignment -> VARIABLE EQUALS expression SEMICOLON .

    ECHO            reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    FUNCTION        reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    DEFINE          reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    ARRAY           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NEW             reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)


state 103

    (47) function_assignment -> VARIABLE EQUALS special_function SEMICOLON .

    ECHO            reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    PRINT           reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    VARIABLE        reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    FUNCTION        reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    CONST           reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    DEFINE          reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    ARRAY           reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    LEFT_BRACKET    reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    NEW             reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    $end            reduce using rule 47 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)


state 104

    (41) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (42) params -> . real_params
    (43) params -> . empty
    (44) real_params -> . VARIABLE
    (45) real_params -> . real_params COMMA VARIABLE
    (46) empty -> .

    VARIABLE        shift and go to state 121
    RIGHT_PAREN     reduce using rule 46 (empty -> .)

    params                         shift and go to state 133
    real_params                    shift and go to state 119
    empty                          shift and go to state 120

state 105

    (30) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 134


state 106

    (28) factor -> INTEGER .

    MULTIPLY        reduce using rule 28 (factor -> INTEGER .)
    DIVIDE          reduce using rule 28 (factor -> INTEGER .)
    MODULE          reduce using rule 28 (factor -> INTEGER .)
    POW             reduce using rule 28 (factor -> INTEGER .)
    PLUS            reduce using rule 28 (factor -> INTEGER .)
    MINUS           reduce using rule 28 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 28 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 28 (factor -> INTEGER .)


state 107

    (21) expression -> term PLUS . expression
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    term                           shift and go to state 70
    expression                     shift and go to state 135
    factor                         shift and go to state 73

state 108

    (22) expression -> term MINUS . expression
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    term                           shift and go to state 70
    expression                     shift and go to state 136
    factor                         shift and go to state 73

state 109

    (24) term -> factor MULTIPLY . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    factor                         shift and go to state 73
    term                           shift and go to state 137

state 110

    (25) term -> factor DIVIDE . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    factor                         shift and go to state 73
    term                           shift and go to state 138

state 111

    (26) term -> factor MODULE . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    factor                         shift and go to state 73
    term                           shift and go to state 139

state 112

    (27) term -> factor POW . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 106
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 69

    factor                         shift and go to state 73
    term                           shift and go to state 140

state 113

    (51) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (42) params -> . real_params
    (43) params -> . empty
    (44) real_params -> . VARIABLE
    (45) real_params -> . real_params COMMA VARIABLE
    (46) empty -> .

    VARIABLE        shift and go to state 121
    RIGHT_PAREN     reduce using rule 46 (empty -> .)

    params                         shift and go to state 141
    real_params                    shift and go to state 119
    empty                          shift and go to state 120

state 114

    (52) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (42) params -> . real_params
    (43) params -> . empty
    (44) real_params -> . VARIABLE
    (45) real_params -> . real_params COMMA VARIABLE
    (46) empty -> .

    VARIABLE        shift and go to state 121
    RIGHT_PAREN     reduce using rule 46 (empty -> .)

    params                         shift and go to state 142
    real_params                    shift and go to state 119
    empty                          shift and go to state 120

state 115

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 143


state 116

    (81) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (59) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON

    ARRAY           shift and go to state 145

    indexed_array                  shift and go to state 144

state 117

    (86) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . LEFT_PAREN RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 146


state 118

    (48) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 147


state 119

    (42) params -> real_params .
    (45) real_params -> real_params . COMMA VARIABLE

    RIGHT_PAREN     reduce using rule 42 (params -> real_params .)
    COMMA           shift and go to state 148


state 120

    (43) params -> empty .

    RIGHT_PAREN     reduce using rule 43 (params -> empty .)


state 121

    (44) real_params -> VARIABLE .

    COMMA           reduce using rule 44 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 44 (real_params -> VARIABLE .)


state 122

    (39) const_syntax -> CONST IDENTIFIER EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 149


state 123

    (40) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 150
    boolean                        shift and go to state 41

state 124

    (77) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (78) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 151
    boolean                        shift and go to state 41

state 125

    (59) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 152


state 126

    (60) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 127

    (73) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 154


state 128

    (67) values_array_indexed -> values COMMA . values_array_indexed
    (66) values_array_indexed -> . values
    (67) values_array_indexed -> . values COMMA values_array_indexed
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 86
    values_array_indexed           shift and go to state 155
    boolean                        shift and go to state 41

state 129

    (62) structure_array -> key EQUALS . GREATER_THAN values
    (63) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 156


state 130

    (61) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 157


state 131

    (75) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (76) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 75 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 158


state 132

    (74) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 74 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 133

    (41) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 159


state 134

    (30) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 135

    (21) expression -> term PLUS expression .

    SEMICOLON       reduce using rule 21 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 21 (expression -> term PLUS expression .)


state 136

    (22) expression -> term MINUS expression .

    SEMICOLON       reduce using rule 22 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 22 (expression -> term MINUS expression .)


state 137

    (24) term -> factor MULTIPLY term .

    PLUS            reduce using rule 24 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 24 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 24 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 24 (term -> factor MULTIPLY term .)


state 138

    (25) term -> factor DIVIDE term .

    PLUS            reduce using rule 25 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 25 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 25 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 25 (term -> factor DIVIDE term .)


state 139

    (26) term -> factor MODULE term .

    PLUS            reduce using rule 26 (term -> factor MODULE term .)
    MINUS           reduce using rule 26 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 26 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 26 (term -> factor MODULE term .)


state 140

    (27) term -> factor POW term .

    PLUS            reduce using rule 27 (term -> factor POW term .)
    MINUS           reduce using rule 27 (term -> factor POW term .)
    SEMICOLON       reduce using rule 27 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 27 (term -> factor POW term .)


state 141

    (51) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 160


state 142

    (52) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 161


state 143

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 162


state 144

    (81) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 81 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 145

    (59) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 163


state 146

    (86) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 164


state 147

    (48) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (53) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 166

    codeblock                      shift and go to state 165

state 148

    (45) real_params -> real_params COMMA . VARIABLE

    VARIABLE        shift and go to state 167


state 149

    (39) const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .

    ECHO            reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    PRINT           reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    CONST           reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    NEW             reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    $end            reduce using rule 39 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)


state 150

    (40) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 168


state 151

    (77) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (78) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 169


state 152

    (59) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 59 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)


state 153

    (60) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 60 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)


state 154

    (73) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 73 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 155

    (67) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 67 (values_array_indexed -> values COMMA values_array_indexed .)


state 156

    (62) structure_array -> key EQUALS GREATER_THAN . values
    (63) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 170
    boolean                        shift and go to state 41

state 157

    (61) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 61 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)


state 158

    (76) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (75) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (76) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 54

    structure_matrix_second        shift and go to state 171

state 159

    (41) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 172


state 160

    (51) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 173


state 161

    (52) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (53) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 166

    codeblock                      shift and go to state 174

state 162

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 175


state 163

    (59) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN SEMICOLON
    (66) values_array_indexed -> . values
    (67) values_array_indexed -> . values COMMA values_array_indexed
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values_array_indexed           shift and go to state 83
    values                         shift and go to state 86
    boolean                        shift and go to state 41

state 164

    (86) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 165

    (48) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 48 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 166

    (53) codeblock -> LEFT_BRACE . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 177


state 167

    (45) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 45 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 45 (real_params -> real_params COMMA VARIABLE .)


state 168

    (40) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 178


state 169

    (77) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (78) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 77 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 179


state 170

    (62) structure_array -> key EQUALS GREATER_THAN values .
    (63) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 62 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 62 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 180


state 171

    (76) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 76 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 172

    (41) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 41 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 173

    (51) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 181


state 174

    (52) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 52 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 175

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 182
    EQUALS          shift and go to state 183


state 176

    (86) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 86 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)


state 177

    (53) codeblock -> LEFT_BRACE RIGHT_BRACE .

    ECHO            reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    VARIABLE        reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    CONST           reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DEFINE          reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    ARRAY           reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    NEW             reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    $end            reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 53 (codeblock -> LEFT_BRACE RIGHT_BRACE .)


state 178

    (40) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 40 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)


state 179

    (78) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (77) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (78) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 82

    structure_matrix_first         shift and go to state 184

state 180

    (63) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (62) structure_array -> . key EQUALS GREATER_THAN values
    (63) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (64) key -> . INTEGER
    (65) key -> . STRING

    INTEGER         shift and go to state 91
    STRING          shift and go to state 92

    key                            shift and go to state 87
    structure_array                shift and go to state 185

state 181

    (51) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (53) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 166

    codeblock                      shift and go to state 186

state 182

    (79) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 79 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 183

    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 187
    boolean                        shift and go to state 41

state 184

    (78) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 78 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 185

    (63) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 63 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 63 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 186

    (51) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 51 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 187

    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 188


state 188

    (80) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 80 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 67 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 67
