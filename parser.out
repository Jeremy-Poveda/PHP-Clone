Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    FINAL
    FINALLY
    FOR
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> control_structures
Rule 8     sentence -> function_declaration
Rule 9     control_structures -> if_statement
Rule 10    control_structures -> while_statement
Rule 11    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 12    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 15    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 18    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 19    body_statement -> sentence
Rule 20    body_statement -> sentence RETURN values SEMICOLON
Rule 21    body_statement -> sentence RETURN SEMICOLON
Rule 22    body_statement -> sentence BREAK SEMICOLON
Rule 23    body_statement -> sentence body_statement
Rule 24    conditional -> boolean_expression
Rule 25    conditional -> boolean_expression logic_operator boolean_expression
Rule 26    logic_operator -> LOGIC_AND
Rule 27    logic_operator -> LOGIC_OR
Rule 28    logic_operator -> LOGIC_XOR
Rule 29    boolean_expression -> comparation
Rule 30    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 31    boolean_expression -> LOGIC_NOT conditional
Rule 32    comparation -> values comparator_operator values
Rule 33    comparation -> values comparator_operator expression
Rule 34    comparation -> expression comparator_operator expression
Rule 35    comparator_operator -> EQUALS_EQUALS
Rule 36    comparator_operator -> IDENTICAL
Rule 37    comparator_operator -> NOT_EQUALS
Rule 38    comparator_operator -> NOT_IDENTICAL
Rule 39    comparator_operator -> SMALL_THAN
Rule 40    comparator_operator -> GREATER_THAN
Rule 41    comparator_operator -> SMALL_EQUALS_TO
Rule 42    comparator_operator -> GREATER_EQUALS_TO
Rule 43    comparator_operator -> SPACECRAFT
Rule 44    comparator_operator -> NULL_FUSION
Rule 45    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 46    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 47    print_statement -> ECHO printable_values
Rule 48    print_statement -> PRINT printable_values
Rule 49    printable_values -> values
Rule 50    printable_values -> values COMMA printable_values
Rule 51    printable_values -> VARIABLE
Rule 52    printable_values -> VARIABLE COMMA printable_values
Rule 53    printable_values -> conditional
Rule 54    printable_values -> conditional COMMA printable_values
Rule 55    printable_values -> structure_object_principal
Rule 56    printable_values -> structure_object_principal COMMA printable_values
Rule 57    values -> INTEGER
Rule 58    values -> STRING
Rule 59    values -> FLOAT
Rule 60    values -> boolean
Rule 61    boolean -> TRUE
Rule 62    boolean -> FALSE
Rule 63    expression -> term
Rule 64    expression -> term PLUS expression
Rule 65    expression -> term MINUS expression
Rule 66    term -> factor
Rule 67    term -> factor MULTIPLY term
Rule 68    term -> factor DIVIDE term
Rule 69    term -> factor MODULE term
Rule 70    term -> factor POW term
Rule 71    factor -> INTEGER
Rule 72    factor -> VARIABLE
Rule 73    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 74    assignment -> variable_assignment
Rule 75    assignment -> constant_assignment
Rule 76    variable_assignment -> VARIABLE assignment_operator values
Rule 77    variable_assignment -> VARIABLE assignment_operator expression
Rule 78    variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON
Rule 79    variable_assignment -> VARIABLE assignment_operator types_structure
Rule 80    variable_assignment -> VARIABLE assignment_operator input
Rule 81    variable_assignment -> VARIABLE assignment_operator special_function
Rule 82    variable_assignment -> VARIABLE INCREASE
Rule 83    variable_assignment -> VARIABLE DECREMENT
Rule 84    variable_assignment -> INCREASE VARIABLE
Rule 85    variable_assignment -> DECREMENT VARIABLE
Rule 86    assignment_operator -> EQUALS
Rule 87    assignment_operator -> PLUS_EQUALS
Rule 88    constant_assignment -> const_syntax
Rule 89    constant_assignment -> define_syntax
Rule 90    const_syntax -> CONST IDENTIFIER EQUALS values
Rule 91    define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 92    function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 93    params -> real_params
Rule 94    params -> empty
Rule 95    real_params -> VARIABLE
Rule 96    real_params -> values
Rule 97    real_params -> real_params COMMA VARIABLE
Rule 98    real_params -> real_params COMMA values
Rule 99    empty -> <empty>
Rule 100   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 101   special_function -> arrow_function
Rule 102   special_function -> anonymous_functions
Rule 103   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 104   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 105   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 106   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 107   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 108   types_structure -> structure_array_principal
Rule 109   types_structure -> structure_matrix_principal
Rule 110   types_structure -> structure_object_principal
Rule 111   structure_array_principal -> indexed_array
Rule 112   structure_array_principal -> associative_array
Rule 113   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 114   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 115   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 116   structure_array -> key EQUALS GREATER_THAN values
Rule 117   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 118   key -> INTEGER
Rule 119   key -> STRING
Rule 120   values_array_indexed -> values
Rule 121   values_array_indexed -> values COMMA values_array_indexed
Rule 122   structure_matrix_principal -> matrix_firstform
Rule 123   structure_matrix_principal -> matrix_secondform
Rule 124   structure_matrix_principal -> access_element_matrix
Rule 125   structure_matrix_principal -> modify_element_matrix
Rule 126   structure_matrix_principal -> add_element_matrix
Rule 127   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 128   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 129   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 130   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 131   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 132   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 133   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 134   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 135   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 136   structure_object_principal -> object_creation
Rule 137   structure_object_principal -> access_method_object
Rule 138   object_creation -> NEW IDENTIFIER
Rule 139   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 140   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 141   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER
Rule 142   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
Rule 143   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
Rule 144   class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 145   class_extends_opt -> EXTENDS IDENTIFIER
Rule 146   class_extends_opt -> <empty>
Rule 147   class_body -> class_body class_member
Rule 148   class_body -> <empty>
Rule 149   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 150   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 151   class_member -> class_attribute
Rule 152   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 153   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 154   visibility_opt -> PUBLIC
Rule 155   visibility_opt -> PRIVATE
Rule 156   visibility_opt -> PROTECTED
Rule 157   visibility_opt -> <empty>
Rule 158   method_body -> classStatement
Rule 159   method_body -> classStatement return_form
Rule 160   method_body -> return_form
Rule 161   method_body -> classStatement BREAK SEMICOLON
Rule 162   method_body -> classStatement method_body
Rule 163   return_form -> RETURN values SEMICOLON
Rule 164   return_form -> RETURN access_method_object SEMICOLON
Rule 165   return_form -> RETURN SEMICOLON
Rule 166   classStatement -> sentence
Rule 167   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 113 114 115 127 131 132
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 22 161
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 144
CLONE                : 
COLON                : 
COMMA                : 50 52 54 56 91 97 98 117 121 130 132
COMMENT              : 
CONCATENATION        : 
CONST                : 90
CONTINUE             : 
DECLARE              : 
DECREMENT            : 83 85
DEFAULT              : 
DEFINE               : 91
DIE                  : 
DIVIDE               : 68
DO                   : 
ECHO                 : 45 47
ELSE                 : 18
ELSEIF               : 15 16 17
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 86 90 103 116 117 134 135 142 143 152
EQUALS_EQUALS        : 35
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 145
FALSE                : 62
FEGTS                : 106
FINAL                : 
FINALLY              : 
FLOAT                : 59
FN                   : 103
FOR                  : 
FOREACH              : 
FUNCTION             : 100 104 149 150
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 42
GREATER_THAN         : 40 103 116 117 140 141 142 143
HALT_COMPILER        : 
IDENTICAL            : 36
IDENTIFIER           : 90 92 100 138 139 141 142 143 144 145 149 150
IF                   : 12 13 14
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 82 84
INSTEADOF            : 
INTEGER              : 57 71 118 133 133 134 134
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 11 12 13 14 15 16 17 18 105 144 149 150
LEFT_BRACKET         : 115 128 129 130 133 133 134 134 135
LEFT_PAREN           : 11 12 13 14 15 16 17 30 45 46 73 91 92 100 103 104 106 107 113 114 127 131 132 139 149 150
LIST                 : 
LOGIC_AND            : 26
LOGIC_NOT            : 31
LOGIC_OR             : 27
LOGIC_XOR            : 28
MATCH                : 
MINUS                : 65 140 141 142 143
MODULE               : 69
MULTIPLY             : 67
NAMESPACE            : 
NEW                  : 138 139
NOT_EQUALS           : 37
NOT_IDENTICAL        : 38
NULL_FUSION          : 44
PLUS                 : 64
PLUS_EQUALS          : 87
POW                  : 70
PRINT                : 46 48
PRIVATE              : 155
PROTECTED            : 156
PUBLIC               : 154
READLINE             : 107
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 20 21 163 164 165
RIGHT_BRACE          : 11 12 13 14 15 16 17 18 105 144 149 150
RIGHT_BRACKET        : 115 128 129 130 133 133 134 134 135
RIGHT_PAREN          : 11 12 13 14 15 16 17 30 45 46 73 91 92 100 103 104 106 107 113 114 127 131 132 139 149 150
SEMICOLON            : 3 4 20 21 22 78 127 128 133 134 152 153 161 163 164 165 167
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 41
SMALL_THAN           : 39
SPACECRAFT           : 43
STATIC               : 149
STDIN                : 106
STRING               : 58 91 107 119
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 61
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 51 52 72 76 77 78 79 80 81 82 83 84 85 95 97 133 134 135 140 141 142 143 143 152 153
WHILE                : 11
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 124
access_method_object : 137 164 167
add_element_matrix   : 126
anonymous_functions  : 102
arrow_function       : 101
assignment           : 4
assignment_operator  : 76 77 78 79 80 81
associative_array    : 112
body_statement       : 11 12 13 14 15 16 17 18 23 105
boolean              : 60
boolean_expression   : 24 25 25
classStatement       : 158 159 161 162
class_attribute      : 151
class_body           : 144 147
class_declaration    : 6
class_extends_opt    : 144
class_member         : 147
codeblock            : 100 103 104
comparation          : 29
comparator_operator  : 32 33 34
conditional          : 11 12 13 14 15 16 17 30 31 53 54
const_syntax         : 88
constant_assignment  : 75
control_structures   : 7
define_syntax        : 89
else_statement       : 14 17
elseif_statement     : 13 16
empty                : 94
expression           : 33 34 34 64 65 73 77
factor               : 66 67 68 69 70
function_declaration : 8
function_invocation  : 78 140
if_statement         : 9
indexed_array        : 111 135
input                : 80
key                  : 116 117
logic_operator       : 25
matrix_firstform     : 122
matrix_secondform    : 123
method_body          : 149 150 162
modify_element_matrix : 125
object_creation      : 136
params               : 92 100 103 104 139 149 150
print_statement      : 3
printable_values     : 45 46 47 48 50 52 54 56
program              : 1 0
real_params          : 93 97 98
return_form          : 159 160
sentence             : 1 2 19 20 21 22 23 166
special_function     : 81
structure_array      : 114 115 117
structure_array_principal : 108
structure_matrix_first : 127 132
structure_matrix_principal : 109
structure_matrix_second : 128 130
structure_object_principal : 55 56 110
term                 : 63 64 65 67 68 69 70
types_structure      : 5 79
values               : 20 32 32 33 49 50 76 90 91 96 98 116 117 120 121 129 130 131 132 134 142 152 163
values_array_indexed : 113 121
variable_assignment  : 74
visibility_opt       : 149 150 152 153
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 2
    program                        shift and go to state 41
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 42


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 43


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> control_structures .

    ECHO            reduce using rule 7 (sentence -> control_structures .)
    PRINT           reduce using rule 7 (sentence -> control_structures .)
    CLASS           reduce using rule 7 (sentence -> control_structures .)
    FUNCTION        reduce using rule 7 (sentence -> control_structures .)
    VARIABLE        reduce using rule 7 (sentence -> control_structures .)
    INCREASE        reduce using rule 7 (sentence -> control_structures .)
    DECREMENT       reduce using rule 7 (sentence -> control_structures .)
    IF              reduce using rule 7 (sentence -> control_structures .)
    WHILE           reduce using rule 7 (sentence -> control_structures .)
    CONST           reduce using rule 7 (sentence -> control_structures .)
    DEFINE          reduce using rule 7 (sentence -> control_structures .)
    ARRAY           reduce using rule 7 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> control_structures .)
    NEW             reduce using rule 7 (sentence -> control_structures .)
    $end            reduce using rule 7 (sentence -> control_structures .)
    RETURN          reduce using rule 7 (sentence -> control_structures .)
    BREAK           reduce using rule 7 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> control_structures .)


state 8

    (8) sentence -> function_declaration .

    ECHO            reduce using rule 8 (sentence -> function_declaration .)
    PRINT           reduce using rule 8 (sentence -> function_declaration .)
    CLASS           reduce using rule 8 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 8 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 8 (sentence -> function_declaration .)
    INCREASE        reduce using rule 8 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 8 (sentence -> function_declaration .)
    IF              reduce using rule 8 (sentence -> function_declaration .)
    WHILE           reduce using rule 8 (sentence -> function_declaration .)
    CONST           reduce using rule 8 (sentence -> function_declaration .)
    DEFINE          reduce using rule 8 (sentence -> function_declaration .)
    ARRAY           reduce using rule 8 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> function_declaration .)
    NEW             reduce using rule 8 (sentence -> function_declaration .)
    $end            reduce using rule 8 (sentence -> function_declaration .)
    RETURN          reduce using rule 8 (sentence -> function_declaration .)
    BREAK           reduce using rule 8 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> function_declaration .)


state 9

    (45) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> ECHO . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 44
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    printable_values               shift and go to state 45
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    structure_object_principal     shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 10

    (46) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (48) print_statement -> PRINT . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 62
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    printable_values               shift and go to state 63
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    structure_object_principal     shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 11

    (74) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 74 (assignment -> variable_assignment .)


state 12

    (75) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 75 (assignment -> constant_assignment .)


state 13

    (108) types_structure -> structure_array_principal .

    ECHO            reduce using rule 108 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 108 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 108 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 108 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 108 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 108 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 108 (types_structure -> structure_array_principal .)
    IF              reduce using rule 108 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 108 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 108 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 108 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 108 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 108 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 108 (types_structure -> structure_array_principal .)
    $end            reduce using rule 108 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 108 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 108 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 108 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 108 (types_structure -> structure_array_principal .)


state 14

    (109) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 109 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 109 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 109 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 109 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 109 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 109 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 109 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 109 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 109 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 109 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 109 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 109 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 109 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 109 (types_structure -> structure_matrix_principal .)


state 15

    (110) types_structure -> structure_object_principal .

    ECHO            reduce using rule 110 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 110 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 110 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 110 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 110 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 110 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 110 (types_structure -> structure_object_principal .)
    IF              reduce using rule 110 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 110 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 110 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 110 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 110 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 110 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 110 (types_structure -> structure_object_principal .)
    $end            reduce using rule 110 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 110 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 110 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 110 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 110 (types_structure -> structure_object_principal .)


state 16

    (144) class_declaration -> CLASS . IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 64


state 17

    (9) control_structures -> if_statement .

    ECHO            reduce using rule 9 (control_structures -> if_statement .)
    PRINT           reduce using rule 9 (control_structures -> if_statement .)
    CLASS           reduce using rule 9 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> if_statement .)
    INCREASE        reduce using rule 9 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> if_statement .)
    IF              reduce using rule 9 (control_structures -> if_statement .)
    WHILE           reduce using rule 9 (control_structures -> if_statement .)
    CONST           reduce using rule 9 (control_structures -> if_statement .)
    DEFINE          reduce using rule 9 (control_structures -> if_statement .)
    ARRAY           reduce using rule 9 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> if_statement .)
    NEW             reduce using rule 9 (control_structures -> if_statement .)
    $end            reduce using rule 9 (control_structures -> if_statement .)
    RETURN          reduce using rule 9 (control_structures -> if_statement .)
    BREAK           reduce using rule 9 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> if_statement .)


state 18

    (10) control_structures -> while_statement .

    ECHO            reduce using rule 10 (control_structures -> while_statement .)
    PRINT           reduce using rule 10 (control_structures -> while_statement .)
    CLASS           reduce using rule 10 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> while_statement .)
    INCREASE        reduce using rule 10 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> while_statement .)
    IF              reduce using rule 10 (control_structures -> while_statement .)
    WHILE           reduce using rule 10 (control_structures -> while_statement .)
    CONST           reduce using rule 10 (control_structures -> while_statement .)
    DEFINE          reduce using rule 10 (control_structures -> while_statement .)
    ARRAY           reduce using rule 10 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> while_statement .)
    NEW             reduce using rule 10 (control_structures -> while_statement .)
    $end            reduce using rule 10 (control_structures -> while_statement .)
    RETURN          reduce using rule 10 (control_structures -> while_statement .)
    BREAK           reduce using rule 10 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> while_statement .)


state 19

    (100) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 65


state 20

    (76) variable_assignment -> VARIABLE . assignment_operator values
    (77) variable_assignment -> VARIABLE . assignment_operator expression
    (78) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> VARIABLE . assignment_operator types_structure
    (80) variable_assignment -> VARIABLE . assignment_operator input
    (81) variable_assignment -> VARIABLE . assignment_operator special_function
    (82) variable_assignment -> VARIABLE . INCREASE
    (83) variable_assignment -> VARIABLE . DECREMENT
    (133) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (86) assignment_operator -> . EQUALS
    (87) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 67
    DECREMENT       shift and go to state 68
    LEFT_BRACKET    shift and go to state 69
    MINUS           shift and go to state 71
    EQUALS          shift and go to state 70
    PLUS_EQUALS     shift and go to state 72

    assignment_operator            shift and go to state 66

state 21

    (84) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 73


state 22

    (85) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 74


state 23

    (88) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 88 (constant_assignment -> const_syntax .)


state 24

    (89) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 89 (constant_assignment -> define_syntax .)


state 25

    (111) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 111 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 111 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 111 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 111 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 111 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 111 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 111 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 111 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 111 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 111 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 111 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 111 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 111 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 111 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 111 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 111 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 111 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 111 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 111 (structure_array_principal -> indexed_array .)


state 26

    (112) structure_array_principal -> associative_array .

    ECHO            reduce using rule 112 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 112 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 112 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 112 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 112 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 112 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 112 (structure_array_principal -> associative_array .)
    IF              reduce using rule 112 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 112 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 112 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 112 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 112 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 112 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 112 (structure_array_principal -> associative_array .)
    $end            reduce using rule 112 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 112 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 112 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 112 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 112 (structure_array_principal -> associative_array .)


state 27

    (122) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 122 (structure_matrix_principal -> matrix_firstform .)


state 28

    (123) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 123 (structure_matrix_principal -> matrix_secondform .)


state 29

    (124) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    CLASS           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    INCREASE        reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    DECREMENT       reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    IF              reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    WHILE           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    SEMICOLON       reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    RETURN          reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    BREAK           reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)
    RIGHT_BRACE     reduce using rule 124 (structure_matrix_principal -> access_element_matrix .)


state 30

    (125) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    CLASS           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    INCREASE        reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    DECREMENT       reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    IF              reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    WHILE           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    SEMICOLON       reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    RETURN          reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    BREAK           reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)
    RIGHT_BRACE     reduce using rule 125 (structure_matrix_principal -> modify_element_matrix .)


state 31

    (126) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 126 (structure_matrix_principal -> add_element_matrix .)


state 32

    (136) structure_object_principal -> object_creation .

    ECHO            reduce using rule 136 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 136 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 136 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 136 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 136 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 136 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 136 (structure_object_principal -> object_creation .)
    IF              reduce using rule 136 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 136 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 136 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 136 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 136 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 136 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 136 (structure_object_principal -> object_creation .)
    $end            reduce using rule 136 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 136 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 136 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 136 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 136 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 136 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 136 (structure_object_principal -> object_creation .)


state 33

    (137) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 137 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 137 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 137 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 137 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 137 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 137 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 137 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 137 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 137 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 137 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 137 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 137 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 137 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 137 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 137 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 137 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 137 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 137 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 137 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 137 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 137 (structure_object_principal -> access_method_object .)


state 34

    (12) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 75


state 35

    (11) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 76


state 36

    (90) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 77


state 37

    (91) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 78


state 38

    (113) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 79
    LEFT_BRACKET    shift and go to state 80


state 39

    (128) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (129) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (130) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 82

state 40

    (138) object_creation -> NEW . IDENTIFIER
    (139) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 83


state 41

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 42

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 43

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 44

    (45) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (73) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NEW             shift and go to state 40

    printable_values               shift and go to state 85
    conditional                    shift and go to state 86
    expression                     shift and go to state 87
    values                         shift and go to state 46
    structure_object_principal     shift and go to state 49
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    boolean                        shift and go to state 53
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    factor                         shift and go to state 61

state 45

    (47) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 47 (print_statement -> ECHO printable_values .)


state 46

    (49) printable_values -> values .
    (50) printable_values -> values . COMMA printable_values
    (32) comparation -> values . comparator_operator values
    (33) comparation -> values . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 49 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 49 (printable_values -> values .)
    COMMA           shift and go to state 88
    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 89

state 47

    (51) printable_values -> VARIABLE .
    (52) printable_values -> VARIABLE . COMMA printable_values
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (72) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 51 (printable_values -> VARIABLE .)
    SEMICOLON       reduce using rule 51 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 51 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 100
    MINUS           shift and go to state 71
    MULTIPLY        reduce using rule 72 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 72 (factor -> VARIABLE .)
    MODULE          reduce using rule 72 (factor -> VARIABLE .)
    POW             reduce using rule 72 (factor -> VARIABLE .)
    PLUS            reduce using rule 72 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 72 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 72 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 72 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 72 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 72 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 72 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 72 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 72 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 72 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 72 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 72 (factor -> VARIABLE .) ]


state 48

    (53) printable_values -> conditional .
    (54) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 53 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 53 (printable_values -> conditional .)
    COMMA           shift and go to state 101


state 49

    (55) printable_values -> structure_object_principal .
    (56) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 55 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 55 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 102


state 50

    (57) values -> INTEGER .
    (71) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 57 (values -> INTEGER .)
    COMMA           reduce using rule 57 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 57 (values -> INTEGER .)
    IDENTICAL       reduce using rule 57 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 57 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 57 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 57 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 57 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 57 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 57 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 57 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 57 (values -> INTEGER .)
    SEMICOLON       reduce using rule 57 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 57 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 57 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 57 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 57 (values -> INTEGER .)
    MULTIPLY        reduce using rule 71 (factor -> INTEGER .)
    DIVIDE          reduce using rule 71 (factor -> INTEGER .)
    MODULE          reduce using rule 71 (factor -> INTEGER .)
    POW             reduce using rule 71 (factor -> INTEGER .)
    PLUS            reduce using rule 71 (factor -> INTEGER .)
    MINUS           reduce using rule 71 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 71 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 71 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 71 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 71 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 71 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 71 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 71 (factor -> INTEGER .) ]


state 51

    (58) values -> STRING .

    COMMA           reduce using rule 58 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 58 (values -> STRING .)
    IDENTICAL       reduce using rule 58 (values -> STRING .)
    NOT_EQUALS      reduce using rule 58 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 58 (values -> STRING .)
    SMALL_THAN      reduce using rule 58 (values -> STRING .)
    GREATER_THAN    reduce using rule 58 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 58 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 58 (values -> STRING .)
    SPACECRAFT      reduce using rule 58 (values -> STRING .)
    NULL_FUSION     reduce using rule 58 (values -> STRING .)
    SEMICOLON       reduce using rule 58 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 58 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 58 (values -> STRING .)
    LOGIC_AND       reduce using rule 58 (values -> STRING .)
    LOGIC_OR        reduce using rule 58 (values -> STRING .)
    LOGIC_XOR       reduce using rule 58 (values -> STRING .)
    ECHO            reduce using rule 58 (values -> STRING .)
    PRINT           reduce using rule 58 (values -> STRING .)
    CLASS           reduce using rule 58 (values -> STRING .)
    FUNCTION        reduce using rule 58 (values -> STRING .)
    VARIABLE        reduce using rule 58 (values -> STRING .)
    INCREASE        reduce using rule 58 (values -> STRING .)
    DECREMENT       reduce using rule 58 (values -> STRING .)
    IF              reduce using rule 58 (values -> STRING .)
    WHILE           reduce using rule 58 (values -> STRING .)
    CONST           reduce using rule 58 (values -> STRING .)
    DEFINE          reduce using rule 58 (values -> STRING .)
    ARRAY           reduce using rule 58 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 58 (values -> STRING .)
    NEW             reduce using rule 58 (values -> STRING .)
    $end            reduce using rule 58 (values -> STRING .)
    RETURN          reduce using rule 58 (values -> STRING .)
    BREAK           reduce using rule 58 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 58 (values -> STRING .)


state 52

    (59) values -> FLOAT .

    COMMA           reduce using rule 59 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 59 (values -> FLOAT .)
    IDENTICAL       reduce using rule 59 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 59 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 59 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 59 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 59 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 59 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 59 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 59 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 59 (values -> FLOAT .)
    SEMICOLON       reduce using rule 59 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 59 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 59 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 59 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 59 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 59 (values -> FLOAT .)
    ECHO            reduce using rule 59 (values -> FLOAT .)
    PRINT           reduce using rule 59 (values -> FLOAT .)
    CLASS           reduce using rule 59 (values -> FLOAT .)
    FUNCTION        reduce using rule 59 (values -> FLOAT .)
    VARIABLE        reduce using rule 59 (values -> FLOAT .)
    INCREASE        reduce using rule 59 (values -> FLOAT .)
    DECREMENT       reduce using rule 59 (values -> FLOAT .)
    IF              reduce using rule 59 (values -> FLOAT .)
    WHILE           reduce using rule 59 (values -> FLOAT .)
    CONST           reduce using rule 59 (values -> FLOAT .)
    DEFINE          reduce using rule 59 (values -> FLOAT .)
    ARRAY           reduce using rule 59 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 59 (values -> FLOAT .)
    NEW             reduce using rule 59 (values -> FLOAT .)
    $end            reduce using rule 59 (values -> FLOAT .)
    RETURN          reduce using rule 59 (values -> FLOAT .)
    BREAK           reduce using rule 59 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 59 (values -> FLOAT .)


state 53

    (60) values -> boolean .

    COMMA           reduce using rule 60 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 60 (values -> boolean .)
    IDENTICAL       reduce using rule 60 (values -> boolean .)
    NOT_EQUALS      reduce using rule 60 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 60 (values -> boolean .)
    SMALL_THAN      reduce using rule 60 (values -> boolean .)
    GREATER_THAN    reduce using rule 60 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 60 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 60 (values -> boolean .)
    SPACECRAFT      reduce using rule 60 (values -> boolean .)
    NULL_FUSION     reduce using rule 60 (values -> boolean .)
    SEMICOLON       reduce using rule 60 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 60 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 60 (values -> boolean .)
    LOGIC_AND       reduce using rule 60 (values -> boolean .)
    LOGIC_OR        reduce using rule 60 (values -> boolean .)
    LOGIC_XOR       reduce using rule 60 (values -> boolean .)
    ECHO            reduce using rule 60 (values -> boolean .)
    PRINT           reduce using rule 60 (values -> boolean .)
    CLASS           reduce using rule 60 (values -> boolean .)
    FUNCTION        reduce using rule 60 (values -> boolean .)
    VARIABLE        reduce using rule 60 (values -> boolean .)
    INCREASE        reduce using rule 60 (values -> boolean .)
    DECREMENT       reduce using rule 60 (values -> boolean .)
    IF              reduce using rule 60 (values -> boolean .)
    WHILE           reduce using rule 60 (values -> boolean .)
    CONST           reduce using rule 60 (values -> boolean .)
    DEFINE          reduce using rule 60 (values -> boolean .)
    ARRAY           reduce using rule 60 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 60 (values -> boolean .)
    NEW             reduce using rule 60 (values -> boolean .)
    $end            reduce using rule 60 (values -> boolean .)
    RETURN          reduce using rule 60 (values -> boolean .)
    BREAK           reduce using rule 60 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 60 (values -> boolean .)


state 54

    (24) conditional -> boolean_expression .
    (25) conditional -> boolean_expression . logic_operator boolean_expression
    (26) logic_operator -> . LOGIC_AND
    (27) logic_operator -> . LOGIC_OR
    (28) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 24 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 24 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 24 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 104
    LOGIC_OR        shift and go to state 105
    LOGIC_XOR       shift and go to state 106

  ! LOGIC_AND       [ reduce using rule 24 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 24 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 24 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 103

state 55

    (61) boolean -> TRUE .

    COMMA           reduce using rule 61 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 61 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 61 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 61 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 61 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 61 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 61 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 61 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 61 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 61 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 61 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 61 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 61 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 61 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 61 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 61 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (boolean -> TRUE .)
    ECHO            reduce using rule 61 (boolean -> TRUE .)
    PRINT           reduce using rule 61 (boolean -> TRUE .)
    CLASS           reduce using rule 61 (boolean -> TRUE .)
    FUNCTION        reduce using rule 61 (boolean -> TRUE .)
    VARIABLE        reduce using rule 61 (boolean -> TRUE .)
    INCREASE        reduce using rule 61 (boolean -> TRUE .)
    DECREMENT       reduce using rule 61 (boolean -> TRUE .)
    IF              reduce using rule 61 (boolean -> TRUE .)
    WHILE           reduce using rule 61 (boolean -> TRUE .)
    CONST           reduce using rule 61 (boolean -> TRUE .)
    DEFINE          reduce using rule 61 (boolean -> TRUE .)
    ARRAY           reduce using rule 61 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 61 (boolean -> TRUE .)
    NEW             reduce using rule 61 (boolean -> TRUE .)
    $end            reduce using rule 61 (boolean -> TRUE .)
    RETURN          reduce using rule 61 (boolean -> TRUE .)
    BREAK           reduce using rule 61 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 61 (boolean -> TRUE .)


state 56

    (62) boolean -> FALSE .

    COMMA           reduce using rule 62 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 62 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 62 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 62 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 62 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 62 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 62 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 62 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 62 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 62 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 62 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 62 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 62 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 62 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 62 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 62 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 62 (boolean -> FALSE .)
    ECHO            reduce using rule 62 (boolean -> FALSE .)
    PRINT           reduce using rule 62 (boolean -> FALSE .)
    CLASS           reduce using rule 62 (boolean -> FALSE .)
    FUNCTION        reduce using rule 62 (boolean -> FALSE .)
    VARIABLE        reduce using rule 62 (boolean -> FALSE .)
    INCREASE        reduce using rule 62 (boolean -> FALSE .)
    DECREMENT       reduce using rule 62 (boolean -> FALSE .)
    IF              reduce using rule 62 (boolean -> FALSE .)
    WHILE           reduce using rule 62 (boolean -> FALSE .)
    CONST           reduce using rule 62 (boolean -> FALSE .)
    DEFINE          reduce using rule 62 (boolean -> FALSE .)
    ARRAY           reduce using rule 62 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 62 (boolean -> FALSE .)
    NEW             reduce using rule 62 (boolean -> FALSE .)
    $end            reduce using rule 62 (boolean -> FALSE .)
    RETURN          reduce using rule 62 (boolean -> FALSE .)
    BREAK           reduce using rule 62 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 62 (boolean -> FALSE .)


state 57

    (29) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 29 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 29 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 29 (boolean_expression -> comparation .)
    COMMA           reduce using rule 29 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 29 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 29 (boolean_expression -> comparation .)


state 58

    (31) boolean_expression -> LOGIC_NOT . conditional
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109

    conditional                    shift and go to state 107
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 108
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 59

    (34) comparation -> expression . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 110

state 60

    (63) expression -> term .
    (64) expression -> term . PLUS expression
    (65) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 63 (expression -> term .)
    IDENTICAL       reduce using rule 63 (expression -> term .)
    NOT_EQUALS      reduce using rule 63 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 63 (expression -> term .)
    SMALL_THAN      reduce using rule 63 (expression -> term .)
    GREATER_THAN    reduce using rule 63 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 63 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 63 (expression -> term .)
    SPACECRAFT      reduce using rule 63 (expression -> term .)
    NULL_FUSION     reduce using rule 63 (expression -> term .)
    RIGHT_PAREN     reduce using rule 63 (expression -> term .)
    SEMICOLON       reduce using rule 63 (expression -> term .)
    LOGIC_AND       reduce using rule 63 (expression -> term .)
    LOGIC_OR        reduce using rule 63 (expression -> term .)
    LOGIC_XOR       reduce using rule 63 (expression -> term .)
    COMMA           reduce using rule 63 (expression -> term .)
    PLUS            shift and go to state 111
    MINUS           shift and go to state 112


state 61

    (66) term -> factor .
    (67) term -> factor . MULTIPLY term
    (68) term -> factor . DIVIDE term
    (69) term -> factor . MODULE term
    (70) term -> factor . POW term

    PLUS            reduce using rule 66 (term -> factor .)
    MINUS           reduce using rule 66 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 66 (term -> factor .)
    IDENTICAL       reduce using rule 66 (term -> factor .)
    NOT_EQUALS      reduce using rule 66 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 66 (term -> factor .)
    SMALL_THAN      reduce using rule 66 (term -> factor .)
    GREATER_THAN    reduce using rule 66 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 66 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 66 (term -> factor .)
    SPACECRAFT      reduce using rule 66 (term -> factor .)
    NULL_FUSION     reduce using rule 66 (term -> factor .)
    RIGHT_PAREN     reduce using rule 66 (term -> factor .)
    SEMICOLON       reduce using rule 66 (term -> factor .)
    LOGIC_AND       reduce using rule 66 (term -> factor .)
    LOGIC_OR        reduce using rule 66 (term -> factor .)
    LOGIC_XOR       reduce using rule 66 (term -> factor .)
    COMMA           reduce using rule 66 (term -> factor .)
    MULTIPLY        shift and go to state 113
    DIVIDE          shift and go to state 114
    MODULE          shift and go to state 115
    POW             shift and go to state 116


state 62

    (46) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (73) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    NEW             shift and go to state 40

    printable_values               shift and go to state 117
    conditional                    shift and go to state 86
    expression                     shift and go to state 87
    values                         shift and go to state 46
    structure_object_principal     shift and go to state 49
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    boolean                        shift and go to state 53
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    factor                         shift and go to state 61

state 63

    (48) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 48 (print_statement -> PRINT printable_values .)


state 64

    (144) class_declaration -> CLASS IDENTIFIER . class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (145) class_extends_opt -> . EXTENDS IDENTIFIER
    (146) class_extends_opt -> .

    EXTENDS         shift and go to state 119
    LEFT_BRACE      reduce using rule 146 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 118

state 65

    (100) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 120


state 66

    (76) variable_assignment -> VARIABLE assignment_operator . values
    (77) variable_assignment -> VARIABLE assignment_operator . expression
    (78) variable_assignment -> VARIABLE assignment_operator . function_invocation SEMICOLON
    (79) variable_assignment -> VARIABLE assignment_operator . types_structure
    (80) variable_assignment -> VARIABLE assignment_operator . input
    (81) variable_assignment -> VARIABLE assignment_operator . special_function
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (92) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (106) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (107) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (101) special_function -> . arrow_function
    (102) special_function -> . anonymous_functions
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (103) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (104) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    IDENTIFIER      shift and go to state 128
    FEGTS           shift and go to state 130
    READLINE        shift and go to state 131
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    FN              shift and go to state 134
    FUNCTION        shift and go to state 135
    VARIABLE        shift and go to state 121
    LEFT_PAREN      shift and go to state 129
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    values                         shift and go to state 122
    expression                     shift and go to state 123
    function_invocation            shift and go to state 124
    types_structure                shift and go to state 125
    input                          shift and go to state 126
    special_function               shift and go to state 127
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    arrow_function                 shift and go to state 132
    anonymous_functions            shift and go to state 133
    factor                         shift and go to state 61
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 67

    (82) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 82 (variable_assignment -> VARIABLE INCREASE .)


state 68

    (83) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 83 (variable_assignment -> VARIABLE DECREMENT .)


state 69

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 136
    RIGHT_BRACKET   shift and go to state 137


state 70

    (86) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 86 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 86 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 86 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 86 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 86 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 86 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 86 (assignment_operator -> EQUALS .)
    FN              reduce using rule 86 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 86 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 86 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 86 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 86 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 86 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 86 (assignment_operator -> EQUALS .)


state 71

    (140) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS VARIABLE

    GREATER_THAN    shift and go to state 138


state 72

    (87) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 87 (assignment_operator -> PLUS_EQUALS .)


state 73

    (84) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 84 (variable_assignment -> INCREASE VARIABLE .)


state 74

    (85) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 85 (variable_assignment -> DECREMENT VARIABLE .)


state 75

    (12) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109

    conditional                    shift and go to state 139
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 108
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 76

    (11) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109

    conditional                    shift and go to state 140
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 108
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 77

    (90) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 141


state 78

    (91) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 142


state 79

    (113) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (114) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (127) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (120) values_array_indexed -> . values
    (121) values_array_indexed -> . values COMMA values_array_indexed
    (116) structure_array -> . key EQUALS GREATER_THAN values
    (117) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (131) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (132) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (118) key -> . INTEGER
    (119) key -> . STRING
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    ARRAY           shift and go to state 143
    INTEGER         shift and go to state 149
    STRING          shift and go to state 150
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values_array_indexed           shift and go to state 144
    structure_array                shift and go to state 145
    structure_matrix_first         shift and go to state 146
    values                         shift and go to state 147
    key                            shift and go to state 148
    boolean                        shift and go to state 53

state 80

    (115) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (116) structure_array -> . key EQUALS GREATER_THAN values
    (117) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (118) key -> . INTEGER
    (119) key -> . STRING

    INTEGER         shift and go to state 152
    STRING          shift and go to state 153

    structure_array                shift and go to state 151
    key                            shift and go to state 148

state 81

    (129) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (130) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 154
    boolean                        shift and go to state 53

state 82

    (128) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 156


state 83

    (138) object_creation -> NEW IDENTIFIER .
    (139) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 138 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 157


state 84

    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (73) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 159
    VARIABLE        shift and go to state 109
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    conditional                    shift and go to state 158
    expression                     shift and go to state 87
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    comparation                    shift and go to state 57
    factor                         shift and go to state 61
    values                         shift and go to state 108
    boolean                        shift and go to state 53

state 85

    (45) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 160


state 86

    (30) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (53) printable_values -> conditional .
    (54) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 161
    COMMA           shift and go to state 101

  ! RIGHT_PAREN     [ reduce using rule 53 (printable_values -> conditional .) ]


state 87

    (73) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (34) comparation -> expression . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 162
    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 110

state 88

    (50) printable_values -> values COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    values                         shift and go to state 46
    printable_values               shift and go to state 163
    conditional                    shift and go to state 48
    structure_object_principal     shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 89

    (32) comparation -> values comparator_operator . values
    (33) comparation -> values comparator_operator . expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    values                         shift and go to state 164
    expression                     shift and go to state 165
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 90

    (35) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)


state 91

    (36) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 36 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 36 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 36 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 36 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 36 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 36 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 36 (comparator_operator -> IDENTICAL .)


state 92

    (37) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 37 (comparator_operator -> NOT_EQUALS .)


state 93

    (38) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)


state 94

    (39) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 39 (comparator_operator -> SMALL_THAN .)


state 95

    (40) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 40 (comparator_operator -> GREATER_THAN .)


state 96

    (41) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)


state 97

    (42) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)


state 98

    (43) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 43 (comparator_operator -> SPACECRAFT .)


state 99

    (44) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 44 (comparator_operator -> NULL_FUSION .)


state 100

    (52) printable_values -> VARIABLE COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    printable_values               shift and go to state 166
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    structure_object_principal     shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 101

    (54) printable_values -> conditional COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    conditional                    shift and go to state 48
    printable_values               shift and go to state 167
    values                         shift and go to state 46
    structure_object_principal     shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 102

    (56) printable_values -> structure_object_principal COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . structure_object_principal
    (56) printable_values -> . structure_object_principal COMMA printable_values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    NEW             shift and go to state 40

    structure_object_principal     shift and go to state 49
    printable_values               shift and go to state 168
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 103

    (25) conditional -> boolean_expression logic_operator . boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109

    boolean_expression             shift and go to state 169
    comparation                    shift and go to state 57
    values                         shift and go to state 108
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 104

    (26) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 26 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 26 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 26 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 26 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 26 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 26 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 26 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 26 (logic_operator -> LOGIC_AND .)


state 105

    (27) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 27 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 27 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 27 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 27 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 27 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 27 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 27 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 27 (logic_operator -> LOGIC_OR .)


state 106

    (28) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 28 (logic_operator -> LOGIC_XOR .)


state 107

    (31) boolean_expression -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)


state 108

    (32) comparation -> values . comparator_operator values
    (33) comparation -> values . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 89

state 109

    (72) factor -> VARIABLE .

    MULTIPLY        reduce using rule 72 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 72 (factor -> VARIABLE .)
    MODULE          reduce using rule 72 (factor -> VARIABLE .)
    POW             reduce using rule 72 (factor -> VARIABLE .)
    PLUS            reduce using rule 72 (factor -> VARIABLE .)
    MINUS           reduce using rule 72 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 72 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 72 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 72 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 72 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 72 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 72 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 72 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 72 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 72 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 72 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 72 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 72 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 72 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 72 (factor -> VARIABLE .)
    COMMA           reduce using rule 72 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 72 (factor -> VARIABLE .)


state 110

    (34) comparation -> expression comparator_operator . expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    expression                     shift and go to state 170
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 111

    (64) expression -> term PLUS . expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    term                           shift and go to state 60
    expression                     shift and go to state 172
    factor                         shift and go to state 61

state 112

    (65) expression -> term MINUS . expression
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    term                           shift and go to state 60
    expression                     shift and go to state 173
    factor                         shift and go to state 61

state 113

    (67) term -> factor MULTIPLY . term
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    factor                         shift and go to state 61
    term                           shift and go to state 174

state 114

    (68) term -> factor DIVIDE . term
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    factor                         shift and go to state 61
    term                           shift and go to state 175

state 115

    (69) term -> factor MODULE . term
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    factor                         shift and go to state 61
    term                           shift and go to state 176

state 116

    (70) term -> factor POW . term
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    factor                         shift and go to state 61
    term                           shift and go to state 177

state 117

    (46) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 178


state 118

    (144) class_declaration -> CLASS IDENTIFIER class_extends_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 179


state 119

    (145) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 180


state 120

    (100) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 181
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 121

    (72) factor -> VARIABLE .
    (133) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 72 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 72 (factor -> VARIABLE .)
    MODULE          reduce using rule 72 (factor -> VARIABLE .)
    POW             reduce using rule 72 (factor -> VARIABLE .)
    PLUS            reduce using rule 72 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 72 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 69
    MINUS           shift and go to state 71

  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]


state 122

    (76) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 76 (variable_assignment -> VARIABLE assignment_operator values .)


state 123

    (77) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 77 (variable_assignment -> VARIABLE assignment_operator expression .)


state 124

    (78) variable_assignment -> VARIABLE assignment_operator function_invocation . SEMICOLON

    SEMICOLON       shift and go to state 186


state 125

    (79) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 79 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 126

    (80) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 80 (variable_assignment -> VARIABLE assignment_operator input .)


state 127

    (81) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 81 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 128

    (92) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 187


state 129

    (73) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 171
    VARIABLE        shift and go to state 109
    LEFT_PAREN      shift and go to state 129

    expression                     shift and go to state 188
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 130

    (106) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 189


state 131

    (107) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 190


state 132

    (101) special_function -> arrow_function .

    SEMICOLON       reduce using rule 101 (special_function -> arrow_function .)


state 133

    (102) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 102 (special_function -> anonymous_functions .)


state 134

    (103) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 191


state 135

    (104) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 192


state 136

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 193


state 137

    (135) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 194


state 138

    (140) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (141) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER
    (142) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS VARIABLE
    (92) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 196

    function_invocation            shift and go to state 195

state 139

    (12) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 197


state 140

    (11) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 198


state 141

    (90) const_syntax -> CONST IDENTIFIER EQUALS . values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 199
    boolean                        shift and go to state 53

state 142

    (91) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 200


state 143

    (131) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (132) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 201


state 144

    (113) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 202


state 145

    (114) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 203


state 146

    (127) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 204


state 147

    (120) values_array_indexed -> values .
    (121) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 120 (values_array_indexed -> values .)
    COMMA           shift and go to state 205


state 148

    (116) structure_array -> key . EQUALS GREATER_THAN values
    (117) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 206


state 149

    (57) values -> INTEGER .
    (118) key -> INTEGER .

    COMMA           reduce using rule 57 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 57 (values -> INTEGER .)
    EQUALS          reduce using rule 118 (key -> INTEGER .)


state 150

    (58) values -> STRING .
    (119) key -> STRING .

    COMMA           reduce using rule 58 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 58 (values -> STRING .)
    EQUALS          reduce using rule 119 (key -> STRING .)


state 151

    (115) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 207


state 152

    (118) key -> INTEGER .

    EQUALS          reduce using rule 118 (key -> INTEGER .)


state 153

    (119) key -> STRING .

    EQUALS          reduce using rule 119 (key -> STRING .)


state 154

    (129) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (130) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 208


state 155

    (57) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 57 (values -> INTEGER .)
    COMMA           reduce using rule 57 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 57 (values -> INTEGER .)
    SEMICOLON       reduce using rule 57 (values -> INTEGER .)
    ECHO            reduce using rule 57 (values -> INTEGER .)
    PRINT           reduce using rule 57 (values -> INTEGER .)
    CLASS           reduce using rule 57 (values -> INTEGER .)
    FUNCTION        reduce using rule 57 (values -> INTEGER .)
    VARIABLE        reduce using rule 57 (values -> INTEGER .)
    INCREASE        reduce using rule 57 (values -> INTEGER .)
    DECREMENT       reduce using rule 57 (values -> INTEGER .)
    IF              reduce using rule 57 (values -> INTEGER .)
    WHILE           reduce using rule 57 (values -> INTEGER .)
    CONST           reduce using rule 57 (values -> INTEGER .)
    DEFINE          reduce using rule 57 (values -> INTEGER .)
    ARRAY           reduce using rule 57 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 57 (values -> INTEGER .)
    NEW             reduce using rule 57 (values -> INTEGER .)
    $end            reduce using rule 57 (values -> INTEGER .)
    RETURN          reduce using rule 57 (values -> INTEGER .)
    BREAK           reduce using rule 57 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 57 (values -> INTEGER .)


state 156

    (128) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 209


state 157

    (139) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 210
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 158

    (30) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 161


state 159

    (71) factor -> INTEGER .
    (57) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 57 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 57 (values -> INTEGER .)
    MULTIPLY        reduce using rule 71 (factor -> INTEGER .)
    DIVIDE          reduce using rule 71 (factor -> INTEGER .)
    MODULE          reduce using rule 71 (factor -> INTEGER .)
    POW             reduce using rule 71 (factor -> INTEGER .)
    PLUS            reduce using rule 71 (factor -> INTEGER .)
    MINUS           reduce using rule 71 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 71 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 57 (values -> INTEGER .)
    IDENTICAL       reduce using rule 57 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 57 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 57 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 57 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 57 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 57 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 57 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 57 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 57 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 71 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 71 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 71 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 71 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 71 (factor -> INTEGER .) ]


state 160

    (45) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 45 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 161

    (30) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 162

    (73) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 73 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 163

    (50) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 50 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 50 (printable_values -> values COMMA printable_values .)


state 164

    (32) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 32 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 32 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 32 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 32 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 32 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 32 (comparation -> values comparator_operator values .)


state 165

    (33) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 33 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 33 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 33 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 33 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 33 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 33 (comparation -> values comparator_operator expression .)


state 166

    (52) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 52 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 52 (printable_values -> VARIABLE COMMA printable_values .)


state 167

    (54) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 54 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 54 (printable_values -> conditional COMMA printable_values .)


state 168

    (56) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 56 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 56 (printable_values -> structure_object_principal COMMA printable_values .)


state 169

    (25) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)


state 170

    (34) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 34 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 34 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 34 (comparation -> expression comparator_operator expression .)


state 171

    (71) factor -> INTEGER .

    MULTIPLY        reduce using rule 71 (factor -> INTEGER .)
    DIVIDE          reduce using rule 71 (factor -> INTEGER .)
    MODULE          reduce using rule 71 (factor -> INTEGER .)
    POW             reduce using rule 71 (factor -> INTEGER .)
    PLUS            reduce using rule 71 (factor -> INTEGER .)
    MINUS           reduce using rule 71 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 71 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 71 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 71 (factor -> INTEGER .)
    COMMA           reduce using rule 71 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 71 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 71 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 71 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 71 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 71 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 71 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 71 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 71 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 71 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 71 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 71 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 71 (factor -> INTEGER .)


state 172

    (64) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 64 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 64 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 64 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 64 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 64 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 64 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 64 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 64 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 64 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 64 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 64 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 64 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 64 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 64 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 64 (expression -> term PLUS expression .)
    COMMA           reduce using rule 64 (expression -> term PLUS expression .)


state 173

    (65) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 65 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 65 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 65 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 65 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 65 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 65 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 65 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 65 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 65 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 65 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 65 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 65 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 65 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 65 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 65 (expression -> term MINUS expression .)
    COMMA           reduce using rule 65 (expression -> term MINUS expression .)


state 174

    (67) term -> factor MULTIPLY term .

    PLUS            reduce using rule 67 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 67 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 67 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 67 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 67 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 67 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 67 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 67 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 67 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 67 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 67 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 67 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 67 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 67 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 67 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 67 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 67 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 67 (term -> factor MULTIPLY term .)


state 175

    (68) term -> factor DIVIDE term .

    PLUS            reduce using rule 68 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 68 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 68 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 68 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 68 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 68 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 68 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 68 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 68 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 68 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 68 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 68 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 68 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 68 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 68 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 68 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 68 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 68 (term -> factor DIVIDE term .)


state 176

    (69) term -> factor MODULE term .

    PLUS            reduce using rule 69 (term -> factor MODULE term .)
    MINUS           reduce using rule 69 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 69 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 69 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 69 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 69 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 69 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 69 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 69 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 69 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 69 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 69 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 69 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 69 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 69 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 69 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 69 (term -> factor MODULE term .)
    COMMA           reduce using rule 69 (term -> factor MODULE term .)


state 177

    (70) term -> factor POW term .

    PLUS            reduce using rule 70 (term -> factor POW term .)
    MINUS           reduce using rule 70 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 70 (term -> factor POW term .)
    IDENTICAL       reduce using rule 70 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 70 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 70 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 70 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 70 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 70 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 70 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 70 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 70 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 70 (term -> factor POW term .)
    SEMICOLON       reduce using rule 70 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 70 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 70 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 70 (term -> factor POW term .)
    COMMA           reduce using rule 70 (term -> factor POW term .)


state 178

    (46) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 46 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 179

    (144) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE . class_body RIGHT_BRACE
    (147) class_body -> . class_body class_member
    (148) class_body -> .

    RIGHT_BRACE     reduce using rule 148 (class_body -> .)
    PUBLIC          reduce using rule 148 (class_body -> .)
    PRIVATE         reduce using rule 148 (class_body -> .)
    PROTECTED       reduce using rule 148 (class_body -> .)
    STATIC          reduce using rule 148 (class_body -> .)
    FUNCTION        reduce using rule 148 (class_body -> .)
    VARIABLE        reduce using rule 148 (class_body -> .)

    class_body                     shift and go to state 211

state 180

    (145) class_extends_opt -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 145 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 181

    (100) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 212


state 182

    (93) params -> real_params .
    (97) real_params -> real_params . COMMA VARIABLE
    (98) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 93 (params -> real_params .)
    COMMA           shift and go to state 213


state 183

    (94) params -> empty .

    RIGHT_PAREN     reduce using rule 94 (params -> empty .)


state 184

    (95) real_params -> VARIABLE .

    COMMA           reduce using rule 95 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 95 (real_params -> VARIABLE .)


state 185

    (96) real_params -> values .

    COMMA           reduce using rule 96 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 96 (real_params -> values .)


state 186

    (78) variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .

    SEMICOLON       reduce using rule 78 (variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .)


state 187

    (92) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 214
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 188

    (73) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 162


state 189

    (106) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 215


state 190

    (107) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 216


state 191

    (103) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 217
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 192

    (104) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 218
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 193

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 219


state 194

    (135) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 221

    indexed_array                  shift and go to state 220

state 195

    (140) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 196

    (141) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .
    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS values
    (143) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS VARIABLE
    (92) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    PRINT           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CLASS           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    FUNCTION        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    VARIABLE        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    INCREASE        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DECREMENT       reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    IF              reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    WHILE           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CONST           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DEFINE          reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    ARRAY           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    NEW             reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    $end            reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    COMMA           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    SEMICOLON       reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RETURN          reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    BREAK           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    EQUALS          shift and go to state 222
    LEFT_PAREN      shift and go to state 187


state 197

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 223


state 198

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 224


state 199

    (90) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 90 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 200

    (91) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 225
    boolean                        shift and go to state 53

state 201

    (131) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (132) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 226
    boolean                        shift and go to state 53

state 202

    (113) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 113 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 203

    (114) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 114 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 204

    (127) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 205

    (121) values_array_indexed -> values COMMA . values_array_indexed
    (120) values_array_indexed -> . values
    (121) values_array_indexed -> . values COMMA values_array_indexed
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 147
    values_array_indexed           shift and go to state 228
    boolean                        shift and go to state 53

state 206

    (116) structure_array -> key EQUALS . GREATER_THAN values
    (117) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 229


state 207

    (115) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 115 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 208

    (129) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (130) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 129 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 230


state 209

    (128) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 128 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 210

    (139) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 231


state 211

    (144) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body . RIGHT_BRACE
    (147) class_body -> class_body . class_member
    (149) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (150) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (151) class_member -> . class_attribute
    (154) visibility_opt -> . PUBLIC
    (155) visibility_opt -> . PRIVATE
    (156) visibility_opt -> . PROTECTED
    (157) visibility_opt -> .
    (152) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (153) class_attribute -> . visibility_opt VARIABLE SEMICOLON

    RIGHT_BRACE     shift and go to state 232
    PUBLIC          shift and go to state 236
    PRIVATE         shift and go to state 237
    PROTECTED       shift and go to state 238
    STATIC          reduce using rule 157 (visibility_opt -> .)
    FUNCTION        reduce using rule 157 (visibility_opt -> .)
    VARIABLE        reduce using rule 157 (visibility_opt -> .)

    class_member                   shift and go to state 233
    visibility_opt                 shift and go to state 234
    class_attribute                shift and go to state 235

state 212

    (100) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (105) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 240

    codeblock                      shift and go to state 239

state 213

    (97) real_params -> real_params COMMA . VARIABLE
    (98) real_params -> real_params COMMA . values
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 241
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 242
    boolean                        shift and go to state 53

state 214

    (92) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 243


state 215

    (106) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 244


state 216

    (107) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 245


state 217

    (103) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 246


state 218

    (104) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 247


state 219

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 248


state 220

    (135) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 135 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 221

    (113) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 249


state 222

    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . values
    (143) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . VARIABLE
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 250
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 251
    boolean                        shift and go to state 53

state 223

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 252
    sentence                       shift and go to state 253
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 224

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 254
    sentence                       shift and go to state 253
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 225

    (91) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 255


state 226

    (131) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (132) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 256


state 227

    (127) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 127 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 228

    (121) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 121 (values_array_indexed -> values COMMA values_array_indexed .)


state 229

    (116) structure_array -> key EQUALS GREATER_THAN . values
    (117) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 257
    boolean                        shift and go to state 53

state 230

    (130) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (129) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (130) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 258

state 231

    (139) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 139 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 232

    (144) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 144 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 233

    (147) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 147 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 147 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 147 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 147 (class_body -> class_body class_member .)
    STATIC          reduce using rule 147 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 147 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 147 (class_body -> class_body class_member .)


state 234

    (149) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (150) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (152) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (153) class_attribute -> visibility_opt . VARIABLE SEMICOLON

    STATIC          shift and go to state 259
    FUNCTION        shift and go to state 260
    VARIABLE        shift and go to state 261


state 235

    (151) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 151 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 151 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 151 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 151 (class_member -> class_attribute .)
    STATIC          reduce using rule 151 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 151 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 151 (class_member -> class_attribute .)


state 236

    (154) visibility_opt -> PUBLIC .

    STATIC          reduce using rule 154 (visibility_opt -> PUBLIC .)
    FUNCTION        reduce using rule 154 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 154 (visibility_opt -> PUBLIC .)


state 237

    (155) visibility_opt -> PRIVATE .

    STATIC          reduce using rule 155 (visibility_opt -> PRIVATE .)
    FUNCTION        reduce using rule 155 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 155 (visibility_opt -> PRIVATE .)


state 238

    (156) visibility_opt -> PROTECTED .

    STATIC          reduce using rule 156 (visibility_opt -> PROTECTED .)
    FUNCTION        reduce using rule 156 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 156 (visibility_opt -> PROTECTED .)


state 239

    (100) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 100 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 240

    (105) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 262
    sentence                       shift and go to state 253
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 241

    (97) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 97 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 97 (real_params -> real_params COMMA VARIABLE .)


state 242

    (98) real_params -> real_params COMMA values .

    COMMA           reduce using rule 98 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 98 (real_params -> real_params COMMA values .)


state 243

    (92) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 92 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 244

    (106) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 106 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 245

    (107) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 107 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 246

    (103) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 263


state 247

    (104) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (105) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 240

    codeblock                      shift and go to state 264

state 248

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 265


state 249

    (113) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (120) values_array_indexed -> . values
    (121) values_array_indexed -> . values COMMA values_array_indexed
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values_array_indexed           shift and go to state 144
    values                         shift and go to state 147
    boolean                        shift and go to state 53

state 250

    (143) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .

    ECHO            reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    PRINT           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CLASS           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    FUNCTION        reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    VARIABLE        reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    INCREASE        reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DECREMENT       reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    IF              reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    WHILE           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CONST           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DEFINE          reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    ARRAY           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    LEFT_BRACKET    reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    NEW             reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    $end            reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    COMMA           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RETURN          reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    BREAK           reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 143 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)


state 251

    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .

    ECHO            reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    PRINT           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CLASS           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    FUNCTION        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    VARIABLE        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    INCREASE        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DECREMENT       reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    IF              reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    WHILE           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CONST           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DEFINE          reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    ARRAY           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    LEFT_BRACKET    reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    NEW             reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    $end            reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    COMMA           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    SEMICOLON       reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_PAREN     reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RETURN          reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    BREAK           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_BRACE     reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)


state 252

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 266


state 253

    (19) body_statement -> sentence .
    (20) body_statement -> sentence . RETURN values SEMICOLON
    (21) body_statement -> sentence . RETURN SEMICOLON
    (22) body_statement -> sentence . BREAK SEMICOLON
    (23) body_statement -> sentence . body_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RIGHT_BRACE     reduce using rule 19 (body_statement -> sentence .)
    RETURN          shift and go to state 267
    BREAK           shift and go to state 268
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 253
    body_statement                 shift and go to state 269
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 254

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 270


state 255

    (91) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 91 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 256

    (131) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (132) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 131 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 271


state 257

    (116) structure_array -> key EQUALS GREATER_THAN values .
    (117) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 116 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 116 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 272


state 258

    (130) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 130 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 259

    (149) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 273


state 260

    (150) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 274


state 261

    (152) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (153) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 275
    SEMICOLON       shift and go to state 276


state 262

    (105) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 277


state 263

    (103) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 278


state 264

    (104) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 104 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 265

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 279
    EQUALS          shift and go to state 280


state 266

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 283
    ELSE            shift and go to state 284

    elseif_statement               shift and go to state 281
    else_statement                 shift and go to state 282

state 267

    (20) body_statement -> sentence RETURN . values SEMICOLON
    (21) body_statement -> sentence RETURN . SEMICOLON
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    SEMICOLON       shift and go to state 286
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 285
    boolean                        shift and go to state 53

state 268

    (22) body_statement -> sentence BREAK . SEMICOLON

    SEMICOLON       shift and go to state 287


state 269

    (23) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence body_statement .)


state 270

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 271

    (132) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (131) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (132) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 143

    structure_matrix_first         shift and go to state 288

state 272

    (117) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (116) structure_array -> . key EQUALS GREATER_THAN values
    (117) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (118) key -> . INTEGER
    (119) key -> . STRING

    INTEGER         shift and go to state 152
    STRING          shift and go to state 153

    key                            shift and go to state 148
    structure_array                shift and go to state 289

state 273

    (149) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 290


state 274

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 291


state 275

    (152) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 292
    boolean                        shift and go to state 53

state 276

    (153) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 153 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 277

    (105) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 105 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 278

    (103) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (105) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 240

    codeblock                      shift and go to state 293

state 279

    (133) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 133 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 280

    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 294
    boolean                        shift and go to state 53

state 281

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 282

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 283

    (15) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 295


state 284

    (18) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 296


state 285

    (20) body_statement -> sentence RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 297


state 286

    (21) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence RETURN SEMICOLON .)


state 287

    (22) body_statement -> sentence BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence BREAK SEMICOLON .)


state 288

    (132) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 132 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 289

    (117) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 117 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 117 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 290

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 298


state 291

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 299
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 292

    (152) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 300


state 293

    (103) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 103 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 294

    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 301


state 295

    (15) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (63) expression -> . term
    (64) expression -> . term PLUS expression
    (65) expression -> . term MINUS expression
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE
    (66) term -> . factor
    (67) term -> . factor MULTIPLY term
    (68) term -> . factor DIVIDE term
    (69) term -> . factor MODULE term
    (70) term -> . factor POW term
    (71) factor -> . INTEGER
    (72) factor -> . VARIABLE
    (73) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 109

    conditional                    shift and go to state 302
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 108
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 296

    (18) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 303
    sentence                       shift and go to state 253
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 297

    (20) body_statement -> sentence RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence RETURN values SEMICOLON .)


state 298

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (93) params -> . real_params
    (94) params -> . empty
    (95) real_params -> . VARIABLE
    (96) real_params -> . values
    (97) real_params -> . real_params COMMA VARIABLE
    (98) real_params -> . real_params COMMA values
    (99) empty -> .
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 99 (empty -> .)
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 304
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 53

state 299

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 305


state 300

    (152) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 152 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 301

    (134) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CLASS           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    IF              reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    WHILE           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RETURN          reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    BREAK           reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 134 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)


state 302

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 306


state 303

    (18) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 307


state 304

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 308


state 305

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 309


state 306

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 310


state 307

    (18) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 308

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 311


state 309

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (158) method_body -> . classStatement
    (159) method_body -> . classStatement return_form
    (160) method_body -> . return_form
    (161) method_body -> . classStatement BREAK SEMICOLON
    (162) method_body -> . classStatement method_body
    (166) classStatement -> . sentence
    (167) classStatement -> . access_method_object SEMICOLON
    (163) return_form -> . RETURN values SEMICOLON
    (164) return_form -> . RETURN access_method_object SEMICOLON
    (165) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 317
    VARIABLE        shift and go to state 318
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    method_body                    shift and go to state 312
    classStatement                 shift and go to state 313
    return_form                    shift and go to state 314
    sentence                       shift and go to state 315
    access_method_object           shift and go to state 316
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 310

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 319
    sentence                       shift and go to state 253
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 311

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (158) method_body -> . classStatement
    (159) method_body -> . classStatement return_form
    (160) method_body -> . return_form
    (161) method_body -> . classStatement BREAK SEMICOLON
    (162) method_body -> . classStatement method_body
    (166) classStatement -> . sentence
    (167) classStatement -> . access_method_object SEMICOLON
    (163) return_form -> . RETURN values SEMICOLON
    (164) return_form -> . RETURN access_method_object SEMICOLON
    (165) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 317
    VARIABLE        shift and go to state 318
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    method_body                    shift and go to state 320
    classStatement                 shift and go to state 313
    return_form                    shift and go to state 314
    sentence                       shift and go to state 315
    access_method_object           shift and go to state 316
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 312

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 321


state 313

    (158) method_body -> classStatement .
    (159) method_body -> classStatement . return_form
    (161) method_body -> classStatement . BREAK SEMICOLON
    (162) method_body -> classStatement . method_body
    (163) return_form -> . RETURN values SEMICOLON
    (164) return_form -> . RETURN access_method_object SEMICOLON
    (165) return_form -> . RETURN SEMICOLON
    (158) method_body -> . classStatement
    (159) method_body -> . classStatement return_form
    (160) method_body -> . return_form
    (161) method_body -> . classStatement BREAK SEMICOLON
    (162) method_body -> . classStatement method_body
    (166) classStatement -> . sentence
    (167) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (74) assignment -> . variable_assignment
    (75) assignment -> . constant_assignment
    (108) types_structure -> . structure_array_principal
    (109) types_structure -> . structure_matrix_principal
    (110) types_structure -> . structure_object_principal
    (144) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (100) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (76) variable_assignment -> . VARIABLE assignment_operator values
    (77) variable_assignment -> . VARIABLE assignment_operator expression
    (78) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> . VARIABLE assignment_operator types_structure
    (80) variable_assignment -> . VARIABLE assignment_operator input
    (81) variable_assignment -> . VARIABLE assignment_operator special_function
    (82) variable_assignment -> . VARIABLE INCREASE
    (83) variable_assignment -> . VARIABLE DECREMENT
    (84) variable_assignment -> . INCREASE VARIABLE
    (85) variable_assignment -> . DECREMENT VARIABLE
    (88) constant_assignment -> . const_syntax
    (89) constant_assignment -> . define_syntax
    (111) structure_array_principal -> . indexed_array
    (112) structure_array_principal -> . associative_array
    (122) structure_matrix_principal -> . matrix_firstform
    (123) structure_matrix_principal -> . matrix_secondform
    (124) structure_matrix_principal -> . access_element_matrix
    (125) structure_matrix_principal -> . modify_element_matrix
    (126) structure_matrix_principal -> . add_element_matrix
    (136) structure_object_principal -> . object_creation
    (137) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (90) const_syntax -> . CONST IDENTIFIER EQUALS values
    (91) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (113) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (115) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (127) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (128) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (133) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) object_creation -> . NEW IDENTIFIER
    (139) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 158 (method_body -> classStatement .)
    BREAK           shift and go to state 323
    RETURN          shift and go to state 317
    VARIABLE        shift and go to state 318
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    classStatement                 shift and go to state 313
    return_form                    shift and go to state 322
    method_body                    shift and go to state 324
    access_method_object           shift and go to state 316
    sentence                       shift and go to state 315
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 314

    (160) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 160 (method_body -> return_form .)


state 315

    (166) classStatement -> sentence .

    BREAK           reduce using rule 166 (classStatement -> sentence .)
    RETURN          reduce using rule 166 (classStatement -> sentence .)
    VARIABLE        reduce using rule 166 (classStatement -> sentence .)
    ECHO            reduce using rule 166 (classStatement -> sentence .)
    PRINT           reduce using rule 166 (classStatement -> sentence .)
    CLASS           reduce using rule 166 (classStatement -> sentence .)
    FUNCTION        reduce using rule 166 (classStatement -> sentence .)
    INCREASE        reduce using rule 166 (classStatement -> sentence .)
    DECREMENT       reduce using rule 166 (classStatement -> sentence .)
    IF              reduce using rule 166 (classStatement -> sentence .)
    WHILE           reduce using rule 166 (classStatement -> sentence .)
    CONST           reduce using rule 166 (classStatement -> sentence .)
    DEFINE          reduce using rule 166 (classStatement -> sentence .)
    ARRAY           reduce using rule 166 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 166 (classStatement -> sentence .)
    NEW             reduce using rule 166 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 166 (classStatement -> sentence .)


state 316

    (167) classStatement -> access_method_object . SEMICOLON
    (137) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 325
    BREAK           reduce using rule 137 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 137 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 137 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 137 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 137 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 137 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 137 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 137 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 137 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 137 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 137 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 137 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 137 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 137 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 137 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 137 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 137 (structure_object_principal -> access_method_object .)


state 317

    (163) return_form -> RETURN . values SEMICOLON
    (164) return_form -> RETURN . access_method_object SEMICOLON
    (165) return_form -> RETURN . SEMICOLON
    (57) values -> . INTEGER
    (58) values -> . STRING
    (59) values -> . FLOAT
    (60) values -> . boolean
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (61) boolean -> . TRUE
    (62) boolean -> . FALSE

    SEMICOLON       shift and go to state 327
    INTEGER         shift and go to state 155
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    VARIABLE        shift and go to state 329
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 326
    access_method_object           shift and go to state 328
    boolean                        shift and go to state 53

state 318

    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (76) variable_assignment -> VARIABLE . assignment_operator values
    (77) variable_assignment -> VARIABLE . assignment_operator expression
    (78) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (79) variable_assignment -> VARIABLE . assignment_operator types_structure
    (80) variable_assignment -> VARIABLE . assignment_operator input
    (81) variable_assignment -> VARIABLE . assignment_operator special_function
    (82) variable_assignment -> VARIABLE . INCREASE
    (83) variable_assignment -> VARIABLE . DECREMENT
    (133) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (134) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (135) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (86) assignment_operator -> . EQUALS
    (87) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 71
    INCREASE        shift and go to state 67
    DECREMENT       shift and go to state 68
    LEFT_BRACKET    shift and go to state 69
    EQUALS          shift and go to state 70
    PLUS_EQUALS     shift and go to state 72

    assignment_operator            shift and go to state 66

state 319

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 330


state 320

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 331


state 321

    (150) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 150 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 322

    (159) method_body -> classStatement return_form .
    (160) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 159 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 159 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 160 (method_body -> return_form .) ]


state 323

    (161) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 332


state 324

    (162) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 162 (method_body -> classStatement method_body .)


state 325

    (167) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 167 (classStatement -> access_method_object SEMICOLON .)


state 326

    (163) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 333


state 327

    (165) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 165 (return_form -> RETURN SEMICOLON .)


state 328

    (164) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 334


state 329

    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (143) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    MINUS           shift and go to state 71


state 330

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 283
    ELSE            shift and go to state 284

    elseif_statement               shift and go to state 335
    else_statement                 shift and go to state 336

state 331

    (149) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 149 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 332

    (161) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 161 (method_body -> classStatement BREAK SEMICOLON .)


state 333

    (163) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 163 (return_form -> RETURN values SEMICOLON .)


state 334

    (164) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 164 (return_form -> RETURN access_method_object SEMICOLON .)


state 335

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 336

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 54 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 47
WARNING: reduce/reduce conflict in state 50 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 50
WARNING: reduce/reduce conflict in state 159 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 159
WARNING: reduce/reduce conflict in state 322 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 322
