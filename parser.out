Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> control_structures
Rule 8     sentence -> function_declaration
Rule 9     control_structures -> if_statement
Rule 10    control_structures -> while_statement
Rule 11    control_structures -> for_statement
Rule 12    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 19    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 20    body_statement -> sentence
Rule 21    body_statement -> sentence RETURN values SEMICOLON
Rule 22    body_statement -> sentence RETURN SEMICOLON
Rule 23    body_statement -> sentence BREAK SEMICOLON
Rule 24    body_statement -> sentence body_statement
Rule 25    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 26    increment_statement -> VARIABLE INCREASE
Rule 27    increment_statement -> VARIABLE DECREMENT
Rule 28    increment_statement -> INCREASE VARIABLE
Rule 29    increment_statement -> DECREMENT VARIABLE
Rule 30    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 31    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 32    number_values -> INTEGER
Rule 33    number_values -> FLOAT
Rule 34    operator_aritmetic -> PLUS
Rule 35    operator_aritmetic -> MINUS
Rule 36    operator_aritmetic -> MULTIPLY
Rule 37    operator_aritmetic -> DIVIDE
Rule 38    operator_aritmetic -> MODULE
Rule 39    operator_aritmetic -> POW
Rule 40    conditional -> boolean_expression
Rule 41    conditional -> boolean_expression logic_operator boolean_expression
Rule 42    logic_operator -> LOGIC_AND
Rule 43    logic_operator -> LOGIC_OR
Rule 44    logic_operator -> LOGIC_XOR
Rule 45    boolean_expression -> comparation
Rule 46    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 47    boolean_expression -> logic_not_sentence
Rule 48    logic_not_sentence -> LOGIC_NOT conditional
Rule 49    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 50    comparation -> values comparator_operator values
Rule 51    comparation -> values comparator_operator expression
Rule 52    comparation -> expression comparator_operator expression
Rule 53    comparation -> VARIABLE EQUALS_EQUALS values
Rule 54    comparator_operator -> EQUALS_EQUALS
Rule 55    comparator_operator -> IDENTICAL
Rule 56    comparator_operator -> NOT_EQUALS
Rule 57    comparator_operator -> NOT_IDENTICAL
Rule 58    comparator_operator -> SMALL_THAN
Rule 59    comparator_operator -> GREATER_THAN
Rule 60    comparator_operator -> SMALL_EQUALS_TO
Rule 61    comparator_operator -> GREATER_EQUALS_TO
Rule 62    comparator_operator -> SPACECRAFT
Rule 63    comparator_operator -> NULL_FUSION
Rule 64    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 65    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 66    print_statement -> ECHO printable_values
Rule 67    print_statement -> PRINT printable_values
Rule 68    printable_values -> values
Rule 69    printable_values -> values COMMA printable_values
Rule 70    printable_values -> VARIABLE
Rule 71    printable_values -> VARIABLE COMMA printable_values
Rule 72    printable_values -> conditional
Rule 73    printable_values -> conditional COMMA printable_values
Rule 74    printable_values -> structure_object_principal
Rule 75    printable_values -> structure_object_principal COMMA printable_values
Rule 76    values -> INTEGER
Rule 77    values -> STRING
Rule 78    values -> FLOAT
Rule 79    values -> boolean
Rule 80    boolean -> TRUE
Rule 81    boolean -> FALSE
Rule 82    expression -> term
Rule 83    expression -> term PLUS expression
Rule 84    expression -> term MINUS expression
Rule 85    term -> factor
Rule 86    term -> factor MULTIPLY term
Rule 87    term -> factor DIVIDE term
Rule 88    term -> factor MODULE term
Rule 89    term -> factor POW term
Rule 90    factor -> INTEGER
Rule 91    factor -> VARIABLE
Rule 92    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 93    assignment -> variable_assignment
Rule 94    assignment -> constant_assignment
Rule 95    variable_assignment -> VARIABLE assignment_operator values
Rule 96    variable_assignment -> VARIABLE assignment_operator expression
Rule 97    variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON
Rule 98    variable_assignment -> VARIABLE assignment_operator types_structure
Rule 99    variable_assignment -> VARIABLE assignment_operator input
Rule 100   variable_assignment -> VARIABLE assignment_operator special_function
Rule 101   variable_assignment -> VARIABLE INCREASE
Rule 102   variable_assignment -> VARIABLE DECREMENT
Rule 103   variable_assignment -> INCREASE VARIABLE
Rule 104   variable_assignment -> DECREMENT VARIABLE
Rule 105   assignment_operator -> EQUALS
Rule 106   assignment_operator -> PLUS_EQUALS
Rule 107   constant_assignment -> const_syntax
Rule 108   constant_assignment -> define_syntax
Rule 109   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 110   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 111   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 112   params -> real_params
Rule 113   params -> empty
Rule 114   real_params -> VARIABLE
Rule 115   real_params -> values
Rule 116   real_params -> real_params COMMA VARIABLE
Rule 117   real_params -> real_params COMMA values
Rule 118   empty -> <empty>
Rule 119   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 120   special_function -> arrow_function
Rule 121   special_function -> anonymous_functions
Rule 122   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 123   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 124   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 125   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 126   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 127   types_structure -> structure_array_principal
Rule 128   types_structure -> structure_matrix_principal
Rule 129   types_structure -> structure_object_principal
Rule 130   structure_array_principal -> indexed_array
Rule 131   structure_array_principal -> associative_array
Rule 132   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 133   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 134   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 135   structure_array -> key EQUALS GREATER_THAN values
Rule 136   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 137   key -> INTEGER
Rule 138   key -> STRING
Rule 139   values_array_indexed -> values
Rule 140   values_array_indexed -> values COMMA values_array_indexed
Rule 141   structure_matrix_principal -> matrix_firstform
Rule 142   structure_matrix_principal -> matrix_secondform
Rule 143   structure_matrix_principal -> access_element_matrix
Rule 144   structure_matrix_principal -> modify_element_matrix
Rule 145   structure_matrix_principal -> add_element_matrix
Rule 146   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 147   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 148   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 149   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 150   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 151   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 152   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 153   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 154   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 155   structure_object_principal -> object_creation
Rule 156   structure_object_principal -> access_method_object
Rule 157   object_creation -> NEW IDENTIFIER
Rule 158   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 159   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 160   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER
Rule 161   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
Rule 162   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
Rule 163   class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 164   class_extends_opt -> EXTENDS IDENTIFIER
Rule 165   class_extends_opt -> <empty>
Rule 166   class_body -> class_body class_member
Rule 167   class_body -> <empty>
Rule 168   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 169   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 170   class_member -> class_attribute
Rule 171   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 172   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 173   visibility_opt -> PUBLIC
Rule 174   visibility_opt -> PRIVATE
Rule 175   visibility_opt -> PROTECTED
Rule 176   visibility_opt -> <empty>
Rule 177   method_body -> classStatement
Rule 178   method_body -> classStatement return_form
Rule 179   method_body -> return_form
Rule 180   method_body -> classStatement BREAK SEMICOLON
Rule 181   method_body -> classStatement method_body
Rule 182   return_form -> RETURN values SEMICOLON
Rule 183   return_form -> RETURN access_method_object SEMICOLON
Rule 184   return_form -> RETURN SEMICOLON
Rule 185   classStatement -> sentence
Rule 186   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 132 133 134 146 150 151
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 23 180
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 163
CLONE                : 
COLON                : 
COMMA                : 69 71 73 75 110 116 117 136 140 149 151
COMMENT              : 
CONCATENATION        : 
CONST                : 109
CONTINUE             : 
DECLARE              : 
DECREMENT            : 27 29 102 104
DEFAULT              : 
DEFINE               : 110
DIE                  : 
DIVIDE               : 37 87
DO                   : 
ECHO                 : 64 66
ELSE                 : 19
ELSEIF               : 16 17 18
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 25 31 105 109 122 135 136 153 154 161 162 171
EQUALS_EQUALS        : 53 54
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 164
FALSE                : 81
FEGTS                : 125
FINAL                : 
FINALLY              : 
FLOAT                : 33 78
FN                   : 122
FOR                  : 25
FOREACH              : 
FUNCTION             : 119 123 168 169
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 61
GREATER_THAN         : 59 122 135 136 159 160 161 162
HALT_COMPILER        : 
IDENTICAL            : 55
IDENTIFIER           : 109 111 119 157 158 160 161 162 163 164 168 169
IF                   : 13 14 15
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 26 28 101 103
INSTEADOF            : 
INTEGER              : 30 32 76 90 137 152 152 153 153
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 12 13 14 15 16 17 18 19 25 124 163 168 169
LEFT_BRACKET         : 134 147 148 149 152 152 153 153 154
LEFT_PAREN           : 12 13 14 15 16 17 18 25 46 64 65 92 110 111 119 122 123 125 126 132 133 146 150 151 158 168 169
LIST                 : 
LOGIC_AND            : 42
LOGIC_NOT            : 48 49
LOGIC_OR             : 43
LOGIC_XOR            : 44
MATCH                : 
MINUS                : 35 84 159 160 161 162
MODULE               : 38 88
MULTIPLY             : 36 86
NAMESPACE            : 
NEW                  : 157 158
NOT_EQUALS           : 56
NOT_IDENTICAL        : 57
NULL_FUSION          : 63
PLUS                 : 34 83
PLUS_EQUALS          : 30 106
POW                  : 39 89
PRINT                : 65 67
PRIVATE              : 174
PROTECTED            : 175
PUBLIC               : 173
READLINE             : 126
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 21 22 182 183 184
RIGHT_BRACE          : 12 13 14 15 16 17 18 19 25 124 163 168 169
RIGHT_BRACKET        : 134 147 148 149 152 152 153 153 154
RIGHT_PAREN          : 12 13 14 15 16 17 18 25 46 64 65 92 110 111 119 122 123 125 126 132 133 146 150 151 158 168 169
SEMICOLON            : 3 4 21 22 23 25 25 97 146 147 152 153 171 172 180 182 183 184 186
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 60
SMALL_THAN           : 58
SPACECRAFT           : 62
STATIC               : 168
STDIN                : 125
STRING               : 77 110 126 138
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 80
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 25 25 26 27 28 29 30 31 31 49 53 70 71 91 95 96 97 98 99 100 101 102 103 104 114 116 152 153 154 159 160 161 162 162 171 172
WHILE                : 12
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 143
access_method_object : 156 183 186
add_element_matrix   : 145
anonymous_functions  : 121
arrow_function       : 120
assignment           : 4
assignment_operator  : 95 96 97 98 99 100
associative_array    : 131
body_statement       : 12 13 14 15 16 17 18 19 24 25 124
boolean              : 79
boolean_expression   : 40 41 41
classStatement       : 177 178 180 181
class_attribute      : 170
class_body           : 163 166
class_declaration    : 6
class_extends_opt    : 163
class_member         : 166
codeblock            : 119 122 123
comparation          : 45
comparator_operator  : 25 50 51 52
conditional          : 12 13 14 15 16 17 18 46 48 72 73
const_syntax         : 107
constant_assignment  : 94
control_structures   : 7
define_syntax        : 108
else_statement       : 15 18
elseif_statement     : 14 17
empty                : 113
expression           : 51 52 52 83 84 92 96
factor               : 85 86 87 88 89
for_statement        : 11
function_declaration : 8
function_invocation  : 97 159
if_statement         : 9
increment_statement  : 25
indexed_array        : 130 154
input                : 99
key                  : 135 136
logic_not_sentence   : 47
logic_operator       : 41
matrix_firstform     : 141
matrix_secondform    : 142
method_body          : 168 169 181
modify_element_matrix : 144
number_values        : 25 25 31
object_creation      : 155
operator_aritmetic   : 31
params               : 111 119 122 123 158 168 169
print_statement      : 3
printable_values     : 64 65 66 67 69 71 73 75
program              : 1 0
real_params          : 112 116 117
return_form          : 178 179
sentence             : 1 2 20 21 22 23 24 185
special_function     : 100
structure_array      : 133 134 136
structure_array_principal : 127
structure_matrix_first : 146 151
structure_matrix_principal : 128
structure_matrix_second : 147 149
structure_object_principal : 74 75 129
term                 : 82 83 84 86 87 88 89
types_structure      : 5 98
values               : 21 50 50 51 53 68 69 95 109 110 115 117 135 136 139 140 148 149 150 151 153 161 171 182
values_array_indexed : 132 140
variable_assignment  : 93
visibility_opt       : 168 169 171 172
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    sentence                       shift and go to state 2
    program                        shift and go to state 43
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 44


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 45


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> control_structures .

    ECHO            reduce using rule 7 (sentence -> control_structures .)
    PRINT           reduce using rule 7 (sentence -> control_structures .)
    CLASS           reduce using rule 7 (sentence -> control_structures .)
    FUNCTION        reduce using rule 7 (sentence -> control_structures .)
    VARIABLE        reduce using rule 7 (sentence -> control_structures .)
    INCREASE        reduce using rule 7 (sentence -> control_structures .)
    DECREMENT       reduce using rule 7 (sentence -> control_structures .)
    IF              reduce using rule 7 (sentence -> control_structures .)
    WHILE           reduce using rule 7 (sentence -> control_structures .)
    FOR             reduce using rule 7 (sentence -> control_structures .)
    CONST           reduce using rule 7 (sentence -> control_structures .)
    DEFINE          reduce using rule 7 (sentence -> control_structures .)
    ARRAY           reduce using rule 7 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> control_structures .)
    NEW             reduce using rule 7 (sentence -> control_structures .)
    $end            reduce using rule 7 (sentence -> control_structures .)
    RETURN          reduce using rule 7 (sentence -> control_structures .)
    BREAK           reduce using rule 7 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> control_structures .)


state 8

    (8) sentence -> function_declaration .

    ECHO            reduce using rule 8 (sentence -> function_declaration .)
    PRINT           reduce using rule 8 (sentence -> function_declaration .)
    CLASS           reduce using rule 8 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 8 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 8 (sentence -> function_declaration .)
    INCREASE        reduce using rule 8 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 8 (sentence -> function_declaration .)
    IF              reduce using rule 8 (sentence -> function_declaration .)
    WHILE           reduce using rule 8 (sentence -> function_declaration .)
    FOR             reduce using rule 8 (sentence -> function_declaration .)
    CONST           reduce using rule 8 (sentence -> function_declaration .)
    DEFINE          reduce using rule 8 (sentence -> function_declaration .)
    ARRAY           reduce using rule 8 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> function_declaration .)
    NEW             reduce using rule 8 (sentence -> function_declaration .)
    $end            reduce using rule 8 (sentence -> function_declaration .)
    RETURN          reduce using rule 8 (sentence -> function_declaration .)
    BREAK           reduce using rule 8 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> function_declaration .)


state 9

    (64) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> ECHO . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 46
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    printable_values               shift and go to state 47
    values                         shift and go to state 48
    conditional                    shift and go to state 50
    structure_object_principal     shift and go to state 51
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 10

    (65) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (67) print_statement -> PRINT . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 65
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    printable_values               shift and go to state 66
    values                         shift and go to state 48
    conditional                    shift and go to state 50
    structure_object_principal     shift and go to state 51
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 11

    (93) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 93 (assignment -> variable_assignment .)


state 12

    (94) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 94 (assignment -> constant_assignment .)


state 13

    (127) types_structure -> structure_array_principal .

    ECHO            reduce using rule 127 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 127 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 127 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 127 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 127 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 127 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 127 (types_structure -> structure_array_principal .)
    IF              reduce using rule 127 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 127 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 127 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 127 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 127 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 127 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 127 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 127 (types_structure -> structure_array_principal .)
    $end            reduce using rule 127 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 127 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 127 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 127 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 127 (types_structure -> structure_array_principal .)


state 14

    (128) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 128 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 128 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 128 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 128 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 128 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 128 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 128 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 128 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 128 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 128 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 128 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 128 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 128 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 128 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 128 (types_structure -> structure_matrix_principal .)


state 15

    (129) types_structure -> structure_object_principal .

    ECHO            reduce using rule 129 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 129 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 129 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 129 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 129 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 129 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 129 (types_structure -> structure_object_principal .)
    IF              reduce using rule 129 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 129 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 129 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 129 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 129 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 129 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 129 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 129 (types_structure -> structure_object_principal .)
    $end            reduce using rule 129 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 129 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 129 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 129 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 129 (types_structure -> structure_object_principal .)


state 16

    (163) class_declaration -> CLASS . IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 67


state 17

    (9) control_structures -> if_statement .

    ECHO            reduce using rule 9 (control_structures -> if_statement .)
    PRINT           reduce using rule 9 (control_structures -> if_statement .)
    CLASS           reduce using rule 9 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> if_statement .)
    INCREASE        reduce using rule 9 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> if_statement .)
    IF              reduce using rule 9 (control_structures -> if_statement .)
    WHILE           reduce using rule 9 (control_structures -> if_statement .)
    FOR             reduce using rule 9 (control_structures -> if_statement .)
    CONST           reduce using rule 9 (control_structures -> if_statement .)
    DEFINE          reduce using rule 9 (control_structures -> if_statement .)
    ARRAY           reduce using rule 9 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> if_statement .)
    NEW             reduce using rule 9 (control_structures -> if_statement .)
    $end            reduce using rule 9 (control_structures -> if_statement .)
    RETURN          reduce using rule 9 (control_structures -> if_statement .)
    BREAK           reduce using rule 9 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> if_statement .)


state 18

    (10) control_structures -> while_statement .

    ECHO            reduce using rule 10 (control_structures -> while_statement .)
    PRINT           reduce using rule 10 (control_structures -> while_statement .)
    CLASS           reduce using rule 10 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> while_statement .)
    INCREASE        reduce using rule 10 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> while_statement .)
    IF              reduce using rule 10 (control_structures -> while_statement .)
    WHILE           reduce using rule 10 (control_structures -> while_statement .)
    FOR             reduce using rule 10 (control_structures -> while_statement .)
    CONST           reduce using rule 10 (control_structures -> while_statement .)
    DEFINE          reduce using rule 10 (control_structures -> while_statement .)
    ARRAY           reduce using rule 10 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> while_statement .)
    NEW             reduce using rule 10 (control_structures -> while_statement .)
    $end            reduce using rule 10 (control_structures -> while_statement .)
    RETURN          reduce using rule 10 (control_structures -> while_statement .)
    BREAK           reduce using rule 10 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> while_statement .)


state 19

    (11) control_structures -> for_statement .

    ECHO            reduce using rule 11 (control_structures -> for_statement .)
    PRINT           reduce using rule 11 (control_structures -> for_statement .)
    CLASS           reduce using rule 11 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> for_statement .)
    INCREASE        reduce using rule 11 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> for_statement .)
    IF              reduce using rule 11 (control_structures -> for_statement .)
    WHILE           reduce using rule 11 (control_structures -> for_statement .)
    FOR             reduce using rule 11 (control_structures -> for_statement .)
    CONST           reduce using rule 11 (control_structures -> for_statement .)
    DEFINE          reduce using rule 11 (control_structures -> for_statement .)
    ARRAY           reduce using rule 11 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> for_statement .)
    NEW             reduce using rule 11 (control_structures -> for_statement .)
    $end            reduce using rule 11 (control_structures -> for_statement .)
    RETURN          reduce using rule 11 (control_structures -> for_statement .)
    BREAK           reduce using rule 11 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> for_statement .)


state 20

    (119) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 68


state 21

    (95) variable_assignment -> VARIABLE . assignment_operator values
    (96) variable_assignment -> VARIABLE . assignment_operator expression
    (97) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> VARIABLE . assignment_operator types_structure
    (99) variable_assignment -> VARIABLE . assignment_operator input
    (100) variable_assignment -> VARIABLE . assignment_operator special_function
    (101) variable_assignment -> VARIABLE . INCREASE
    (102) variable_assignment -> VARIABLE . DECREMENT
    (152) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (159) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (105) assignment_operator -> . EQUALS
    (106) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 70
    DECREMENT       shift and go to state 71
    LEFT_BRACKET    shift and go to state 72
    MINUS           shift and go to state 74
    EQUALS          shift and go to state 73
    PLUS_EQUALS     shift and go to state 75

    assignment_operator            shift and go to state 69

state 22

    (103) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 76


state 23

    (104) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 77


state 24

    (107) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 107 (constant_assignment -> const_syntax .)


state 25

    (108) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 108 (constant_assignment -> define_syntax .)


state 26

    (130) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 130 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 130 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 130 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 130 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 130 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 130 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 130 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 130 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 130 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 130 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 130 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 130 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 130 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 130 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 130 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 130 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 130 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 130 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 130 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 130 (structure_array_principal -> indexed_array .)


state 27

    (131) structure_array_principal -> associative_array .

    ECHO            reduce using rule 131 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 131 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 131 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 131 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 131 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 131 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 131 (structure_array_principal -> associative_array .)
    IF              reduce using rule 131 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 131 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 131 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 131 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 131 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 131 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 131 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 131 (structure_array_principal -> associative_array .)
    $end            reduce using rule 131 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 131 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 131 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 131 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 131 (structure_array_principal -> associative_array .)


state 28

    (141) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 141 (structure_matrix_principal -> matrix_firstform .)


state 29

    (142) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 142 (structure_matrix_principal -> matrix_secondform .)


state 30

    (143) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    CLASS           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    INCREASE        reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    DECREMENT       reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    IF              reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    WHILE           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    FOR             reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    SEMICOLON       reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    RETURN          reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    BREAK           reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)
    RIGHT_BRACE     reduce using rule 143 (structure_matrix_principal -> access_element_matrix .)


state 31

    (144) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    CLASS           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    INCREASE        reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    DECREMENT       reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    IF              reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    WHILE           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    FOR             reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    SEMICOLON       reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    RETURN          reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    BREAK           reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)
    RIGHT_BRACE     reduce using rule 144 (structure_matrix_principal -> modify_element_matrix .)


state 32

    (145) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 145 (structure_matrix_principal -> add_element_matrix .)


state 33

    (155) structure_object_principal -> object_creation .

    ECHO            reduce using rule 155 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 155 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 155 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 155 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 155 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 155 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 155 (structure_object_principal -> object_creation .)
    IF              reduce using rule 155 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 155 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 155 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 155 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 155 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 155 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 155 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 155 (structure_object_principal -> object_creation .)
    $end            reduce using rule 155 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 155 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 155 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 155 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 155 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 155 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 155 (structure_object_principal -> object_creation .)


state 34

    (156) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 156 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 156 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 156 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 156 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 156 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 156 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 156 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 156 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 156 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 156 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 156 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 156 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 156 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 156 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 156 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 156 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 156 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 156 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 156 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 156 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 156 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 156 (structure_object_principal -> access_method_object .)


state 35

    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 78


state 36

    (12) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 79


state 37

    (25) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 80


state 38

    (109) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 81


state 39

    (110) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 82


state 40

    (132) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 83
    LEFT_BRACKET    shift and go to state 84


state 41

    (147) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (148) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (149) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 85

    structure_matrix_second        shift and go to state 86

state 42

    (157) object_creation -> NEW . IDENTIFIER
    (158) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 87


state 43

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 44

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 45

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 46

    (64) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (46) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (92) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    LEFT_PAREN      shift and go to state 88
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    printable_values               shift and go to state 89
    conditional                    shift and go to state 90
    expression                     shift and go to state 91
    values                         shift and go to state 48
    structure_object_principal     shift and go to state 51
    boolean_expression             shift and go to state 56
    term                           shift and go to state 63
    boolean                        shift and go to state 55
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    factor                         shift and go to state 64

state 47

    (66) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 66 (print_statement -> ECHO printable_values .)


state 48

    (68) printable_values -> values .
    (69) printable_values -> values . COMMA printable_values
    (50) comparation -> values . comparator_operator values
    (51) comparation -> values . comparator_operator expression
    (54) comparator_operator -> . EQUALS_EQUALS
    (55) comparator_operator -> . IDENTICAL
    (56) comparator_operator -> . NOT_EQUALS
    (57) comparator_operator -> . NOT_IDENTICAL
    (58) comparator_operator -> . SMALL_THAN
    (59) comparator_operator -> . GREATER_THAN
    (60) comparator_operator -> . SMALL_EQUALS_TO
    (61) comparator_operator -> . GREATER_EQUALS_TO
    (62) comparator_operator -> . SPACECRAFT
    (63) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 68 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 68 (printable_values -> values .)
    COMMA           shift and go to state 92
    EQUALS_EQUALS   shift and go to state 94
    IDENTICAL       shift and go to state 95
    NOT_EQUALS      shift and go to state 96
    NOT_IDENTICAL   shift and go to state 97
    SMALL_THAN      shift and go to state 98
    GREATER_THAN    shift and go to state 99
    SMALL_EQUALS_TO shift and go to state 100
    GREATER_EQUALS_TO shift and go to state 101
    SPACECRAFT      shift and go to state 102
    NULL_FUSION     shift and go to state 103

    comparator_operator            shift and go to state 93

state 49

    (70) printable_values -> VARIABLE .
    (71) printable_values -> VARIABLE . COMMA printable_values
    (159) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (53) comparation -> VARIABLE . EQUALS_EQUALS values
    (91) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 70 (printable_values -> VARIABLE .)
    SEMICOLON       reduce using rule 70 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 70 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 104
    MINUS           shift and go to state 74
    EQUALS_EQUALS   shift and go to state 105
    MULTIPLY        reduce using rule 91 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 91 (factor -> VARIABLE .)
    MODULE          reduce using rule 91 (factor -> VARIABLE .)
    POW             reduce using rule 91 (factor -> VARIABLE .)
    PLUS            reduce using rule 91 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 91 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 91 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 91 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 91 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 91 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 91 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 91 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 91 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 91 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 91 (factor -> VARIABLE .) ]


state 50

    (72) printable_values -> conditional .
    (73) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 72 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 72 (printable_values -> conditional .)
    COMMA           shift and go to state 106


state 51

    (74) printable_values -> structure_object_principal .
    (75) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 74 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 74 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 107


state 52

    (76) values -> INTEGER .
    (90) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 76 (values -> INTEGER .)
    COMMA           reduce using rule 76 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 76 (values -> INTEGER .)
    IDENTICAL       reduce using rule 76 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 76 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 76 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 76 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 76 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 76 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 76 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 76 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 76 (values -> INTEGER .)
    SEMICOLON       reduce using rule 76 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 76 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 76 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 76 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 76 (values -> INTEGER .)
    MULTIPLY        reduce using rule 90 (factor -> INTEGER .)
    DIVIDE          reduce using rule 90 (factor -> INTEGER .)
    MODULE          reduce using rule 90 (factor -> INTEGER .)
    POW             reduce using rule 90 (factor -> INTEGER .)
    PLUS            reduce using rule 90 (factor -> INTEGER .)
    MINUS           reduce using rule 90 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 90 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 90 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 90 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 90 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 90 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 90 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 90 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 90 (factor -> INTEGER .) ]


state 53

    (77) values -> STRING .

    COMMA           reduce using rule 77 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 77 (values -> STRING .)
    IDENTICAL       reduce using rule 77 (values -> STRING .)
    NOT_EQUALS      reduce using rule 77 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 77 (values -> STRING .)
    SMALL_THAN      reduce using rule 77 (values -> STRING .)
    GREATER_THAN    reduce using rule 77 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 77 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 77 (values -> STRING .)
    SPACECRAFT      reduce using rule 77 (values -> STRING .)
    NULL_FUSION     reduce using rule 77 (values -> STRING .)
    SEMICOLON       reduce using rule 77 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 77 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 77 (values -> STRING .)
    LOGIC_AND       reduce using rule 77 (values -> STRING .)
    LOGIC_OR        reduce using rule 77 (values -> STRING .)
    LOGIC_XOR       reduce using rule 77 (values -> STRING .)
    ECHO            reduce using rule 77 (values -> STRING .)
    PRINT           reduce using rule 77 (values -> STRING .)
    CLASS           reduce using rule 77 (values -> STRING .)
    FUNCTION        reduce using rule 77 (values -> STRING .)
    VARIABLE        reduce using rule 77 (values -> STRING .)
    INCREASE        reduce using rule 77 (values -> STRING .)
    DECREMENT       reduce using rule 77 (values -> STRING .)
    IF              reduce using rule 77 (values -> STRING .)
    WHILE           reduce using rule 77 (values -> STRING .)
    FOR             reduce using rule 77 (values -> STRING .)
    CONST           reduce using rule 77 (values -> STRING .)
    DEFINE          reduce using rule 77 (values -> STRING .)
    ARRAY           reduce using rule 77 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 77 (values -> STRING .)
    NEW             reduce using rule 77 (values -> STRING .)
    $end            reduce using rule 77 (values -> STRING .)
    RETURN          reduce using rule 77 (values -> STRING .)
    BREAK           reduce using rule 77 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 77 (values -> STRING .)


state 54

    (78) values -> FLOAT .

    COMMA           reduce using rule 78 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 78 (values -> FLOAT .)
    IDENTICAL       reduce using rule 78 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 78 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 78 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 78 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 78 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 78 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 78 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 78 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 78 (values -> FLOAT .)
    SEMICOLON       reduce using rule 78 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 78 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 78 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 78 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 78 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 78 (values -> FLOAT .)
    ECHO            reduce using rule 78 (values -> FLOAT .)
    PRINT           reduce using rule 78 (values -> FLOAT .)
    CLASS           reduce using rule 78 (values -> FLOAT .)
    FUNCTION        reduce using rule 78 (values -> FLOAT .)
    VARIABLE        reduce using rule 78 (values -> FLOAT .)
    INCREASE        reduce using rule 78 (values -> FLOAT .)
    DECREMENT       reduce using rule 78 (values -> FLOAT .)
    IF              reduce using rule 78 (values -> FLOAT .)
    WHILE           reduce using rule 78 (values -> FLOAT .)
    FOR             reduce using rule 78 (values -> FLOAT .)
    CONST           reduce using rule 78 (values -> FLOAT .)
    DEFINE          reduce using rule 78 (values -> FLOAT .)
    ARRAY           reduce using rule 78 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 78 (values -> FLOAT .)
    NEW             reduce using rule 78 (values -> FLOAT .)
    $end            reduce using rule 78 (values -> FLOAT .)
    RETURN          reduce using rule 78 (values -> FLOAT .)
    BREAK           reduce using rule 78 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 78 (values -> FLOAT .)


state 55

    (79) values -> boolean .

    COMMA           reduce using rule 79 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 79 (values -> boolean .)
    IDENTICAL       reduce using rule 79 (values -> boolean .)
    NOT_EQUALS      reduce using rule 79 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 79 (values -> boolean .)
    SMALL_THAN      reduce using rule 79 (values -> boolean .)
    GREATER_THAN    reduce using rule 79 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 79 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 79 (values -> boolean .)
    SPACECRAFT      reduce using rule 79 (values -> boolean .)
    NULL_FUSION     reduce using rule 79 (values -> boolean .)
    SEMICOLON       reduce using rule 79 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 79 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 79 (values -> boolean .)
    LOGIC_AND       reduce using rule 79 (values -> boolean .)
    LOGIC_OR        reduce using rule 79 (values -> boolean .)
    LOGIC_XOR       reduce using rule 79 (values -> boolean .)
    ECHO            reduce using rule 79 (values -> boolean .)
    PRINT           reduce using rule 79 (values -> boolean .)
    CLASS           reduce using rule 79 (values -> boolean .)
    FUNCTION        reduce using rule 79 (values -> boolean .)
    VARIABLE        reduce using rule 79 (values -> boolean .)
    INCREASE        reduce using rule 79 (values -> boolean .)
    DECREMENT       reduce using rule 79 (values -> boolean .)
    IF              reduce using rule 79 (values -> boolean .)
    WHILE           reduce using rule 79 (values -> boolean .)
    FOR             reduce using rule 79 (values -> boolean .)
    CONST           reduce using rule 79 (values -> boolean .)
    DEFINE          reduce using rule 79 (values -> boolean .)
    ARRAY           reduce using rule 79 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 79 (values -> boolean .)
    NEW             reduce using rule 79 (values -> boolean .)
    $end            reduce using rule 79 (values -> boolean .)
    RETURN          reduce using rule 79 (values -> boolean .)
    BREAK           reduce using rule 79 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 79 (values -> boolean .)


state 56

    (40) conditional -> boolean_expression .
    (41) conditional -> boolean_expression . logic_operator boolean_expression
    (42) logic_operator -> . LOGIC_AND
    (43) logic_operator -> . LOGIC_OR
    (44) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 40 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 40 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 40 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 109
    LOGIC_OR        shift and go to state 110
    LOGIC_XOR       shift and go to state 111

  ! LOGIC_AND       [ reduce using rule 40 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 40 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 40 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 108

state 57

    (80) boolean -> TRUE .

    COMMA           reduce using rule 80 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 80 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 80 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 80 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 80 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 80 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 80 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 80 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 80 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 80 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 80 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 80 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 80 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 80 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 80 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 80 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 80 (boolean -> TRUE .)
    ECHO            reduce using rule 80 (boolean -> TRUE .)
    PRINT           reduce using rule 80 (boolean -> TRUE .)
    CLASS           reduce using rule 80 (boolean -> TRUE .)
    FUNCTION        reduce using rule 80 (boolean -> TRUE .)
    VARIABLE        reduce using rule 80 (boolean -> TRUE .)
    INCREASE        reduce using rule 80 (boolean -> TRUE .)
    DECREMENT       reduce using rule 80 (boolean -> TRUE .)
    IF              reduce using rule 80 (boolean -> TRUE .)
    WHILE           reduce using rule 80 (boolean -> TRUE .)
    FOR             reduce using rule 80 (boolean -> TRUE .)
    CONST           reduce using rule 80 (boolean -> TRUE .)
    DEFINE          reduce using rule 80 (boolean -> TRUE .)
    ARRAY           reduce using rule 80 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 80 (boolean -> TRUE .)
    NEW             reduce using rule 80 (boolean -> TRUE .)
    $end            reduce using rule 80 (boolean -> TRUE .)
    RETURN          reduce using rule 80 (boolean -> TRUE .)
    BREAK           reduce using rule 80 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 80 (boolean -> TRUE .)


state 58

    (81) boolean -> FALSE .

    COMMA           reduce using rule 81 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 81 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 81 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 81 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 81 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 81 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 81 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 81 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 81 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 81 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 81 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 81 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 81 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 81 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 81 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 81 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 81 (boolean -> FALSE .)
    ECHO            reduce using rule 81 (boolean -> FALSE .)
    PRINT           reduce using rule 81 (boolean -> FALSE .)
    CLASS           reduce using rule 81 (boolean -> FALSE .)
    FUNCTION        reduce using rule 81 (boolean -> FALSE .)
    VARIABLE        reduce using rule 81 (boolean -> FALSE .)
    INCREASE        reduce using rule 81 (boolean -> FALSE .)
    DECREMENT       reduce using rule 81 (boolean -> FALSE .)
    IF              reduce using rule 81 (boolean -> FALSE .)
    WHILE           reduce using rule 81 (boolean -> FALSE .)
    FOR             reduce using rule 81 (boolean -> FALSE .)
    CONST           reduce using rule 81 (boolean -> FALSE .)
    DEFINE          reduce using rule 81 (boolean -> FALSE .)
    ARRAY           reduce using rule 81 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 81 (boolean -> FALSE .)
    NEW             reduce using rule 81 (boolean -> FALSE .)
    $end            reduce using rule 81 (boolean -> FALSE .)
    RETURN          reduce using rule 81 (boolean -> FALSE .)
    BREAK           reduce using rule 81 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 81 (boolean -> FALSE .)


state 59

    (45) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 45 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 45 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 45 (boolean_expression -> comparation .)
    COMMA           reduce using rule 45 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 45 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 45 (boolean_expression -> comparation .)


state 60

    (47) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 47 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 47 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 47 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 47 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 47 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 47 (boolean_expression -> logic_not_sentence .)


state 61

    (52) comparation -> expression . comparator_operator expression
    (54) comparator_operator -> . EQUALS_EQUALS
    (55) comparator_operator -> . IDENTICAL
    (56) comparator_operator -> . NOT_EQUALS
    (57) comparator_operator -> . NOT_IDENTICAL
    (58) comparator_operator -> . SMALL_THAN
    (59) comparator_operator -> . GREATER_THAN
    (60) comparator_operator -> . SMALL_EQUALS_TO
    (61) comparator_operator -> . GREATER_EQUALS_TO
    (62) comparator_operator -> . SPACECRAFT
    (63) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 94
    IDENTICAL       shift and go to state 95
    NOT_EQUALS      shift and go to state 96
    NOT_IDENTICAL   shift and go to state 97
    SMALL_THAN      shift and go to state 98
    GREATER_THAN    shift and go to state 99
    SMALL_EQUALS_TO shift and go to state 100
    GREATER_EQUALS_TO shift and go to state 101
    SPACECRAFT      shift and go to state 102
    NULL_FUSION     shift and go to state 103

    comparator_operator            shift and go to state 112

state 62

    (48) logic_not_sentence -> LOGIC_NOT . conditional
    (49) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 114
    LEFT_PAREN      shift and go to state 88
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    conditional                    shift and go to state 113
    boolean_expression             shift and go to state 56
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    values                         shift and go to state 115
    expression                     shift and go to state 61
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 63

    (82) expression -> term .
    (83) expression -> term . PLUS expression
    (84) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 82 (expression -> term .)
    IDENTICAL       reduce using rule 82 (expression -> term .)
    NOT_EQUALS      reduce using rule 82 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 82 (expression -> term .)
    SMALL_THAN      reduce using rule 82 (expression -> term .)
    GREATER_THAN    reduce using rule 82 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 82 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 82 (expression -> term .)
    SPACECRAFT      reduce using rule 82 (expression -> term .)
    NULL_FUSION     reduce using rule 82 (expression -> term .)
    RIGHT_PAREN     reduce using rule 82 (expression -> term .)
    SEMICOLON       reduce using rule 82 (expression -> term .)
    LOGIC_AND       reduce using rule 82 (expression -> term .)
    LOGIC_OR        reduce using rule 82 (expression -> term .)
    LOGIC_XOR       reduce using rule 82 (expression -> term .)
    COMMA           reduce using rule 82 (expression -> term .)
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117


state 64

    (85) term -> factor .
    (86) term -> factor . MULTIPLY term
    (87) term -> factor . DIVIDE term
    (88) term -> factor . MODULE term
    (89) term -> factor . POW term

    PLUS            reduce using rule 85 (term -> factor .)
    MINUS           reduce using rule 85 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 85 (term -> factor .)
    IDENTICAL       reduce using rule 85 (term -> factor .)
    NOT_EQUALS      reduce using rule 85 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 85 (term -> factor .)
    SMALL_THAN      reduce using rule 85 (term -> factor .)
    GREATER_THAN    reduce using rule 85 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 85 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 85 (term -> factor .)
    SPACECRAFT      reduce using rule 85 (term -> factor .)
    NULL_FUSION     reduce using rule 85 (term -> factor .)
    RIGHT_PAREN     reduce using rule 85 (term -> factor .)
    SEMICOLON       reduce using rule 85 (term -> factor .)
    LOGIC_AND       reduce using rule 85 (term -> factor .)
    LOGIC_OR        reduce using rule 85 (term -> factor .)
    LOGIC_XOR       reduce using rule 85 (term -> factor .)
    COMMA           reduce using rule 85 (term -> factor .)
    MULTIPLY        shift and go to state 118
    DIVIDE          shift and go to state 119
    MODULE          shift and go to state 120
    POW             shift and go to state 121


state 65

    (65) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (46) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (92) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    LEFT_PAREN      shift and go to state 88
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    printable_values               shift and go to state 122
    conditional                    shift and go to state 90
    expression                     shift and go to state 91
    values                         shift and go to state 48
    structure_object_principal     shift and go to state 51
    boolean_expression             shift and go to state 56
    term                           shift and go to state 63
    boolean                        shift and go to state 55
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    factor                         shift and go to state 64

state 66

    (67) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 67 (print_statement -> PRINT printable_values .)


state 67

    (163) class_declaration -> CLASS IDENTIFIER . class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (164) class_extends_opt -> . EXTENDS IDENTIFIER
    (165) class_extends_opt -> .

    EXTENDS         shift and go to state 124
    LEFT_BRACE      reduce using rule 165 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 123

state 68

    (119) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 125


state 69

    (95) variable_assignment -> VARIABLE assignment_operator . values
    (96) variable_assignment -> VARIABLE assignment_operator . expression
    (97) variable_assignment -> VARIABLE assignment_operator . function_invocation SEMICOLON
    (98) variable_assignment -> VARIABLE assignment_operator . types_structure
    (99) variable_assignment -> VARIABLE assignment_operator . input
    (100) variable_assignment -> VARIABLE assignment_operator . special_function
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (111) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (125) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (126) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (120) special_function -> . arrow_function
    (121) special_function -> . anonymous_functions
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (122) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (123) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    IDENTIFIER      shift and go to state 133
    FEGTS           shift and go to state 135
    READLINE        shift and go to state 136
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    FN              shift and go to state 139
    FUNCTION        shift and go to state 140
    VARIABLE        shift and go to state 126
    LEFT_PAREN      shift and go to state 134
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    values                         shift and go to state 127
    expression                     shift and go to state 128
    function_invocation            shift and go to state 129
    types_structure                shift and go to state 130
    input                          shift and go to state 131
    special_function               shift and go to state 132
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    arrow_function                 shift and go to state 137
    anonymous_functions            shift and go to state 138
    factor                         shift and go to state 64
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 70

    (101) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 101 (variable_assignment -> VARIABLE INCREASE .)


state 71

    (102) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 102 (variable_assignment -> VARIABLE DECREMENT .)


state 72

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 141
    RIGHT_BRACKET   shift and go to state 142


state 73

    (105) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 105 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 105 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 105 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 105 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 105 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 105 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 105 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 105 (assignment_operator -> EQUALS .)
    FN              reduce using rule 105 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 105 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 105 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 105 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 105 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 105 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 105 (assignment_operator -> EQUALS .)


state 74

    (159) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS VARIABLE

    GREATER_THAN    shift and go to state 143


state 75

    (106) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 106 (assignment_operator -> PLUS_EQUALS .)


state 76

    (103) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 103 (variable_assignment -> INCREASE VARIABLE .)


state 77

    (104) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 104 (variable_assignment -> DECREMENT VARIABLE .)


state 78

    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 88
    VARIABLE        shift and go to state 145
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    conditional                    shift and go to state 144
    boolean_expression             shift and go to state 56
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    values                         shift and go to state 115
    expression                     shift and go to state 61
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 79

    (12) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 88
    VARIABLE        shift and go to state 145
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    conditional                    shift and go to state 146
    boolean_expression             shift and go to state 56
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    values                         shift and go to state 115
    expression                     shift and go to state 61
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 80

    (25) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 147


state 81

    (109) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 148


state 82

    (110) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 149


state 83

    (132) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (133) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (146) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (139) values_array_indexed -> . values
    (140) values_array_indexed -> . values COMMA values_array_indexed
    (135) structure_array -> . key EQUALS GREATER_THAN values
    (136) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (150) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (151) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (137) key -> . INTEGER
    (138) key -> . STRING
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    ARRAY           shift and go to state 150
    INTEGER         shift and go to state 156
    STRING          shift and go to state 157
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values_array_indexed           shift and go to state 151
    structure_array                shift and go to state 152
    structure_matrix_first         shift and go to state 153
    values                         shift and go to state 154
    key                            shift and go to state 155
    boolean                        shift and go to state 55

state 84

    (134) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (135) structure_array -> . key EQUALS GREATER_THAN values
    (136) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (137) key -> . INTEGER
    (138) key -> . STRING

    INTEGER         shift and go to state 159
    STRING          shift and go to state 160

    structure_array                shift and go to state 158
    key                            shift and go to state 155

state 85

    (148) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (149) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 161
    boolean                        shift and go to state 55

state 86

    (147) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 163


state 87

    (157) object_creation -> NEW IDENTIFIER .
    (158) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 157 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 164


state 88

    (46) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (92) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 88
    VARIABLE        shift and go to state 145
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 166
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    conditional                    shift and go to state 165
    expression                     shift and go to state 91
    boolean_expression             shift and go to state 56
    term                           shift and go to state 63
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    factor                         shift and go to state 64
    values                         shift and go to state 115
    boolean                        shift and go to state 55

state 89

    (64) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 167


state 90

    (46) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (72) printable_values -> conditional .
    (73) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 168
    COMMA           shift and go to state 106

  ! RIGHT_PAREN     [ reduce using rule 72 (printable_values -> conditional .) ]


state 91

    (92) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (52) comparation -> expression . comparator_operator expression
    (54) comparator_operator -> . EQUALS_EQUALS
    (55) comparator_operator -> . IDENTICAL
    (56) comparator_operator -> . NOT_EQUALS
    (57) comparator_operator -> . NOT_IDENTICAL
    (58) comparator_operator -> . SMALL_THAN
    (59) comparator_operator -> . GREATER_THAN
    (60) comparator_operator -> . SMALL_EQUALS_TO
    (61) comparator_operator -> . GREATER_EQUALS_TO
    (62) comparator_operator -> . SPACECRAFT
    (63) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 169
    EQUALS_EQUALS   shift and go to state 94
    IDENTICAL       shift and go to state 95
    NOT_EQUALS      shift and go to state 96
    NOT_IDENTICAL   shift and go to state 97
    SMALL_THAN      shift and go to state 98
    GREATER_THAN    shift and go to state 99
    SMALL_EQUALS_TO shift and go to state 100
    GREATER_EQUALS_TO shift and go to state 101
    SPACECRAFT      shift and go to state 102
    NULL_FUSION     shift and go to state 103

    comparator_operator            shift and go to state 112

state 92

    (69) printable_values -> values COMMA . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LEFT_PAREN      shift and go to state 88
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    values                         shift and go to state 48
    printable_values               shift and go to state 170
    conditional                    shift and go to state 50
    structure_object_principal     shift and go to state 51
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 93

    (50) comparation -> values comparator_operator . values
    (51) comparation -> values comparator_operator . expression
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    values                         shift and go to state 171
    expression                     shift and go to state 172
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 94

    (54) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 54 (comparator_operator -> EQUALS_EQUALS .)


state 95

    (55) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 55 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 55 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 55 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 55 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 55 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 55 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 55 (comparator_operator -> IDENTICAL .)


state 96

    (56) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 56 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 56 (comparator_operator -> NOT_EQUALS .)


state 97

    (57) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 57 (comparator_operator -> NOT_IDENTICAL .)


state 98

    (58) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 58 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 58 (comparator_operator -> SMALL_THAN .)


state 99

    (59) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 59 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 59 (comparator_operator -> GREATER_THAN .)


state 100

    (60) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 60 (comparator_operator -> SMALL_EQUALS_TO .)


state 101

    (61) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 61 (comparator_operator -> GREATER_EQUALS_TO .)


state 102

    (62) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 62 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 62 (comparator_operator -> SPACECRAFT .)


state 103

    (63) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 63 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 63 (comparator_operator -> NULL_FUSION .)


state 104

    (71) printable_values -> VARIABLE COMMA . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LEFT_PAREN      shift and go to state 88
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    printable_values               shift and go to state 174
    values                         shift and go to state 48
    conditional                    shift and go to state 50
    structure_object_principal     shift and go to state 51
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 105

    (53) comparation -> VARIABLE EQUALS_EQUALS . values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 175
    boolean                        shift and go to state 55

state 106

    (73) printable_values -> conditional COMMA . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LEFT_PAREN      shift and go to state 88
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    conditional                    shift and go to state 50
    printable_values               shift and go to state 176
    values                         shift and go to state 48
    structure_object_principal     shift and go to state 51
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 107

    (75) printable_values -> structure_object_principal COMMA . printable_values
    (68) printable_values -> . values
    (69) printable_values -> . values COMMA printable_values
    (70) printable_values -> . VARIABLE
    (71) printable_values -> . VARIABLE COMMA printable_values
    (72) printable_values -> . conditional
    (73) printable_values -> . conditional COMMA printable_values
    (74) printable_values -> . structure_object_principal
    (75) printable_values -> . structure_object_principal COMMA printable_values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    LEFT_PAREN      shift and go to state 88
    NEW             shift and go to state 42
    LOGIC_NOT       shift and go to state 62

    structure_object_principal     shift and go to state 51
    printable_values               shift and go to state 177
    values                         shift and go to state 48
    conditional                    shift and go to state 50
    boolean                        shift and go to state 55
    boolean_expression             shift and go to state 56
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    expression                     shift and go to state 61
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 108

    (41) conditional -> boolean_expression logic_operator . boolean_expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 88
    VARIABLE        shift and go to state 145
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    boolean_expression             shift and go to state 178
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    values                         shift and go to state 115
    expression                     shift and go to state 61
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 109

    (42) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 42 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 42 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 42 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 42 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 42 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 42 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 42 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 42 (logic_operator -> LOGIC_AND .)


state 110

    (43) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 43 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 43 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 43 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 43 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 43 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 43 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 43 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 43 (logic_operator -> LOGIC_OR .)


state 111

    (44) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 44 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 44 (logic_operator -> LOGIC_XOR .)


state 112

    (52) comparation -> expression comparator_operator . expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    expression                     shift and go to state 179
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 113

    (48) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 48 (logic_not_sentence -> LOGIC_NOT conditional .)


state 114

    (49) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (53) comparation -> VARIABLE . EQUALS_EQUALS values
    (91) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 49 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 105
    MULTIPLY        reduce using rule 91 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 91 (factor -> VARIABLE .)
    MODULE          reduce using rule 91 (factor -> VARIABLE .)
    POW             reduce using rule 91 (factor -> VARIABLE .)
    PLUS            reduce using rule 91 (factor -> VARIABLE .)
    MINUS           reduce using rule 91 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 91 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 91 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 91 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 91 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 91 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 91 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 91 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 91 (factor -> VARIABLE .) ]


state 115

    (50) comparation -> values . comparator_operator values
    (51) comparation -> values . comparator_operator expression
    (54) comparator_operator -> . EQUALS_EQUALS
    (55) comparator_operator -> . IDENTICAL
    (56) comparator_operator -> . NOT_EQUALS
    (57) comparator_operator -> . NOT_IDENTICAL
    (58) comparator_operator -> . SMALL_THAN
    (59) comparator_operator -> . GREATER_THAN
    (60) comparator_operator -> . SMALL_EQUALS_TO
    (61) comparator_operator -> . GREATER_EQUALS_TO
    (62) comparator_operator -> . SPACECRAFT
    (63) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 94
    IDENTICAL       shift and go to state 95
    NOT_EQUALS      shift and go to state 96
    NOT_IDENTICAL   shift and go to state 97
    SMALL_THAN      shift and go to state 98
    GREATER_THAN    shift and go to state 99
    SMALL_EQUALS_TO shift and go to state 100
    GREATER_EQUALS_TO shift and go to state 101
    SPACECRAFT      shift and go to state 102
    NULL_FUSION     shift and go to state 103

    comparator_operator            shift and go to state 93

state 116

    (83) expression -> term PLUS . expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    term                           shift and go to state 63
    expression                     shift and go to state 181
    factor                         shift and go to state 64

state 117

    (84) expression -> term MINUS . expression
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    term                           shift and go to state 63
    expression                     shift and go to state 182
    factor                         shift and go to state 64

state 118

    (86) term -> factor MULTIPLY . term
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    factor                         shift and go to state 64
    term                           shift and go to state 183

state 119

    (87) term -> factor DIVIDE . term
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    factor                         shift and go to state 64
    term                           shift and go to state 184

state 120

    (88) term -> factor MODULE . term
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    factor                         shift and go to state 64
    term                           shift and go to state 185

state 121

    (89) term -> factor POW . term
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    factor                         shift and go to state 64
    term                           shift and go to state 186

state 122

    (65) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 187


state 123

    (163) class_declaration -> CLASS IDENTIFIER class_extends_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 188


state 124

    (164) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 189


state 125

    (119) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 190
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 126

    (91) factor -> VARIABLE .
    (152) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (159) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 91 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 91 (factor -> VARIABLE .)
    MODULE          reduce using rule 91 (factor -> VARIABLE .)
    POW             reduce using rule 91 (factor -> VARIABLE .)
    PLUS            reduce using rule 91 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 91 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 72
    MINUS           shift and go to state 74

  ! MINUS           [ reduce using rule 91 (factor -> VARIABLE .) ]


state 127

    (95) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 95 (variable_assignment -> VARIABLE assignment_operator values .)


state 128

    (96) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 96 (variable_assignment -> VARIABLE assignment_operator expression .)


state 129

    (97) variable_assignment -> VARIABLE assignment_operator function_invocation . SEMICOLON

    SEMICOLON       shift and go to state 195


state 130

    (98) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 98 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 131

    (99) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 99 (variable_assignment -> VARIABLE assignment_operator input .)


state 132

    (100) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 100 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 133

    (111) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 196


state 134

    (92) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 180
    VARIABLE        shift and go to state 173
    LEFT_PAREN      shift and go to state 134

    expression                     shift and go to state 197
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 135

    (125) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 198


state 136

    (126) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 199


state 137

    (120) special_function -> arrow_function .

    SEMICOLON       reduce using rule 120 (special_function -> arrow_function .)


state 138

    (121) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 121 (special_function -> anonymous_functions .)


state 139

    (122) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 200


state 140

    (123) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 201


state 141

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 202


state 142

    (154) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 203


state 143

    (159) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (160) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER
    (161) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS VARIABLE
    (111) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 205

    function_invocation            shift and go to state 204

state 144

    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 206


state 145

    (53) comparation -> VARIABLE . EQUALS_EQUALS values
    (91) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 105
    MULTIPLY        reduce using rule 91 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 91 (factor -> VARIABLE .)
    MODULE          reduce using rule 91 (factor -> VARIABLE .)
    POW             reduce using rule 91 (factor -> VARIABLE .)
    PLUS            reduce using rule 91 (factor -> VARIABLE .)
    MINUS           reduce using rule 91 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 91 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 91 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 91 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 91 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 91 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 91 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 91 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 91 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 91 (factor -> VARIABLE .) ]


state 146

    (12) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 207


state 147

    (25) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 208


state 148

    (109) const_syntax -> CONST IDENTIFIER EQUALS . values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 209
    boolean                        shift and go to state 55

state 149

    (110) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 210


state 150

    (150) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (151) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 211


state 151

    (132) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 212


state 152

    (133) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 213


state 153

    (146) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 214


state 154

    (139) values_array_indexed -> values .
    (140) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 139 (values_array_indexed -> values .)
    COMMA           shift and go to state 215


state 155

    (135) structure_array -> key . EQUALS GREATER_THAN values
    (136) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 216


state 156

    (76) values -> INTEGER .
    (137) key -> INTEGER .

    COMMA           reduce using rule 76 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 76 (values -> INTEGER .)
    EQUALS          reduce using rule 137 (key -> INTEGER .)


state 157

    (77) values -> STRING .
    (138) key -> STRING .

    COMMA           reduce using rule 77 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 77 (values -> STRING .)
    EQUALS          reduce using rule 138 (key -> STRING .)


state 158

    (134) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 217


state 159

    (137) key -> INTEGER .

    EQUALS          reduce using rule 137 (key -> INTEGER .)


state 160

    (138) key -> STRING .

    EQUALS          reduce using rule 138 (key -> STRING .)


state 161

    (148) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (149) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 218


state 162

    (76) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 76 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 76 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 76 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 76 (values -> INTEGER .)
    COMMA           reduce using rule 76 (values -> INTEGER .)
    SEMICOLON       reduce using rule 76 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 76 (values -> INTEGER .)
    ECHO            reduce using rule 76 (values -> INTEGER .)
    PRINT           reduce using rule 76 (values -> INTEGER .)
    CLASS           reduce using rule 76 (values -> INTEGER .)
    FUNCTION        reduce using rule 76 (values -> INTEGER .)
    VARIABLE        reduce using rule 76 (values -> INTEGER .)
    INCREASE        reduce using rule 76 (values -> INTEGER .)
    DECREMENT       reduce using rule 76 (values -> INTEGER .)
    IF              reduce using rule 76 (values -> INTEGER .)
    WHILE           reduce using rule 76 (values -> INTEGER .)
    FOR             reduce using rule 76 (values -> INTEGER .)
    CONST           reduce using rule 76 (values -> INTEGER .)
    DEFINE          reduce using rule 76 (values -> INTEGER .)
    ARRAY           reduce using rule 76 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 76 (values -> INTEGER .)
    NEW             reduce using rule 76 (values -> INTEGER .)
    $end            reduce using rule 76 (values -> INTEGER .)
    RETURN          reduce using rule 76 (values -> INTEGER .)
    BREAK           reduce using rule 76 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 76 (values -> INTEGER .)


state 163

    (147) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 219


state 164

    (158) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 220
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 165

    (46) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 168


state 166

    (90) factor -> INTEGER .
    (76) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 76 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 76 (values -> INTEGER .)
    MULTIPLY        reduce using rule 90 (factor -> INTEGER .)
    DIVIDE          reduce using rule 90 (factor -> INTEGER .)
    MODULE          reduce using rule 90 (factor -> INTEGER .)
    POW             reduce using rule 90 (factor -> INTEGER .)
    PLUS            reduce using rule 90 (factor -> INTEGER .)
    MINUS           reduce using rule 90 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 90 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 76 (values -> INTEGER .)
    IDENTICAL       reduce using rule 76 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 76 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 76 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 76 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 76 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 76 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 76 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 76 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 76 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 90 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 90 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 90 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 90 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 90 (factor -> INTEGER .) ]


state 167

    (64) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 64 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 168

    (46) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 46 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 169

    (92) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 92 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 170

    (69) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 69 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 69 (printable_values -> values COMMA printable_values .)


state 171

    (50) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 50 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 50 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 50 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 50 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 50 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 50 (comparation -> values comparator_operator values .)


state 172

    (51) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 51 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 51 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 51 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 51 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 51 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 51 (comparation -> values comparator_operator expression .)


state 173

    (91) factor -> VARIABLE .

    MULTIPLY        reduce using rule 91 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 91 (factor -> VARIABLE .)
    MODULE          reduce using rule 91 (factor -> VARIABLE .)
    POW             reduce using rule 91 (factor -> VARIABLE .)
    PLUS            reduce using rule 91 (factor -> VARIABLE .)
    MINUS           reduce using rule 91 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 91 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 91 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 91 (factor -> VARIABLE .)
    COMMA           reduce using rule 91 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 91 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 91 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 91 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 91 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 91 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 91 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 91 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 91 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 91 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 91 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 91 (factor -> VARIABLE .)


state 174

    (71) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 71 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 71 (printable_values -> VARIABLE COMMA printable_values .)


state 175

    (53) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 53 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 176

    (73) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 73 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 73 (printable_values -> conditional COMMA printable_values .)


state 177

    (75) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 75 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 75 (printable_values -> structure_object_principal COMMA printable_values .)


state 178

    (41) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 41 (conditional -> boolean_expression logic_operator boolean_expression .)


state 179

    (52) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 52 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 52 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 52 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 52 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 52 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 52 (comparation -> expression comparator_operator expression .)


state 180

    (90) factor -> INTEGER .

    MULTIPLY        reduce using rule 90 (factor -> INTEGER .)
    DIVIDE          reduce using rule 90 (factor -> INTEGER .)
    MODULE          reduce using rule 90 (factor -> INTEGER .)
    POW             reduce using rule 90 (factor -> INTEGER .)
    PLUS            reduce using rule 90 (factor -> INTEGER .)
    MINUS           reduce using rule 90 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 90 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 90 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 90 (factor -> INTEGER .)
    COMMA           reduce using rule 90 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 90 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 90 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 90 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 90 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 90 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 90 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 90 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 90 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 90 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 90 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 90 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 90 (factor -> INTEGER .)


state 181

    (83) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 83 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 83 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 83 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 83 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 83 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 83 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 83 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 83 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 83 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 83 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 83 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 83 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 83 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 83 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 83 (expression -> term PLUS expression .)
    COMMA           reduce using rule 83 (expression -> term PLUS expression .)


state 182

    (84) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 84 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 84 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 84 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 84 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 84 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 84 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 84 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 84 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 84 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 84 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 84 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 84 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 84 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 84 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 84 (expression -> term MINUS expression .)
    COMMA           reduce using rule 84 (expression -> term MINUS expression .)


state 183

    (86) term -> factor MULTIPLY term .

    PLUS            reduce using rule 86 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 86 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 86 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 86 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 86 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 86 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 86 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 86 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 86 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 86 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 86 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 86 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 86 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 86 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 86 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 86 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 86 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 86 (term -> factor MULTIPLY term .)


state 184

    (87) term -> factor DIVIDE term .

    PLUS            reduce using rule 87 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 87 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 87 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 87 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 87 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 87 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 87 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 87 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 87 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 87 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 87 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 87 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 87 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 87 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 87 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 87 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 87 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 87 (term -> factor DIVIDE term .)


state 185

    (88) term -> factor MODULE term .

    PLUS            reduce using rule 88 (term -> factor MODULE term .)
    MINUS           reduce using rule 88 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 88 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 88 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 88 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 88 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 88 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 88 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 88 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 88 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 88 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 88 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 88 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 88 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 88 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 88 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 88 (term -> factor MODULE term .)
    COMMA           reduce using rule 88 (term -> factor MODULE term .)


state 186

    (89) term -> factor POW term .

    PLUS            reduce using rule 89 (term -> factor POW term .)
    MINUS           reduce using rule 89 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 89 (term -> factor POW term .)
    IDENTICAL       reduce using rule 89 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 89 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 89 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 89 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 89 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 89 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 89 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 89 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 89 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 89 (term -> factor POW term .)
    SEMICOLON       reduce using rule 89 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 89 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 89 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 89 (term -> factor POW term .)
    COMMA           reduce using rule 89 (term -> factor POW term .)


state 187

    (65) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 65 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 188

    (163) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE . class_body RIGHT_BRACE
    (166) class_body -> . class_body class_member
    (167) class_body -> .

    RIGHT_BRACE     reduce using rule 167 (class_body -> .)
    PUBLIC          reduce using rule 167 (class_body -> .)
    PRIVATE         reduce using rule 167 (class_body -> .)
    PROTECTED       reduce using rule 167 (class_body -> .)
    STATIC          reduce using rule 167 (class_body -> .)
    FUNCTION        reduce using rule 167 (class_body -> .)
    VARIABLE        reduce using rule 167 (class_body -> .)

    class_body                     shift and go to state 221

state 189

    (164) class_extends_opt -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 164 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 190

    (119) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 222


state 191

    (112) params -> real_params .
    (116) real_params -> real_params . COMMA VARIABLE
    (117) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 112 (params -> real_params .)
    COMMA           shift and go to state 223


state 192

    (113) params -> empty .

    RIGHT_PAREN     reduce using rule 113 (params -> empty .)


state 193

    (114) real_params -> VARIABLE .

    COMMA           reduce using rule 114 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 114 (real_params -> VARIABLE .)


state 194

    (115) real_params -> values .

    COMMA           reduce using rule 115 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 115 (real_params -> values .)


state 195

    (97) variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .

    SEMICOLON       reduce using rule 97 (variable_assignment -> VARIABLE assignment_operator function_invocation SEMICOLON .)


state 196

    (111) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 224
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 197

    (92) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 169


state 198

    (125) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 225


state 199

    (126) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 226


state 200

    (122) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 227
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 201

    (123) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 228
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 202

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 229


state 203

    (154) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 231

    indexed_array                  shift and go to state 230

state 204

    (159) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 159 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 205

    (160) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .
    (161) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS values
    (162) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS VARIABLE
    (111) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    PRINT           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CLASS           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    FUNCTION        reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    VARIABLE        reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    INCREASE        reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DECREMENT       reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    IF              reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    WHILE           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    FOR             reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    CONST           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    DEFINE          reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    ARRAY           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    NEW             reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    $end            reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    COMMA           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    SEMICOLON       reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RETURN          reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    BREAK           reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 160 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER .)
    EQUALS          shift and go to state 232
    LEFT_PAREN      shift and go to state 196


state 206

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 233


state 207

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 234


state 208

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (32) number_values -> . INTEGER
    (33) number_values -> . FLOAT

    INTEGER         shift and go to state 236
    FLOAT           shift and go to state 237

    number_values                  shift and go to state 235

state 209

    (109) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 109 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 210

    (110) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 238
    boolean                        shift and go to state 55

state 211

    (150) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (151) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 239
    boolean                        shift and go to state 55

state 212

    (132) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 132 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 213

    (133) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 133 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 214

    (146) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 240


state 215

    (140) values_array_indexed -> values COMMA . values_array_indexed
    (139) values_array_indexed -> . values
    (140) values_array_indexed -> . values COMMA values_array_indexed
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 154
    values_array_indexed           shift and go to state 241
    boolean                        shift and go to state 55

state 216

    (135) structure_array -> key EQUALS . GREATER_THAN values
    (136) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 242


state 217

    (134) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 134 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 218

    (148) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (149) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 148 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 243


state 219

    (147) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 147 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 220

    (158) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 244


state 221

    (163) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body . RIGHT_BRACE
    (166) class_body -> class_body . class_member
    (168) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (169) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (170) class_member -> . class_attribute
    (173) visibility_opt -> . PUBLIC
    (174) visibility_opt -> . PRIVATE
    (175) visibility_opt -> . PROTECTED
    (176) visibility_opt -> .
    (171) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (172) class_attribute -> . visibility_opt VARIABLE SEMICOLON

    RIGHT_BRACE     shift and go to state 245
    PUBLIC          shift and go to state 249
    PRIVATE         shift and go to state 250
    PROTECTED       shift and go to state 251
    STATIC          reduce using rule 176 (visibility_opt -> .)
    FUNCTION        reduce using rule 176 (visibility_opt -> .)
    VARIABLE        reduce using rule 176 (visibility_opt -> .)

    class_member                   shift and go to state 246
    visibility_opt                 shift and go to state 247
    class_attribute                shift and go to state 248

state 222

    (119) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (124) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 253

    codeblock                      shift and go to state 252

state 223

    (116) real_params -> real_params COMMA . VARIABLE
    (117) real_params -> real_params COMMA . values
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 254
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 255
    boolean                        shift and go to state 55

state 224

    (111) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 256


state 225

    (125) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 257


state 226

    (126) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 258


state 227

    (122) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 259


state 228

    (123) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 260


state 229

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 261


state 230

    (154) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 154 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 231

    (132) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 262


state 232

    (161) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . values
    (162) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 263
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 264
    boolean                        shift and go to state 55

state 233

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 265
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 234

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 267
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 235

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values . SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 268


state 236

    (32) number_values -> INTEGER .

    SEMICOLON       reduce using rule 32 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 32 (number_values -> INTEGER .)


state 237

    (33) number_values -> FLOAT .

    SEMICOLON       reduce using rule 33 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 33 (number_values -> FLOAT .)


state 238

    (110) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 269


state 239

    (150) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (151) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 270


state 240

    (146) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 146 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 241

    (140) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 140 (values_array_indexed -> values COMMA values_array_indexed .)


state 242

    (135) structure_array -> key EQUALS GREATER_THAN . values
    (136) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 271
    boolean                        shift and go to state 55

state 243

    (149) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (148) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (149) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 85

    structure_matrix_second        shift and go to state 272

state 244

    (158) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 158 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 245

    (163) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 163 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 246

    (166) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 166 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 166 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 166 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 166 (class_body -> class_body class_member .)
    STATIC          reduce using rule 166 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 166 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 166 (class_body -> class_body class_member .)


state 247

    (168) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (169) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (171) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (172) class_attribute -> visibility_opt . VARIABLE SEMICOLON

    STATIC          shift and go to state 273
    FUNCTION        shift and go to state 274
    VARIABLE        shift and go to state 275


state 248

    (170) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 170 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 170 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 170 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 170 (class_member -> class_attribute .)
    STATIC          reduce using rule 170 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 170 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 170 (class_member -> class_attribute .)


state 249

    (173) visibility_opt -> PUBLIC .

    STATIC          reduce using rule 173 (visibility_opt -> PUBLIC .)
    FUNCTION        reduce using rule 173 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 173 (visibility_opt -> PUBLIC .)


state 250

    (174) visibility_opt -> PRIVATE .

    STATIC          reduce using rule 174 (visibility_opt -> PRIVATE .)
    FUNCTION        reduce using rule 174 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 174 (visibility_opt -> PRIVATE .)


state 251

    (175) visibility_opt -> PROTECTED .

    STATIC          reduce using rule 175 (visibility_opt -> PROTECTED .)
    FUNCTION        reduce using rule 175 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 175 (visibility_opt -> PROTECTED .)


state 252

    (119) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 119 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 253

    (124) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 276
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 254

    (116) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 116 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 116 (real_params -> real_params COMMA VARIABLE .)


state 255

    (117) real_params -> real_params COMMA values .

    COMMA           reduce using rule 117 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 117 (real_params -> real_params COMMA values .)


state 256

    (111) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 111 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 257

    (125) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 125 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 258

    (126) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 126 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 259

    (122) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 277


state 260

    (123) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (124) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 253

    codeblock                      shift and go to state 278

state 261

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 279


state 262

    (132) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (139) values_array_indexed -> . values
    (140) values_array_indexed -> . values COMMA values_array_indexed
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values_array_indexed           shift and go to state 151
    values                         shift and go to state 154
    boolean                        shift and go to state 55

state 263

    (162) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .

    ECHO            reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    PRINT           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CLASS           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    FUNCTION        reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    VARIABLE        reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    INCREASE        reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DECREMENT       reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    IF              reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    WHILE           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    FOR             reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    CONST           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    DEFINE          reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    ARRAY           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    LEFT_BRACKET    reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    NEW             reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    $end            reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    COMMA           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RETURN          reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    BREAK           reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 162 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE .)


state 264

    (161) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .

    ECHO            reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    PRINT           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CLASS           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    FUNCTION        reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    VARIABLE        reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    INCREASE        reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DECREMENT       reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    IF              reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    WHILE           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    FOR             reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    CONST           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    DEFINE          reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    ARRAY           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    LEFT_BRACKET    reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    NEW             reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    $end            reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    COMMA           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    SEMICOLON       reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_PAREN     reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RETURN          reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    BREAK           reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)
    RIGHT_BRACE     reduce using rule 161 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values .)


state 265

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 280


state 266

    (20) body_statement -> sentence .
    (21) body_statement -> sentence . RETURN values SEMICOLON
    (22) body_statement -> sentence . RETURN SEMICOLON
    (23) body_statement -> sentence . BREAK SEMICOLON
    (24) body_statement -> sentence . body_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence .)
    RETURN          shift and go to state 281
    BREAK           shift and go to state 282
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    sentence                       shift and go to state 266
    body_statement                 shift and go to state 283
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 267

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 284


state 268

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON . VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 285


state 269

    (110) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 110 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 270

    (150) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (151) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 150 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 286


state 271

    (135) structure_array -> key EQUALS GREATER_THAN values .
    (136) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 135 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 135 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 287


state 272

    (149) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 149 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 273

    (168) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 288


state 274

    (169) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 289


state 275

    (171) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (172) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 290
    SEMICOLON       shift and go to state 291


state 276

    (124) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 292


state 277

    (122) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 293


state 278

    (123) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 123 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 279

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 294
    EQUALS          shift and go to state 295


state 280

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (19) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 298
    ELSE            shift and go to state 299

    elseif_statement               shift and go to state 296
    else_statement                 shift and go to state 297

state 281

    (21) body_statement -> sentence RETURN . values SEMICOLON
    (22) body_statement -> sentence RETURN . SEMICOLON
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    SEMICOLON       shift and go to state 301
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 300
    boolean                        shift and go to state 55

state 282

    (23) body_statement -> sentence BREAK . SEMICOLON

    SEMICOLON       shift and go to state 302


state 283

    (24) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence body_statement .)


state 284

    (12) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 12 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 285

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE . comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (54) comparator_operator -> . EQUALS_EQUALS
    (55) comparator_operator -> . IDENTICAL
    (56) comparator_operator -> . NOT_EQUALS
    (57) comparator_operator -> . NOT_IDENTICAL
    (58) comparator_operator -> . SMALL_THAN
    (59) comparator_operator -> . GREATER_THAN
    (60) comparator_operator -> . SMALL_EQUALS_TO
    (61) comparator_operator -> . GREATER_EQUALS_TO
    (62) comparator_operator -> . SPACECRAFT
    (63) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 94
    IDENTICAL       shift and go to state 95
    NOT_EQUALS      shift and go to state 96
    NOT_IDENTICAL   shift and go to state 97
    SMALL_THAN      shift and go to state 98
    GREATER_THAN    shift and go to state 99
    SMALL_EQUALS_TO shift and go to state 100
    GREATER_EQUALS_TO shift and go to state 101
    SPACECRAFT      shift and go to state 102
    NULL_FUSION     shift and go to state 103

    comparator_operator            shift and go to state 303

state 286

    (151) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (150) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (151) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 150

    structure_matrix_first         shift and go to state 304

state 287

    (136) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (135) structure_array -> . key EQUALS GREATER_THAN values
    (136) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (137) key -> . INTEGER
    (138) key -> . STRING

    INTEGER         shift and go to state 159
    STRING          shift and go to state 160

    key                            shift and go to state 155
    structure_array                shift and go to state 305

state 288

    (168) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 306


state 289

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 307


state 290

    (171) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 308
    boolean                        shift and go to state 55

state 291

    (172) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 172 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 292

    (124) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 124 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 293

    (122) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (124) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 253

    codeblock                      shift and go to state 309

state 294

    (152) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 152 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 295

    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 310
    boolean                        shift and go to state 55

state 296

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 297

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 298

    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 311


state 299

    (19) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 312


state 300

    (21) body_statement -> sentence RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 313


state 301

    (22) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN SEMICOLON .)


state 302

    (23) body_statement -> sentence BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence BREAK SEMICOLON .)


state 303

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator . number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (32) number_values -> . INTEGER
    (33) number_values -> . FLOAT

    INTEGER         shift and go to state 236
    FLOAT           shift and go to state 237

    number_values                  shift and go to state 314

state 304

    (151) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 151 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 305

    (136) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 136 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 136 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 306

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 315


state 307

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 316
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 308

    (171) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 317


state 309

    (122) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 122 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 310

    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 318


state 311

    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (40) conditional -> . boolean_expression
    (41) conditional -> . boolean_expression logic_operator boolean_expression
    (45) boolean_expression -> . comparation
    (46) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (47) boolean_expression -> . logic_not_sentence
    (50) comparation -> . values comparator_operator values
    (51) comparation -> . values comparator_operator expression
    (52) comparation -> . expression comparator_operator expression
    (53) comparation -> . VARIABLE EQUALS_EQUALS values
    (48) logic_not_sentence -> . LOGIC_NOT conditional
    (49) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (82) expression -> . term
    (83) expression -> . term PLUS expression
    (84) expression -> . term MINUS expression
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE
    (85) term -> . factor
    (86) term -> . factor MULTIPLY term
    (87) term -> . factor DIVIDE term
    (88) term -> . factor MODULE term
    (89) term -> . factor POW term
    (90) factor -> . INTEGER
    (91) factor -> . VARIABLE
    (92) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 88
    VARIABLE        shift and go to state 145
    LOGIC_NOT       shift and go to state 62
    INTEGER         shift and go to state 52
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    conditional                    shift and go to state 319
    boolean_expression             shift and go to state 56
    comparation                    shift and go to state 59
    logic_not_sentence             shift and go to state 60
    values                         shift and go to state 115
    expression                     shift and go to state 61
    boolean                        shift and go to state 55
    term                           shift and go to state 63
    factor                         shift and go to state 64

state 312

    (19) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 320
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 313

    (21) body_statement -> sentence RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence RETURN values SEMICOLON .)


state 314

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 321


state 315

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (112) params -> . real_params
    (113) params -> . empty
    (114) real_params -> . VARIABLE
    (115) real_params -> . values
    (116) real_params -> . real_params COMMA VARIABLE
    (117) real_params -> . real_params COMMA values
    (118) empty -> .
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    RIGHT_PAREN     reduce using rule 118 (empty -> .)
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    params                         shift and go to state 322
    real_params                    shift and go to state 191
    empty                          shift and go to state 192
    values                         shift and go to state 194
    boolean                        shift and go to state 55

state 316

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 323


state 317

    (171) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 171 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 318

    (153) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CLASS           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    IF              reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    WHILE           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FOR             reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RETURN          reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    BREAK           reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 153 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)


state 319

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 324


state 320

    (19) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 325


state 321

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (26) increment_statement -> . VARIABLE INCREASE
    (27) increment_statement -> . VARIABLE DECREMENT
    (28) increment_statement -> . INCREASE VARIABLE
    (29) increment_statement -> . DECREMENT VARIABLE
    (30) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (31) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 326
    INCREASE        shift and go to state 328
    DECREMENT       shift and go to state 329

    increment_statement            shift and go to state 327

state 322

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 330


state 323

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 331


state 324

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 332


state 325

    (19) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 19 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 326

    (26) increment_statement -> VARIABLE . INCREASE
    (27) increment_statement -> VARIABLE . DECREMENT
    (30) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (31) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 333
    DECREMENT       shift and go to state 334
    PLUS_EQUALS     shift and go to state 335
    EQUALS          shift and go to state 336


state 327

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 337


state 328

    (28) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 338


state 329

    (29) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 339


state 330

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 340


state 331

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (177) method_body -> . classStatement
    (178) method_body -> . classStatement return_form
    (179) method_body -> . return_form
    (180) method_body -> . classStatement BREAK SEMICOLON
    (181) method_body -> . classStatement method_body
    (185) classStatement -> . sentence
    (186) classStatement -> . access_method_object SEMICOLON
    (182) return_form -> . RETURN values SEMICOLON
    (183) return_form -> . RETURN access_method_object SEMICOLON
    (184) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 346
    VARIABLE        shift and go to state 347
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    method_body                    shift and go to state 341
    classStatement                 shift and go to state 342
    return_form                    shift and go to state 343
    sentence                       shift and go to state 344
    access_method_object           shift and go to state 345
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33

state 332

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 348
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 333

    (26) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 26 (increment_statement -> VARIABLE INCREASE .)


state 334

    (27) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 27 (increment_statement -> VARIABLE DECREMENT .)


state 335

    (30) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 349


state 336

    (31) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 350


state 337

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 351


state 338

    (28) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 28 (increment_statement -> INCREASE VARIABLE .)


state 339

    (29) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> DECREMENT VARIABLE .)


state 340

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (177) method_body -> . classStatement
    (178) method_body -> . classStatement return_form
    (179) method_body -> . return_form
    (180) method_body -> . classStatement BREAK SEMICOLON
    (181) method_body -> . classStatement method_body
    (185) classStatement -> . sentence
    (186) classStatement -> . access_method_object SEMICOLON
    (182) return_form -> . RETURN values SEMICOLON
    (183) return_form -> . RETURN access_method_object SEMICOLON
    (184) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 346
    VARIABLE        shift and go to state 347
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    method_body                    shift and go to state 352
    classStatement                 shift and go to state 342
    return_form                    shift and go to state 343
    sentence                       shift and go to state 344
    access_method_object           shift and go to state 345
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33

state 341

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 353


state 342

    (177) method_body -> classStatement .
    (178) method_body -> classStatement . return_form
    (180) method_body -> classStatement . BREAK SEMICOLON
    (181) method_body -> classStatement . method_body
    (182) return_form -> . RETURN values SEMICOLON
    (183) return_form -> . RETURN access_method_object SEMICOLON
    (184) return_form -> . RETURN SEMICOLON
    (177) method_body -> . classStatement
    (178) method_body -> . classStatement return_form
    (179) method_body -> . return_form
    (180) method_body -> . classStatement BREAK SEMICOLON
    (181) method_body -> . classStatement method_body
    (185) classStatement -> . sentence
    (186) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 177 (method_body -> classStatement .)
    BREAK           shift and go to state 355
    RETURN          shift and go to state 346
    VARIABLE        shift and go to state 347
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    classStatement                 shift and go to state 342
    return_form                    shift and go to state 354
    method_body                    shift and go to state 356
    access_method_object           shift and go to state 345
    sentence                       shift and go to state 344
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33

state 343

    (179) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 179 (method_body -> return_form .)


state 344

    (185) classStatement -> sentence .

    BREAK           reduce using rule 185 (classStatement -> sentence .)
    RETURN          reduce using rule 185 (classStatement -> sentence .)
    VARIABLE        reduce using rule 185 (classStatement -> sentence .)
    ECHO            reduce using rule 185 (classStatement -> sentence .)
    PRINT           reduce using rule 185 (classStatement -> sentence .)
    CLASS           reduce using rule 185 (classStatement -> sentence .)
    FUNCTION        reduce using rule 185 (classStatement -> sentence .)
    INCREASE        reduce using rule 185 (classStatement -> sentence .)
    DECREMENT       reduce using rule 185 (classStatement -> sentence .)
    IF              reduce using rule 185 (classStatement -> sentence .)
    WHILE           reduce using rule 185 (classStatement -> sentence .)
    FOR             reduce using rule 185 (classStatement -> sentence .)
    CONST           reduce using rule 185 (classStatement -> sentence .)
    DEFINE          reduce using rule 185 (classStatement -> sentence .)
    ARRAY           reduce using rule 185 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 185 (classStatement -> sentence .)
    NEW             reduce using rule 185 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 185 (classStatement -> sentence .)


state 345

    (186) classStatement -> access_method_object . SEMICOLON
    (156) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 357
    BREAK           reduce using rule 156 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 156 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 156 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 156 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 156 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 156 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 156 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 156 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 156 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 156 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 156 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 156 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 156 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 156 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 156 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 156 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 156 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 156 (structure_object_principal -> access_method_object .)


state 346

    (182) return_form -> RETURN . values SEMICOLON
    (183) return_form -> RETURN . access_method_object SEMICOLON
    (184) return_form -> RETURN . SEMICOLON
    (76) values -> . INTEGER
    (77) values -> . STRING
    (78) values -> . FLOAT
    (79) values -> . boolean
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (80) boolean -> . TRUE
    (81) boolean -> . FALSE

    SEMICOLON       shift and go to state 359
    INTEGER         shift and go to state 162
    STRING          shift and go to state 53
    FLOAT           shift and go to state 54
    VARIABLE        shift and go to state 361
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58

    values                         shift and go to state 358
    access_method_object           shift and go to state 360
    boolean                        shift and go to state 55

state 347

    (159) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE
    (95) variable_assignment -> VARIABLE . assignment_operator values
    (96) variable_assignment -> VARIABLE . assignment_operator expression
    (97) variable_assignment -> VARIABLE . assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> VARIABLE . assignment_operator types_structure
    (99) variable_assignment -> VARIABLE . assignment_operator input
    (100) variable_assignment -> VARIABLE . assignment_operator special_function
    (101) variable_assignment -> VARIABLE . INCREASE
    (102) variable_assignment -> VARIABLE . DECREMENT
    (152) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (105) assignment_operator -> . EQUALS
    (106) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 74
    INCREASE        shift and go to state 70
    DECREMENT       shift and go to state 71
    LEFT_BRACKET    shift and go to state 72
    EQUALS          shift and go to state 73
    PLUS_EQUALS     shift and go to state 75

    assignment_operator            shift and go to state 69

state 348

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 362


state 349

    (30) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 350

    (31) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (34) operator_aritmetic -> . PLUS
    (35) operator_aritmetic -> . MINUS
    (36) operator_aritmetic -> . MULTIPLY
    (37) operator_aritmetic -> . DIVIDE
    (38) operator_aritmetic -> . MODULE
    (39) operator_aritmetic -> . POW

    PLUS            shift and go to state 364
    MINUS           shift and go to state 365
    MULTIPLY        shift and go to state 366
    DIVIDE          shift and go to state 367
    MODULE          shift and go to state 368
    POW             shift and go to state 369

    operator_aritmetic             shift and go to state 363

state 351

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (20) body_statement -> . sentence
    (21) body_statement -> . sentence RETURN values SEMICOLON
    (22) body_statement -> . sentence RETURN SEMICOLON
    (23) body_statement -> . sentence BREAK SEMICOLON
    (24) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (64) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> . ECHO printable_values
    (67) print_statement -> . PRINT printable_values
    (93) assignment -> . variable_assignment
    (94) assignment -> . constant_assignment
    (127) types_structure -> . structure_array_principal
    (128) types_structure -> . structure_matrix_principal
    (129) types_structure -> . structure_object_principal
    (163) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (11) control_structures -> . for_statement
    (119) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (95) variable_assignment -> . VARIABLE assignment_operator values
    (96) variable_assignment -> . VARIABLE assignment_operator expression
    (97) variable_assignment -> . VARIABLE assignment_operator function_invocation SEMICOLON
    (98) variable_assignment -> . VARIABLE assignment_operator types_structure
    (99) variable_assignment -> . VARIABLE assignment_operator input
    (100) variable_assignment -> . VARIABLE assignment_operator special_function
    (101) variable_assignment -> . VARIABLE INCREASE
    (102) variable_assignment -> . VARIABLE DECREMENT
    (103) variable_assignment -> . INCREASE VARIABLE
    (104) variable_assignment -> . DECREMENT VARIABLE
    (107) constant_assignment -> . const_syntax
    (108) constant_assignment -> . define_syntax
    (130) structure_array_principal -> . indexed_array
    (131) structure_array_principal -> . associative_array
    (141) structure_matrix_principal -> . matrix_firstform
    (142) structure_matrix_principal -> . matrix_secondform
    (143) structure_matrix_principal -> . access_element_matrix
    (144) structure_matrix_principal -> . modify_element_matrix
    (145) structure_matrix_principal -> . add_element_matrix
    (155) structure_object_principal -> . object_creation
    (156) structure_object_principal -> . access_method_object
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (12) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (109) const_syntax -> . CONST IDENTIFIER EQUALS values
    (110) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (132) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (133) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (134) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (146) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (147) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (152) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (153) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (154) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (157) object_creation -> . NEW IDENTIFIER
    (158) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (159) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (160) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 20
    VARIABLE        shift and go to state 21
    INCREASE        shift and go to state 22
    DECREMENT       shift and go to state 23
    IF              shift and go to state 35
    WHILE           shift and go to state 36
    FOR             shift and go to state 37
    CONST           shift and go to state 38
    DEFINE          shift and go to state 39
    ARRAY           shift and go to state 40
    LEFT_BRACKET    shift and go to state 41
    NEW             shift and go to state 42

    body_statement                 shift and go to state 370
    sentence                       shift and go to state 266
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    for_statement                  shift and go to state 19
    const_syntax                   shift and go to state 24
    define_syntax                  shift and go to state 25
    indexed_array                  shift and go to state 26
    associative_array              shift and go to state 27
    matrix_firstform               shift and go to state 28
    matrix_secondform              shift and go to state 29
    access_element_matrix          shift and go to state 30
    modify_element_matrix          shift and go to state 31
    add_element_matrix             shift and go to state 32
    object_creation                shift and go to state 33
    access_method_object           shift and go to state 34

state 352

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 371


state 353

    (169) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 169 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 354

    (178) method_body -> classStatement return_form .
    (179) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 178 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 178 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 179 (method_body -> return_form .) ]


state 355

    (180) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 372


state 356

    (181) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 181 (method_body -> classStatement method_body .)


state 357

    (186) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 186 (classStatement -> access_method_object SEMICOLON .)


state 358

    (182) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 373


state 359

    (184) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 184 (return_form -> RETURN SEMICOLON .)


state 360

    (183) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 374


state 361

    (159) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (160) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER
    (161) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values
    (162) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE

    MINUS           shift and go to state 74


state 362

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (19) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 298
    ELSE            shift and go to state 299

    elseif_statement               shift and go to state 375
    else_statement                 shift and go to state 376

state 363

    (31) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (32) number_values -> . INTEGER
    (33) number_values -> . FLOAT

    INTEGER         shift and go to state 236
    FLOAT           shift and go to state 237

    number_values                  shift and go to state 377

state 364

    (34) operator_aritmetic -> PLUS .

    INTEGER         reduce using rule 34 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 34 (operator_aritmetic -> PLUS .)


state 365

    (35) operator_aritmetic -> MINUS .

    INTEGER         reduce using rule 35 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 35 (operator_aritmetic -> MINUS .)


state 366

    (36) operator_aritmetic -> MULTIPLY .

    INTEGER         reduce using rule 36 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 36 (operator_aritmetic -> MULTIPLY .)


state 367

    (37) operator_aritmetic -> DIVIDE .

    INTEGER         reduce using rule 37 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 37 (operator_aritmetic -> DIVIDE .)


state 368

    (38) operator_aritmetic -> MODULE .

    INTEGER         reduce using rule 38 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 38 (operator_aritmetic -> MODULE .)


state 369

    (39) operator_aritmetic -> POW .

    INTEGER         reduce using rule 39 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 39 (operator_aritmetic -> POW .)


state 370

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 378


state 371

    (168) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 168 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 372

    (180) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 180 (method_body -> classStatement BREAK SEMICOLON .)


state 373

    (182) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 182 (return_form -> RETURN values SEMICOLON .)


state 374

    (183) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 183 (return_form -> RETURN access_method_object SEMICOLON .)


state 375

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 376

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 377

    (31) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 378

    (25) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 25 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 49 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 56 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 56 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 56 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 90 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 145 resolved as shift
WARNING: reduce/reduce conflict in state 49 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 49
WARNING: reduce/reduce conflict in state 52 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 52
WARNING: reduce/reduce conflict in state 166 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 166
WARNING: reduce/reduce conflict in state 354 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 354
