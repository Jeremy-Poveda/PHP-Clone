Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STATIC
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> control_structures
Rule 7     sentence -> function_declaration
Rule 8     control_structures -> if_statement
Rule 9     control_structures -> while_statement
Rule 10    control_structures -> for_statement
Rule 11    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 12    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 15    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 18    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 19    body_statement -> sentence
Rule 20    body_statement -> sentence RETURN values SEMICOLON
Rule 21    body_statement -> sentence RETURN SEMICOLON
Rule 22    body_statement -> sentence BREAK SEMICOLON
Rule 23    body_statement -> sentence body_statement
Rule 24    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 25    increment_statement -> VARIABLE INCREASE
Rule 26    increment_statement -> VARIABLE DECREMENT
Rule 27    increment_statement -> INCREASE VARIABLE
Rule 28    increment_statement -> DECREMENT VARIABLE
Rule 29    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 30    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 31    number_values -> INTEGER
Rule 32    number_values -> FLOAT
Rule 33    operator_aritmetic -> PLUS
Rule 34    operator_aritmetic -> MINUS
Rule 35    operator_aritmetic -> MULTIPLY
Rule 36    operator_aritmetic -> DIVIDE
Rule 37    operator_aritmetic -> MODULE
Rule 38    operator_aritmetic -> POW
Rule 39    conditional -> boolean_expression
Rule 40    conditional -> boolean_expression logic_operator boolean_expression
Rule 41    logic_operator -> LOGIC_AND
Rule 42    logic_operator -> LOGIC_OR
Rule 43    logic_operator -> LOGIC_XOR
Rule 44    boolean_expression -> comparation
Rule 45    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 46    boolean_expression -> logic_not_sentence
Rule 47    logic_not_sentence -> LOGIC_NOT conditional
Rule 48    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 49    comparation -> values comparator_operator values
Rule 50    comparation -> values comparator_operator expression
Rule 51    comparation -> expression comparator_operator expression
Rule 52    comparation -> VARIABLE EQUALS_EQUALS values
Rule 53    comparator_operator -> EQUALS_EQUALS
Rule 54    comparator_operator -> IDENTICAL
Rule 55    comparator_operator -> NOT_EQUALS
Rule 56    comparator_operator -> NOT_IDENTICAL
Rule 57    comparator_operator -> SMALL_THAN
Rule 58    comparator_operator -> GREATER_THAN
Rule 59    comparator_operator -> SMALL_EQUALS_TO
Rule 60    comparator_operator -> GREATER_EQUALS_TO
Rule 61    comparator_operator -> SPACECRAFT
Rule 62    comparator_operator -> NULL_FUSION
Rule 63    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 64    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 65    print_statement -> ECHO printable_values
Rule 66    print_statement -> PRINT printable_values
Rule 67    printable_values -> values
Rule 68    printable_values -> values COMMA printable_values
Rule 69    printable_values -> VARIABLE
Rule 70    printable_values -> VARIABLE COMMA printable_values
Rule 71    printable_values -> conditional
Rule 72    printable_values -> conditional COMMA printable_values
Rule 73    values -> INTEGER
Rule 74    values -> STRING
Rule 75    values -> FLOAT
Rule 76    values -> boolean
Rule 77    boolean -> TRUE
Rule 78    boolean -> FALSE
Rule 79    expression -> term
Rule 80    expression -> term PLUS expression
Rule 81    expression -> term MINUS expression
Rule 82    term -> factor
Rule 83    term -> factor MULTIPLY term
Rule 84    term -> factor DIVIDE term
Rule 85    term -> factor MODULE term
Rule 86    term -> factor POW term
Rule 87    factor -> INTEGER
Rule 88    factor -> VARIABLE
Rule 89    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 90    assignment -> variable_assignment
Rule 91    assignment -> constant_assignment
Rule 92    variable_assignment -> VARIABLE assignment_operator values
Rule 93    variable_assignment -> VARIABLE assignment_operator expression
Rule 94    variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 95    variable_assignment -> VARIABLE assignment_operator types_structure
Rule 96    variable_assignment -> VARIABLE assignment_operator input
Rule 97    variable_assignment -> VARIABLE assignment_operator special_function
Rule 98    variable_assignment -> VARIABLE INCREASE
Rule 99    variable_assignment -> VARIABLE DECREMENT
Rule 100   variable_assignment -> INCREASE VARIABLE
Rule 101   variable_assignment -> DECREMENT VARIABLE
Rule 102   assignment_operator -> EQUALS
Rule 103   assignment_operator -> PLUS_EQUALS
Rule 104   constant_assignment -> const_syntax
Rule 105   constant_assignment -> define_syntax
Rule 106   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 107   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 108   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 109   params -> real_params
Rule 110   params -> empty
Rule 111   real_params -> VARIABLE
Rule 112   real_params -> values
Rule 113   real_params -> real_params COMMA VARIABLE
Rule 114   real_params -> real_params COMMA values
Rule 115   empty -> <empty>
Rule 116   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 117   special_function -> arrow_function
Rule 118   special_function -> anonymous_functions
Rule 119   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 120   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 121   codeblock -> LEFT_BRACE RIGHT_BRACE
Rule 122   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 123   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 124   types_structure -> structure_array_principal
Rule 125   types_structure -> structure_matrix_principal
Rule 126   types_structure -> structure_object_principal
Rule 127   structure_array_principal -> indexed_array
Rule 128   structure_array_principal -> associative_array
Rule 129   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 130   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 131   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 132   structure_array -> key EQUALS GREATER_THAN values
Rule 133   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 134   key -> INTEGER
Rule 135   key -> STRING
Rule 136   values_array_indexed -> values
Rule 137   values_array_indexed -> values COMMA values_array_indexed
Rule 138   structure_matrix_principal -> matrix_firstform
Rule 139   structure_matrix_principal -> matrix_secondform
Rule 140   structure_matrix_principal -> access_element_matrix
Rule 141   structure_matrix_principal -> modify_element_matrix
Rule 142   structure_matrix_principal -> add_element_matrix
Rule 143   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 144   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 145   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 146   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 147   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 148   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 149   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 150   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 151   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 152   structure_object_principal -> object_creation
Rule 153   structure_object_principal -> access_method_object
Rule 154   object_creation -> NEW class_name SEMICOLON
Rule 155   class_name -> IDENTIFIER
Rule 156   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 129 130 131 143 147 148
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 22
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
COLON                : 
COMMA                : 68 70 72 107 113 114 133 137 146 148
COMMENT              : 
CONCATENATION        : 
CONST                : 106
CONTINUE             : 
DECLARE              : 
DECREMENT            : 26 28 99 101
DEFAULT              : 
DEFINE               : 107
DIE                  : 
DIVIDE               : 36 84
DO                   : 
ECHO                 : 63 65
ELSE                 : 18
ELSEIF               : 15 16 17
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 24 30 102 106 119 132 133 150 151
EQUALS_EQUALS        : 52 53
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 78
FEGTS                : 122
FINAL                : 
FINALLY              : 
FLOAT                : 32 75
FN                   : 119
FOR                  : 24
FOREACH              : 
FUNCTION             : 116 120
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 60
GREATER_THAN         : 58 119 132 133 156
HALT_COMPILER        : 
IDENTICAL            : 54
IDENTIFIER           : 106 108 116 155 156
IF                   : 12 13 14
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 25 27 98 100
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 29 31 73 87 134 149 149 150 150
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 11 12 13 14 15 16 17 18 24 121
LEFT_BRACKET         : 131 144 145 146 149 149 150 150 151
LEFT_PAREN           : 11 12 13 14 15 16 17 24 45 63 64 89 107 108 116 119 120 122 123 129 130 143 147 148 156
LIST                 : 
LOGIC_AND            : 41
LOGIC_NOT            : 47 48
LOGIC_OR             : 42
LOGIC_XOR            : 43
MATCH                : 
MINUS                : 34 81 156
MODULE               : 37 85
MULTIPLY             : 35 83
NAMESPACE            : 
NEW                  : 154
NOT_EQUALS           : 55
NOT_IDENTICAL        : 56
NULL_FUSION          : 62
PLUS                 : 33 80
PLUS_EQUALS          : 29 103
POW                  : 38 86
PRINT                : 64 66
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
READLINE             : 123
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 20 21
RIGHT_BRACE          : 11 12 13 14 15 16 17 18 24 121
RIGHT_BRACKET        : 131 144 145 146 149 149 150 150 151
RIGHT_PAREN          : 11 12 13 14 15 16 17 24 45 63 64 89 107 108 116 119 120 122 123 129 130 143 147 148 156
SEMICOLON            : 3 4 20 21 22 24 24 108 143 144 149 150 154 156
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 59
SMALL_THAN           : 57
SPACECRAFT           : 61
STATIC               : 
STDIN                : 122
STRING               : 74 107 123 135
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 77
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 24 24 25 26 27 28 29 30 30 48 52 69 70 88 92 93 94 95 96 97 98 99 100 101 111 113 149 150 151 156
WHILE                : 11
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 140
access_method_object : 153
add_element_matrix   : 142
anonymous_functions  : 118
arrow_function       : 117
assignment           : 4
assignment_operator  : 92 93 94 95 96 97
associative_array    : 128
body_statement       : 11 12 13 14 15 16 17 18 23 24
boolean              : 76
boolean_expression   : 39 40 40
class_name           : 154
codeblock            : 116 119 120
comparation          : 44
comparator_operator  : 24 49 50 51
conditional          : 11 12 13 14 15 16 17 45 47 71 72
const_syntax         : 104
constant_assignment  : 91
control_structures   : 6
define_syntax        : 105
else_statement       : 14 17
elseif_statement     : 13 16
empty                : 110
expression           : 50 51 51 80 81 89 93
factor               : 82 83 84 85 86
for_statement        : 10
function_declaration : 7
function_invocation  : 94
if_statement         : 8
increment_statement  : 24
indexed_array        : 127 151
input                : 96
key                  : 132 133
logic_not_sentence   : 46
logic_operator       : 40
matrix_firstform     : 138
matrix_secondform    : 139
modify_element_matrix : 141
number_values        : 24 24 30
object_creation      : 152
operator_aritmetic   : 30
params               : 108 116 119 120
print_statement      : 3
printable_values     : 63 64 65 66 68 70 72
program              : 1 0
real_params          : 109 113 114
sentence             : 1 2 19 20 21 22 23
special_function     : 97
structure_array      : 130 131 133
structure_array_principal : 124
structure_matrix_first : 143 148
structure_matrix_principal : 125
structure_matrix_second : 144 146
structure_object_principal : 126
term                 : 79 80 81 83 84 85 86
types_structure      : 5 95
values               : 20 49 49 50 52 67 68 92 106 107 112 114 132 133 136 137 145 146 147 148 150
values_array_indexed : 129 137
variable_assignment  : 90
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 2
    program                        shift and go to state 41
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 42


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 43


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> control_structures .

    ECHO            reduce using rule 6 (sentence -> control_structures .)
    PRINT           reduce using rule 6 (sentence -> control_structures .)
    FUNCTION        reduce using rule 6 (sentence -> control_structures .)
    VARIABLE        reduce using rule 6 (sentence -> control_structures .)
    INCREASE        reduce using rule 6 (sentence -> control_structures .)
    DECREMENT       reduce using rule 6 (sentence -> control_structures .)
    IF              reduce using rule 6 (sentence -> control_structures .)
    WHILE           reduce using rule 6 (sentence -> control_structures .)
    FOR             reduce using rule 6 (sentence -> control_structures .)
    CONST           reduce using rule 6 (sentence -> control_structures .)
    DEFINE          reduce using rule 6 (sentence -> control_structures .)
    ARRAY           reduce using rule 6 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> control_structures .)
    NEW             reduce using rule 6 (sentence -> control_structures .)
    $end            reduce using rule 6 (sentence -> control_structures .)
    RETURN          reduce using rule 6 (sentence -> control_structures .)
    BREAK           reduce using rule 6 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> control_structures .)


state 7

    (7) sentence -> function_declaration .

    ECHO            reduce using rule 7 (sentence -> function_declaration .)
    PRINT           reduce using rule 7 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> function_declaration .)
    INCREASE        reduce using rule 7 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> function_declaration .)
    IF              reduce using rule 7 (sentence -> function_declaration .)
    WHILE           reduce using rule 7 (sentence -> function_declaration .)
    FOR             reduce using rule 7 (sentence -> function_declaration .)
    CONST           reduce using rule 7 (sentence -> function_declaration .)
    DEFINE          reduce using rule 7 (sentence -> function_declaration .)
    ARRAY           reduce using rule 7 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> function_declaration .)
    NEW             reduce using rule 7 (sentence -> function_declaration .)
    $end            reduce using rule 7 (sentence -> function_declaration .)
    RETURN          reduce using rule 7 (sentence -> function_declaration .)
    BREAK           reduce using rule 7 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> function_declaration .)


state 8

    (63) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> ECHO . printable_values
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 44
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LOGIC_NOT       shift and go to state 59

    printable_values               shift and go to state 45
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    boolean                        shift and go to state 52
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 9

    (64) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (66) print_statement -> PRINT . printable_values
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 62
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LOGIC_NOT       shift and go to state 59

    printable_values               shift and go to state 63
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    boolean                        shift and go to state 52
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 10

    (90) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 90 (assignment -> variable_assignment .)


state 11

    (91) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 91 (assignment -> constant_assignment .)


state 12

    (124) types_structure -> structure_array_principal .

    ECHO            reduce using rule 124 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 124 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 124 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 124 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 124 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 124 (types_structure -> structure_array_principal .)
    IF              reduce using rule 124 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 124 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 124 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 124 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 124 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 124 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 124 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 124 (types_structure -> structure_array_principal .)
    $end            reduce using rule 124 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 124 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 124 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 124 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 124 (types_structure -> structure_array_principal .)


state 13

    (125) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 125 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 125 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 125 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 125 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 125 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 125 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 125 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 125 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 125 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 125 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 125 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 125 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 125 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 125 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 125 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 125 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 125 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 125 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 125 (types_structure -> structure_matrix_principal .)


state 14

    (126) types_structure -> structure_object_principal .

    ECHO            reduce using rule 126 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 126 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 126 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 126 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 126 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 126 (types_structure -> structure_object_principal .)
    IF              reduce using rule 126 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 126 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 126 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 126 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 126 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 126 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 126 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 126 (types_structure -> structure_object_principal .)
    $end            reduce using rule 126 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 126 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 126 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 126 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 126 (types_structure -> structure_object_principal .)


state 15

    (8) control_structures -> if_statement .

    ECHO            reduce using rule 8 (control_structures -> if_statement .)
    PRINT           reduce using rule 8 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 8 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 8 (control_structures -> if_statement .)
    INCREASE        reduce using rule 8 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 8 (control_structures -> if_statement .)
    IF              reduce using rule 8 (control_structures -> if_statement .)
    WHILE           reduce using rule 8 (control_structures -> if_statement .)
    FOR             reduce using rule 8 (control_structures -> if_statement .)
    CONST           reduce using rule 8 (control_structures -> if_statement .)
    DEFINE          reduce using rule 8 (control_structures -> if_statement .)
    ARRAY           reduce using rule 8 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 8 (control_structures -> if_statement .)
    NEW             reduce using rule 8 (control_structures -> if_statement .)
    $end            reduce using rule 8 (control_structures -> if_statement .)
    RETURN          reduce using rule 8 (control_structures -> if_statement .)
    BREAK           reduce using rule 8 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 8 (control_structures -> if_statement .)


state 16

    (9) control_structures -> while_statement .

    ECHO            reduce using rule 9 (control_structures -> while_statement .)
    PRINT           reduce using rule 9 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> while_statement .)
    INCREASE        reduce using rule 9 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> while_statement .)
    IF              reduce using rule 9 (control_structures -> while_statement .)
    WHILE           reduce using rule 9 (control_structures -> while_statement .)
    FOR             reduce using rule 9 (control_structures -> while_statement .)
    CONST           reduce using rule 9 (control_structures -> while_statement .)
    DEFINE          reduce using rule 9 (control_structures -> while_statement .)
    ARRAY           reduce using rule 9 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> while_statement .)
    NEW             reduce using rule 9 (control_structures -> while_statement .)
    $end            reduce using rule 9 (control_structures -> while_statement .)
    RETURN          reduce using rule 9 (control_structures -> while_statement .)
    BREAK           reduce using rule 9 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> while_statement .)


state 17

    (10) control_structures -> for_statement .

    ECHO            reduce using rule 10 (control_structures -> for_statement .)
    PRINT           reduce using rule 10 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> for_statement .)
    INCREASE        reduce using rule 10 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> for_statement .)
    IF              reduce using rule 10 (control_structures -> for_statement .)
    WHILE           reduce using rule 10 (control_structures -> for_statement .)
    FOR             reduce using rule 10 (control_structures -> for_statement .)
    CONST           reduce using rule 10 (control_structures -> for_statement .)
    DEFINE          reduce using rule 10 (control_structures -> for_statement .)
    ARRAY           reduce using rule 10 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> for_statement .)
    NEW             reduce using rule 10 (control_structures -> for_statement .)
    $end            reduce using rule 10 (control_structures -> for_statement .)
    RETURN          reduce using rule 10 (control_structures -> for_statement .)
    BREAK           reduce using rule 10 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> for_statement .)


state 18

    (116) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 64


state 19

    (92) variable_assignment -> VARIABLE . assignment_operator values
    (93) variable_assignment -> VARIABLE . assignment_operator expression
    (94) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (95) variable_assignment -> VARIABLE . assignment_operator types_structure
    (96) variable_assignment -> VARIABLE . assignment_operator input
    (97) variable_assignment -> VARIABLE . assignment_operator special_function
    (98) variable_assignment -> VARIABLE . INCREASE
    (99) variable_assignment -> VARIABLE . DECREMENT
    (149) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (156) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON
    (102) assignment_operator -> . EQUALS
    (103) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 66
    DECREMENT       shift and go to state 67
    LEFT_BRACKET    shift and go to state 68
    MINUS           shift and go to state 70
    EQUALS          shift and go to state 69
    PLUS_EQUALS     shift and go to state 71

    assignment_operator            shift and go to state 65

state 20

    (100) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 72


state 21

    (101) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 73


state 22

    (104) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 104 (constant_assignment -> const_syntax .)


state 23

    (105) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 105 (constant_assignment -> define_syntax .)


state 24

    (127) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 127 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 127 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 127 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 127 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 127 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 127 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 127 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 127 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 127 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 127 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 127 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 127 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 127 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 127 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 127 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 127 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 127 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 127 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 127 (structure_array_principal -> indexed_array .)


state 25

    (128) structure_array_principal -> associative_array .

    ECHO            reduce using rule 128 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 128 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 128 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 128 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 128 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 128 (structure_array_principal -> associative_array .)
    IF              reduce using rule 128 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 128 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 128 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 128 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 128 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 128 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 128 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 128 (structure_array_principal -> associative_array .)
    $end            reduce using rule 128 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 128 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 128 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 128 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 128 (structure_array_principal -> associative_array .)


state 26

    (138) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 138 (structure_matrix_principal -> matrix_firstform .)


state 27

    (139) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 139 (structure_matrix_principal -> matrix_secondform .)


state 28

    (140) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    INCREASE        reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    DECREMENT       reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    IF              reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    WHILE           reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    FOR             reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    SEMICOLON       reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    RETURN          reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    BREAK           reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)
    RIGHT_BRACE     reduce using rule 140 (structure_matrix_principal -> access_element_matrix .)


state 29

    (141) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    INCREASE        reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    DECREMENT       reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    IF              reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    WHILE           reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    FOR             reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    SEMICOLON       reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    RETURN          reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    BREAK           reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)
    RIGHT_BRACE     reduce using rule 141 (structure_matrix_principal -> modify_element_matrix .)


state 30

    (142) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 142 (structure_matrix_principal -> add_element_matrix .)


state 31

    (152) structure_object_principal -> object_creation .

    ECHO            reduce using rule 152 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 152 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 152 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 152 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 152 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 152 (structure_object_principal -> object_creation .)
    IF              reduce using rule 152 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 152 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 152 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 152 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 152 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 152 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 152 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 152 (structure_object_principal -> object_creation .)
    $end            reduce using rule 152 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 152 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 152 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 152 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 152 (structure_object_principal -> object_creation .)


state 32

    (153) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 153 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 153 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 153 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 153 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 153 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 153 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 153 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 153 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 153 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 153 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 153 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 153 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 153 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 153 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 153 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 153 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 153 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 153 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 153 (structure_object_principal -> access_method_object .)


state 33

    (12) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 74


state 34

    (11) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 75


state 35

    (24) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 76


state 36

    (106) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 77


state 37

    (107) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 78


state 38

    (129) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 79
    LEFT_BRACKET    shift and go to state 80


state 39

    (144) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (145) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (146) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 82

state 40

    (154) object_creation -> NEW . class_name SEMICOLON
    (155) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 84

    class_name                     shift and go to state 83

state 41

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 42

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 43

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 44

    (63) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (45) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (89) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LOGIC_NOT       shift and go to state 59

    printable_values               shift and go to state 86
    conditional                    shift and go to state 87
    expression                     shift and go to state 88
    values                         shift and go to state 46
    boolean_expression             shift and go to state 53
    term                           shift and go to state 60
    boolean                        shift and go to state 52
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    factor                         shift and go to state 61

state 45

    (65) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 65 (print_statement -> ECHO printable_values .)


state 46

    (67) printable_values -> values .
    (68) printable_values -> values . COMMA printable_values
    (49) comparation -> values . comparator_operator values
    (50) comparation -> values . comparator_operator expression
    (53) comparator_operator -> . EQUALS_EQUALS
    (54) comparator_operator -> . IDENTICAL
    (55) comparator_operator -> . NOT_EQUALS
    (56) comparator_operator -> . NOT_IDENTICAL
    (57) comparator_operator -> . SMALL_THAN
    (58) comparator_operator -> . GREATER_THAN
    (59) comparator_operator -> . SMALL_EQUALS_TO
    (60) comparator_operator -> . GREATER_EQUALS_TO
    (61) comparator_operator -> . SPACECRAFT
    (62) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 67 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 67 (printable_values -> values .)
    COMMA           shift and go to state 89
    EQUALS_EQUALS   shift and go to state 91
    IDENTICAL       shift and go to state 92
    NOT_EQUALS      shift and go to state 93
    NOT_IDENTICAL   shift and go to state 94
    SMALL_THAN      shift and go to state 95
    GREATER_THAN    shift and go to state 96
    SMALL_EQUALS_TO shift and go to state 97
    GREATER_EQUALS_TO shift and go to state 98
    SPACECRAFT      shift and go to state 99
    NULL_FUSION     shift and go to state 100

    comparator_operator            shift and go to state 90

state 47

    (69) printable_values -> VARIABLE .
    (70) printable_values -> VARIABLE . COMMA printable_values
    (52) comparation -> VARIABLE . EQUALS_EQUALS values
    (88) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 69 (printable_values -> VARIABLE .)
    SEMICOLON       reduce using rule 69 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 69 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 101
    EQUALS_EQUALS   shift and go to state 102
    MULTIPLY        reduce using rule 88 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 88 (factor -> VARIABLE .)
    MODULE          reduce using rule 88 (factor -> VARIABLE .)
    POW             reduce using rule 88 (factor -> VARIABLE .)
    PLUS            reduce using rule 88 (factor -> VARIABLE .)
    MINUS           reduce using rule 88 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 88 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 88 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 88 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 88 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 88 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 88 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 88 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 88 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 88 (factor -> VARIABLE .) ]


state 48

    (71) printable_values -> conditional .
    (72) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 71 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 71 (printable_values -> conditional .)
    COMMA           shift and go to state 103


state 49

    (73) values -> INTEGER .
    (87) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 73 (values -> INTEGER .)
    COMMA           reduce using rule 73 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 73 (values -> INTEGER .)
    IDENTICAL       reduce using rule 73 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 73 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 73 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 73 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 73 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 73 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 73 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 73 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 73 (values -> INTEGER .)
    SEMICOLON       reduce using rule 73 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 73 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 73 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 73 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 73 (values -> INTEGER .)
    MULTIPLY        reduce using rule 87 (factor -> INTEGER .)
    DIVIDE          reduce using rule 87 (factor -> INTEGER .)
    MODULE          reduce using rule 87 (factor -> INTEGER .)
    POW             reduce using rule 87 (factor -> INTEGER .)
    PLUS            reduce using rule 87 (factor -> INTEGER .)
    MINUS           reduce using rule 87 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 87 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 87 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 87 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 87 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 87 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 87 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 87 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 87 (factor -> INTEGER .) ]


state 50

    (74) values -> STRING .

    COMMA           reduce using rule 74 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 74 (values -> STRING .)
    IDENTICAL       reduce using rule 74 (values -> STRING .)
    NOT_EQUALS      reduce using rule 74 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 74 (values -> STRING .)
    SMALL_THAN      reduce using rule 74 (values -> STRING .)
    GREATER_THAN    reduce using rule 74 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 74 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 74 (values -> STRING .)
    SPACECRAFT      reduce using rule 74 (values -> STRING .)
    NULL_FUSION     reduce using rule 74 (values -> STRING .)
    SEMICOLON       reduce using rule 74 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 74 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 74 (values -> STRING .)
    LOGIC_AND       reduce using rule 74 (values -> STRING .)
    LOGIC_OR        reduce using rule 74 (values -> STRING .)
    LOGIC_XOR       reduce using rule 74 (values -> STRING .)


state 51

    (75) values -> FLOAT .

    COMMA           reduce using rule 75 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 75 (values -> FLOAT .)
    IDENTICAL       reduce using rule 75 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 75 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 75 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 75 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 75 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 75 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 75 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 75 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 75 (values -> FLOAT .)
    SEMICOLON       reduce using rule 75 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 75 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 75 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 75 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 75 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 75 (values -> FLOAT .)


state 52

    (76) values -> boolean .

    COMMA           reduce using rule 76 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 76 (values -> boolean .)
    IDENTICAL       reduce using rule 76 (values -> boolean .)
    NOT_EQUALS      reduce using rule 76 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 76 (values -> boolean .)
    SMALL_THAN      reduce using rule 76 (values -> boolean .)
    GREATER_THAN    reduce using rule 76 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 76 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 76 (values -> boolean .)
    SPACECRAFT      reduce using rule 76 (values -> boolean .)
    NULL_FUSION     reduce using rule 76 (values -> boolean .)
    SEMICOLON       reduce using rule 76 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 76 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 76 (values -> boolean .)
    LOGIC_AND       reduce using rule 76 (values -> boolean .)
    LOGIC_OR        reduce using rule 76 (values -> boolean .)
    LOGIC_XOR       reduce using rule 76 (values -> boolean .)


state 53

    (39) conditional -> boolean_expression .
    (40) conditional -> boolean_expression . logic_operator boolean_expression
    (41) logic_operator -> . LOGIC_AND
    (42) logic_operator -> . LOGIC_OR
    (43) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 39 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 39 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 39 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 105
    LOGIC_OR        shift and go to state 106
    LOGIC_XOR       shift and go to state 107

  ! LOGIC_AND       [ reduce using rule 39 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 39 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 39 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 104

state 54

    (77) boolean -> TRUE .

    COMMA           reduce using rule 77 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 77 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 77 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 77 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 77 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 77 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 77 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 77 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 77 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 77 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 77 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 77 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 77 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 77 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 77 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 77 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 77 (boolean -> TRUE .)


state 55

    (78) boolean -> FALSE .

    COMMA           reduce using rule 78 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 78 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 78 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 78 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 78 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 78 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 78 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 78 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 78 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 78 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 78 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 78 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 78 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 78 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 78 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 78 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 78 (boolean -> FALSE .)


state 56

    (44) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 44 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 44 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 44 (boolean_expression -> comparation .)
    COMMA           reduce using rule 44 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 44 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 44 (boolean_expression -> comparation .)


state 57

    (46) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 46 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 46 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 46 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 46 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 46 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 46 (boolean_expression -> logic_not_sentence .)


state 58

    (51) comparation -> expression . comparator_operator expression
    (53) comparator_operator -> . EQUALS_EQUALS
    (54) comparator_operator -> . IDENTICAL
    (55) comparator_operator -> . NOT_EQUALS
    (56) comparator_operator -> . NOT_IDENTICAL
    (57) comparator_operator -> . SMALL_THAN
    (58) comparator_operator -> . GREATER_THAN
    (59) comparator_operator -> . SMALL_EQUALS_TO
    (60) comparator_operator -> . GREATER_EQUALS_TO
    (61) comparator_operator -> . SPACECRAFT
    (62) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 91
    IDENTICAL       shift and go to state 92
    NOT_EQUALS      shift and go to state 93
    NOT_IDENTICAL   shift and go to state 94
    SMALL_THAN      shift and go to state 95
    GREATER_THAN    shift and go to state 96
    SMALL_EQUALS_TO shift and go to state 97
    GREATER_EQUALS_TO shift and go to state 98
    SPACECRAFT      shift and go to state 99
    NULL_FUSION     shift and go to state 100

    comparator_operator            shift and go to state 108

state 59

    (47) logic_not_sentence -> LOGIC_NOT . conditional
    (48) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 110
    LEFT_PAREN      shift and go to state 85
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    conditional                    shift and go to state 109
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    values                         shift and go to state 111
    expression                     shift and go to state 58
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 60

    (79) expression -> term .
    (80) expression -> term . PLUS expression
    (81) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 79 (expression -> term .)
    IDENTICAL       reduce using rule 79 (expression -> term .)
    NOT_EQUALS      reduce using rule 79 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 79 (expression -> term .)
    SMALL_THAN      reduce using rule 79 (expression -> term .)
    GREATER_THAN    reduce using rule 79 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 79 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 79 (expression -> term .)
    SPACECRAFT      reduce using rule 79 (expression -> term .)
    NULL_FUSION     reduce using rule 79 (expression -> term .)
    RIGHT_PAREN     reduce using rule 79 (expression -> term .)
    SEMICOLON       reduce using rule 79 (expression -> term .)
    LOGIC_AND       reduce using rule 79 (expression -> term .)
    LOGIC_OR        reduce using rule 79 (expression -> term .)
    LOGIC_XOR       reduce using rule 79 (expression -> term .)
    COMMA           reduce using rule 79 (expression -> term .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113


state 61

    (82) term -> factor .
    (83) term -> factor . MULTIPLY term
    (84) term -> factor . DIVIDE term
    (85) term -> factor . MODULE term
    (86) term -> factor . POW term

    PLUS            reduce using rule 82 (term -> factor .)
    MINUS           reduce using rule 82 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 82 (term -> factor .)
    IDENTICAL       reduce using rule 82 (term -> factor .)
    NOT_EQUALS      reduce using rule 82 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 82 (term -> factor .)
    SMALL_THAN      reduce using rule 82 (term -> factor .)
    GREATER_THAN    reduce using rule 82 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 82 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 82 (term -> factor .)
    SPACECRAFT      reduce using rule 82 (term -> factor .)
    NULL_FUSION     reduce using rule 82 (term -> factor .)
    RIGHT_PAREN     reduce using rule 82 (term -> factor .)
    SEMICOLON       reduce using rule 82 (term -> factor .)
    LOGIC_AND       reduce using rule 82 (term -> factor .)
    LOGIC_OR        reduce using rule 82 (term -> factor .)
    LOGIC_XOR       reduce using rule 82 (term -> factor .)
    COMMA           reduce using rule 82 (term -> factor .)
    MULTIPLY        shift and go to state 114
    DIVIDE          shift and go to state 115
    MODULE          shift and go to state 116
    POW             shift and go to state 117


state 62

    (64) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (45) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (89) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    LEFT_PAREN      shift and go to state 85
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LOGIC_NOT       shift and go to state 59

    printable_values               shift and go to state 118
    conditional                    shift and go to state 87
    expression                     shift and go to state 88
    values                         shift and go to state 46
    boolean_expression             shift and go to state 53
    term                           shift and go to state 60
    boolean                        shift and go to state 52
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    factor                         shift and go to state 61

state 63

    (66) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 66 (print_statement -> PRINT printable_values .)


state 64

    (116) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 119


state 65

    (92) variable_assignment -> VARIABLE assignment_operator . values
    (93) variable_assignment -> VARIABLE assignment_operator . expression
    (94) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (95) variable_assignment -> VARIABLE assignment_operator . types_structure
    (96) variable_assignment -> VARIABLE assignment_operator . input
    (97) variable_assignment -> VARIABLE assignment_operator . special_function
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (108) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (122) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (123) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (117) special_function -> . arrow_function
    (118) special_function -> . anonymous_functions
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (119) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (120) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    IDENTIFIER      shift and go to state 127
    FEGTS           shift and go to state 129
    READLINE        shift and go to state 130
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    FN              shift and go to state 133
    FUNCTION        shift and go to state 134
    VARIABLE        shift and go to state 120
    LEFT_PAREN      shift and go to state 128
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    values                         shift and go to state 121
    expression                     shift and go to state 122
    function_invocation            shift and go to state 123
    types_structure                shift and go to state 124
    input                          shift and go to state 125
    special_function               shift and go to state 126
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    arrow_function                 shift and go to state 131
    anonymous_functions            shift and go to state 132
    factor                         shift and go to state 61
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 66

    (98) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 98 (variable_assignment -> VARIABLE INCREASE .)


state 67

    (99) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 99 (variable_assignment -> VARIABLE DECREMENT .)


state 68

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 135
    RIGHT_BRACKET   shift and go to state 136


state 69

    (102) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 102 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 102 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 102 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 102 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 102 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 102 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 102 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 102 (assignment_operator -> EQUALS .)
    FN              reduce using rule 102 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 102 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 102 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 102 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 102 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 102 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 102 (assignment_operator -> EQUALS .)


state 70

    (156) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 137


state 71

    (103) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 103 (assignment_operator -> PLUS_EQUALS .)


state 72

    (100) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 100 (variable_assignment -> INCREASE VARIABLE .)


state 73

    (101) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 101 (variable_assignment -> DECREMENT VARIABLE .)


state 74

    (12) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 85
    VARIABLE        shift and go to state 139
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    conditional                    shift and go to state 138
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    values                         shift and go to state 111
    expression                     shift and go to state 58
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 75

    (11) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 85
    VARIABLE        shift and go to state 139
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    conditional                    shift and go to state 140
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    values                         shift and go to state 111
    expression                     shift and go to state 58
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 76

    (24) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 141


state 77

    (106) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 142


state 78

    (107) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 143


state 79

    (129) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (130) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (143) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (136) values_array_indexed -> . values
    (137) values_array_indexed -> . values COMMA values_array_indexed
    (132) structure_array -> . key EQUALS GREATER_THAN values
    (133) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (147) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (148) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (134) key -> . INTEGER
    (135) key -> . STRING
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    ARRAY           shift and go to state 144
    INTEGER         shift and go to state 150
    STRING          shift and go to state 151
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values_array_indexed           shift and go to state 145
    structure_array                shift and go to state 146
    structure_matrix_first         shift and go to state 147
    values                         shift and go to state 148
    key                            shift and go to state 149
    boolean                        shift and go to state 52

state 80

    (131) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (132) structure_array -> . key EQUALS GREATER_THAN values
    (133) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (134) key -> . INTEGER
    (135) key -> . STRING

    INTEGER         shift and go to state 153
    STRING          shift and go to state 154

    structure_array                shift and go to state 152
    key                            shift and go to state 149

state 81

    (145) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (146) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 155
    boolean                        shift and go to state 52

state 82

    (144) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 157


state 83

    (154) object_creation -> NEW class_name . SEMICOLON

    SEMICOLON       shift and go to state 158


state 84

    (155) class_name -> IDENTIFIER .

    SEMICOLON       reduce using rule 155 (class_name -> IDENTIFIER .)


state 85

    (45) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (89) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 85
    VARIABLE        shift and go to state 139
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 160
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    conditional                    shift and go to state 159
    expression                     shift and go to state 88
    boolean_expression             shift and go to state 53
    term                           shift and go to state 60
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    factor                         shift and go to state 61
    values                         shift and go to state 111
    boolean                        shift and go to state 52

state 86

    (63) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 161


state 87

    (45) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (71) printable_values -> conditional .
    (72) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 162
    COMMA           shift and go to state 103

  ! RIGHT_PAREN     [ reduce using rule 71 (printable_values -> conditional .) ]


state 88

    (89) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (51) comparation -> expression . comparator_operator expression
    (53) comparator_operator -> . EQUALS_EQUALS
    (54) comparator_operator -> . IDENTICAL
    (55) comparator_operator -> . NOT_EQUALS
    (56) comparator_operator -> . NOT_IDENTICAL
    (57) comparator_operator -> . SMALL_THAN
    (58) comparator_operator -> . GREATER_THAN
    (59) comparator_operator -> . SMALL_EQUALS_TO
    (60) comparator_operator -> . GREATER_EQUALS_TO
    (61) comparator_operator -> . SPACECRAFT
    (62) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 163
    EQUALS_EQUALS   shift and go to state 91
    IDENTICAL       shift and go to state 92
    NOT_EQUALS      shift and go to state 93
    NOT_IDENTICAL   shift and go to state 94
    SMALL_THAN      shift and go to state 95
    GREATER_THAN    shift and go to state 96
    SMALL_EQUALS_TO shift and go to state 97
    GREATER_EQUALS_TO shift and go to state 98
    SPACECRAFT      shift and go to state 99
    NULL_FUSION     shift and go to state 100

    comparator_operator            shift and go to state 108

state 89

    (68) printable_values -> values COMMA . printable_values
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LEFT_PAREN      shift and go to state 85
    LOGIC_NOT       shift and go to state 59

    values                         shift and go to state 46
    printable_values               shift and go to state 164
    conditional                    shift and go to state 48
    boolean                        shift and go to state 52
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 90

    (49) comparation -> values comparator_operator . values
    (50) comparation -> values comparator_operator . expression
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    values                         shift and go to state 165
    expression                     shift and go to state 166
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 91

    (53) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 53 (comparator_operator -> EQUALS_EQUALS .)


state 92

    (54) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 54 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 54 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 54 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 54 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 54 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 54 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 54 (comparator_operator -> IDENTICAL .)


state 93

    (55) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 55 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 55 (comparator_operator -> NOT_EQUALS .)


state 94

    (56) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 56 (comparator_operator -> NOT_IDENTICAL .)


state 95

    (57) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 57 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 57 (comparator_operator -> SMALL_THAN .)


state 96

    (58) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 58 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 58 (comparator_operator -> GREATER_THAN .)


state 97

    (59) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 59 (comparator_operator -> SMALL_EQUALS_TO .)


state 98

    (60) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 60 (comparator_operator -> GREATER_EQUALS_TO .)


state 99

    (61) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 61 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 61 (comparator_operator -> SPACECRAFT .)


state 100

    (62) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 62 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 62 (comparator_operator -> NULL_FUSION .)


state 101

    (70) printable_values -> VARIABLE COMMA . printable_values
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LEFT_PAREN      shift and go to state 85
    LOGIC_NOT       shift and go to state 59

    printable_values               shift and go to state 168
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    boolean                        shift and go to state 52
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 102

    (52) comparation -> VARIABLE EQUALS_EQUALS . values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 169
    boolean                        shift and go to state 52

state 103

    (72) printable_values -> conditional COMMA . printable_values
    (67) printable_values -> . values
    (68) printable_values -> . values COMMA printable_values
    (69) printable_values -> . VARIABLE
    (70) printable_values -> . VARIABLE COMMA printable_values
    (71) printable_values -> . conditional
    (72) printable_values -> . conditional COMMA printable_values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    LEFT_PAREN      shift and go to state 85
    LOGIC_NOT       shift and go to state 59

    conditional                    shift and go to state 48
    printable_values               shift and go to state 170
    values                         shift and go to state 46
    boolean                        shift and go to state 52
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 104

    (40) conditional -> boolean_expression logic_operator . boolean_expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 85
    VARIABLE        shift and go to state 139
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    boolean_expression             shift and go to state 171
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    values                         shift and go to state 111
    expression                     shift and go to state 58
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 105

    (41) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 41 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 41 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 41 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 41 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 41 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 41 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 41 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 41 (logic_operator -> LOGIC_AND .)


state 106

    (42) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 42 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 42 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 42 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 42 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 42 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 42 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 42 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 42 (logic_operator -> LOGIC_OR .)


state 107

    (43) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 43 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 43 (logic_operator -> LOGIC_XOR .)


state 108

    (51) comparation -> expression comparator_operator . expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    expression                     shift and go to state 172
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 109

    (47) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 47 (logic_not_sentence -> LOGIC_NOT conditional .)


state 110

    (48) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (52) comparation -> VARIABLE . EQUALS_EQUALS values
    (88) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 48 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 102
    MULTIPLY        reduce using rule 88 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 88 (factor -> VARIABLE .)
    MODULE          reduce using rule 88 (factor -> VARIABLE .)
    POW             reduce using rule 88 (factor -> VARIABLE .)
    PLUS            reduce using rule 88 (factor -> VARIABLE .)
    MINUS           reduce using rule 88 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 88 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 88 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 88 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 88 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 88 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 88 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 88 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 88 (factor -> VARIABLE .) ]


state 111

    (49) comparation -> values . comparator_operator values
    (50) comparation -> values . comparator_operator expression
    (53) comparator_operator -> . EQUALS_EQUALS
    (54) comparator_operator -> . IDENTICAL
    (55) comparator_operator -> . NOT_EQUALS
    (56) comparator_operator -> . NOT_IDENTICAL
    (57) comparator_operator -> . SMALL_THAN
    (58) comparator_operator -> . GREATER_THAN
    (59) comparator_operator -> . SMALL_EQUALS_TO
    (60) comparator_operator -> . GREATER_EQUALS_TO
    (61) comparator_operator -> . SPACECRAFT
    (62) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 91
    IDENTICAL       shift and go to state 92
    NOT_EQUALS      shift and go to state 93
    NOT_IDENTICAL   shift and go to state 94
    SMALL_THAN      shift and go to state 95
    GREATER_THAN    shift and go to state 96
    SMALL_EQUALS_TO shift and go to state 97
    GREATER_EQUALS_TO shift and go to state 98
    SPACECRAFT      shift and go to state 99
    NULL_FUSION     shift and go to state 100

    comparator_operator            shift and go to state 90

state 112

    (80) expression -> term PLUS . expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    term                           shift and go to state 60
    expression                     shift and go to state 174
    factor                         shift and go to state 61

state 113

    (81) expression -> term MINUS . expression
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    term                           shift and go to state 60
    expression                     shift and go to state 175
    factor                         shift and go to state 61

state 114

    (83) term -> factor MULTIPLY . term
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 176

state 115

    (84) term -> factor DIVIDE . term
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 177

state 116

    (85) term -> factor MODULE . term
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 178

state 117

    (86) term -> factor POW . term
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 179

state 118

    (64) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 180


state 119

    (116) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (109) params -> . real_params
    (110) params -> . empty
    (111) real_params -> . VARIABLE
    (112) real_params -> . values
    (113) real_params -> . real_params COMMA VARIABLE
    (114) real_params -> . real_params COMMA values
    (115) empty -> .
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    params                         shift and go to state 181
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 52

state 120

    (88) factor -> VARIABLE .
    (149) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (156) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 88 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 88 (factor -> VARIABLE .)
    MODULE          reduce using rule 88 (factor -> VARIABLE .)
    POW             reduce using rule 88 (factor -> VARIABLE .)
    PLUS            reduce using rule 88 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 88 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 68
    MINUS           shift and go to state 70

  ! MINUS           [ reduce using rule 88 (factor -> VARIABLE .) ]


state 121

    (92) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 92 (variable_assignment -> VARIABLE assignment_operator values .)


state 122

    (93) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 93 (variable_assignment -> VARIABLE assignment_operator expression .)


state 123

    (94) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 94 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 124

    (95) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 95 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 125

    (96) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 96 (variable_assignment -> VARIABLE assignment_operator input .)


state 126

    (97) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 97 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 127

    (108) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 186


state 128

    (89) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 173
    VARIABLE        shift and go to state 167
    LEFT_PAREN      shift and go to state 128

    expression                     shift and go to state 187
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 129

    (122) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 188


state 130

    (123) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 189


state 131

    (117) special_function -> arrow_function .

    SEMICOLON       reduce using rule 117 (special_function -> arrow_function .)


state 132

    (118) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 118 (special_function -> anonymous_functions .)


state 133

    (119) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 190


state 134

    (120) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 191


state 135

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 192


state 136

    (151) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 193


state 137

    (156) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 194


state 138

    (12) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 195


state 139

    (52) comparation -> VARIABLE . EQUALS_EQUALS values
    (88) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 102
    MULTIPLY        reduce using rule 88 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 88 (factor -> VARIABLE .)
    MODULE          reduce using rule 88 (factor -> VARIABLE .)
    POW             reduce using rule 88 (factor -> VARIABLE .)
    PLUS            reduce using rule 88 (factor -> VARIABLE .)
    MINUS           reduce using rule 88 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 88 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 88 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 88 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 88 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 88 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 88 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 88 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 88 (factor -> VARIABLE .) ]


state 140

    (11) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 196


state 141

    (24) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 197


state 142

    (106) const_syntax -> CONST IDENTIFIER EQUALS . values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 198
    boolean                        shift and go to state 52

state 143

    (107) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 199


state 144

    (147) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (148) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 200


state 145

    (129) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 201


state 146

    (130) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 202


state 147

    (143) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 203


state 148

    (136) values_array_indexed -> values .
    (137) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 136 (values_array_indexed -> values .)
    COMMA           shift and go to state 204


state 149

    (132) structure_array -> key . EQUALS GREATER_THAN values
    (133) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 205


state 150

    (73) values -> INTEGER .
    (134) key -> INTEGER .

    COMMA           reduce using rule 73 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 73 (values -> INTEGER .)
    EQUALS          reduce using rule 134 (key -> INTEGER .)


state 151

    (74) values -> STRING .
    (135) key -> STRING .

    COMMA           reduce using rule 74 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 74 (values -> STRING .)
    EQUALS          reduce using rule 135 (key -> STRING .)


state 152

    (131) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 206


state 153

    (134) key -> INTEGER .

    EQUALS          reduce using rule 134 (key -> INTEGER .)


state 154

    (135) key -> STRING .

    EQUALS          reduce using rule 135 (key -> STRING .)


state 155

    (145) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (146) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 207


state 156

    (73) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 73 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 73 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 73 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 73 (values -> INTEGER .)
    COMMA           reduce using rule 73 (values -> INTEGER .)
    SEMICOLON       reduce using rule 73 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 73 (values -> INTEGER .)


state 157

    (144) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 208


state 158

    (154) object_creation -> NEW class_name SEMICOLON .

    ECHO            reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    PRINT           reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    FUNCTION        reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    VARIABLE        reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    INCREASE        reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    DECREMENT       reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    IF              reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    WHILE           reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    FOR             reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    CONST           reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    DEFINE          reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    ARRAY           reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    LEFT_BRACKET    reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    NEW             reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    $end            reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    SEMICOLON       reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    RETURN          reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    BREAK           reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)
    RIGHT_BRACE     reduce using rule 154 (object_creation -> NEW class_name SEMICOLON .)


state 159

    (45) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 162


state 160

    (87) factor -> INTEGER .
    (73) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 73 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 73 (values -> INTEGER .)
    MULTIPLY        reduce using rule 87 (factor -> INTEGER .)
    DIVIDE          reduce using rule 87 (factor -> INTEGER .)
    MODULE          reduce using rule 87 (factor -> INTEGER .)
    POW             reduce using rule 87 (factor -> INTEGER .)
    PLUS            reduce using rule 87 (factor -> INTEGER .)
    MINUS           reduce using rule 87 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 87 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 73 (values -> INTEGER .)
    IDENTICAL       reduce using rule 73 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 73 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 73 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 73 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 73 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 73 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 73 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 73 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 73 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 87 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 87 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 87 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 87 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 87 (factor -> INTEGER .) ]


state 161

    (63) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 63 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 162

    (45) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 45 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 163

    (89) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 89 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 164

    (68) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 68 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 68 (printable_values -> values COMMA printable_values .)


state 165

    (49) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 49 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 49 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 49 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 49 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 49 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 49 (comparation -> values comparator_operator values .)


state 166

    (50) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 50 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 50 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 50 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 50 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 50 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 50 (comparation -> values comparator_operator expression .)


state 167

    (88) factor -> VARIABLE .

    MULTIPLY        reduce using rule 88 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 88 (factor -> VARIABLE .)
    MODULE          reduce using rule 88 (factor -> VARIABLE .)
    POW             reduce using rule 88 (factor -> VARIABLE .)
    PLUS            reduce using rule 88 (factor -> VARIABLE .)
    MINUS           reduce using rule 88 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 88 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 88 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 88 (factor -> VARIABLE .)
    COMMA           reduce using rule 88 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 88 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 88 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 88 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 88 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 88 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 88 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 88 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 88 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 88 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 88 (factor -> VARIABLE .)


state 168

    (70) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 70 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 70 (printable_values -> VARIABLE COMMA printable_values .)


state 169

    (52) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 52 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 170

    (72) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 72 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 72 (printable_values -> conditional COMMA printable_values .)


state 171

    (40) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 40 (conditional -> boolean_expression logic_operator boolean_expression .)


state 172

    (51) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 51 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 51 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 51 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 51 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 51 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 51 (comparation -> expression comparator_operator expression .)


state 173

    (87) factor -> INTEGER .

    MULTIPLY        reduce using rule 87 (factor -> INTEGER .)
    DIVIDE          reduce using rule 87 (factor -> INTEGER .)
    MODULE          reduce using rule 87 (factor -> INTEGER .)
    POW             reduce using rule 87 (factor -> INTEGER .)
    PLUS            reduce using rule 87 (factor -> INTEGER .)
    MINUS           reduce using rule 87 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 87 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 87 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 87 (factor -> INTEGER .)
    COMMA           reduce using rule 87 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 87 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 87 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 87 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 87 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 87 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 87 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 87 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 87 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 87 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 87 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 87 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 87 (factor -> INTEGER .)


state 174

    (80) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 80 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 80 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 80 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 80 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 80 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 80 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 80 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 80 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 80 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 80 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 80 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 80 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 80 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 80 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 80 (expression -> term PLUS expression .)
    COMMA           reduce using rule 80 (expression -> term PLUS expression .)


state 175

    (81) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 81 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 81 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 81 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 81 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 81 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 81 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 81 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 81 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 81 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 81 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 81 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 81 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 81 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 81 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 81 (expression -> term MINUS expression .)
    COMMA           reduce using rule 81 (expression -> term MINUS expression .)


state 176

    (83) term -> factor MULTIPLY term .

    PLUS            reduce using rule 83 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 83 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 83 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 83 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 83 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 83 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 83 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 83 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 83 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 83 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 83 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 83 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 83 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 83 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 83 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 83 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 83 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 83 (term -> factor MULTIPLY term .)


state 177

    (84) term -> factor DIVIDE term .

    PLUS            reduce using rule 84 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 84 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 84 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 84 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 84 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 84 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 84 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 84 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 84 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 84 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 84 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 84 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 84 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 84 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 84 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 84 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 84 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 84 (term -> factor DIVIDE term .)


state 178

    (85) term -> factor MODULE term .

    PLUS            reduce using rule 85 (term -> factor MODULE term .)
    MINUS           reduce using rule 85 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 85 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 85 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 85 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 85 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 85 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 85 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 85 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 85 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 85 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 85 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 85 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 85 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 85 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 85 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 85 (term -> factor MODULE term .)
    COMMA           reduce using rule 85 (term -> factor MODULE term .)


state 179

    (86) term -> factor POW term .

    PLUS            reduce using rule 86 (term -> factor POW term .)
    MINUS           reduce using rule 86 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 86 (term -> factor POW term .)
    IDENTICAL       reduce using rule 86 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 86 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 86 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 86 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 86 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 86 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 86 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 86 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 86 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 86 (term -> factor POW term .)
    SEMICOLON       reduce using rule 86 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 86 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 86 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 86 (term -> factor POW term .)
    COMMA           reduce using rule 86 (term -> factor POW term .)


state 180

    (64) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 64 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 181

    (116) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 209


state 182

    (109) params -> real_params .
    (113) real_params -> real_params . COMMA VARIABLE
    (114) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 109 (params -> real_params .)
    COMMA           shift and go to state 210


state 183

    (110) params -> empty .

    RIGHT_PAREN     reduce using rule 110 (params -> empty .)


state 184

    (111) real_params -> VARIABLE .

    COMMA           reduce using rule 111 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 111 (real_params -> VARIABLE .)


state 185

    (112) real_params -> values .

    COMMA           reduce using rule 112 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 112 (real_params -> values .)


state 186

    (108) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (109) params -> . real_params
    (110) params -> . empty
    (111) real_params -> . VARIABLE
    (112) real_params -> . values
    (113) real_params -> . real_params COMMA VARIABLE
    (114) real_params -> . real_params COMMA values
    (115) empty -> .
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    params                         shift and go to state 211
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 52

state 187

    (89) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 163


state 188

    (122) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 212


state 189

    (123) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 213


state 190

    (119) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (109) params -> . real_params
    (110) params -> . empty
    (111) real_params -> . VARIABLE
    (112) real_params -> . values
    (113) real_params -> . real_params COMMA VARIABLE
    (114) real_params -> . real_params COMMA values
    (115) empty -> .
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    params                         shift and go to state 214
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 52

state 191

    (120) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (109) params -> . real_params
    (110) params -> . empty
    (111) real_params -> . VARIABLE
    (112) real_params -> . values
    (113) real_params -> . real_params COMMA VARIABLE
    (114) real_params -> . real_params COMMA values
    (115) empty -> .
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    RIGHT_PAREN     reduce using rule 115 (empty -> .)
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    params                         shift and go to state 215
    real_params                    shift and go to state 182
    empty                          shift and go to state 183
    values                         shift and go to state 185
    boolean                        shift and go to state 52

state 192

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 216


state 193

    (151) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 218

    indexed_array                  shift and go to state 217

state 194

    (156) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . LEFT_PAREN RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 219


state 195

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 220


state 196

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 221


state 197

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (31) number_values -> . INTEGER
    (32) number_values -> . FLOAT

    INTEGER         shift and go to state 223
    FLOAT           shift and go to state 224

    number_values                  shift and go to state 222

state 198

    (106) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 106 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 199

    (107) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 225
    boolean                        shift and go to state 52

state 200

    (147) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (148) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 226
    boolean                        shift and go to state 52

state 201

    (129) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 129 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 202

    (130) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 130 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 203

    (143) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 227


state 204

    (137) values_array_indexed -> values COMMA . values_array_indexed
    (136) values_array_indexed -> . values
    (137) values_array_indexed -> . values COMMA values_array_indexed
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 148
    values_array_indexed           shift and go to state 228
    boolean                        shift and go to state 52

state 205

    (132) structure_array -> key EQUALS . GREATER_THAN values
    (133) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 229


state 206

    (131) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 131 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 207

    (145) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (146) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 145 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 230


state 208

    (144) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 144 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 209

    (116) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (121) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 232

    codeblock                      shift and go to state 231

state 210

    (113) real_params -> real_params COMMA . VARIABLE
    (114) real_params -> real_params COMMA . values
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    VARIABLE        shift and go to state 233
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 234
    boolean                        shift and go to state 52

state 211

    (108) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 235


state 212

    (122) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 236


state 213

    (123) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 237


state 214

    (119) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 238


state 215

    (120) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 239


state 216

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 240


state 217

    (151) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 151 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 218

    (129) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 241


state 219

    (156) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 242


state 220

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 243
    sentence                       shift and go to state 244
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 221

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 245
    sentence                       shift and go to state 244
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 222

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values . SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 246


state 223

    (31) number_values -> INTEGER .

    SEMICOLON       reduce using rule 31 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 31 (number_values -> INTEGER .)


state 224

    (32) number_values -> FLOAT .

    SEMICOLON       reduce using rule 32 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 32 (number_values -> FLOAT .)


state 225

    (107) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 247


state 226

    (147) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (148) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 248


state 227

    (143) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 143 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 228

    (137) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 137 (values_array_indexed -> values COMMA values_array_indexed .)


state 229

    (132) structure_array -> key EQUALS GREATER_THAN . values
    (133) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 249
    boolean                        shift and go to state 52

state 230

    (146) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (145) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (146) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 250

state 231

    (116) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 116 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 232

    (121) codeblock -> LEFT_BRACE . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 251


state 233

    (113) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 113 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 113 (real_params -> real_params COMMA VARIABLE .)


state 234

    (114) real_params -> real_params COMMA values .

    COMMA           reduce using rule 114 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 114 (real_params -> real_params COMMA values .)


state 235

    (108) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 252


state 236

    (122) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 122 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 237

    (123) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 123 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 238

    (119) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 253


state 239

    (120) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (121) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 232

    codeblock                      shift and go to state 254

state 240

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 255


state 241

    (129) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (136) values_array_indexed -> . values
    (137) values_array_indexed -> . values COMMA values_array_indexed
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values_array_indexed           shift and go to state 145
    values                         shift and go to state 148
    boolean                        shift and go to state 52

state 242

    (156) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 256


state 243

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 257


state 244

    (19) body_statement -> sentence .
    (20) body_statement -> sentence . RETURN values SEMICOLON
    (21) body_statement -> sentence . RETURN SEMICOLON
    (22) body_statement -> sentence . BREAK SEMICOLON
    (23) body_statement -> sentence . body_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    RIGHT_BRACE     reduce using rule 19 (body_statement -> sentence .)
    RETURN          shift and go to state 258
    BREAK           shift and go to state 259
    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 244
    body_statement                 shift and go to state 260
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 245

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 261


state 246

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON . VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 262


state 247

    (107) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 107 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 248

    (147) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (148) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 147 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 263


state 249

    (132) structure_array -> key EQUALS GREATER_THAN values .
    (133) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 132 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 132 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 264


state 250

    (146) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 146 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 251

    (121) codeblock -> LEFT_BRACE RIGHT_BRACE .

    ECHO            reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    VARIABLE        reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    INCREASE        reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DECREMENT       reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    FOR             reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    CONST           reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DEFINE          reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    ARRAY           reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    NEW             reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    $end            reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 121 (codeblock -> LEFT_BRACE RIGHT_BRACE .)


state 252

    (108) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 108 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 253

    (119) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 265


state 254

    (120) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 120 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 255

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 266
    EQUALS          shift and go to state 267


state 256

    (156) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 156 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)


state 257

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 270
    ELSE            shift and go to state 271

    elseif_statement               shift and go to state 268
    else_statement                 shift and go to state 269

state 258

    (20) body_statement -> sentence RETURN . values SEMICOLON
    (21) body_statement -> sentence RETURN . SEMICOLON
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    SEMICOLON       shift and go to state 273
    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 272
    boolean                        shift and go to state 52

state 259

    (22) body_statement -> sentence BREAK . SEMICOLON

    SEMICOLON       shift and go to state 274


state 260

    (23) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence body_statement .)


state 261

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 262

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE . comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (53) comparator_operator -> . EQUALS_EQUALS
    (54) comparator_operator -> . IDENTICAL
    (55) comparator_operator -> . NOT_EQUALS
    (56) comparator_operator -> . NOT_IDENTICAL
    (57) comparator_operator -> . SMALL_THAN
    (58) comparator_operator -> . GREATER_THAN
    (59) comparator_operator -> . SMALL_EQUALS_TO
    (60) comparator_operator -> . GREATER_EQUALS_TO
    (61) comparator_operator -> . SPACECRAFT
    (62) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 91
    IDENTICAL       shift and go to state 92
    NOT_EQUALS      shift and go to state 93
    NOT_IDENTICAL   shift and go to state 94
    SMALL_THAN      shift and go to state 95
    GREATER_THAN    shift and go to state 96
    SMALL_EQUALS_TO shift and go to state 97
    GREATER_EQUALS_TO shift and go to state 98
    SPACECRAFT      shift and go to state 99
    NULL_FUSION     shift and go to state 100

    comparator_operator            shift and go to state 275

state 263

    (148) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (147) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (148) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 144

    structure_matrix_first         shift and go to state 276

state 264

    (133) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (132) structure_array -> . key EQUALS GREATER_THAN values
    (133) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (134) key -> . INTEGER
    (135) key -> . STRING

    INTEGER         shift and go to state 153
    STRING          shift and go to state 154

    key                            shift and go to state 149
    structure_array                shift and go to state 277

state 265

    (119) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (121) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 232

    codeblock                      shift and go to state 278

state 266

    (149) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 149 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 267

    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE

    INTEGER         shift and go to state 156
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    values                         shift and go to state 279
    boolean                        shift and go to state 52

state 268

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 269

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 270

    (15) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 280


state 271

    (18) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 281


state 272

    (20) body_statement -> sentence RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 282


state 273

    (21) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence RETURN SEMICOLON .)


state 274

    (22) body_statement -> sentence BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence BREAK SEMICOLON .)


state 275

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator . number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (31) number_values -> . INTEGER
    (32) number_values -> . FLOAT

    INTEGER         shift and go to state 223
    FLOAT           shift and go to state 224

    number_values                  shift and go to state 283

state 276

    (148) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 148 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 277

    (133) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 133 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 133 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 278

    (119) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 119 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 279

    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 284


state 280

    (15) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (39) conditional -> . boolean_expression
    (40) conditional -> . boolean_expression logic_operator boolean_expression
    (44) boolean_expression -> . comparation
    (45) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (46) boolean_expression -> . logic_not_sentence
    (49) comparation -> . values comparator_operator values
    (50) comparation -> . values comparator_operator expression
    (51) comparation -> . expression comparator_operator expression
    (52) comparation -> . VARIABLE EQUALS_EQUALS values
    (47) logic_not_sentence -> . LOGIC_NOT conditional
    (48) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (73) values -> . INTEGER
    (74) values -> . STRING
    (75) values -> . FLOAT
    (76) values -> . boolean
    (79) expression -> . term
    (80) expression -> . term PLUS expression
    (81) expression -> . term MINUS expression
    (77) boolean -> . TRUE
    (78) boolean -> . FALSE
    (82) term -> . factor
    (83) term -> . factor MULTIPLY term
    (84) term -> . factor DIVIDE term
    (85) term -> . factor MODULE term
    (86) term -> . factor POW term
    (87) factor -> . INTEGER
    (88) factor -> . VARIABLE
    (89) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 85
    VARIABLE        shift and go to state 139
    LOGIC_NOT       shift and go to state 59
    INTEGER         shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    conditional                    shift and go to state 285
    boolean_expression             shift and go to state 53
    comparation                    shift and go to state 56
    logic_not_sentence             shift and go to state 57
    values                         shift and go to state 111
    expression                     shift and go to state 58
    boolean                        shift and go to state 52
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 281

    (18) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 286
    sentence                       shift and go to state 244
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 282

    (20) body_statement -> sentence RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence RETURN values SEMICOLON .)


state 283

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 287


state 284

    (150) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    IF              reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    WHILE           reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FOR             reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RETURN          reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    BREAK           reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 150 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)


state 285

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 288


state 286

    (18) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 289


state 287

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (25) increment_statement -> . VARIABLE INCREASE
    (26) increment_statement -> . VARIABLE DECREMENT
    (27) increment_statement -> . INCREASE VARIABLE
    (28) increment_statement -> . DECREMENT VARIABLE
    (29) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (30) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 290
    INCREASE        shift and go to state 292
    DECREMENT       shift and go to state 293

    increment_statement            shift and go to state 291

state 288

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 294


state 289

    (18) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 290

    (25) increment_statement -> VARIABLE . INCREASE
    (26) increment_statement -> VARIABLE . DECREMENT
    (29) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (30) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 295
    DECREMENT       shift and go to state 296
    PLUS_EQUALS     shift and go to state 297
    EQUALS          shift and go to state 298


state 291

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 299


state 292

    (27) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 300


state 293

    (28) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 301


state 294

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 302
    sentence                       shift and go to state 244
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 295

    (25) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 25 (increment_statement -> VARIABLE INCREASE .)


state 296

    (26) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 26 (increment_statement -> VARIABLE DECREMENT .)


state 297

    (29) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 303


state 298

    (30) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 304


state 299

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 305


state 300

    (27) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 27 (increment_statement -> INCREASE VARIABLE .)


state 301

    (28) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 28 (increment_statement -> DECREMENT VARIABLE .)


state 302

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 306


state 303

    (29) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 304

    (30) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (33) operator_aritmetic -> . PLUS
    (34) operator_aritmetic -> . MINUS
    (35) operator_aritmetic -> . MULTIPLY
    (36) operator_aritmetic -> . DIVIDE
    (37) operator_aritmetic -> . MODULE
    (38) operator_aritmetic -> . POW

    PLUS            shift and go to state 308
    MINUS           shift and go to state 309
    MULTIPLY        shift and go to state 310
    DIVIDE          shift and go to state 311
    MODULE          shift and go to state 312
    POW             shift and go to state 313

    operator_aritmetic             shift and go to state 307

state 305

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (63) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (64) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (65) print_statement -> . ECHO printable_values
    (66) print_statement -> . PRINT printable_values
    (90) assignment -> . variable_assignment
    (91) assignment -> . constant_assignment
    (124) types_structure -> . structure_array_principal
    (125) types_structure -> . structure_matrix_principal
    (126) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (10) control_structures -> . for_statement
    (116) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (92) variable_assignment -> . VARIABLE assignment_operator values
    (93) variable_assignment -> . VARIABLE assignment_operator expression
    (94) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (95) variable_assignment -> . VARIABLE assignment_operator types_structure
    (96) variable_assignment -> . VARIABLE assignment_operator input
    (97) variable_assignment -> . VARIABLE assignment_operator special_function
    (98) variable_assignment -> . VARIABLE INCREASE
    (99) variable_assignment -> . VARIABLE DECREMENT
    (100) variable_assignment -> . INCREASE VARIABLE
    (101) variable_assignment -> . DECREMENT VARIABLE
    (104) constant_assignment -> . const_syntax
    (105) constant_assignment -> . define_syntax
    (127) structure_array_principal -> . indexed_array
    (128) structure_array_principal -> . associative_array
    (138) structure_matrix_principal -> . matrix_firstform
    (139) structure_matrix_principal -> . matrix_secondform
    (140) structure_matrix_principal -> . access_element_matrix
    (141) structure_matrix_principal -> . modify_element_matrix
    (142) structure_matrix_principal -> . add_element_matrix
    (152) structure_object_principal -> . object_creation
    (153) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (106) const_syntax -> . CONST IDENTIFIER EQUALS values
    (107) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (129) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (130) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (131) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (143) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (144) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (149) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (150) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (151) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (154) object_creation -> . NEW class_name SEMICOLON
    (156) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 18
    VARIABLE        shift and go to state 19
    INCREASE        shift and go to state 20
    DECREMENT       shift and go to state 21
    IF              shift and go to state 33
    WHILE           shift and go to state 34
    FOR             shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 314
    sentence                       shift and go to state 244
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    for_statement                  shift and go to state 17
    const_syntax                   shift and go to state 22
    define_syntax                  shift and go to state 23
    indexed_array                  shift and go to state 24
    associative_array              shift and go to state 25
    matrix_firstform               shift and go to state 26
    matrix_secondform              shift and go to state 27
    access_element_matrix          shift and go to state 28
    modify_element_matrix          shift and go to state 29
    add_element_matrix             shift and go to state 30
    object_creation                shift and go to state 31
    access_method_object           shift and go to state 32

state 306

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 270
    ELSE            shift and go to state 271

    elseif_statement               shift and go to state 315
    else_statement                 shift and go to state 316

state 307

    (30) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (31) number_values -> . INTEGER
    (32) number_values -> . FLOAT

    INTEGER         shift and go to state 223
    FLOAT           shift and go to state 224

    number_values                  shift and go to state 317

state 308

    (33) operator_aritmetic -> PLUS .

    INTEGER         reduce using rule 33 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 33 (operator_aritmetic -> PLUS .)


state 309

    (34) operator_aritmetic -> MINUS .

    INTEGER         reduce using rule 34 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 34 (operator_aritmetic -> MINUS .)


state 310

    (35) operator_aritmetic -> MULTIPLY .

    INTEGER         reduce using rule 35 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 35 (operator_aritmetic -> MULTIPLY .)


state 311

    (36) operator_aritmetic -> DIVIDE .

    INTEGER         reduce using rule 36 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 36 (operator_aritmetic -> DIVIDE .)


state 312

    (37) operator_aritmetic -> MODULE .

    INTEGER         reduce using rule 37 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 37 (operator_aritmetic -> MODULE .)


state 313

    (38) operator_aritmetic -> POW .

    INTEGER         reduce using rule 38 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 38 (operator_aritmetic -> POW .)


state 314

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 318


state 315

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 316

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 317

    (30) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 318

    (24) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 24 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS number_values SEMICOLON VARIABLE comparator_operator number_values SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 47 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 53 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 139 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 47
WARNING: reduce/reduce conflict in state 49 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 49
WARNING: reduce/reduce conflict in state 160 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 160
