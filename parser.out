Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY_PUSH
    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    body_statement -> RETURN printable_values SEMICOLON
Rule 29    body_statement -> sentence RETURN printable_values SEMICOLON
Rule 30    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 31    increment_statement -> VARIABLE INCREASE
Rule 32    increment_statement -> VARIABLE DECREMENT
Rule 33    increment_statement -> INCREASE VARIABLE
Rule 34    increment_statement -> DECREMENT VARIABLE
Rule 35    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 36    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 37    condition_for -> VARIABLE comparator_operator expression_for
Rule 38    expression_for -> VARIABLE
Rule 39    expression_for -> number_values
Rule 40    expression_for -> expression_for operator_aritmetic expression_for
Rule 41    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 42    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 43    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 44    expression_for -> length_operations
Rule 45    number_values -> INTEGER
Rule 46    number_values -> FLOAT
Rule 47    operator_aritmetic -> PLUS
Rule 48    operator_aritmetic -> MINUS
Rule 49    operator_aritmetic -> MULTIPLY
Rule 50    operator_aritmetic -> DIVIDE
Rule 51    operator_aritmetic -> MODULE
Rule 52    operator_aritmetic -> POW
Rule 53    conditional -> boolean_expression
Rule 54    conditional -> boolean_expression logic_operator boolean_expression
Rule 55    logic_operator -> LOGIC_AND
Rule 56    logic_operator -> LOGIC_OR
Rule 57    logic_operator -> LOGIC_XOR
Rule 58    boolean_expression -> comparation
Rule 59    boolean_expression -> VARIABLE
Rule 60    boolean_expression -> IDENTIFIER
Rule 61    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 62    boolean_expression -> logic_not_sentence
Rule 63    boolean_expression -> logic_expression
Rule 64    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 65    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 66    true_boolean_types -> TRUE
Rule 67    true_boolean_types -> STRING
Rule 68    true_boolean_types -> INTEGER
Rule 69    true_boolean_types -> FLOAT
Rule 70    true_boolean_types -> VARIABLE
Rule 71    true_boolean_types -> IDENTIFIER
Rule 72    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 73    false_boolean_types -> FALSE
Rule 74    false_boolean_types -> STRING
Rule 75    false_boolean_types -> INTEGER
Rule 76    false_boolean_types -> VARIABLE
Rule 77    false_boolean_types -> IDENTIFIER
Rule 78    false_boolean_types -> FLOAT
Rule 79    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 80    false_boolean_types -> NULL
Rule 81    logic_not_sentence -> LOGIC_NOT conditional
Rule 82    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 83    comparation -> values comparator_operator values
Rule 84    comparation -> values comparator_operator expression
Rule 85    comparation -> expression comparator_operator expression
Rule 86    comparation -> VARIABLE EQUALS_EQUALS values
Rule 87    comparation -> access_array_element EQUALS_EQUALS values
Rule 88    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 89    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 90    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 91    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 92    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 93    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 94    comparator_operator -> EQUALS_EQUALS
Rule 95    comparator_operator -> IDENTICAL
Rule 96    comparator_operator -> NOT_EQUALS
Rule 97    comparator_operator -> NOT_IDENTICAL
Rule 98    comparator_operator -> SMALL_THAN
Rule 99    comparator_operator -> GREATER_THAN
Rule 100   comparator_operator -> SMALL_EQUALS_TO
Rule 101   comparator_operator -> GREATER_EQUALS_TO
Rule 102   comparator_operator -> SPACECRAFT
Rule 103   comparator_operator -> NULL_FUSION
Rule 104   print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 105   print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 106   print_statement -> ECHO printable_values
Rule 107   print_statement -> PRINT printable_values
Rule 108   printable_values -> values
Rule 109   printable_values -> values printable_dividers printable_values
Rule 110   printable_values -> values COMMA printable_values
Rule 111   printable_values -> VARIABLE
Rule 112   printable_values -> VARIABLE printable_dividers printable_values
Rule 113   printable_values -> VARIABLE COMMA printable_values
Rule 114   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 115   printable_values -> conditional
Rule 116   printable_values -> conditional printable_dividers printable_values
Rule 117   printable_values -> conditional COMMA printable_values
Rule 118   printable_values -> structure_object_principal
Rule 119   printable_values -> structure_object_principal printable_dividers printable_values
Rule 120   printable_values -> structure_object_principal COMMA printable_values
Rule 121   printable_dividers -> COMMA
Rule 122   printable_dividers -> STRING_CONCATENATION
Rule 123   values -> INTEGER
Rule 124   values -> STRING
Rule 125   values -> FLOAT
Rule 126   values -> boolean
Rule 127   boolean -> TRUE
Rule 128   boolean -> FALSE
Rule 129   expression -> term
Rule 130   expression -> term PLUS expression
Rule 131   expression -> term MINUS expression
Rule 132   term -> factor
Rule 133   term -> factor MULTIPLY term
Rule 134   term -> factor DIVIDE term
Rule 135   term -> factor MODULE term
Rule 136   term -> factor POW term
Rule 137   factor -> INTEGER
Rule 138   factor -> FLOAT
Rule 139   factor -> VARIABLE
Rule 140   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 141   factor -> STRING
Rule 142   assignment -> variable_assignment
Rule 143   assignment -> constant_assignment
Rule 144   variable_assignment -> VARIABLE assignment_operator values
Rule 145   variable_assignment -> VARIABLE assignment_operator IDENTIFIER
Rule 146   variable_assignment -> VARIABLE assignment_operator expression
Rule 147   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 148   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 149   variable_assignment -> VARIABLE assignment_operator array_special_function
Rule 150   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 151   variable_assignment -> VARIABLE assignment_operator input
Rule 152   variable_assignment -> VARIABLE assignment_operator special_function
Rule 153   variable_assignment -> VARIABLE assignment_operator conditional
Rule 154   variable_assignment -> VARIABLE INCREASE
Rule 155   variable_assignment -> VARIABLE DECREMENT
Rule 156   variable_assignment -> INCREASE VARIABLE
Rule 157   variable_assignment -> DECREMENT VARIABLE
Rule 158   assignment_operator -> EQUALS
Rule 159   assignment_operator -> PLUS_EQUALS
Rule 160   constant_assignment -> const_syntax
Rule 161   constant_assignment -> define_syntax
Rule 162   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 163   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 164   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 165   function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN
Rule 166   params -> real_params
Rule 167   params -> empty
Rule 168   real_params -> VARIABLE
Rule 169   real_params -> values
Rule 170   real_params -> real_params COMMA VARIABLE
Rule 171   real_params -> real_params COMMA values
Rule 172   empty -> <empty>
Rule 173   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 174   special_function -> arrow_function
Rule 175   special_function -> anonymous_functions
Rule 176   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 177   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
Rule 178   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression
Rule 179   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 180   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 181   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 182   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 183   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 184   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 185   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 186   string_param -> STRING
Rule 187   string_param -> VARIABLE
Rule 188   int_param -> INTEGER
Rule 189   int_param -> VARIABLE
Rule 190   array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 191   array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 192   array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 193   array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 194   count_param -> COMMA COUNT_NORMAL
Rule 195   count_param -> COMMA COUNT_RECURSIVE
Rule 196   count_param -> <empty>
Rule 197   length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
Rule 198   length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
Rule 199   length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
Rule 200   length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 201   types_structure -> structure_array_principal
Rule 202   types_structure -> structure_matrix_principal
Rule 203   types_structure -> structure_object_principal
Rule 204   structure_array_principal -> indexed_array
Rule 205   structure_array_principal -> associative_array
Rule 206   structure_array_principal -> access_array_stucture
Rule 207   structure_array_principal -> access_array_element
Rule 208   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 209   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 210   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 211   structure_array -> key EQUALS GREATER_THAN values
Rule 212   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 213   key -> INTEGER
Rule 214   key -> STRING
Rule 215   values_array_indexed -> values
Rule 216   values_array_indexed -> values COMMA values_array_indexed
Rule 217   values_array_indexed -> object_creation
Rule 218   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 219   values_array_indexed -> indexed_array
Rule 220   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 221   access_array_stucture -> access_array_element SEMICOLON
Rule 222   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 223   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 224   structure_matrix_principal -> matrix_firstform
Rule 225   structure_matrix_principal -> matrix_secondform
Rule 226   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 227   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 228   structure_matrix_principal -> add_element_matrix
Rule 229   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 230   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 231   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 232   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 233   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 234   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 235   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 236   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 237   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 238   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 239   modify_element_matrix -> access_element_matrix EQUALS values
Rule 240   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 241   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 242   structure_object_principal -> object_creation
Rule 243   structure_object_principal -> access_method_object
Rule 244   object_creation -> NEW IDENTIFIER
Rule 245   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 246   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 247   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 248   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 249   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 250   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 251   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 252   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 253   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 254   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 255   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 256   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 257   accessType -> IDENTIFIER
Rule 258   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 259   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 260   interface_body -> interface_body interface_method
Rule 261   interface_body -> <empty>
Rule 262   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 263   class_extends_opt -> EXTENDS IDENTIFIER
Rule 264   class_extends_opt -> <empty>
Rule 265   class_implements_opt -> IMPLEMENTS interface_list
Rule 266   class_implements_opt -> <empty>
Rule 267   interface_list -> IDENTIFIER
Rule 268   interface_list -> interface_list COMMA IDENTIFIER
Rule 269   class_body -> class_body class_member
Rule 270   class_body -> <empty>
Rule 271   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 272   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 273   class_member -> class_attribute
Rule 274   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 275   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 276   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 277   visibility_opt -> PUBLIC
Rule 278   visibility_opt -> PRIVATE
Rule 279   visibility_opt -> PROTECTED
Rule 280   visibility_opt -> <empty>
Rule 281   method_body -> classStatement
Rule 282   method_body -> classStatement return_form
Rule 283   method_body -> return_form
Rule 284   method_body -> classStatement BREAK SEMICOLON
Rule 285   method_body -> classStatement method_body
Rule 286   return_form -> RETURN values SEMICOLON
Rule 287   return_form -> RETURN access_method_object SEMICOLON
Rule 288   return_form -> RETURN SEMICOLON
Rule 289   return_form -> RETURN expression SEMICOLON
Rule 290   return_form -> RETURN string_special_function SEMICOLON
Rule 291   return_form -> RETURN array_special_function SEMICOLON
Rule 292   classStatement -> sentence
Rule 293   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 72 79 208 209 210 229 233 234
ARRAY_POP            : 193
ARRAY_PUSH           : 
BREAK                : 24 27 284
CLASS                : 258
COLON                : 
COMMA                : 110 113 117 120 121 163 170 171 184 185 185 194 195 212 216 218 220 232 234 268
COMMENT              : 
CONST                : 162
COUNT                : 190 191 192 197 198 199
COUNT_NORMAL         : 194
COUNT_RECURSIVE      : 195
DECREMENT            : 32 34 155 157
DEFINE               : 163
DIVIDE               : 50 134
ECHO                 : 104 106
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 30 36 158 162 176 177 178 211 212 239 240 241 248 249 250 253 254 255 274
EQUALS_EQUALS        : 86 87 88 89 90 91 92 93 94
EXTENDS              : 263
FALSE                : 73 128
FEGTS                : 181
FLOAT                : 46 69 78 125 138
FN                   : 176 177 178
FOR                  : 30
FUNCTION             : 173 179 262 271 272
GREATER_EQUALS_TO    : 101
GREATER_THAN         : 99 176 177 178 211 212 246 247 248 249 250 251 252 253 254 255
IDENTICAL            : 95
IDENTIFIER           : 42 43 60 71 77 145 162 164 173 244 245 256 257 258 259 262 263 267 268 271 272
IF                   : 14 15 16
IMPLEMENTS           : 265
INCREASE             : 31 33 154 156
INTEGER              : 35 45 68 75 123 137 188 213 222 235 235 237 238 256
INTERFACE            : 259
LEFT_BRACE           : 13 14 15 16 17 18 19 20 30 180 258 259 271 272
LEFT_BRACKET         : 210 222 223 230 231 232 235 235 236 236 237 237 238 238 241 256
LEFT_PAREN           : 13 14 15 16 17 18 19 30 41 42 43 61 72 79 104 105 140 163 164 165 173 176 177 178 179 181 182 183 184 185 190 191 192 193 197 198 199 200 208 209 229 233 234 245 262 271 272
LOGIC_AND            : 55
LOGIC_NOT            : 81 82
LOGIC_OR             : 56
LOGIC_XOR            : 57
MINUS                : 48 131 246 247 248 249 250 251 252 253 254 255
MODULE               : 51 135
MULTIPLY             : 49 133
NEW                  : 244 245
NOT_EQUALS           : 96
NOT_IDENTICAL        : 97
NULL                 : 80
NULL_FUSION          : 103
PLUS                 : 47 130
PLUS_EQUALS          : 35 159
POW                  : 52 136
PRINT                : 105 107
PRIVATE              : 278
PROTECTED            : 279
PUBLIC               : 277
READLINE             : 182
RETURN               : 22 23 26 28 29 286 287 288 289 290 291
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 30 180 258 259 271 272
RIGHT_BRACKET        : 210 222 223 230 231 232 235 235 236 236 237 237 238 238 241 256
RIGHT_PAREN          : 13 14 15 16 17 18 19 30 41 42 43 61 72 79 104 105 140 163 164 165 173 176 177 178 179 181 182 183 184 185 190 191 192 193 197 198 199 200 208 209 229 233 234 245 262 271 272
SEMICOLON            : 3 4 22 23 24 26 27 28 29 30 30 221 226 227 229 230 262 274 275 276 284 286 287 288 289 290 291 293
SMALL_EQUALS_TO      : 100
SMALL_THAN           : 98
SPACECRAFT           : 102
STATIC               : 271
STDIN                : 181
STRING               : 67 74 114 124 141 163 182 186 214
STRING_CONCATENATION : 114 122
STRLEN               : 183 200
SUBSTR               : 184 185
TRUE                 : 66 127
VARIABLE             : 30 31 32 33 34 35 36 36 37 38 42 59 70 76 82 86 88 89 90 90 92 93 111 112 113 114 139 144 145 146 147 148 149 150 151 152 153 154 155 156 157 165 168 170 187 189 192 193 199 222 223 223 235 236 236 236 237 237 238 238 240 241 246 247 248 249 249 250 254 274 275
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 247 248 249 250 252 253 254 255
access_array_element : 43 87 88 89 91 91 207 221 250 251 252 253 254 255 255
access_array_stucture : 206
access_element_matrix : 92 93 226 239 240
access_method_object : 243 287 293
add_element_matrix   : 228
anonymous_functions  : 175
array_special_function : 149 291
arrow_function       : 174
assignment           : 4
assignment_operator  : 144 145 146 147 148 149 150 151 152 153
associative_array    : 205
body_statement       : 13 14 15 16 17 18 19 20 25 30 180
boolean              : 126
boolean_expression   : 53 54 54
classStatement       : 281 282 284 285
class_attribute      : 273
class_body           : 258 269
class_declaration    : 6
class_extends_opt    : 258 259
class_implements_opt : 258
class_member         : 269
codeblock            : 173 176 179
comparation          : 58
comparator_operator  : 37 83 84 85
condition_for        : 30
conditional          : 13 14 15 16 17 18 19 61 81 115 116 117 153
const_syntax         : 160
constant_assignment  : 143 276
control_structures   : 8
count_param          : 190 191 192 197 198 199
define_syntax        : 161
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 167
expression           : 84 85 85 130 131 140 146 178 289
expression_for       : 30 37 40 40 41
factor               : 132 133 134 135 136
false_boolean_types  : 64 65
for_statement        : 12
function_declaration : 9
function_invocation  : 147 246 251
if_statement         : 10
increment_statement  : 30
indexed_array        : 204 219 220 241
input                : 151
int_param            : 184 185 185
interface_body       : 259 260
interface_declaration : 7
interface_list       : 265 268
interface_method     : 260
key                  : 211 212
length_operations    : 44
logic_expression     : 63
logic_not_sentence   : 62
logic_operator       : 54 64 65
matrix_firstform     : 224
matrix_secondform    : 225
method_body          : 271 272 285
modify_element_matrix : 227
number_values        : 36 39
object_creation      : 217 218 242
operator_aritmetic   : 36 40
params               : 164 165 173 176 177 178 179 245 262 271 272
print_statement      : 3 177
printable_dividers   : 109 112 116 119
printable_values     : 28 29 104 105 106 107 109 110 112 113 116 117 119 120
program              : 1 0
real_params          : 166 170 171
return_form          : 282 283
sentence             : 1 2 21 22 23 24 25 29 292
special_function     : 152
string_param         : 183 184 185 200
string_special_function : 148 290
structure_array      : 209 210 212
structure_array_principal : 190 197 201
structure_matrix_first : 229 234
structure_matrix_principal : 191 198 202
structure_matrix_second : 230 232
structure_object_principal : 118 119 120 203
term                 : 129 130 131 133 134 135 136
true_boolean_types   : 64 65
types_structure      : 5 150
values               : 22 26 72 83 83 84 86 87 108 109 110 144 162 163 169 171 211 212 215 216 231 232 233 234 239 248 253 274 286
values_array_indexed : 208 216 218 220
variable_assignment  : 142
visibility_opt       : 262 271 272 274 275 276
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (104) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> ECHO . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 11

    (105) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (107) print_statement -> PRINT . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    LEFT_PAREN      shift and go to state 77
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    printable_values               shift and go to state 78
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 12

    (142) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 142 (assignment -> variable_assignment .)


state 13

    (143) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 143 (assignment -> constant_assignment .)


state 14

    (201) types_structure -> structure_array_principal .

    ECHO            reduce using rule 201 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 201 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 201 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 201 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 201 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 201 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 201 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 201 (types_structure -> structure_array_principal .)
    IF              reduce using rule 201 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 201 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 201 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 201 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 201 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 201 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 201 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 201 (types_structure -> structure_array_principal .)
    $end            reduce using rule 201 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 201 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 201 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 201 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 201 (types_structure -> structure_array_principal .)


state 15

    (202) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 202 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 202 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 202 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 202 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 202 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 202 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 202 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 202 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 202 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 202 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 202 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 202 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 202 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 202 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 202 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 202 (types_structure -> structure_matrix_principal .)


state 16

    (203) types_structure -> structure_object_principal .

    ECHO            reduce using rule 203 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 203 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 203 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 203 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 203 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 203 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 203 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 203 (types_structure -> structure_object_principal .)
    IF              reduce using rule 203 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 203 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 203 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 203 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 203 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 203 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 203 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 203 (types_structure -> structure_object_principal .)
    $end            reduce using rule 203 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 203 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 203 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 203 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 203 (types_structure -> structure_object_principal .)


state 17

    (258) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 79


state 18

    (259) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 80


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (173) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 81


state 23

    (144) variable_assignment -> VARIABLE . assignment_operator values
    (145) variable_assignment -> VARIABLE . assignment_operator IDENTIFIER
    (146) variable_assignment -> VARIABLE . assignment_operator expression
    (147) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (148) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (149) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (150) variable_assignment -> VARIABLE . assignment_operator types_structure
    (151) variable_assignment -> VARIABLE . assignment_operator input
    (152) variable_assignment -> VARIABLE . assignment_operator special_function
    (153) variable_assignment -> VARIABLE . assignment_operator conditional
    (154) variable_assignment -> VARIABLE . INCREASE
    (155) variable_assignment -> VARIABLE . DECREMENT
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (158) assignment_operator -> . EQUALS
    (159) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 83
    DECREMENT       shift and go to state 84
    LEFT_BRACKET    shift and go to state 85
    MINUS           shift and go to state 87
    EQUALS          shift and go to state 86
    PLUS_EQUALS     shift and go to state 88

    assignment_operator            shift and go to state 82

state 24

    (156) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 89


state 25

    (157) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 90


state 26

    (160) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 160 (constant_assignment -> const_syntax .)


state 27

    (161) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 161 (constant_assignment -> define_syntax .)


state 28

    (204) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 204 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 204 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 204 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 204 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 204 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 204 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 204 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 204 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 204 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 204 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 204 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 204 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 204 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 204 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 204 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 204 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 204 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 204 (structure_array_principal -> indexed_array .)
    COMMA           reduce using rule 204 (structure_array_principal -> indexed_array .)
    RIGHT_PAREN     reduce using rule 204 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 204 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 204 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 204 (structure_array_principal -> indexed_array .)


state 29

    (205) structure_array_principal -> associative_array .

    ECHO            reduce using rule 205 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 205 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 205 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 205 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 205 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 205 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 205 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 205 (structure_array_principal -> associative_array .)
    IF              reduce using rule 205 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 205 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 205 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 205 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 205 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 205 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 205 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 205 (structure_array_principal -> associative_array .)
    $end            reduce using rule 205 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 205 (structure_array_principal -> associative_array .)
    COMMA           reduce using rule 205 (structure_array_principal -> associative_array .)
    RIGHT_PAREN     reduce using rule 205 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 205 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 205 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 205 (structure_array_principal -> associative_array .)


state 30

    (206) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    COMMA           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    RIGHT_PAREN     reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 206 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 206 (structure_array_principal -> access_array_stucture .)


state 31

    (207) structure_array_principal -> access_array_element .
    (221) access_array_stucture -> access_array_element . SEMICOLON
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            reduce using rule 207 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 207 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 207 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 207 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 207 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 207 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 207 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 207 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 207 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 207 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 207 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 207 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 207 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 207 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 207 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 207 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 207 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 207 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 207 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 207 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 91
    MINUS           shift and go to state 92


state 32

    (224) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    COMMA           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_PAREN     reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 224 (structure_matrix_principal -> matrix_firstform .)


state 33

    (225) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    COMMA           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_PAREN     reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 225 (structure_matrix_principal -> matrix_secondform .)


state 34

    (226) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (239) modify_element_matrix -> access_element_matrix . EQUALS values
    (240) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 93
    EQUALS          shift and go to state 94


state 35

    (227) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 95


state 36

    (228) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    COMMA           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_PAREN     reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 228 (structure_matrix_principal -> add_element_matrix .)


state 37

    (242) structure_object_principal -> object_creation .

    ECHO            reduce using rule 242 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 242 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 242 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 242 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 242 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 242 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 242 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 242 (structure_object_principal -> object_creation .)
    IF              reduce using rule 242 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 242 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 242 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 242 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 242 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 242 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 242 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 242 (structure_object_principal -> object_creation .)
    $end            reduce using rule 242 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 242 (structure_object_principal -> object_creation .)
    STRING_CONCATENATION reduce using rule 242 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 242 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 242 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 242 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 242 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 242 (structure_object_principal -> object_creation .)


state 38

    (243) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 243 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 243 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 243 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 243 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 243 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 243 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 243 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 243 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 243 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 243 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 243 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 243 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 243 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 243 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 243 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 243 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 243 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 243 (structure_object_principal -> access_method_object .)
    STRING_CONCATENATION reduce using rule 243 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 243 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 243 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 243 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 243 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 243 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 96


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 97


state 41

    (30) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 98


state 42

    (162) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 99


state 43

    (163) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 100


state 44

    (208) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (229) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 101
    LEFT_BRACKET    shift and go to state 102


state 45

    (230) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (231) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (232) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 103

    structure_matrix_second        shift and go to state 104

state 46

    (244) object_creation -> NEW . IDENTIFIER
    (245) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 105


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (104) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (61) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (140) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 110
    INTEGER         shift and go to state 112
    STRING          shift and go to state 111
    FLOAT           shift and go to state 113
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    printable_values               shift and go to state 107
    conditional                    shift and go to state 108
    expression                     shift and go to state 109
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 73
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    factor                         shift and go to state 76
    access_array_element           shift and go to state 67
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72

state 51

    (106) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 106 (print_statement -> ECHO printable_values .)


state 52

    (108) printable_values -> values .
    (109) printable_values -> values . printable_dividers printable_values
    (110) printable_values -> values . COMMA printable_values
    (83) comparation -> values . comparator_operator values
    (84) comparation -> values . comparator_operator expression
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 108 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> values .)
    COMMA           shift and go to state 115
    STRING_CONCATENATION shift and go to state 117
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    printable_dividers             shift and go to state 114
    comparator_operator            shift and go to state 116

state 53

    (111) printable_values -> VARIABLE .
    (112) printable_values -> VARIABLE . printable_dividers printable_values
    (113) printable_values -> VARIABLE . COMMA printable_values
    (114) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (59) boolean_expression -> VARIABLE .
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .
    (139) factor -> VARIABLE .
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for STRING_CONCATENATION resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    COMMA           shift and go to state 129
    STRING_CONCATENATION shift and go to state 130
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> VARIABLE .)
    MINUS           shift and go to state 87
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)

  ! SEMICOLON       [ reduce using rule 111 (printable_values -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 111 (printable_values -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 59 (boolean_expression -> VARIABLE .) ]
  ! STRING_CONCATENATION [ reduce using rule 59 (boolean_expression -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]

    printable_dividers             shift and go to state 128

state 54

    (124) values -> STRING .
    (67) true_boolean_types -> STRING .
    (74) false_boolean_types -> STRING .
    (141) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> STRING .)
    COMMA           reduce using rule 124 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 124 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 124 (values -> STRING .)
    IDENTICAL       reduce using rule 124 (values -> STRING .)
    NOT_EQUALS      reduce using rule 124 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 124 (values -> STRING .)
    SMALL_THAN      reduce using rule 124 (values -> STRING .)
    GREATER_THAN    reduce using rule 124 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> STRING .)
    SPACECRAFT      reduce using rule 124 (values -> STRING .)
    NULL_FUSION     reduce using rule 124 (values -> STRING .)
    SEMICOLON       reduce using rule 124 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 124 (values -> STRING .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 141 (factor -> STRING .)
    DIVIDE          reduce using rule 141 (factor -> STRING .)
    MODULE          reduce using rule 141 (factor -> STRING .)
    POW             reduce using rule 141 (factor -> STRING .)
    PLUS            reduce using rule 141 (factor -> STRING .)
    MINUS           reduce using rule 141 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 141 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 141 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 141 (factor -> STRING .) ]


state 55

    (115) printable_values -> conditional .
    (116) printable_values -> conditional . printable_dividers printable_values
    (117) printable_values -> conditional . COMMA printable_values
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 115 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 115 (printable_values -> conditional .)
    COMMA           shift and go to state 134
    STRING_CONCATENATION shift and go to state 117

    printable_dividers             shift and go to state 133

state 56

    (118) printable_values -> structure_object_principal .
    (119) printable_values -> structure_object_principal . printable_dividers printable_values
    (120) printable_values -> structure_object_principal . COMMA printable_values
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION

    SEMICOLON       reduce using rule 118 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 118 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 136
    STRING_CONCATENATION shift and go to state 117

    printable_dividers             shift and go to state 135

state 57

    (123) values -> INTEGER .
    (68) true_boolean_types -> INTEGER .
    (75) false_boolean_types -> INTEGER .
    (137) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> INTEGER .)
    COMMA           reduce using rule 123 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 123 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 123 (values -> INTEGER .)
    IDENTICAL       reduce using rule 123 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 123 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 123 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 123 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 123 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 123 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 123 (values -> INTEGER .)
    SEMICOLON       reduce using rule 123 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 137 (factor -> INTEGER .)
    DIVIDE          reduce using rule 137 (factor -> INTEGER .)
    MODULE          reduce using rule 137 (factor -> INTEGER .)
    POW             reduce using rule 137 (factor -> INTEGER .)
    PLUS            reduce using rule 137 (factor -> INTEGER .)
    MINUS           reduce using rule 137 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> INTEGER .) ]


state 58

    (125) values -> FLOAT .
    (69) true_boolean_types -> FLOAT .
    (78) false_boolean_types -> FLOAT .
    (138) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 125 (values -> FLOAT .)
    COMMA           reduce using rule 125 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 125 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 125 (values -> FLOAT .)
    IDENTICAL       reduce using rule 125 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 125 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 125 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 125 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 125 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 125 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 125 (values -> FLOAT .)
    SEMICOLON       reduce using rule 125 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 125 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 138 (factor -> FLOAT .)
    DIVIDE          reduce using rule 138 (factor -> FLOAT .)
    MODULE          reduce using rule 138 (factor -> FLOAT .)
    POW             reduce using rule 138 (factor -> FLOAT .)
    PLUS            reduce using rule 138 (factor -> FLOAT .)
    MINUS           reduce using rule 138 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 138 (factor -> FLOAT .) ]


state 59

    (126) values -> boolean .

    COMMA           reduce using rule 126 (values -> boolean .)
    STRING_CONCATENATION reduce using rule 126 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 126 (values -> boolean .)
    IDENTICAL       reduce using rule 126 (values -> boolean .)
    NOT_EQUALS      reduce using rule 126 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 126 (values -> boolean .)
    SMALL_THAN      reduce using rule 126 (values -> boolean .)
    GREATER_THAN    reduce using rule 126 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 126 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 126 (values -> boolean .)
    SPACECRAFT      reduce using rule 126 (values -> boolean .)
    NULL_FUSION     reduce using rule 126 (values -> boolean .)
    SEMICOLON       reduce using rule 126 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 126 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 126 (values -> boolean .)
    LOGIC_AND       reduce using rule 126 (values -> boolean .)
    LOGIC_OR        reduce using rule 126 (values -> boolean .)
    LOGIC_XOR       reduce using rule 126 (values -> boolean .)
    ECHO            reduce using rule 126 (values -> boolean .)
    PRINT           reduce using rule 126 (values -> boolean .)
    CLASS           reduce using rule 126 (values -> boolean .)
    INTERFACE       reduce using rule 126 (values -> boolean .)
    FUNCTION        reduce using rule 126 (values -> boolean .)
    VARIABLE        reduce using rule 126 (values -> boolean .)
    INCREASE        reduce using rule 126 (values -> boolean .)
    DECREMENT       reduce using rule 126 (values -> boolean .)
    IF              reduce using rule 126 (values -> boolean .)
    WHILE           reduce using rule 126 (values -> boolean .)
    FOR             reduce using rule 126 (values -> boolean .)
    CONST           reduce using rule 126 (values -> boolean .)
    DEFINE          reduce using rule 126 (values -> boolean .)
    ARRAY           reduce using rule 126 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 126 (values -> boolean .)
    NEW             reduce using rule 126 (values -> boolean .)
    $end            reduce using rule 126 (values -> boolean .)
    RETURN          reduce using rule 126 (values -> boolean .)
    BREAK           reduce using rule 126 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 126 (values -> boolean .)


state 60

    (53) conditional -> boolean_expression .
    (54) conditional -> boolean_expression . logic_operator boolean_expression
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 53 (conditional -> boolean_expression .)
    STRING_CONCATENATION reduce using rule 53 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 53 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 53 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

  ! LOGIC_AND       [ reduce using rule 53 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 53 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 53 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 137

state 61

    (127) boolean -> TRUE .
    (66) true_boolean_types -> TRUE .

    COMMA           reduce using rule 127 (boolean -> TRUE .)
    STRING_CONCATENATION reduce using rule 127 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 127 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 127 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 127 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 127 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 127 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 127 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 127 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 127 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 127 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 127 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 127 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 127 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> TRUE .)


state 62

    (128) boolean -> FALSE .
    (73) false_boolean_types -> FALSE .

    COMMA           reduce using rule 128 (boolean -> FALSE .)
    STRING_CONCATENATION reduce using rule 128 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 128 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 128 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 128 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 128 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 128 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 128 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 128 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 128 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 128 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 128 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 128 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 128 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> FALSE .)


state 63

    (58) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> comparation .)
    COMMA           reduce using rule 58 (boolean_expression -> comparation .)
    STRING_CONCATENATION reduce using rule 58 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> comparation .)


state 64

    (60) boolean_expression -> IDENTIFIER .
    (71) true_boolean_types -> IDENTIFIER .
    (77) false_boolean_types -> IDENTIFIER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
    LOGIC_AND       reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    COMMA           reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 60 (boolean_expression -> IDENTIFIER .)

  ! LOGIC_AND       [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]


state 65

    (62) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    STRING_CONCATENATION reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 62 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 62 (boolean_expression -> logic_not_sentence .)


state 66

    (63) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 63 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 63 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 63 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 63 (boolean_expression -> logic_expression .)
    STRING_CONCATENATION reduce using rule 63 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 63 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 63 (boolean_expression -> logic_expression .)


state 67

    (251) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (87) comparation -> access_array_element . EQUALS_EQUALS values
    (88) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (91) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 92
    EQUALS_EQUALS   shift and go to state 141


state 68

    (85) comparation -> expression . comparator_operator expression
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 142

state 69

    (92) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 143


state 70

    (81) logic_not_sentence -> LOGIC_NOT . conditional
    (82) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 145
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    conditional                    shift and go to state 144
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    values                         shift and go to state 146
    expression                     shift and go to state 68
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 71

    (64) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

    logic_operator                 shift and go to state 150

state 72

    (65) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (55) logic_operator -> . LOGIC_AND
    (56) logic_operator -> . LOGIC_OR
    (57) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 138
    LOGIC_OR        shift and go to state 139
    LOGIC_XOR       shift and go to state 140

    logic_operator                 shift and go to state 151

state 73

    (129) expression -> term .
    (130) expression -> term . PLUS expression
    (131) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 129 (expression -> term .)
    IDENTICAL       reduce using rule 129 (expression -> term .)
    NOT_EQUALS      reduce using rule 129 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 129 (expression -> term .)
    SMALL_THAN      reduce using rule 129 (expression -> term .)
    GREATER_THAN    reduce using rule 129 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 129 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 129 (expression -> term .)
    SPACECRAFT      reduce using rule 129 (expression -> term .)
    NULL_FUSION     reduce using rule 129 (expression -> term .)
    RIGHT_PAREN     reduce using rule 129 (expression -> term .)
    SEMICOLON       reduce using rule 129 (expression -> term .)
    LOGIC_AND       reduce using rule 129 (expression -> term .)
    LOGIC_OR        reduce using rule 129 (expression -> term .)
    LOGIC_XOR       reduce using rule 129 (expression -> term .)
    COMMA           reduce using rule 129 (expression -> term .)
    STRING_CONCATENATION reduce using rule 129 (expression -> term .)
    PLUS            shift and go to state 152
    MINUS           shift and go to state 153


state 74

    (72) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (79) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 154


state 75

    (80) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 80 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 80 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 80 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 80 (false_boolean_types -> NULL .)
    STRING_CONCATENATION reduce using rule 80 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 80 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 80 (false_boolean_types -> NULL .)


state 76

    (132) term -> factor .
    (133) term -> factor . MULTIPLY term
    (134) term -> factor . DIVIDE term
    (135) term -> factor . MODULE term
    (136) term -> factor . POW term

    PLUS            reduce using rule 132 (term -> factor .)
    MINUS           reduce using rule 132 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 132 (term -> factor .)
    IDENTICAL       reduce using rule 132 (term -> factor .)
    NOT_EQUALS      reduce using rule 132 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 132 (term -> factor .)
    SMALL_THAN      reduce using rule 132 (term -> factor .)
    GREATER_THAN    reduce using rule 132 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 132 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 132 (term -> factor .)
    SPACECRAFT      reduce using rule 132 (term -> factor .)
    NULL_FUSION     reduce using rule 132 (term -> factor .)
    RIGHT_PAREN     reduce using rule 132 (term -> factor .)
    SEMICOLON       reduce using rule 132 (term -> factor .)
    LOGIC_AND       reduce using rule 132 (term -> factor .)
    LOGIC_OR        reduce using rule 132 (term -> factor .)
    LOGIC_XOR       reduce using rule 132 (term -> factor .)
    COMMA           reduce using rule 132 (term -> factor .)
    STRING_CONCATENATION reduce using rule 132 (term -> factor .)
    MULTIPLY        shift and go to state 155
    DIVIDE          shift and go to state 156
    MODULE          shift and go to state 157
    POW             shift and go to state 158


state 77

    (105) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (61) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (140) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 110
    INTEGER         shift and go to state 112
    STRING          shift and go to state 111
    FLOAT           shift and go to state 113
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    printable_values               shift and go to state 159
    conditional                    shift and go to state 108
    expression                     shift and go to state 109
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 73
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    factor                         shift and go to state 76
    access_array_element           shift and go to state 67
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72

state 78

    (107) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 107 (print_statement -> PRINT printable_values .)


state 79

    (258) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (263) class_extends_opt -> . EXTENDS IDENTIFIER
    (264) class_extends_opt -> .

    EXTENDS         shift and go to state 161
    IMPLEMENTS      reduce using rule 264 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 264 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 160

state 80

    (259) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (263) class_extends_opt -> . EXTENDS IDENTIFIER
    (264) class_extends_opt -> .

    EXTENDS         shift and go to state 161
    LEFT_BRACE      reduce using rule 264 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 162

state 81

    (173) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 163


state 82

    (144) variable_assignment -> VARIABLE assignment_operator . values
    (145) variable_assignment -> VARIABLE assignment_operator . IDENTIFIER
    (146) variable_assignment -> VARIABLE assignment_operator . expression
    (147) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (148) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (149) variable_assignment -> VARIABLE assignment_operator . array_special_function
    (150) variable_assignment -> VARIABLE assignment_operator . types_structure
    (151) variable_assignment -> VARIABLE assignment_operator . input
    (152) variable_assignment -> VARIABLE assignment_operator . special_function
    (153) variable_assignment -> VARIABLE assignment_operator . conditional
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (164) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (183) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (185) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (181) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (182) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (174) special_function -> . arrow_function
    (175) special_function -> . anonymous_functions
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (176) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (177) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (178) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression
    (179) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL

    IDENTIFIER      shift and go to state 166
    INTEGER         shift and go to state 112
    STRING          shift and go to state 111
    FLOAT           shift and go to state 113
    VARIABLE        shift and go to state 164
    STRLEN          shift and go to state 175
    SUBSTR          shift and go to state 176
    COUNT           shift and go to state 177
    ARRAY_POP       shift and go to state 178
    FEGTS           shift and go to state 179
    READLINE        shift and go to state 180
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    FN              shift and go to state 185
    FUNCTION        shift and go to state 186
    LEFT_PAREN      shift and go to state 106
    ARRAY           shift and go to state 187
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    NULL            shift and go to state 75

    values                         shift and go to state 165
    expression                     shift and go to state 167
    function_invocation            shift and go to state 168
    string_special_function        shift and go to state 169
    array_special_function         shift and go to state 170
    types_structure                shift and go to state 171
    input                          shift and go to state 172
    special_function               shift and go to state 173
    conditional                    shift and go to state 174
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 181
    anonymous_functions            shift and go to state 182
    boolean_expression             shift and go to state 60
    factor                         shift and go to state 76
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 183
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 184
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72

state 83

    (154) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 154 (variable_assignment -> VARIABLE INCREASE .)


state 84

    (155) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 155 (variable_assignment -> VARIABLE DECREMENT .)


state 85

    (222) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 189
    VARIABLE        shift and go to state 188
    RIGHT_BRACKET   shift and go to state 190


state 86

    (158) assignment_operator -> EQUALS .

    IDENTIFIER      reduce using rule 158 (assignment_operator -> EQUALS .)
    INTEGER         reduce using rule 158 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 158 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 158 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 158 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 158 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 158 (assignment_operator -> EQUALS .)
    COUNT           reduce using rule 158 (assignment_operator -> EQUALS .)
    ARRAY_POP       reduce using rule 158 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 158 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 158 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 158 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 158 (assignment_operator -> EQUALS .)
    FN              reduce using rule 158 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 158 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 158 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 158 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 158 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 158 (assignment_operator -> EQUALS .)
    LOGIC_NOT       reduce using rule 158 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 158 (assignment_operator -> EQUALS .)


state 87

    (246) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (248) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 191


state 88

    (159) assignment_operator -> PLUS_EQUALS .

    IDENTIFIER      reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    INTEGER         reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    COUNT           reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    ARRAY_POP       reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    LOGIC_NOT       reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 159 (assignment_operator -> PLUS_EQUALS .)


state 89

    (156) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 156 (variable_assignment -> INCREASE VARIABLE .)


state 90

    (157) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 157 (variable_assignment -> DECREMENT VARIABLE .)


state 91

    (221) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    COMMA           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_PAREN     reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 221 (access_array_stucture -> access_array_element SEMICOLON .)


state 92

    (251) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (253) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 192


state 93

    (226) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    COMMA           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 226 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 94

    (239) modify_element_matrix -> access_element_matrix EQUALS . values
    (240) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 194
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 193
    boolean                        shift and go to state 59

state 95

    (227) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    COMMA           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_PAREN     reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 227 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 96

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 201
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    conditional                    shift and go to state 200
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    values                         shift and go to state 146
    expression                     shift and go to state 68
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 97

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 201
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    conditional                    shift and go to state 202
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    values                         shift and go to state 146
    expression                     shift and go to state 68
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 98

    (30) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 203


state 99

    (162) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 204


state 100

    (163) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 205


state 101

    (208) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (209) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (229) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (211) structure_array -> . key EQUALS GREATER_THAN values
    (212) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (234) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (213) key -> . INTEGER
    (214) key -> . STRING
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    ARRAY           shift and go to state 206
    INTEGER         shift and go to state 214
    STRING          shift and go to state 215
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values_array_indexed           shift and go to state 207
    structure_array                shift and go to state 208
    structure_matrix_first         shift and go to state 209
    values                         shift and go to state 210
    object_creation                shift and go to state 211
    indexed_array                  shift and go to state 212
    key                            shift and go to state 213
    boolean                        shift and go to state 59

state 102

    (210) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (211) structure_array -> . key EQUALS GREATER_THAN values
    (212) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (213) key -> . INTEGER
    (214) key -> . STRING

    INTEGER         shift and go to state 217
    STRING          shift and go to state 218

    structure_array                shift and go to state 216
    key                            shift and go to state 213

state 103

    (231) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (232) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 219
    boolean                        shift and go to state 59

state 104

    (230) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 220


state 105

    (244) object_creation -> NEW IDENTIFIER .
    (245) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 244 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 221


state 106

    (61) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (140) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 223
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 224
    FLOAT           shift and go to state 225
    STRING          shift and go to state 226
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    conditional                    shift and go to state 222
    expression                     shift and go to state 109
    boolean_expression             shift and go to state 60
    term                           shift and go to state 73
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    factor                         shift and go to state 76
    values                         shift and go to state 146
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59

state 107

    (104) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 227


state 108

    (61) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (115) printable_values -> conditional .
    (116) printable_values -> conditional . printable_dividers printable_values
    (117) printable_values -> conditional . COMMA printable_values
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 228
    COMMA           shift and go to state 134
    STRING_CONCATENATION shift and go to state 117

  ! RIGHT_PAREN     [ reduce using rule 115 (printable_values -> conditional .) ]

    printable_dividers             shift and go to state 133

state 109

    (140) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (85) comparation -> expression . comparator_operator expression
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 229
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 142

state 110

    (111) printable_values -> VARIABLE .
    (112) printable_values -> VARIABLE . printable_dividers printable_values
    (113) printable_values -> VARIABLE . COMMA printable_values
    (114) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (59) boolean_expression -> VARIABLE .
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (139) factor -> VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for STRING_CONCATENATION resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
    COMMA           shift and go to state 129
    STRING_CONCATENATION shift and go to state 130
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> VARIABLE .)
    MINUS           shift and go to state 87
    EQUALS_EQUALS   shift and go to state 131
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 132

  ! RIGHT_PAREN     [ reduce using rule 111 (printable_values -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 59 (boolean_expression -> VARIABLE .) ]
  ! STRING_CONCATENATION [ reduce using rule 59 (boolean_expression -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]

    printable_dividers             shift and go to state 128

state 111

    (124) values -> STRING .
    (141) factor -> STRING .
    (67) true_boolean_types -> STRING .
    (74) false_boolean_types -> STRING .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 124 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 124 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 124 (values -> STRING .)
    IDENTICAL       reduce using rule 124 (values -> STRING .)
    NOT_EQUALS      reduce using rule 124 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 124 (values -> STRING .)
    SMALL_THAN      reduce using rule 124 (values -> STRING .)
    GREATER_THAN    reduce using rule 124 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> STRING .)
    SPACECRAFT      reduce using rule 124 (values -> STRING .)
    NULL_FUSION     reduce using rule 124 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 124 (values -> STRING .)
    SEMICOLON       reduce using rule 124 (values -> STRING .)
    MULTIPLY        reduce using rule 141 (factor -> STRING .)
    DIVIDE          reduce using rule 141 (factor -> STRING .)
    MODULE          reduce using rule 141 (factor -> STRING .)
    POW             reduce using rule 141 (factor -> STRING .)
    PLUS            reduce using rule 141 (factor -> STRING .)
    MINUS           reduce using rule 141 (factor -> STRING .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> STRING .)

  ! RIGHT_PAREN     [ reduce using rule 141 (factor -> STRING .) ]
  ! EQUALS_EQUALS   [ reduce using rule 141 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 141 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 141 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 141 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> STRING .) ]


state 112

    (123) values -> INTEGER .
    (137) factor -> INTEGER .
    (68) true_boolean_types -> INTEGER .
    (75) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 123 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 123 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 123 (values -> INTEGER .)
    IDENTICAL       reduce using rule 123 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 123 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 123 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 123 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 123 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 123 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 123 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (values -> INTEGER .)
    SEMICOLON       reduce using rule 123 (values -> INTEGER .)
    MULTIPLY        reduce using rule 137 (factor -> INTEGER .)
    DIVIDE          reduce using rule 137 (factor -> INTEGER .)
    MODULE          reduce using rule 137 (factor -> INTEGER .)
    POW             reduce using rule 137 (factor -> INTEGER .)
    PLUS            reduce using rule 137 (factor -> INTEGER .)
    MINUS           reduce using rule 137 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]


state 113

    (125) values -> FLOAT .
    (138) factor -> FLOAT .
    (69) true_boolean_types -> FLOAT .
    (78) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 69 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 125 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 125 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 125 (values -> FLOAT .)
    IDENTICAL       reduce using rule 125 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 125 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 125 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 125 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 125 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 125 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 125 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 125 (values -> FLOAT .)
    SEMICOLON       reduce using rule 125 (values -> FLOAT .)
    MULTIPLY        reduce using rule 138 (factor -> FLOAT .)
    DIVIDE          reduce using rule 138 (factor -> FLOAT .)
    MODULE          reduce using rule 138 (factor -> FLOAT .)
    POW             reduce using rule 138 (factor -> FLOAT .)
    PLUS            reduce using rule 138 (factor -> FLOAT .)
    MINUS           reduce using rule 138 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> FLOAT .)

  ! RIGHT_PAREN     [ reduce using rule 138 (factor -> FLOAT .) ]
  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]


state 114

    (109) printable_values -> values printable_dividers . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    values                         shift and go to state 52
    printable_values               shift and go to state 230
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 115

    (110) printable_values -> values COMMA . printable_values
    (121) printable_dividers -> COMMA .
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

  ! VARIABLE        [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! IDENTIFIER      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 121 (printable_dividers -> COMMA .) ]

    values                         shift and go to state 52
    printable_values               shift and go to state 231
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 116

    (83) comparation -> values comparator_operator . values
    (84) comparation -> values comparator_operator . expression
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 234
    STRING          shift and go to state 235
    FLOAT           shift and go to state 236
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238

    values                         shift and go to state 232
    expression                     shift and go to state 233
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 117

    (122) printable_dividers -> STRING_CONCATENATION .

    VARIABLE        reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    INTEGER         reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    STRING          reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    FLOAT           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    TRUE            reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    FALSE           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    IDENTIFIER      reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    LEFT_PAREN      reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    NEW             reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    LOGIC_NOT       reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    ARRAY           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    NULL            reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)


state 118

    (94) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    COUNT           reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)
    STRLEN          reduce using rule 94 (comparator_operator -> EQUALS_EQUALS .)


state 119

    (95) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 95 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 95 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 95 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 95 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 95 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 95 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> IDENTICAL .)
    COUNT           reduce using rule 95 (comparator_operator -> IDENTICAL .)
    STRLEN          reduce using rule 95 (comparator_operator -> IDENTICAL .)


state 120

    (96) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    COUNT           reduce using rule 96 (comparator_operator -> NOT_EQUALS .)
    STRLEN          reduce using rule 96 (comparator_operator -> NOT_EQUALS .)


state 121

    (97) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    COUNT           reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)
    STRLEN          reduce using rule 97 (comparator_operator -> NOT_IDENTICAL .)


state 122

    (98) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    COUNT           reduce using rule 98 (comparator_operator -> SMALL_THAN .)
    STRLEN          reduce using rule 98 (comparator_operator -> SMALL_THAN .)


state 123

    (99) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    COUNT           reduce using rule 99 (comparator_operator -> GREATER_THAN .)
    STRLEN          reduce using rule 99 (comparator_operator -> GREATER_THAN .)


state 124

    (100) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    COUNT           reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)
    STRLEN          reduce using rule 100 (comparator_operator -> SMALL_EQUALS_TO .)


state 125

    (101) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    COUNT           reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)
    STRLEN          reduce using rule 101 (comparator_operator -> GREATER_EQUALS_TO .)


state 126

    (102) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    COUNT           reduce using rule 102 (comparator_operator -> SPACECRAFT .)
    STRLEN          reduce using rule 102 (comparator_operator -> SPACECRAFT .)


state 127

    (103) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    COUNT           reduce using rule 103 (comparator_operator -> NULL_FUSION .)
    STRLEN          reduce using rule 103 (comparator_operator -> NULL_FUSION .)


state 128

    (112) printable_values -> VARIABLE printable_dividers . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    printable_values               shift and go to state 239
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 129

    (113) printable_values -> VARIABLE COMMA . printable_values
    (121) printable_dividers -> COMMA .
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

  ! VARIABLE        [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! IDENTIFIER      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 121 (printable_dividers -> COMMA .) ]

    printable_values               shift and go to state 240
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 130

    (114) printable_values -> VARIABLE STRING_CONCATENATION . STRING
    (122) printable_dividers -> STRING_CONCATENATION .

  ! shift/reduce conflict for STRING resolved as shift
    STRING          shift and go to state 241
    VARIABLE        reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    INTEGER         reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    FLOAT           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    TRUE            reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    FALSE           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    IDENTIFIER      reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    LEFT_PAREN      reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    NEW             reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    LOGIC_NOT       reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    ARRAY           reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)
    NULL            reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .)

  ! STRING          [ reduce using rule 122 (printable_dividers -> STRING_CONCATENATION .) ]


state 131

    (86) comparation -> VARIABLE EQUALS_EQUALS . values
    (89) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (90) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (93) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 242
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 243
    access_array_element           shift and go to state 244
    access_element_matrix          shift and go to state 245
    boolean                        shift and go to state 59

state 132

    (222) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 189
    VARIABLE        shift and go to state 188


state 133

    (116) printable_values -> conditional printable_dividers . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    conditional                    shift and go to state 55
    printable_values               shift and go to state 246
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 134

    (117) printable_values -> conditional COMMA . printable_values
    (121) printable_dividers -> COMMA .
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

  ! VARIABLE        [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! IDENTIFIER      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 121 (printable_dividers -> COMMA .) ]

    conditional                    shift and go to state 55
    printable_values               shift and go to state 247
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 135

    (119) printable_values -> structure_object_principal printable_dividers . printable_values
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 248
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 136

    (120) printable_values -> structure_object_principal COMMA . printable_values
    (121) printable_dividers -> COMMA .
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for LEFT_PAREN resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for LOGIC_NOT resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

  ! VARIABLE        [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! INTEGER         [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! STRING          [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FLOAT           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! TRUE            [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! FALSE           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! IDENTIFIER      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LEFT_PAREN      [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NEW             [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! LOGIC_NOT       [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! ARRAY           [ reduce using rule 121 (printable_dividers -> COMMA .) ]
  ! NULL            [ reduce using rule 121 (printable_dividers -> COMMA .) ]

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 249
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 137

    (54) conditional -> boolean_expression logic_operator . boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 201
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    boolean_expression             shift and go to state 250
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    values                         shift and go to state 146
    expression                     shift and go to state 68
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 138

    (55) logic_operator -> LOGIC_AND .

    VARIABLE        reduce using rule 55 (logic_operator -> LOGIC_AND .)
    IDENTIFIER      reduce using rule 55 (logic_operator -> LOGIC_AND .)
    LEFT_PAREN      reduce using rule 55 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 55 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 55 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 55 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 55 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 55 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 55 (logic_operator -> LOGIC_AND .)


state 139

    (56) logic_operator -> LOGIC_OR .

    VARIABLE        reduce using rule 56 (logic_operator -> LOGIC_OR .)
    IDENTIFIER      reduce using rule 56 (logic_operator -> LOGIC_OR .)
    LEFT_PAREN      reduce using rule 56 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 56 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 56 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 56 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 56 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 56 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 56 (logic_operator -> LOGIC_OR .)


state 140

    (57) logic_operator -> LOGIC_XOR .

    VARIABLE        reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    IDENTIFIER      reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    LEFT_PAREN      reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 57 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 57 (logic_operator -> LOGIC_XOR .)


state 141

    (87) comparation -> access_array_element EQUALS_EQUALS . values
    (88) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (91) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 253
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    access_array_element           shift and go to state 251
    values                         shift and go to state 252
    boolean                        shift and go to state 59

state 142

    (85) comparation -> expression comparator_operator . expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    expression                     shift and go to state 254
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 143

    (92) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 258


state 144

    (81) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    STRING_CONCATENATION reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 81 (logic_not_sentence -> LOGIC_NOT conditional .)


state 145

    (82) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (59) boolean_expression -> VARIABLE .
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .
    (139) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    COMMA           reduce using rule 59 (boolean_expression -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 59 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    MINUS           reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! COMMA           [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! STRING_CONCATENATION [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 82 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]


state 146

    (83) comparation -> values . comparator_operator values
    (84) comparation -> values . comparator_operator expression
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 116

state 147

    (87) comparation -> access_array_element . EQUALS_EQUALS values
    (88) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (91) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 141


state 148

    (66) true_boolean_types -> TRUE .
    (127) boolean -> TRUE .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 127 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 127 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 127 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 127 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 127 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 127 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 127 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 127 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 127 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 127 (boolean -> TRUE .)


state 149

    (73) false_boolean_types -> FALSE .
    (128) boolean -> FALSE .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 128 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 128 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 128 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 128 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 128 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 128 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 128 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 128 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 128 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 128 (boolean -> FALSE .)


state 150

    (64) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL

    FALSE           shift and go to state 260
    STRING          shift and go to state 261
    INTEGER         shift and go to state 262
    VARIABLE        shift and go to state 263
    IDENTIFIER      shift and go to state 264
    FLOAT           shift and go to state 265
    ARRAY           shift and go to state 266
    NULL            shift and go to state 75

    false_boolean_types            shift and go to state 259

state 151

    (65) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 268
    STRING          shift and go to state 269
    INTEGER         shift and go to state 270
    FLOAT           shift and go to state 271
    VARIABLE        shift and go to state 272
    IDENTIFIER      shift and go to state 273
    ARRAY           shift and go to state 274

    true_boolean_types             shift and go to state 267

state 152

    (130) expression -> term PLUS . expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    term                           shift and go to state 73
    expression                     shift and go to state 275
    factor                         shift and go to state 76

state 153

    (131) expression -> term MINUS . expression
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    term                           shift and go to state 73
    expression                     shift and go to state 276
    factor                         shift and go to state 76

state 154

    (72) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (79) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 278
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 277
    boolean                        shift and go to state 59

state 155

    (133) term -> factor MULTIPLY . term
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    factor                         shift and go to state 76
    term                           shift and go to state 279

state 156

    (134) term -> factor DIVIDE . term
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    factor                         shift and go to state 76
    term                           shift and go to state 280

state 157

    (135) term -> factor MODULE . term
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    factor                         shift and go to state 76
    term                           shift and go to state 281

state 158

    (136) term -> factor POW . term
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    factor                         shift and go to state 76
    term                           shift and go to state 282

state 159

    (105) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 283


state 160

    (258) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (265) class_implements_opt -> . IMPLEMENTS interface_list
    (266) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 285
    LEFT_BRACE      reduce using rule 266 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 284

state 161

    (263) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 286


state 162

    (259) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 287


state 163

    (173) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 288
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 164

    (165) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (59) boolean_expression -> VARIABLE .
    (139) factor -> VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
    LEFT_PAREN      shift and go to state 293
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> VARIABLE .)
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 85
    MINUS           shift and go to state 87
    EQUALS_EQUALS   shift and go to state 131

  ! MINUS           [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]


state 165

    (144) variable_assignment -> VARIABLE assignment_operator values .
    (83) comparation -> values . comparator_operator values
    (84) comparation -> values . comparator_operator expression
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 144 (variable_assignment -> VARIABLE assignment_operator values .)
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 116

state 166

    (145) variable_assignment -> VARIABLE assignment_operator IDENTIFIER .
    (164) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (60) boolean_expression -> IDENTIFIER .
    (71) true_boolean_types -> IDENTIFIER .
    (77) false_boolean_types -> IDENTIFIER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 60 (boolean_expression -> IDENTIFIER .)
    LEFT_PAREN      shift and go to state 294
    LOGIC_AND       reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 60 (boolean_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 60 (boolean_expression -> IDENTIFIER .)

  ! SEMICOLON       [ reduce using rule 145 (variable_assignment -> VARIABLE assignment_operator IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (true_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_AND       [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_OR        [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]
  ! LOGIC_XOR       [ reduce using rule 77 (false_boolean_types -> IDENTIFIER .) ]


state 167

    (146) variable_assignment -> VARIABLE assignment_operator expression .
    (85) comparation -> expression . comparator_operator expression
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 146 (variable_assignment -> VARIABLE assignment_operator expression .)
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 142

state 168

    (147) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 147 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 169

    (148) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 148 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 170

    (149) variable_assignment -> VARIABLE assignment_operator array_special_function .

    SEMICOLON       reduce using rule 149 (variable_assignment -> VARIABLE assignment_operator array_special_function .)


state 171

    (150) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 150 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 172

    (151) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 151 (variable_assignment -> VARIABLE assignment_operator input .)


state 173

    (152) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 152 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 174

    (153) variable_assignment -> VARIABLE assignment_operator conditional .

    SEMICOLON       reduce using rule 153 (variable_assignment -> VARIABLE assignment_operator conditional .)


state 175

    (183) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 295


state 176

    (184) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (185) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 296


state 177

    (190) array_special_function -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) array_special_function -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) array_special_function -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 297


state 178

    (193) array_special_function -> ARRAY_POP . LEFT_PAREN VARIABLE RIGHT_PAREN

    LEFT_PAREN      shift and go to state 298


state 179

    (181) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 299


state 180

    (182) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 300


state 181

    (174) special_function -> arrow_function .

    SEMICOLON       reduce using rule 174 (special_function -> arrow_function .)


state 182

    (175) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 175 (special_function -> anonymous_functions .)


state 183

    (207) structure_array_principal -> access_array_element .
    (221) access_array_stucture -> access_array_element . SEMICOLON
    (251) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (87) comparation -> access_array_element . EQUALS_EQUALS values
    (88) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (91) comparation -> access_array_element . EQUALS_EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 91
    MINUS           shift and go to state 92
    EQUALS_EQUALS   shift and go to state 141

  ! SEMICOLON       [ reduce using rule 207 (structure_array_principal -> access_array_element .) ]


state 184

    (226) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (239) modify_element_matrix -> access_element_matrix . EQUALS values
    (240) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE
    (92) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    SEMICOLON       shift and go to state 93
    EQUALS          shift and go to state 94
    EQUALS_EQUALS   shift and go to state 143


state 185

    (176) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (177) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (178) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression

    LEFT_PAREN      shift and go to state 301


state 186

    (179) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 302


state 187

    (208) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (229) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (72) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (79) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 303
    LEFT_BRACKET    shift and go to state 102


state 188

    (223) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 304


state 189

    (222) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 305


state 190

    (241) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 306


state 191

    (246) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (247) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (248) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (164) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (256) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (257) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 310
    VARIABLE        shift and go to state 307

    function_invocation            shift and go to state 308
    accessType                     shift and go to state 309

state 192

    (251) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (252) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (253) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (254) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (164) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (165) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (256) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (257) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 310
    VARIABLE        shift and go to state 307

    function_invocation            shift and go to state 311
    accessType                     shift and go to state 312

state 193

    (239) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 239 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 194

    (240) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 240 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 195

    (123) values -> INTEGER .

    SEMICOLON       reduce using rule 123 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 123 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 123 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 123 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 123 (values -> INTEGER .)
    COMMA           reduce using rule 123 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 123 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (values -> INTEGER .)
    ECHO            reduce using rule 123 (values -> INTEGER .)
    PRINT           reduce using rule 123 (values -> INTEGER .)
    CLASS           reduce using rule 123 (values -> INTEGER .)
    INTERFACE       reduce using rule 123 (values -> INTEGER .)
    FUNCTION        reduce using rule 123 (values -> INTEGER .)
    VARIABLE        reduce using rule 123 (values -> INTEGER .)
    INCREASE        reduce using rule 123 (values -> INTEGER .)
    DECREMENT       reduce using rule 123 (values -> INTEGER .)
    IF              reduce using rule 123 (values -> INTEGER .)
    WHILE           reduce using rule 123 (values -> INTEGER .)
    FOR             reduce using rule 123 (values -> INTEGER .)
    CONST           reduce using rule 123 (values -> INTEGER .)
    DEFINE          reduce using rule 123 (values -> INTEGER .)
    ARRAY           reduce using rule 123 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 123 (values -> INTEGER .)
    NEW             reduce using rule 123 (values -> INTEGER .)
    $end            reduce using rule 123 (values -> INTEGER .)
    RETURN          reduce using rule 123 (values -> INTEGER .)
    BREAK           reduce using rule 123 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 123 (values -> INTEGER .)


state 196

    (124) values -> STRING .

    SEMICOLON       reduce using rule 124 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 124 (values -> STRING .)
    LOGIC_AND       reduce using rule 124 (values -> STRING .)
    LOGIC_OR        reduce using rule 124 (values -> STRING .)
    LOGIC_XOR       reduce using rule 124 (values -> STRING .)
    COMMA           reduce using rule 124 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 124 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 124 (values -> STRING .)
    ECHO            reduce using rule 124 (values -> STRING .)
    PRINT           reduce using rule 124 (values -> STRING .)
    CLASS           reduce using rule 124 (values -> STRING .)
    INTERFACE       reduce using rule 124 (values -> STRING .)
    FUNCTION        reduce using rule 124 (values -> STRING .)
    VARIABLE        reduce using rule 124 (values -> STRING .)
    INCREASE        reduce using rule 124 (values -> STRING .)
    DECREMENT       reduce using rule 124 (values -> STRING .)
    IF              reduce using rule 124 (values -> STRING .)
    WHILE           reduce using rule 124 (values -> STRING .)
    FOR             reduce using rule 124 (values -> STRING .)
    CONST           reduce using rule 124 (values -> STRING .)
    DEFINE          reduce using rule 124 (values -> STRING .)
    ARRAY           reduce using rule 124 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 124 (values -> STRING .)
    NEW             reduce using rule 124 (values -> STRING .)
    $end            reduce using rule 124 (values -> STRING .)
    RETURN          reduce using rule 124 (values -> STRING .)
    BREAK           reduce using rule 124 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 124 (values -> STRING .)


state 197

    (125) values -> FLOAT .

    SEMICOLON       reduce using rule 125 (values -> FLOAT .)
    COMMA           reduce using rule 125 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 125 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 125 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 125 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 125 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 125 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 125 (values -> FLOAT .)
    ECHO            reduce using rule 125 (values -> FLOAT .)
    PRINT           reduce using rule 125 (values -> FLOAT .)
    CLASS           reduce using rule 125 (values -> FLOAT .)
    INTERFACE       reduce using rule 125 (values -> FLOAT .)
    FUNCTION        reduce using rule 125 (values -> FLOAT .)
    VARIABLE        reduce using rule 125 (values -> FLOAT .)
    INCREASE        reduce using rule 125 (values -> FLOAT .)
    DECREMENT       reduce using rule 125 (values -> FLOAT .)
    IF              reduce using rule 125 (values -> FLOAT .)
    WHILE           reduce using rule 125 (values -> FLOAT .)
    FOR             reduce using rule 125 (values -> FLOAT .)
    CONST           reduce using rule 125 (values -> FLOAT .)
    DEFINE          reduce using rule 125 (values -> FLOAT .)
    ARRAY           reduce using rule 125 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 125 (values -> FLOAT .)
    NEW             reduce using rule 125 (values -> FLOAT .)
    $end            reduce using rule 125 (values -> FLOAT .)
    RETURN          reduce using rule 125 (values -> FLOAT .)
    BREAK           reduce using rule 125 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 125 (values -> FLOAT .)


state 198

    (127) boolean -> TRUE .

    SEMICOLON       reduce using rule 127 (boolean -> TRUE .)
    COMMA           reduce using rule 127 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 127 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 127 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 127 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 127 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 127 (boolean -> TRUE .)
    STRING_CONCATENATION reduce using rule 127 (boolean -> TRUE .)
    ECHO            reduce using rule 127 (boolean -> TRUE .)
    PRINT           reduce using rule 127 (boolean -> TRUE .)
    CLASS           reduce using rule 127 (boolean -> TRUE .)
    INTERFACE       reduce using rule 127 (boolean -> TRUE .)
    FUNCTION        reduce using rule 127 (boolean -> TRUE .)
    VARIABLE        reduce using rule 127 (boolean -> TRUE .)
    INCREASE        reduce using rule 127 (boolean -> TRUE .)
    DECREMENT       reduce using rule 127 (boolean -> TRUE .)
    IF              reduce using rule 127 (boolean -> TRUE .)
    WHILE           reduce using rule 127 (boolean -> TRUE .)
    FOR             reduce using rule 127 (boolean -> TRUE .)
    CONST           reduce using rule 127 (boolean -> TRUE .)
    DEFINE          reduce using rule 127 (boolean -> TRUE .)
    ARRAY           reduce using rule 127 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 127 (boolean -> TRUE .)
    NEW             reduce using rule 127 (boolean -> TRUE .)
    $end            reduce using rule 127 (boolean -> TRUE .)
    RETURN          reduce using rule 127 (boolean -> TRUE .)
    BREAK           reduce using rule 127 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 127 (boolean -> TRUE .)


state 199

    (128) boolean -> FALSE .

    SEMICOLON       reduce using rule 128 (boolean -> FALSE .)
    COMMA           reduce using rule 128 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 128 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 128 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 128 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 128 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 128 (boolean -> FALSE .)
    STRING_CONCATENATION reduce using rule 128 (boolean -> FALSE .)
    ECHO            reduce using rule 128 (boolean -> FALSE .)
    PRINT           reduce using rule 128 (boolean -> FALSE .)
    CLASS           reduce using rule 128 (boolean -> FALSE .)
    INTERFACE       reduce using rule 128 (boolean -> FALSE .)
    FUNCTION        reduce using rule 128 (boolean -> FALSE .)
    VARIABLE        reduce using rule 128 (boolean -> FALSE .)
    INCREASE        reduce using rule 128 (boolean -> FALSE .)
    DECREMENT       reduce using rule 128 (boolean -> FALSE .)
    IF              reduce using rule 128 (boolean -> FALSE .)
    WHILE           reduce using rule 128 (boolean -> FALSE .)
    FOR             reduce using rule 128 (boolean -> FALSE .)
    CONST           reduce using rule 128 (boolean -> FALSE .)
    DEFINE          reduce using rule 128 (boolean -> FALSE .)
    ARRAY           reduce using rule 128 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 128 (boolean -> FALSE .)
    NEW             reduce using rule 128 (boolean -> FALSE .)
    $end            reduce using rule 128 (boolean -> FALSE .)
    RETURN          reduce using rule 128 (boolean -> FALSE .)
    BREAK           reduce using rule 128 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 128 (boolean -> FALSE .)


state 200

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 313


state 201

    (59) boolean_expression -> VARIABLE .
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .
    (139) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> VARIABLE .)
    COMMA           reduce using rule 59 (boolean_expression -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 59 (boolean_expression -> VARIABLE .)
    SEMICOLON       reduce using rule 59 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    MINUS           reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]


state 202

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 314


state 203

    (30) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 315


state 204

    (162) const_syntax -> CONST IDENTIFIER EQUALS . values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 316
    boolean                        shift and go to state 59

state 205

    (163) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 317


state 206

    (233) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (208) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 318


state 207

    (208) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 319


state 208

    (209) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 320


state 209

    (229) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 321


state 210

    (215) values_array_indexed -> values .
    (216) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 215 (values_array_indexed -> values .)
    COMMA           shift and go to state 322


state 211

    (217) values_array_indexed -> object_creation .
    (218) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 217 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 323


state 212

    (219) values_array_indexed -> indexed_array .
    (220) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 219 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 324


state 213

    (211) structure_array -> key . EQUALS GREATER_THAN values
    (212) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 325


state 214

    (123) values -> INTEGER .
    (213) key -> INTEGER .

    COMMA           reduce using rule 123 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (values -> INTEGER .)
    EQUALS          reduce using rule 213 (key -> INTEGER .)


state 215

    (124) values -> STRING .
    (214) key -> STRING .

    COMMA           reduce using rule 124 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 124 (values -> STRING .)
    EQUALS          reduce using rule 214 (key -> STRING .)


state 216

    (210) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 326


state 217

    (213) key -> INTEGER .

    EQUALS          reduce using rule 213 (key -> INTEGER .)


state 218

    (214) key -> STRING .

    EQUALS          reduce using rule 214 (key -> STRING .)


state 219

    (231) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (232) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 327


state 220

    (230) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 328


state 221

    (245) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 329
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 222

    (61) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 228


state 223

    (59) boolean_expression -> VARIABLE .
    (86) comparation -> VARIABLE . EQUALS_EQUALS values
    (89) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (90) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (93) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (139) factor -> VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (70) true_boolean_types -> VARIABLE .
    (76) false_boolean_types -> VARIABLE .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 59 (boolean_expression -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_AND       reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_OR        reduce using rule 59 (boolean_expression -> VARIABLE .)
    LOGIC_XOR       reduce using rule 59 (boolean_expression -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 59 (boolean_expression -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 131
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    MINUS           reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 132

  ! RIGHT_PAREN     [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 139 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (true_boolean_types -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 76 (false_boolean_types -> VARIABLE .) ]


state 224

    (137) factor -> INTEGER .
    (123) values -> INTEGER .
    (68) true_boolean_types -> INTEGER .
    (75) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 68 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 68 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 137 (factor -> INTEGER .)
    DIVIDE          reduce using rule 137 (factor -> INTEGER .)
    MODULE          reduce using rule 137 (factor -> INTEGER .)
    POW             reduce using rule 137 (factor -> INTEGER .)
    PLUS            reduce using rule 137 (factor -> INTEGER .)
    MINUS           reduce using rule 137 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 137 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 123 (values -> INTEGER .)
    IDENTICAL       reduce using rule 123 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 123 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 123 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 123 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 123 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 123 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 123 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 123 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 137 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 137 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (false_boolean_types -> INTEGER .) ]


state 225

    (138) factor -> FLOAT .
    (125) values -> FLOAT .
    (69) true_boolean_types -> FLOAT .
    (78) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 69 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 69 (true_boolean_types -> FLOAT .)
    MULTIPLY        reduce using rule 138 (factor -> FLOAT .)
    DIVIDE          reduce using rule 138 (factor -> FLOAT .)
    MODULE          reduce using rule 138 (factor -> FLOAT .)
    POW             reduce using rule 138 (factor -> FLOAT .)
    PLUS            reduce using rule 138 (factor -> FLOAT .)
    MINUS           reduce using rule 138 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 138 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 125 (values -> FLOAT .)
    IDENTICAL       reduce using rule 125 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 125 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 125 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 125 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 125 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 125 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 125 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 125 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> FLOAT .)

  ! EQUALS_EQUALS   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! IDENTICAL       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_EQUALS      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NOT_IDENTICAL   [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_THAN      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_THAN    [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SPACECRAFT      [ reduce using rule 138 (factor -> FLOAT .) ]
  ! NULL_FUSION     [ reduce using rule 138 (factor -> FLOAT .) ]
  ! LOGIC_AND       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 78 (false_boolean_types -> FLOAT .) ]


state 226

    (141) factor -> STRING .
    (124) values -> STRING .
    (67) true_boolean_types -> STRING .
    (74) false_boolean_types -> STRING .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 67 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 67 (true_boolean_types -> STRING .)
    MULTIPLY        reduce using rule 141 (factor -> STRING .)
    DIVIDE          reduce using rule 141 (factor -> STRING .)
    MODULE          reduce using rule 141 (factor -> STRING .)
    POW             reduce using rule 141 (factor -> STRING .)
    PLUS            reduce using rule 141 (factor -> STRING .)
    MINUS           reduce using rule 141 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 141 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 124 (values -> STRING .)
    IDENTICAL       reduce using rule 124 (values -> STRING .)
    NOT_EQUALS      reduce using rule 124 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 124 (values -> STRING .)
    SMALL_THAN      reduce using rule 124 (values -> STRING .)
    GREATER_THAN    reduce using rule 124 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 124 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 124 (values -> STRING .)
    SPACECRAFT      reduce using rule 124 (values -> STRING .)
    NULL_FUSION     reduce using rule 124 (values -> STRING .)
    LOGIC_AND       reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> STRING .)

  ! EQUALS_EQUALS   [ reduce using rule 141 (factor -> STRING .) ]
  ! IDENTICAL       [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_EQUALS      [ reduce using rule 141 (factor -> STRING .) ]
  ! NOT_IDENTICAL   [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_THAN      [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_THAN    [ reduce using rule 141 (factor -> STRING .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 141 (factor -> STRING .) ]
  ! SPACECRAFT      [ reduce using rule 141 (factor -> STRING .) ]
  ! NULL_FUSION     [ reduce using rule 141 (factor -> STRING .) ]
  ! LOGIC_AND       [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 74 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 74 (false_boolean_types -> STRING .) ]


state 227

    (104) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 104 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 228

    (61) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 61 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 229

    (140) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 140 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 230

    (109) printable_values -> values printable_dividers printable_values .

    SEMICOLON       reduce using rule 109 (printable_values -> values printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> values printable_dividers printable_values .)


state 231

    (110) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 110 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> values COMMA printable_values .)


state 232

    (83) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 83 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 83 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 83 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 83 (comparation -> values comparator_operator values .)
    STRING_CONCATENATION reduce using rule 83 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 83 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> values comparator_operator values .)


state 233

    (84) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 84 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 84 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 84 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 84 (comparation -> values comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 84 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 84 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> values comparator_operator expression .)


state 234

    (123) values -> INTEGER .
    (137) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 123 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 123 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 123 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 123 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 123 (values -> INTEGER .)
    COMMA           reduce using rule 123 (values -> INTEGER .)
    STRING_CONCATENATION reduce using rule 123 (values -> INTEGER .)
    SEMICOLON       reduce using rule 123 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (values -> INTEGER .)
    MULTIPLY        reduce using rule 137 (factor -> INTEGER .)
    DIVIDE          reduce using rule 137 (factor -> INTEGER .)
    MODULE          reduce using rule 137 (factor -> INTEGER .)
    POW             reduce using rule 137 (factor -> INTEGER .)
    PLUS            reduce using rule 137 (factor -> INTEGER .)
    MINUS           reduce using rule 137 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 137 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 137 (factor -> INTEGER .) ]
  ! STRING_CONCATENATION [ reduce using rule 137 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 137 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 137 (factor -> INTEGER .) ]


state 235

    (124) values -> STRING .
    (141) factor -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 124 (values -> STRING .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 124 (values -> STRING .)
    LOGIC_AND       reduce using rule 124 (values -> STRING .)
    LOGIC_OR        reduce using rule 124 (values -> STRING .)
    LOGIC_XOR       reduce using rule 124 (values -> STRING .)
    COMMA           reduce using rule 124 (values -> STRING .)
    STRING_CONCATENATION reduce using rule 124 (values -> STRING .)
    SEMICOLON       reduce using rule 124 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 124 (values -> STRING .)
    MULTIPLY        reduce using rule 141 (factor -> STRING .)
    DIVIDE          reduce using rule 141 (factor -> STRING .)
    MODULE          reduce using rule 141 (factor -> STRING .)
    POW             reduce using rule 141 (factor -> STRING .)
    PLUS            reduce using rule 141 (factor -> STRING .)
    MINUS           reduce using rule 141 (factor -> STRING .)

  ! LOGIC_AND       [ reduce using rule 141 (factor -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 141 (factor -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 141 (factor -> STRING .) ]
  ! COMMA           [ reduce using rule 141 (factor -> STRING .) ]
  ! STRING_CONCATENATION [ reduce using rule 141 (factor -> STRING .) ]
  ! SEMICOLON       [ reduce using rule 141 (factor -> STRING .) ]
  ! RIGHT_PAREN     [ reduce using rule 141 (factor -> STRING .) ]


state 236

    (125) values -> FLOAT .
    (138) factor -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for STRING_CONCATENATION resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 125 (values -> FLOAT .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 125 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 125 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 125 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 125 (values -> FLOAT .)
    COMMA           reduce using rule 125 (values -> FLOAT .)
    STRING_CONCATENATION reduce using rule 125 (values -> FLOAT .)
    SEMICOLON       reduce using rule 125 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 125 (values -> FLOAT .)
    MULTIPLY        reduce using rule 138 (factor -> FLOAT .)
    DIVIDE          reduce using rule 138 (factor -> FLOAT .)
    MODULE          reduce using rule 138 (factor -> FLOAT .)
    POW             reduce using rule 138 (factor -> FLOAT .)
    PLUS            reduce using rule 138 (factor -> FLOAT .)
    MINUS           reduce using rule 138 (factor -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 138 (factor -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 138 (factor -> FLOAT .) ]
  ! STRING_CONCATENATION [ reduce using rule 138 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 138 (factor -> FLOAT .) ]
  ! RIGHT_PAREN     [ reduce using rule 138 (factor -> FLOAT .) ]


state 237

    (139) factor -> VARIABLE .

    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    MINUS           reduce using rule 139 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 139 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 139 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 139 (factor -> VARIABLE .)
    COMMA           reduce using rule 139 (factor -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 139 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 139 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 139 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 139 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 139 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 139 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 139 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 139 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 139 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 139 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 139 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 139 (factor -> VARIABLE .)


state 238

    (140) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    expression                     shift and go to state 330
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 239

    (112) printable_values -> VARIABLE printable_dividers printable_values .

    SEMICOLON       reduce using rule 112 (printable_values -> VARIABLE printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> VARIABLE printable_dividers printable_values .)


state 240

    (113) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 113 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> VARIABLE COMMA printable_values .)


state 241

    (114) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 114 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 242

    (90) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 90 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 132


state 243

    (86) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 244

    (89) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 89 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 245

    (93) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    STRING_CONCATENATION reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 93 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 246

    (116) printable_values -> conditional printable_dividers printable_values .

    SEMICOLON       reduce using rule 116 (printable_values -> conditional printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 116 (printable_values -> conditional printable_dividers printable_values .)


state 247

    (117) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 117 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 117 (printable_values -> conditional COMMA printable_values .)


state 248

    (119) printable_values -> structure_object_principal printable_dividers printable_values .

    SEMICOLON       reduce using rule 119 (printable_values -> structure_object_principal printable_dividers printable_values .)
    RIGHT_PAREN     reduce using rule 119 (printable_values -> structure_object_principal printable_dividers printable_values .)


state 249

    (120) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 120 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 120 (printable_values -> structure_object_principal COMMA printable_values .)


state 250

    (54) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    STRING_CONCATENATION reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 54 (conditional -> boolean_expression logic_operator boolean_expression .)


state 251

    (91) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 91 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 252

    (87) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    STRING_CONCATENATION reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 87 (comparation -> access_array_element EQUALS_EQUALS values .)


state 253

    (88) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 88 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 331


state 254

    (85) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 85 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 85 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 85 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 85 (comparation -> expression comparator_operator expression .)
    STRING_CONCATENATION reduce using rule 85 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 85 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> expression comparator_operator expression .)


state 255

    (137) factor -> INTEGER .

    MULTIPLY        reduce using rule 137 (factor -> INTEGER .)
    DIVIDE          reduce using rule 137 (factor -> INTEGER .)
    MODULE          reduce using rule 137 (factor -> INTEGER .)
    POW             reduce using rule 137 (factor -> INTEGER .)
    PLUS            reduce using rule 137 (factor -> INTEGER .)
    MINUS           reduce using rule 137 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 137 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 137 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 137 (factor -> INTEGER .)
    COMMA           reduce using rule 137 (factor -> INTEGER .)
    STRING_CONCATENATION reduce using rule 137 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 137 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 137 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 137 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 137 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 137 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 137 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 137 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 137 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 137 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 137 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 137 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 137 (factor -> INTEGER .)


state 256

    (138) factor -> FLOAT .

    MULTIPLY        reduce using rule 138 (factor -> FLOAT .)
    DIVIDE          reduce using rule 138 (factor -> FLOAT .)
    MODULE          reduce using rule 138 (factor -> FLOAT .)
    POW             reduce using rule 138 (factor -> FLOAT .)
    PLUS            reduce using rule 138 (factor -> FLOAT .)
    MINUS           reduce using rule 138 (factor -> FLOAT .)
    LOGIC_AND       reduce using rule 138 (factor -> FLOAT .)
    LOGIC_OR        reduce using rule 138 (factor -> FLOAT .)
    LOGIC_XOR       reduce using rule 138 (factor -> FLOAT .)
    COMMA           reduce using rule 138 (factor -> FLOAT .)
    STRING_CONCATENATION reduce using rule 138 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 138 (factor -> FLOAT .)
    RIGHT_PAREN     reduce using rule 138 (factor -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 138 (factor -> FLOAT .)
    IDENTICAL       reduce using rule 138 (factor -> FLOAT .)
    NOT_EQUALS      reduce using rule 138 (factor -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 138 (factor -> FLOAT .)
    SMALL_THAN      reduce using rule 138 (factor -> FLOAT .)
    GREATER_THAN    reduce using rule 138 (factor -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 138 (factor -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 138 (factor -> FLOAT .)
    SPACECRAFT      reduce using rule 138 (factor -> FLOAT .)
    NULL_FUSION     reduce using rule 138 (factor -> FLOAT .)


state 257

    (141) factor -> STRING .

    MULTIPLY        reduce using rule 141 (factor -> STRING .)
    DIVIDE          reduce using rule 141 (factor -> STRING .)
    MODULE          reduce using rule 141 (factor -> STRING .)
    POW             reduce using rule 141 (factor -> STRING .)
    PLUS            reduce using rule 141 (factor -> STRING .)
    MINUS           reduce using rule 141 (factor -> STRING .)
    LOGIC_AND       reduce using rule 141 (factor -> STRING .)
    LOGIC_OR        reduce using rule 141 (factor -> STRING .)
    LOGIC_XOR       reduce using rule 141 (factor -> STRING .)
    COMMA           reduce using rule 141 (factor -> STRING .)
    STRING_CONCATENATION reduce using rule 141 (factor -> STRING .)
    SEMICOLON       reduce using rule 141 (factor -> STRING .)
    RIGHT_PAREN     reduce using rule 141 (factor -> STRING .)
    EQUALS_EQUALS   reduce using rule 141 (factor -> STRING .)
    IDENTICAL       reduce using rule 141 (factor -> STRING .)
    NOT_EQUALS      reduce using rule 141 (factor -> STRING .)
    NOT_IDENTICAL   reduce using rule 141 (factor -> STRING .)
    SMALL_THAN      reduce using rule 141 (factor -> STRING .)
    GREATER_THAN    reduce using rule 141 (factor -> STRING .)
    SMALL_EQUALS_TO reduce using rule 141 (factor -> STRING .)
    GREATER_EQUALS_TO reduce using rule 141 (factor -> STRING .)
    SPACECRAFT      reduce using rule 141 (factor -> STRING .)
    NULL_FUSION     reduce using rule 141 (factor -> STRING .)


state 258

    (92) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 92 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 259

    (64) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    STRING_CONCATENATION reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 64 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 260

    (73) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 73 (false_boolean_types -> FALSE .)
    STRING_CONCATENATION reduce using rule 73 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 73 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 73 (false_boolean_types -> FALSE .)


state 261

    (74) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 74 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 74 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 74 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 74 (false_boolean_types -> STRING .)
    STRING_CONCATENATION reduce using rule 74 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 74 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 74 (false_boolean_types -> STRING .)


state 262

    (75) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 75 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 75 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 75 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 75 (false_boolean_types -> INTEGER .)
    STRING_CONCATENATION reduce using rule 75 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 75 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 75 (false_boolean_types -> INTEGER .)


state 263

    (76) false_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 76 (false_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 76 (false_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 76 (false_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 76 (false_boolean_types -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 76 (false_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (false_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 76 (false_boolean_types -> VARIABLE .)


state 264

    (77) false_boolean_types -> IDENTIFIER .

    LOGIC_AND       reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    COMMA           reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    SEMICOLON       reduce using rule 77 (false_boolean_types -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 77 (false_boolean_types -> IDENTIFIER .)


state 265

    (78) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 78 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 78 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 78 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 78 (false_boolean_types -> FLOAT .)
    STRING_CONCATENATION reduce using rule 78 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 78 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 78 (false_boolean_types -> FLOAT .)


state 266

    (79) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 332


state 267

    (65) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    STRING_CONCATENATION reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 65 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 268

    (66) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 66 (true_boolean_types -> TRUE .)
    STRING_CONCATENATION reduce using rule 66 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> TRUE .)


state 269

    (67) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 67 (true_boolean_types -> STRING .)
    STRING_CONCATENATION reduce using rule 67 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 67 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 67 (true_boolean_types -> STRING .)


state 270

    (68) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 68 (true_boolean_types -> INTEGER .)
    STRING_CONCATENATION reduce using rule 68 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 68 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 68 (true_boolean_types -> INTEGER .)


state 271

    (69) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 69 (true_boolean_types -> FLOAT .)
    STRING_CONCATENATION reduce using rule 69 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 69 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 69 (true_boolean_types -> FLOAT .)


state 272

    (70) true_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 70 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 70 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 70 (true_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 70 (true_boolean_types -> VARIABLE .)
    STRING_CONCATENATION reduce using rule 70 (true_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 70 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 70 (true_boolean_types -> VARIABLE .)


state 273

    (71) true_boolean_types -> IDENTIFIER .

    LOGIC_AND       reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    LOGIC_OR        reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    LOGIC_XOR       reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    COMMA           reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (true_boolean_types -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 71 (true_boolean_types -> IDENTIFIER .)


state 274

    (72) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 333


state 275

    (130) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 130 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 130 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 130 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 130 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 130 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 130 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 130 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 130 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 130 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 130 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 130 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 130 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 130 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 130 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 130 (expression -> term PLUS expression .)
    COMMA           reduce using rule 130 (expression -> term PLUS expression .)
    STRING_CONCATENATION reduce using rule 130 (expression -> term PLUS expression .)


state 276

    (131) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 131 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 131 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 131 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 131 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 131 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 131 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 131 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 131 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 131 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 131 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 131 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 131 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 131 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 131 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 131 (expression -> term MINUS expression .)
    COMMA           reduce using rule 131 (expression -> term MINUS expression .)
    STRING_CONCATENATION reduce using rule 131 (expression -> term MINUS expression .)


state 277

    (72) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 334


state 278

    (79) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 79 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 279

    (133) term -> factor MULTIPLY term .

    PLUS            reduce using rule 133 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 133 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 133 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 133 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 133 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 133 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 133 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 133 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 133 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 133 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 133 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 133 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 133 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 133 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 133 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 133 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 133 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 133 (term -> factor MULTIPLY term .)
    STRING_CONCATENATION reduce using rule 133 (term -> factor MULTIPLY term .)


state 280

    (134) term -> factor DIVIDE term .

    PLUS            reduce using rule 134 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 134 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 134 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 134 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 134 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 134 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 134 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 134 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 134 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 134 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 134 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 134 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 134 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 134 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 134 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 134 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 134 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 134 (term -> factor DIVIDE term .)
    STRING_CONCATENATION reduce using rule 134 (term -> factor DIVIDE term .)


state 281

    (135) term -> factor MODULE term .

    PLUS            reduce using rule 135 (term -> factor MODULE term .)
    MINUS           reduce using rule 135 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 135 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 135 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 135 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 135 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 135 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 135 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 135 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 135 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 135 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 135 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 135 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 135 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 135 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 135 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 135 (term -> factor MODULE term .)
    COMMA           reduce using rule 135 (term -> factor MODULE term .)
    STRING_CONCATENATION reduce using rule 135 (term -> factor MODULE term .)


state 282

    (136) term -> factor POW term .

    PLUS            reduce using rule 136 (term -> factor POW term .)
    MINUS           reduce using rule 136 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 136 (term -> factor POW term .)
    IDENTICAL       reduce using rule 136 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 136 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 136 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 136 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 136 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 136 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 136 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 136 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 136 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 136 (term -> factor POW term .)
    SEMICOLON       reduce using rule 136 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 136 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 136 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 136 (term -> factor POW term .)
    COMMA           reduce using rule 136 (term -> factor POW term .)
    STRING_CONCATENATION reduce using rule 136 (term -> factor POW term .)


state 283

    (105) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 105 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 284

    (258) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 335


state 285

    (265) class_implements_opt -> IMPLEMENTS . interface_list
    (267) interface_list -> . IDENTIFIER
    (268) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 337

    interface_list                 shift and go to state 336

state 286

    (263) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 263 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 263 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 287

    (259) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (260) interface_body -> . interface_body interface_method
    (261) interface_body -> .

    RIGHT_BRACE     reduce using rule 261 (interface_body -> .)
    PUBLIC          reduce using rule 261 (interface_body -> .)
    PRIVATE         reduce using rule 261 (interface_body -> .)
    PROTECTED       reduce using rule 261 (interface_body -> .)
    FUNCTION        reduce using rule 261 (interface_body -> .)

    interface_body                 shift and go to state 338

state 288

    (173) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 339


state 289

    (166) params -> real_params .
    (170) real_params -> real_params . COMMA VARIABLE
    (171) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 166 (params -> real_params .)
    COMMA           shift and go to state 340


state 290

    (167) params -> empty .

    RIGHT_PAREN     reduce using rule 167 (params -> empty .)


state 291

    (168) real_params -> VARIABLE .

    COMMA           reduce using rule 168 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 168 (real_params -> VARIABLE .)


state 292

    (169) real_params -> values .

    COMMA           reduce using rule 169 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 169 (real_params -> values .)


state 293

    (165) function_invocation -> VARIABLE LEFT_PAREN . params RIGHT_PAREN
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 341
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 294

    (164) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 342
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 295

    (183) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (186) string_param -> . STRING
    (187) string_param -> . VARIABLE

    STRING          shift and go to state 344
    VARIABLE        shift and go to state 345

    string_param                   shift and go to state 343

state 296

    (184) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (185) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (186) string_param -> . STRING
    (187) string_param -> . VARIABLE

    STRING          shift and go to state 344
    VARIABLE        shift and go to state 345

    string_param                   shift and go to state 346

state 297

    (190) array_special_function -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (191) array_special_function -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (192) array_special_function -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 349
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 347
    structure_matrix_principal     shift and go to state 348
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 350
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 298

    (193) array_special_function -> ARRAY_POP LEFT_PAREN . VARIABLE RIGHT_PAREN

    VARIABLE        shift and go to state 351


state 299

    (181) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 352


state 300

    (182) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 353


state 301

    (176) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (177) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (178) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN expression
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 354
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 302

    (179) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 355
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 303

    (208) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (209) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (229) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (72) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (79) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (211) structure_array -> . key EQUALS GREATER_THAN values
    (212) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (234) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (213) key -> . INTEGER
    (214) key -> . STRING
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 278
    ARRAY           shift and go to state 206
    INTEGER         shift and go to state 214
    STRING          shift and go to state 215
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values_array_indexed           shift and go to state 207
    structure_array                shift and go to state 208
    structure_matrix_first         shift and go to state 209
    values                         shift and go to state 356
    object_creation                shift and go to state 211
    indexed_array                  shift and go to state 212
    key                            shift and go to state 213
    boolean                        shift and go to state 59

state 304

    (223) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 357

  ! LEFT_BRACKET    [ reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 305

    (222) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (235) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 358

  ! LEFT_BRACKET    [ reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 306

    (241) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 360

    indexed_array                  shift and go to state 359

state 307

    (165) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 293


state 308

    (246) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 246 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 309

    (247) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (250) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 247 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 361


state 310

    (164) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (256) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (257) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 294
    LEFT_BRACKET    shift and go to state 362
    EQUALS          reduce using rule 257 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 257 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 257 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 257 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 257 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 257 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 257 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 257 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 257 (accessType -> IDENTIFIER .)
    IF              reduce using rule 257 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 257 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 257 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 257 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 257 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 257 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 257 (accessType -> IDENTIFIER .)
    $end            reduce using rule 257 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 257 (accessType -> IDENTIFIER .)
    STRING_CONCATENATION reduce using rule 257 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 257 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 257 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 257 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 257 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 257 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 257 (accessType -> IDENTIFIER .) ]


state 311

    (251) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    STRING_CONCATENATION reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 251 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 312

    (252) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (255) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    STRING_CONCATENATION reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 252 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 363


state 313

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 364


state 314

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 365


state 315

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (197) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (200) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 367
    LEFT_PAREN      shift and go to state 366
    IDENTIFIER      shift and go to state 370
    INTEGER         shift and go to state 372
    FLOAT           shift and go to state 373
    COUNT           shift and go to state 374
    STRLEN          shift and go to state 375

    expression_for                 shift and go to state 368
    number_values                  shift and go to state 369
    length_operations              shift and go to state 371

state 316

    (162) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 162 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 317

    (163) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 376
    boolean                        shift and go to state 59

state 318

    (233) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (208) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199
    NEW             shift and go to state 46
    ARRAY           shift and go to state 360

    values                         shift and go to state 377
    values_array_indexed           shift and go to state 207
    boolean                        shift and go to state 59
    object_creation                shift and go to state 211
    indexed_array                  shift and go to state 212

state 319

    (208) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 208 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 320

    (209) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    COMMA           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 209 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 321

    (229) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 378


state 322

    (216) values_array_indexed -> values COMMA . values_array_indexed
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    ARRAY           shift and go to state 360
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 210
    values_array_indexed           shift and go to state 379
    object_creation                shift and go to state 211
    indexed_array                  shift and go to state 212
    boolean                        shift and go to state 59

state 323

    (218) values_array_indexed -> object_creation COMMA . values_array_indexed
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    ARRAY           shift and go to state 360
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    object_creation                shift and go to state 211
    values_array_indexed           shift and go to state 380
    values                         shift and go to state 210
    indexed_array                  shift and go to state 212
    boolean                        shift and go to state 59

state 324

    (220) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    ARRAY           shift and go to state 360
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    indexed_array                  shift and go to state 212
    values_array_indexed           shift and go to state 381
    values                         shift and go to state 210
    object_creation                shift and go to state 211
    boolean                        shift and go to state 59

state 325

    (211) structure_array -> key EQUALS . GREATER_THAN values
    (212) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 382


state 326

    (210) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    COMMA           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 210 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 327

    (231) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (232) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 231 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 383


state 328

    (230) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    COMMA           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_PAREN     reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 230 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 329

    (245) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 384


state 330

    (140) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 229


state 331

    (222) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 386
    VARIABLE        shift and go to state 385


state 332

    (79) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 278


state 333

    (72) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 277
    boolean                        shift and go to state 59

state 334

    (72) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 72 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 335

    (258) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (269) class_body -> . class_body class_member
    (270) class_body -> .

    RIGHT_BRACE     reduce using rule 270 (class_body -> .)
    PUBLIC          reduce using rule 270 (class_body -> .)
    PRIVATE         reduce using rule 270 (class_body -> .)
    PROTECTED       reduce using rule 270 (class_body -> .)
    STATIC          reduce using rule 270 (class_body -> .)
    FUNCTION        reduce using rule 270 (class_body -> .)
    VARIABLE        reduce using rule 270 (class_body -> .)
    CONST           reduce using rule 270 (class_body -> .)
    DEFINE          reduce using rule 270 (class_body -> .)

    class_body                     shift and go to state 387

state 336

    (265) class_implements_opt -> IMPLEMENTS interface_list .
    (268) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 265 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 388


state 337

    (267) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 267 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 267 (interface_list -> IDENTIFIER .)


state 338

    (259) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (260) interface_body -> interface_body . interface_method
    (262) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (277) visibility_opt -> . PUBLIC
    (278) visibility_opt -> . PRIVATE
    (279) visibility_opt -> . PROTECTED
    (280) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 389
    PUBLIC          shift and go to state 392
    PRIVATE         shift and go to state 393
    PROTECTED       shift and go to state 394
    FUNCTION        reduce using rule 280 (visibility_opt -> .)

    interface_method               shift and go to state 390
    visibility_opt                 shift and go to state 391

state 339

    (173) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (180) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 396

    codeblock                      shift and go to state 395

state 340

    (170) real_params -> real_params COMMA . VARIABLE
    (171) real_params -> real_params COMMA . values
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 397
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 398
    boolean                        shift and go to state 59

state 341

    (165) function_invocation -> VARIABLE LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 399


state 342

    (164) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 400


state 343

    (183) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 401


state 344

    (186) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 186 (string_param -> STRING .)
    COMMA           reduce using rule 186 (string_param -> STRING .)


state 345

    (187) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 187 (string_param -> VARIABLE .)
    COMMA           reduce using rule 187 (string_param -> VARIABLE .)


state 346

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (185) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 402


state 347

    (190) array_special_function -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 403

state 348

    (191) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 405

state 349

    (192) array_special_function -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    LEFT_BRACKET    shift and go to state 85
    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 406

state 350

    (207) structure_array_principal -> access_array_element .
    (221) access_array_stucture -> access_array_element . SEMICOLON

    COMMA           reduce using rule 207 (structure_array_principal -> access_array_element .)
    RIGHT_PAREN     reduce using rule 207 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 91


state 351

    (193) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 407


state 352

    (181) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 408


state 353

    (182) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 409


state 354

    (176) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (177) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (178) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN expression

    RIGHT_PAREN     shift and go to state 410


state 355

    (179) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 411


state 356

    (72) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (215) values_array_indexed -> values .
    (216) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 334
    COMMA           shift and go to state 322

  ! RIGHT_PAREN     [ reduce using rule 215 (values_array_indexed -> values .) ]


state 357

    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 412
    INTEGER         shift and go to state 413


state 358

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 415
    VARIABLE        shift and go to state 414


state 359

    (241) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    COMMA           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_PAREN     reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 241 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 360

    (208) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 416


state 361

    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (250) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 417
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 418
    access_array_element           shift and go to state 419
    boolean                        shift and go to state 59

state 362

    (256) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 420


state 363

    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (255) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 423
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    access_array_element           shift and go to state 421
    values                         shift and go to state 422
    boolean                        shift and go to state 59

state 364

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 424
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 365

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 428
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 366

    (41) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (197) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (200) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 367
    LEFT_PAREN      shift and go to state 366
    IDENTIFIER      shift and go to state 370
    INTEGER         shift and go to state 372
    FLOAT           shift and go to state 373
    COUNT           shift and go to state 374
    STRLEN          shift and go to state 375

    expression_for                 shift and go to state 429
    number_values                  shift and go to state 369
    length_operations              shift and go to state 371

state 367

    (38) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 38 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 38 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 38 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 38 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 38 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 38 (expression_for -> VARIABLE .)
    POW             reduce using rule 38 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> VARIABLE .)


state 368

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 430
    PLUS            shift and go to state 432
    MINUS           shift and go to state 433
    MULTIPLY        shift and go to state 434
    DIVIDE          shift and go to state 435
    MODULE          shift and go to state 436
    POW             shift and go to state 437

    operator_aritmetic             shift and go to state 431

state 369

    (39) expression_for -> number_values .

    SEMICOLON       reduce using rule 39 (expression_for -> number_values .)
    PLUS            reduce using rule 39 (expression_for -> number_values .)
    MINUS           reduce using rule 39 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 39 (expression_for -> number_values .)
    DIVIDE          reduce using rule 39 (expression_for -> number_values .)
    MODULE          reduce using rule 39 (expression_for -> number_values .)
    POW             reduce using rule 39 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> number_values .)


state 370

    (42) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 438


state 371

    (44) expression_for -> length_operations .

    SEMICOLON       reduce using rule 44 (expression_for -> length_operations .)
    PLUS            reduce using rule 44 (expression_for -> length_operations .)
    MINUS           reduce using rule 44 (expression_for -> length_operations .)
    MULTIPLY        reduce using rule 44 (expression_for -> length_operations .)
    DIVIDE          reduce using rule 44 (expression_for -> length_operations .)
    MODULE          reduce using rule 44 (expression_for -> length_operations .)
    POW             reduce using rule 44 (expression_for -> length_operations .)
    RIGHT_PAREN     reduce using rule 44 (expression_for -> length_operations .)


state 372

    (45) number_values -> INTEGER .

    SEMICOLON       reduce using rule 45 (number_values -> INTEGER .)
    PLUS            reduce using rule 45 (number_values -> INTEGER .)
    MINUS           reduce using rule 45 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 45 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 45 (number_values -> INTEGER .)
    MODULE          reduce using rule 45 (number_values -> INTEGER .)
    POW             reduce using rule 45 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 45 (number_values -> INTEGER .)


state 373

    (46) number_values -> FLOAT .

    SEMICOLON       reduce using rule 46 (number_values -> FLOAT .)
    PLUS            reduce using rule 46 (number_values -> FLOAT .)
    MINUS           reduce using rule 46 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 46 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 46 (number_values -> FLOAT .)
    MODULE          reduce using rule 46 (number_values -> FLOAT .)
    POW             reduce using rule 46 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 46 (number_values -> FLOAT .)


state 374

    (197) length_operations -> COUNT . LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> COUNT . LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> COUNT . LEFT_PAREN VARIABLE count_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 439


state 375

    (200) length_operations -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 440


state 376

    (163) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 441


state 377

    (233) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (215) values_array_indexed -> values .
    (216) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 442
    COMMA           shift and go to state 322

  ! RIGHT_PAREN     [ reduce using rule 215 (values_array_indexed -> values .) ]


state 378

    (229) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    COMMA           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 229 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 379

    (216) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 216 (values_array_indexed -> values COMMA values_array_indexed .)


state 380

    (218) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 218 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 381

    (220) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 220 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 382

    (211) structure_array -> key EQUALS GREATER_THAN . values
    (212) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 443
    boolean                        shift and go to state 59

state 383

    (232) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (231) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (232) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 103

    structure_matrix_second        shift and go to state 444

state 384

    (245) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 245 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 385

    (223) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 445


state 386

    (222) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 446


state 387

    (258) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (269) class_body -> class_body . class_member
    (271) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (272) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (273) class_member -> . class_attribute
    (277) visibility_opt -> . PUBLIC
    (278) visibility_opt -> . PRIVATE
    (279) visibility_opt -> . PROTECTED
    (280) visibility_opt -> .
    (274) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (275) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (276) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 447
    PUBLIC          shift and go to state 392
    PRIVATE         shift and go to state 393
    PROTECTED       shift and go to state 394
    STATIC          reduce using rule 280 (visibility_opt -> .)
    FUNCTION        reduce using rule 280 (visibility_opt -> .)
    VARIABLE        reduce using rule 280 (visibility_opt -> .)
    CONST           reduce using rule 280 (visibility_opt -> .)
    DEFINE          reduce using rule 280 (visibility_opt -> .)

    class_member                   shift and go to state 448
    visibility_opt                 shift and go to state 449
    class_attribute                shift and go to state 450

state 388

    (268) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 451


state 389

    (259) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 259 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 390

    (260) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 260 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 260 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 260 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 260 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 260 (interface_body -> interface_body interface_method .)


state 391

    (262) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 452


state 392

    (277) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 277 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 277 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 277 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 277 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 277 (visibility_opt -> PUBLIC .)


state 393

    (278) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 278 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 278 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 278 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 278 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 278 (visibility_opt -> PRIVATE .)


state 394

    (279) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 279 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 279 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 279 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 279 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 279 (visibility_opt -> PROTECTED .)


state 395

    (173) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 173 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 396

    (180) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 453
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 397

    (170) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 170 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 170 (real_params -> real_params COMMA VARIABLE .)


state 398

    (171) real_params -> real_params COMMA values .

    COMMA           reduce using rule 171 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 171 (real_params -> real_params COMMA values .)


state 399

    (165) function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 165 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)


state 400

    (164) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    STRING_CONCATENATION reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 164 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 401

    (183) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 183 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 402

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (185) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (188) int_param -> . INTEGER
    (189) int_param -> . VARIABLE

    INTEGER         shift and go to state 455
    VARIABLE        shift and go to state 456

    int_param                      shift and go to state 454

state 403

    (190) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 457


state 404

    (194) count_param -> COMMA . COUNT_NORMAL
    (195) count_param -> COMMA . COUNT_RECURSIVE

    COUNT_NORMAL    shift and go to state 458
    COUNT_RECURSIVE shift and go to state 459


state 405

    (191) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 460


state 406

    (192) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 461


state 407

    (193) array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 193 (array_special_function -> ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 408

    (181) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 181 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 409

    (182) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 182 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 410

    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN print_statement
    (178) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN expression

    EQUALS          shift and go to state 462


state 411

    (179) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (180) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 396

    codeblock                      shift and go to state 463

state 412

    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 464


state 413

    (237) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 465


state 414

    (238) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 466


state 415

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 467


state 416

    (208) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (215) values_array_indexed -> . values
    (216) values_array_indexed -> . values COMMA values_array_indexed
    (217) values_array_indexed -> . object_creation
    (218) values_array_indexed -> . object_creation COMMA values_array_indexed
    (219) values_array_indexed -> . indexed_array
    (220) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    NEW             shift and go to state 46
    ARRAY           shift and go to state 360
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values_array_indexed           shift and go to state 207
    values                         shift and go to state 210
    object_creation                shift and go to state 211
    indexed_array                  shift and go to state 212
    boolean                        shift and go to state 59

state 417

    (249) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 331

  ! LEFT_BRACKET    [ reduce using rule 249 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 418

    (248) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 248 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 419

    (250) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 250 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 420

    (256) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 468


state 421

    (255) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    STRING_CONCATENATION reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 255 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 422

    (253) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    STRING_CONCATENATION reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 253 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 423

    (254) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    STRING_CONCATENATION reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 331

  ! LEFT_BRACKET    [ reduce using rule 254 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 424

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 469


state 425

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (29) body_statement -> sentence . RETURN printable_values SEMICOLON
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 470
    BREAK           shift and go to state 471
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 425
    body_statement                 shift and go to state 472
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 426

    (26) body_statement -> RETURN . values SEMICOLON
    (28) body_statement -> RETURN . printable_values SEMICOLON
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    values                         shift and go to state 473
    printable_values               shift and go to state 474
    boolean                        shift and go to state 59
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 427

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 475


state 428

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 476


state 429

    (41) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 477
    PLUS            shift and go to state 432
    MINUS           shift and go to state 433
    MULTIPLY        shift and go to state 434
    DIVIDE          shift and go to state 435
    MODULE          shift and go to state 436
    POW             shift and go to state 437

    operator_aritmetic             shift and go to state 431

state 430

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (37) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 478

    condition_for                  shift and go to state 479

state 431

    (40) expression_for -> expression_for operator_aritmetic . expression_for
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (197) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (200) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 367
    LEFT_PAREN      shift and go to state 366
    IDENTIFIER      shift and go to state 370
    INTEGER         shift and go to state 372
    FLOAT           shift and go to state 373
    COUNT           shift and go to state 374
    STRLEN          shift and go to state 375

    expression_for                 shift and go to state 480
    number_values                  shift and go to state 369
    length_operations              shift and go to state 371

state 432

    (47) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> PLUS .)
    COUNT           reduce using rule 47 (operator_aritmetic -> PLUS .)
    STRLEN          reduce using rule 47 (operator_aritmetic -> PLUS .)


state 433

    (48) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MINUS .)
    COUNT           reduce using rule 48 (operator_aritmetic -> MINUS .)
    STRLEN          reduce using rule 48 (operator_aritmetic -> MINUS .)


state 434

    (49) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    COUNT           reduce using rule 49 (operator_aritmetic -> MULTIPLY .)
    STRLEN          reduce using rule 49 (operator_aritmetic -> MULTIPLY .)


state 435

    (50) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    COUNT           reduce using rule 50 (operator_aritmetic -> DIVIDE .)
    STRLEN          reduce using rule 50 (operator_aritmetic -> DIVIDE .)


state 436

    (51) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 51 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 51 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 51 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 51 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 51 (operator_aritmetic -> MODULE .)
    COUNT           reduce using rule 51 (operator_aritmetic -> MODULE .)
    STRLEN          reduce using rule 51 (operator_aritmetic -> MODULE .)


state 437

    (52) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 52 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 52 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 52 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 52 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 52 (operator_aritmetic -> POW .)
    COUNT           reduce using rule 52 (operator_aritmetic -> POW .)
    STRLEN          reduce using rule 52 (operator_aritmetic -> POW .)


state 438

    (42) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (43) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 481

    access_array_element           shift and go to state 482

state 439

    (197) length_operations -> COUNT LEFT_PAREN . structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> COUNT LEFT_PAREN . structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> COUNT LEFT_PAREN . VARIABLE count_param RIGHT_PAREN
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array

    VARIABLE        shift and go to state 485
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45

    structure_array_principal      shift and go to state 483
    structure_matrix_principal     shift and go to state 484
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 350
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36

state 440

    (200) length_operations -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (186) string_param -> . STRING
    (187) string_param -> . VARIABLE

    STRING          shift and go to state 344
    VARIABLE        shift and go to state 345

    string_param                   shift and go to state 486

state 441

    (163) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 163 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 442

    (233) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (234) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 233 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 487


state 443

    (211) structure_array -> key EQUALS GREATER_THAN values .
    (212) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 211 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 211 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 488


state 444

    (232) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 232 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 445

    (223) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 223 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 446

    (222) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 222 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 447

    (258) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 258 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 448

    (269) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 269 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 269 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 269 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 269 (class_body -> class_body class_member .)
    STATIC          reduce using rule 269 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 269 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 269 (class_body -> class_body class_member .)
    CONST           reduce using rule 269 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 269 (class_body -> class_body class_member .)


state 449

    (271) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (272) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (274) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (275) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (276) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 489
    FUNCTION        shift and go to state 490
    VARIABLE        shift and go to state 491
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 492
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 450

    (273) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 273 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 273 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 273 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 273 (class_member -> class_attribute .)
    STATIC          reduce using rule 273 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 273 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 273 (class_member -> class_attribute .)
    CONST           reduce using rule 273 (class_member -> class_attribute .)
    DEFINE          reduce using rule 273 (class_member -> class_attribute .)


state 451

    (268) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 268 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 268 (interface_list -> interface_list COMMA IDENTIFIER .)


state 452

    (262) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 493


state 453

    (180) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 494


state 454

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (185) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 496
    COMMA           shift and go to state 495


state 455

    (188) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 188 (int_param -> INTEGER .)
    COMMA           reduce using rule 188 (int_param -> INTEGER .)


state 456

    (189) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 189 (int_param -> VARIABLE .)
    COMMA           reduce using rule 189 (int_param -> VARIABLE .)


state 457

    (190) array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 190 (array_special_function -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 458

    (194) count_param -> COMMA COUNT_NORMAL .

    RIGHT_PAREN     reduce using rule 194 (count_param -> COMMA COUNT_NORMAL .)


state 459

    (195) count_param -> COMMA COUNT_RECURSIVE .

    RIGHT_PAREN     reduce using rule 195 (count_param -> COMMA COUNT_RECURSIVE .)


state 460

    (191) array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 191 (array_special_function -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 461

    (192) array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 192 (array_special_function -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 462

    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN print_statement
    (178) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN expression

    GREATER_THAN    shift and go to state 497


state 463

    (179) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 179 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 464

    (236) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 236 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 465

    (237) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 237 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 466

    (238) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 238 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 467

    (235) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 235 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 468

    (256) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    STRING_CONCATENATION reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 256 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 469

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 500
    ELSE            shift and go to state 501

    elseif_statement               shift and go to state 498
    else_statement                 shift and go to state 499

state 470

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (29) body_statement -> sentence RETURN . printable_values SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (28) body_statement -> RETURN . printable_values SEMICOLON
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (108) printable_values -> . values
    (109) printable_values -> . values printable_dividers printable_values
    (110) printable_values -> . values COMMA printable_values
    (111) printable_values -> . VARIABLE
    (112) printable_values -> . VARIABLE printable_dividers printable_values
    (113) printable_values -> . VARIABLE COMMA printable_values
    (114) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (115) printable_values -> . conditional
    (116) printable_values -> . conditional printable_dividers printable_values
    (117) printable_values -> . conditional COMMA printable_values
    (118) printable_values -> . structure_object_principal
    (119) printable_values -> . structure_object_principal printable_dividers printable_values
    (120) printable_values -> . structure_object_principal COMMA printable_values
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    SEMICOLON       shift and go to state 503
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 70
    ARRAY           shift and go to state 74
    NULL            shift and go to state 75

    values                         shift and go to state 502
    printable_values               shift and go to state 504
    boolean                        shift and go to state 59
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    access_array_element           shift and go to state 67
    expression                     shift and go to state 68
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 471

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 505


state 472

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 473

    (26) body_statement -> RETURN values . SEMICOLON
    (108) printable_values -> values .
    (109) printable_values -> values . printable_dividers printable_values
    (110) printable_values -> values . COMMA printable_values
    (83) comparation -> values . comparator_operator values
    (84) comparation -> values . comparator_operator expression
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 506
    COMMA           shift and go to state 115
    STRING_CONCATENATION shift and go to state 117
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

  ! SEMICOLON       [ reduce using rule 108 (printable_values -> values .) ]

    printable_dividers             shift and go to state 114
    comparator_operator            shift and go to state 116

state 474

    (28) body_statement -> RETURN printable_values . SEMICOLON

    SEMICOLON       shift and go to state 507


state 475

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 476

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 477

    (41) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 478

    (37) condition_for -> VARIABLE . comparator_operator expression_for
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 508

state 479

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 509


state 480

    (40) expression_for -> expression_for operator_aritmetic expression_for .
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 432
    MINUS           shift and go to state 433
    MULTIPLY        shift and go to state 434
    DIVIDE          shift and go to state 435
    MODULE          shift and go to state 436
    POW             shift and go to state 437

  ! PLUS            [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 40 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 431

state 481

    (42) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 510
    LEFT_BRACKET    shift and go to state 331


state 482

    (43) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 511


state 483

    (197) length_operations -> COUNT LEFT_PAREN structure_array_principal . count_param RIGHT_PAREN
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 512

state 484

    (198) length_operations -> COUNT LEFT_PAREN structure_matrix_principal . count_param RIGHT_PAREN
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 513

state 485

    (199) length_operations -> COUNT LEFT_PAREN VARIABLE . count_param RIGHT_PAREN
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (194) count_param -> . COMMA COUNT_NORMAL
    (195) count_param -> . COMMA COUNT_RECURSIVE
    (196) count_param -> .

    LEFT_BRACKET    shift and go to state 85
    COMMA           shift and go to state 404
    RIGHT_PAREN     reduce using rule 196 (count_param -> .)

    count_param                    shift and go to state 514

state 486

    (200) length_operations -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 515


state 487

    (234) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (233) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (234) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 516

    structure_matrix_first         shift and go to state 517

state 488

    (212) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (211) structure_array -> . key EQUALS GREATER_THAN values
    (212) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (213) key -> . INTEGER
    (214) key -> . STRING

    INTEGER         shift and go to state 217
    STRING          shift and go to state 218

    key                            shift and go to state 213
    structure_array                shift and go to state 518

state 489

    (271) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 519


state 490

    (272) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 520


state 491

    (274) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (275) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 521
    SEMICOLON       shift and go to state 522


state 492

    (276) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 523


state 493

    (262) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 524


state 494

    (180) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 180 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 495

    (185) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (188) int_param -> . INTEGER
    (189) int_param -> . VARIABLE

    INTEGER         shift and go to state 455
    VARIABLE        shift and go to state 456

    int_param                      shift and go to state 525

state 496

    (184) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 184 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 497

    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . print_statement
    (178) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . expression
    (180) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    LEFT_BRACE      shift and go to state 396
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    INTEGER         shift and go to state 255
    FLOAT           shift and go to state 256
    VARIABLE        shift and go to state 237
    LEFT_PAREN      shift and go to state 238
    STRING          shift and go to state 257

    codeblock                      shift and go to state 526
    print_statement                shift and go to state 527
    expression                     shift and go to state 528
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 498

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 499

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 500

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 529


state 501

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 530


state 502

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON
    (108) printable_values -> values .
    (109) printable_values -> values . printable_dividers printable_values
    (110) printable_values -> values . COMMA printable_values
    (83) comparation -> values . comparator_operator values
    (84) comparation -> values . comparator_operator expression
    (121) printable_dividers -> . COMMA
    (122) printable_dividers -> . STRING_CONCATENATION
    (94) comparator_operator -> . EQUALS_EQUALS
    (95) comparator_operator -> . IDENTICAL
    (96) comparator_operator -> . NOT_EQUALS
    (97) comparator_operator -> . NOT_IDENTICAL
    (98) comparator_operator -> . SMALL_THAN
    (99) comparator_operator -> . GREATER_THAN
    (100) comparator_operator -> . SMALL_EQUALS_TO
    (101) comparator_operator -> . GREATER_EQUALS_TO
    (102) comparator_operator -> . SPACECRAFT
    (103) comparator_operator -> . NULL_FUSION

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 531
    COMMA           shift and go to state 115
    STRING_CONCATENATION shift and go to state 117
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

  ! SEMICOLON       [ reduce using rule 108 (printable_values -> values .) ]

    printable_dividers             shift and go to state 114
    comparator_operator            shift and go to state 116

state 503

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 504

    (29) body_statement -> sentence RETURN printable_values . SEMICOLON
    (28) body_statement -> RETURN printable_values . SEMICOLON

    SEMICOLON       shift and go to state 532


state 505

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 506

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 507

    (28) body_statement -> RETURN printable_values SEMICOLON .

    RIGHT_BRACE     reduce using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)


state 508

    (37) condition_for -> VARIABLE comparator_operator . expression_for
    (38) expression_for -> . VARIABLE
    (39) expression_for -> . number_values
    (40) expression_for -> . expression_for operator_aritmetic expression_for
    (41) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (42) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (43) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (44) expression_for -> . length_operations
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT
    (197) length_operations -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (198) length_operations -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (199) length_operations -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (200) length_operations -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN

    VARIABLE        shift and go to state 367
    LEFT_PAREN      shift and go to state 366
    IDENTIFIER      shift and go to state 370
    INTEGER         shift and go to state 372
    FLOAT           shift and go to state 373
    COUNT           shift and go to state 374
    STRLEN          shift and go to state 375

    expression_for                 shift and go to state 533
    number_values                  shift and go to state 369
    length_operations              shift and go to state 371

state 509

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (31) increment_statement -> . VARIABLE INCREASE
    (32) increment_statement -> . VARIABLE DECREMENT
    (33) increment_statement -> . INCREASE VARIABLE
    (34) increment_statement -> . DECREMENT VARIABLE
    (35) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (36) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 534
    INCREASE        shift and go to state 536
    DECREMENT       shift and go to state 537

    increment_statement            shift and go to state 535

state 510

    (42) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 42 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 511

    (43) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 43 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 512

    (197) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 538


state 513

    (198) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 539


state 514

    (199) length_operations -> COUNT LEFT_PAREN VARIABLE count_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 540


state 515

    (200) length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    PLUS            reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MINUS           reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    MODULE          reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    POW             reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 200 (length_operations -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 516

    (233) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 541


state 517

    (234) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 234 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 518

    (212) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 212 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 212 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 519

    (271) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 542


state 520

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 543


state 521

    (274) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 544
    boolean                        shift and go to state 59

state 522

    (275) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 275 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 523

    (276) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 276 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 524

    (262) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 545
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 525

    (185) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 546


state 526

    (176) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 176 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 527

    (177) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .

    SEMICOLON       reduce using rule 177 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .)


state 528

    (178) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression .

    SEMICOLON       reduce using rule 178 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN expression .)


state 529

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (53) conditional -> . boolean_expression
    (54) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean_expression -> . comparation
    (59) boolean_expression -> . VARIABLE
    (60) boolean_expression -> . IDENTIFIER
    (61) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (62) boolean_expression -> . logic_not_sentence
    (63) boolean_expression -> . logic_expression
    (83) comparation -> . values comparator_operator values
    (84) comparation -> . values comparator_operator expression
    (85) comparation -> . expression comparator_operator expression
    (86) comparation -> . VARIABLE EQUALS_EQUALS values
    (87) comparation -> . access_array_element EQUALS_EQUALS values
    (88) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (89) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (90) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (91) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (92) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (93) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (81) logic_not_sentence -> . LOGIC_NOT conditional
    (82) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (64) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (65) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (66) true_boolean_types -> . TRUE
    (67) true_boolean_types -> . STRING
    (68) true_boolean_types -> . INTEGER
    (69) true_boolean_types -> . FLOAT
    (70) true_boolean_types -> . VARIABLE
    (71) true_boolean_types -> . IDENTIFIER
    (72) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (73) false_boolean_types -> . FALSE
    (74) false_boolean_types -> . STRING
    (75) false_boolean_types -> . INTEGER
    (76) false_boolean_types -> . VARIABLE
    (77) false_boolean_types -> . IDENTIFIER
    (78) false_boolean_types -> . FLOAT
    (79) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (80) false_boolean_types -> . NULL
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    VARIABLE        shift and go to state 201
    IDENTIFIER      shift and go to state 64
    LEFT_PAREN      shift and go to state 106
    LOGIC_NOT       shift and go to state 70
    INTEGER         shift and go to state 57
    STRING          shift and go to state 54
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 148
    ARRAY           shift and go to state 74
    FALSE           shift and go to state 149
    NULL            shift and go to state 75

    conditional                    shift and go to state 547
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 65
    logic_expression               shift and go to state 66
    values                         shift and go to state 146
    expression                     shift and go to state 68
    access_array_element           shift and go to state 147
    access_element_matrix          shift and go to state 69
    true_boolean_types             shift and go to state 71
    false_boolean_types            shift and go to state 72
    boolean                        shift and go to state 59
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 530

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 548
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 531

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 532

    (29) body_statement -> sentence RETURN printable_values SEMICOLON .
    (28) body_statement -> RETURN printable_values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 28 (body_statement -> RETURN printable_values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 29 (body_statement -> sentence RETURN printable_values SEMICOLON .) ]


state 533

    (37) condition_for -> VARIABLE comparator_operator expression_for .
    (40) expression_for -> expression_for . operator_aritmetic expression_for
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 37 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 432
    MINUS           shift and go to state 433
    MULTIPLY        shift and go to state 434
    DIVIDE          shift and go to state 435
    MODULE          shift and go to state 436
    POW             shift and go to state 437

    operator_aritmetic             shift and go to state 431

state 534

    (31) increment_statement -> VARIABLE . INCREASE
    (32) increment_statement -> VARIABLE . DECREMENT
    (35) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (36) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 549
    DECREMENT       shift and go to state 550
    PLUS_EQUALS     shift and go to state 551
    EQUALS          shift and go to state 552


state 535

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 553


state 536

    (33) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 554


state 537

    (34) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 555


state 538

    (197) length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 197 (length_operations -> COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN .)


state 539

    (198) length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    PLUS            reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MINUS           reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    MODULE          reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    POW             reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 198 (length_operations -> COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN .)


state 540

    (199) length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    PLUS            reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MINUS           reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MULTIPLY        reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    DIVIDE          reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    MODULE          reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    POW             reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 199 (length_operations -> COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN .)


state 541

    (233) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    values                         shift and go to state 556
    boolean                        shift and go to state 59

state 542

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 557


state 543

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 558
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 544

    (274) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 559


state 545

    (262) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 560


state 546

    (185) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    SEMICOLON       reduce using rule 185 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 547

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 561


state 548

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 562


state 549

    (31) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> VARIABLE INCREASE .)


state 550

    (32) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> VARIABLE DECREMENT .)


state 551

    (35) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 563


state 552

    (36) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 564


state 553

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 565


state 554

    (33) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> INCREASE VARIABLE .)


state 555

    (34) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> DECREMENT VARIABLE .)


state 556

    (233) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (234) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 442


state 557

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (166) params -> . real_params
    (167) params -> . empty
    (168) real_params -> . VARIABLE
    (169) real_params -> . values
    (170) real_params -> . real_params COMMA VARIABLE
    (171) real_params -> . real_params COMMA values
    (172) empty -> .
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE

    VARIABLE        shift and go to state 291
    RIGHT_PAREN     reduce using rule 172 (empty -> .)
    INTEGER         shift and go to state 195
    STRING          shift and go to state 196
    FLOAT           shift and go to state 197
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199

    params                         shift and go to state 566
    real_params                    shift and go to state 289
    empty                          shift and go to state 290
    values                         shift and go to state 292
    boolean                        shift and go to state 59

state 558

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 567


state 559

    (274) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 274 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 560

    (262) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 568


state 561

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 569


state 562

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 563

    (35) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 35 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 564

    (36) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (47) operator_aritmetic -> . PLUS
    (48) operator_aritmetic -> . MINUS
    (49) operator_aritmetic -> . MULTIPLY
    (50) operator_aritmetic -> . DIVIDE
    (51) operator_aritmetic -> . MODULE
    (52) operator_aritmetic -> . POW

    PLUS            shift and go to state 432
    MINUS           shift and go to state 433
    MULTIPLY        shift and go to state 434
    DIVIDE          shift and go to state 435
    MODULE          shift and go to state 436
    POW             shift and go to state 437

    operator_aritmetic             shift and go to state 570

state 565

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 571
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 566

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 572


state 567

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 573


state 568

    (262) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 262 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 262 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 262 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 262 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 262 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 569

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (28) body_statement -> . RETURN printable_values SEMICOLON
    (29) body_statement -> . sentence RETURN printable_values SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 426
    BREAK           shift and go to state 427
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 574
    sentence                       shift and go to state 425
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 570

    (36) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (45) number_values -> . INTEGER
    (46) number_values -> . FLOAT

    INTEGER         shift and go to state 372
    FLOAT           shift and go to state 373

    number_values                  shift and go to state 575

state 571

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 576


state 572

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 577


state 573

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (281) method_body -> . classStatement
    (282) method_body -> . classStatement return_form
    (283) method_body -> . return_form
    (284) method_body -> . classStatement BREAK SEMICOLON
    (285) method_body -> . classStatement method_body
    (292) classStatement -> . sentence
    (293) classStatement -> . access_method_object SEMICOLON
    (286) return_form -> . RETURN values SEMICOLON
    (287) return_form -> . RETURN access_method_object SEMICOLON
    (288) return_form -> . RETURN SEMICOLON
    (289) return_form -> . RETURN expression SEMICOLON
    (290) return_form -> . RETURN string_special_function SEMICOLON
    (291) return_form -> . RETURN array_special_function SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 583
    VARIABLE        shift and go to state 584
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 578
    classStatement                 shift and go to state 579
    return_form                    shift and go to state 580
    sentence                       shift and go to state 581
    access_method_object           shift and go to state 582
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 585
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 574

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 586


state 575

    (36) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 36 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 576

    (30) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 30 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 577

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (281) method_body -> . classStatement
    (282) method_body -> . classStatement return_form
    (283) method_body -> . return_form
    (284) method_body -> . classStatement BREAK SEMICOLON
    (285) method_body -> . classStatement method_body
    (292) classStatement -> . sentence
    (293) classStatement -> . access_method_object SEMICOLON
    (286) return_form -> . RETURN values SEMICOLON
    (287) return_form -> . RETURN access_method_object SEMICOLON
    (288) return_form -> . RETURN SEMICOLON
    (289) return_form -> . RETURN expression SEMICOLON
    (290) return_form -> . RETURN string_special_function SEMICOLON
    (291) return_form -> . RETURN array_special_function SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 583
    VARIABLE        shift and go to state 584
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 587
    classStatement                 shift and go to state 579
    return_form                    shift and go to state 580
    sentence                       shift and go to state 581
    access_method_object           shift and go to state 582
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 585
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 578

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 588


state 579

    (281) method_body -> classStatement .
    (282) method_body -> classStatement . return_form
    (284) method_body -> classStatement . BREAK SEMICOLON
    (285) method_body -> classStatement . method_body
    (286) return_form -> . RETURN values SEMICOLON
    (287) return_form -> . RETURN access_method_object SEMICOLON
    (288) return_form -> . RETURN SEMICOLON
    (289) return_form -> . RETURN expression SEMICOLON
    (290) return_form -> . RETURN string_special_function SEMICOLON
    (291) return_form -> . RETURN array_special_function SEMICOLON
    (281) method_body -> . classStatement
    (282) method_body -> . classStatement return_form
    (283) method_body -> . return_form
    (284) method_body -> . classStatement BREAK SEMICOLON
    (285) method_body -> . classStatement method_body
    (292) classStatement -> . sentence
    (293) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (104) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (105) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (106) print_statement -> . ECHO printable_values
    (107) print_statement -> . PRINT printable_values
    (142) assignment -> . variable_assignment
    (143) assignment -> . constant_assignment
    (201) types_structure -> . structure_array_principal
    (202) types_structure -> . structure_matrix_principal
    (203) types_structure -> . structure_object_principal
    (258) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (259) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (173) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (144) variable_assignment -> . VARIABLE assignment_operator values
    (145) variable_assignment -> . VARIABLE assignment_operator IDENTIFIER
    (146) variable_assignment -> . VARIABLE assignment_operator expression
    (147) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (148) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (149) variable_assignment -> . VARIABLE assignment_operator array_special_function
    (150) variable_assignment -> . VARIABLE assignment_operator types_structure
    (151) variable_assignment -> . VARIABLE assignment_operator input
    (152) variable_assignment -> . VARIABLE assignment_operator special_function
    (153) variable_assignment -> . VARIABLE assignment_operator conditional
    (154) variable_assignment -> . VARIABLE INCREASE
    (155) variable_assignment -> . VARIABLE DECREMENT
    (156) variable_assignment -> . INCREASE VARIABLE
    (157) variable_assignment -> . DECREMENT VARIABLE
    (160) constant_assignment -> . const_syntax
    (161) constant_assignment -> . define_syntax
    (204) structure_array_principal -> . indexed_array
    (205) structure_array_principal -> . associative_array
    (206) structure_array_principal -> . access_array_stucture
    (207) structure_array_principal -> . access_array_element
    (224) structure_matrix_principal -> . matrix_firstform
    (225) structure_matrix_principal -> . matrix_secondform
    (226) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (227) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (228) structure_matrix_principal -> . add_element_matrix
    (242) structure_object_principal -> . object_creation
    (243) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (30) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (162) const_syntax -> . CONST IDENTIFIER EQUALS values
    (163) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (208) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (209) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (210) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (221) access_array_stucture -> . access_array_element SEMICOLON
    (229) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (230) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (235) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (239) modify_element_matrix -> . access_element_matrix EQUALS values
    (240) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (241) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (244) object_creation -> . NEW IDENTIFIER
    (245) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 281 (method_body -> classStatement .)
    BREAK           shift and go to state 590
    RETURN          shift and go to state 583
    VARIABLE        shift and go to state 584
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 579
    return_form                    shift and go to state 589
    method_body                    shift and go to state 591
    access_method_object           shift and go to state 582
    sentence                       shift and go to state 581
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 585
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 580

    (283) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 283 (method_body -> return_form .)


state 581

    (292) classStatement -> sentence .

    BREAK           reduce using rule 292 (classStatement -> sentence .)
    RETURN          reduce using rule 292 (classStatement -> sentence .)
    VARIABLE        reduce using rule 292 (classStatement -> sentence .)
    ECHO            reduce using rule 292 (classStatement -> sentence .)
    PRINT           reduce using rule 292 (classStatement -> sentence .)
    CLASS           reduce using rule 292 (classStatement -> sentence .)
    INTERFACE       reduce using rule 292 (classStatement -> sentence .)
    FUNCTION        reduce using rule 292 (classStatement -> sentence .)
    INCREASE        reduce using rule 292 (classStatement -> sentence .)
    DECREMENT       reduce using rule 292 (classStatement -> sentence .)
    IF              reduce using rule 292 (classStatement -> sentence .)
    WHILE           reduce using rule 292 (classStatement -> sentence .)
    FOR             reduce using rule 292 (classStatement -> sentence .)
    CONST           reduce using rule 292 (classStatement -> sentence .)
    DEFINE          reduce using rule 292 (classStatement -> sentence .)
    ARRAY           reduce using rule 292 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 292 (classStatement -> sentence .)
    NEW             reduce using rule 292 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 292 (classStatement -> sentence .)


state 582

    (293) classStatement -> access_method_object . SEMICOLON
    (243) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 592
    BREAK           reduce using rule 243 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 243 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 243 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 243 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 243 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 243 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 243 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 243 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 243 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 243 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 243 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 243 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 243 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 243 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 243 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 243 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 243 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 243 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 243 (structure_object_principal -> access_method_object .)


state 583

    (286) return_form -> RETURN . values SEMICOLON
    (287) return_form -> RETURN . access_method_object SEMICOLON
    (288) return_form -> RETURN . SEMICOLON
    (289) return_form -> RETURN . expression SEMICOLON
    (290) return_form -> RETURN . string_special_function SEMICOLON
    (291) return_form -> RETURN . array_special_function SEMICOLON
    (123) values -> . INTEGER
    (124) values -> . STRING
    (125) values -> . FLOAT
    (126) values -> . boolean
    (246) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (247) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (248) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (251) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (252) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (253) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (129) expression -> . term
    (130) expression -> . term PLUS expression
    (131) expression -> . term MINUS expression
    (183) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (184) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (185) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (190) array_special_function -> . COUNT LEFT_PAREN structure_array_principal count_param RIGHT_PAREN
    (191) array_special_function -> . COUNT LEFT_PAREN structure_matrix_principal count_param RIGHT_PAREN
    (192) array_special_function -> . COUNT LEFT_PAREN VARIABLE count_param RIGHT_PAREN
    (193) array_special_function -> . ARRAY_POP LEFT_PAREN VARIABLE RIGHT_PAREN
    (127) boolean -> . TRUE
    (128) boolean -> . FALSE
    (222) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (132) term -> . factor
    (133) term -> . factor MULTIPLY term
    (134) term -> . factor DIVIDE term
    (135) term -> . factor MODULE term
    (136) term -> . factor POW term
    (137) factor -> . INTEGER
    (138) factor -> . FLOAT
    (139) factor -> . VARIABLE
    (140) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (141) factor -> . STRING

    SEMICOLON       shift and go to state 594
    INTEGER         shift and go to state 234
    STRING          shift and go to state 235
    FLOAT           shift and go to state 236
    VARIABLE        shift and go to state 599
    STRLEN          shift and go to state 175
    SUBSTR          shift and go to state 176
    COUNT           shift and go to state 177
    ARRAY_POP       shift and go to state 178
    TRUE            shift and go to state 198
    FALSE           shift and go to state 199
    LEFT_PAREN      shift and go to state 238

    values                         shift and go to state 593
    access_method_object           shift and go to state 595
    expression                     shift and go to state 596
    string_special_function        shift and go to state 597
    array_special_function         shift and go to state 598
    boolean                        shift and go to state 59
    access_array_element           shift and go to state 600
    term                           shift and go to state 73
    factor                         shift and go to state 76

state 584

    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (144) variable_assignment -> VARIABLE . assignment_operator values
    (145) variable_assignment -> VARIABLE . assignment_operator IDENTIFIER
    (146) variable_assignment -> VARIABLE . assignment_operator expression
    (147) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (148) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (149) variable_assignment -> VARIABLE . assignment_operator array_special_function
    (150) variable_assignment -> VARIABLE . assignment_operator types_structure
    (151) variable_assignment -> VARIABLE . assignment_operator input
    (152) variable_assignment -> VARIABLE . assignment_operator special_function
    (153) variable_assignment -> VARIABLE . assignment_operator conditional
    (154) variable_assignment -> VARIABLE . INCREASE
    (155) variable_assignment -> VARIABLE . DECREMENT
    (235) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (236) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (237) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (238) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (241) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (158) assignment_operator -> . EQUALS
    (159) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 87
    LEFT_BRACKET    shift and go to state 85
    INCREASE        shift and go to state 83
    DECREMENT       shift and go to state 84
    EQUALS          shift and go to state 86
    PLUS_EQUALS     shift and go to state 88

    assignment_operator            shift and go to state 82

state 585

    (251) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (207) structure_array_principal -> access_array_element .
    (221) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 92
    BREAK           reduce using rule 207 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 207 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 207 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 207 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 207 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 207 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 207 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 207 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 207 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 207 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 207 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 207 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 207 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 207 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 207 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 207 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 207 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 207 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 207 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 91


state 586

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 500
    ELSE            shift and go to state 501

    elseif_statement               shift and go to state 601
    else_statement                 shift and go to state 602

state 587

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 603


state 588

    (272) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 272 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 589

    (282) method_body -> classStatement return_form .
    (283) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 282 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 282 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 283 (method_body -> return_form .) ]


state 590

    (284) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 604


state 591

    (285) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 285 (method_body -> classStatement method_body .)


state 592

    (293) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 293 (classStatement -> access_method_object SEMICOLON .)


state 593

    (286) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 605


state 594

    (288) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 288 (return_form -> RETURN SEMICOLON .)


state 595

    (287) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 606


state 596

    (289) return_form -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 607


state 597

    (290) return_form -> RETURN string_special_function . SEMICOLON

    SEMICOLON       shift and go to state 608


state 598

    (291) return_form -> RETURN array_special_function . SEMICOLON

    SEMICOLON       shift and go to state 609


state 599

    (246) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (247) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (248) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (249) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (250) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (222) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (223) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (139) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
    MINUS           shift and go to state 87
    LEFT_BRACKET    shift and go to state 331
    MULTIPLY        reduce using rule 139 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 139 (factor -> VARIABLE .)
    MODULE          reduce using rule 139 (factor -> VARIABLE .)
    POW             reduce using rule 139 (factor -> VARIABLE .)
    PLUS            reduce using rule 139 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 139 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 139 (factor -> VARIABLE .) ]


state 600

    (251) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (252) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (253) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (254) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (255) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 92


state 601

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 602

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 603

    (271) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 271 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 604

    (284) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 284 (method_body -> classStatement BREAK SEMICOLON .)


state 605

    (286) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 286 (return_form -> RETURN values SEMICOLON .)


state 606

    (287) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 287 (return_form -> RETURN access_method_object SEMICOLON .)


state 607

    (289) return_form -> RETURN expression SEMICOLON .

    RIGHT_BRACE     reduce using rule 289 (return_form -> RETURN expression SEMICOLON .)


state 608

    (290) return_form -> RETURN string_special_function SEMICOLON .

    RIGHT_BRACE     reduce using rule 290 (return_form -> RETURN string_special_function SEMICOLON .)


state 609

    (291) return_form -> RETURN array_special_function SEMICOLON .

    RIGHT_BRACE     reduce using rule 291 (return_form -> RETURN array_special_function SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 53 resolved as shift
WARNING: shift/reduce conflict for STRING_CONCATENATION in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 60 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 110 resolved as shift
WARNING: shift/reduce conflict for STRING_CONCATENATION in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 110 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 115 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 115 resolved as shift
WARNING: shift/reduce conflict for STRING in state 115 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 115 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 115 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 115 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 115 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 115 resolved as shift
WARNING: shift/reduce conflict for NEW in state 115 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 115 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 115 resolved as shift
WARNING: shift/reduce conflict for NULL in state 115 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 129 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 129 resolved as shift
WARNING: shift/reduce conflict for STRING in state 129 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 129 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 129 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 129 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 129 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for NEW in state 129 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 129 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 129 resolved as shift
WARNING: shift/reduce conflict for NULL in state 129 resolved as shift
WARNING: shift/reduce conflict for STRING in state 130 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 134 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 134 resolved as shift
WARNING: shift/reduce conflict for STRING in state 134 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 134 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 134 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 134 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 134 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for NEW in state 134 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 134 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 134 resolved as shift
WARNING: shift/reduce conflict for NULL in state 134 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 136 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 136 resolved as shift
WARNING: shift/reduce conflict for STRING in state 136 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 136 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 136 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 136 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 136 resolved as shift
WARNING: shift/reduce conflict for LEFT_PAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for NEW in state 136 resolved as shift
WARNING: shift/reduce conflict for LOGIC_NOT in state 136 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 136 resolved as shift
WARNING: shift/reduce conflict for NULL in state 136 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 145 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 164 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 183 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 201 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 223 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 304 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 305 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 310 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 356 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 377 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 417 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 423 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 473 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 480 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 480 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 480 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 480 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 480 resolved as shift
WARNING: shift/reduce conflict for POW in state 480 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 502 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 599 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (printable_values -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 53 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 54 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 54
WARNING: reduce/reduce conflict in state 57 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 58
WARNING: reduce/reduce conflict in state 58 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 58
WARNING: reduce/reduce conflict in state 64 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (true_boolean_types -> IDENTIFIER) in state 64
WARNING: reduce/reduce conflict in state 64 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (false_boolean_types -> IDENTIFIER) in state 64
WARNING: reduce/reduce conflict in state 110 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (printable_values -> VARIABLE) in state 110
WARNING: reduce/reduce conflict in state 110 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 110
WARNING: reduce/reduce conflict in state 110 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 110
WARNING: reduce/reduce conflict in state 110 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 110
WARNING: reduce/reduce conflict in state 111 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 111
WARNING: reduce/reduce conflict in state 111 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 111
WARNING: reduce/reduce conflict in state 112 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 112
WARNING: reduce/reduce conflict in state 112 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 112
WARNING: reduce/reduce conflict in state 113 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 113
WARNING: reduce/reduce conflict in state 113 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 113
WARNING: reduce/reduce conflict in state 145 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (logic_not_sentence -> LOGIC_NOT VARIABLE) in state 145
WARNING: reduce/reduce conflict in state 145 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 145
WARNING: reduce/reduce conflict in state 145 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 145
WARNING: reduce/reduce conflict in state 164 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 164
WARNING: reduce/reduce conflict in state 164 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 164
WARNING: reduce/reduce conflict in state 164 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 164
WARNING: reduce/reduce conflict in state 166 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (variable_assignment -> VARIABLE assignment_operator IDENTIFIER) in state 166
WARNING: reduce/reduce conflict in state 166 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (true_boolean_types -> IDENTIFIER) in state 166
WARNING: reduce/reduce conflict in state 166 resolved using rule (boolean_expression -> IDENTIFIER)
WARNING: rejected rule (false_boolean_types -> IDENTIFIER) in state 166
WARNING: reduce/reduce conflict in state 201 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 201
WARNING: reduce/reduce conflict in state 201 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 201
WARNING: reduce/reduce conflict in state 223 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 223
WARNING: reduce/reduce conflict in state 223 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (true_boolean_types -> VARIABLE) in state 223
WARNING: reduce/reduce conflict in state 223 resolved using rule (boolean_expression -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 223
WARNING: reduce/reduce conflict in state 224 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 224
WARNING: reduce/reduce conflict in state 224 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 224
WARNING: reduce/reduce conflict in state 225 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 225
WARNING: reduce/reduce conflict in state 225 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 225
WARNING: reduce/reduce conflict in state 226 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 226
WARNING: reduce/reduce conflict in state 226 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 226
WARNING: reduce/reduce conflict in state 234 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 234
WARNING: reduce/reduce conflict in state 235 resolved using rule (values -> STRING)
WARNING: rejected rule (factor -> STRING) in state 235
WARNING: reduce/reduce conflict in state 236 resolved using rule (values -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 236
WARNING: reduce/reduce conflict in state 505 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 505
WARNING: reduce/reduce conflict in state 531 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 531
WARNING: reduce/reduce conflict in state 532 resolved using rule (body_statement -> RETURN printable_values SEMICOLON)
WARNING: rejected rule (body_statement -> sentence RETURN printable_values SEMICOLON) in state 532
WARNING: reduce/reduce conflict in state 589 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 589
WARNING: Rule (printable_values -> VARIABLE) is never reduced
WARNING: Rule (logic_not_sentence -> LOGIC_NOT VARIABLE) is never reduced
WARNING: Rule (variable_assignment -> VARIABLE assignment_operator IDENTIFIER) is never reduced
WARNING: Rule (body_statement -> sentence RETURN printable_values SEMICOLON) is never reduced
