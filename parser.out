Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    FINAL
    FINALLY
    FOR
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> control_structures
Rule 8     sentence -> function_declaration
Rule 9     control_structures -> if_statement
Rule 10    control_structures -> while_statement
Rule 11    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 12    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 15    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 18    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 19    body_statement -> sentence
Rule 20    body_statement -> sentence RETURN values SEMICOLON
Rule 21    body_statement -> sentence RETURN SEMICOLON
Rule 22    body_statement -> sentence BREAK SEMICOLON
Rule 23    body_statement -> sentence body_statement
Rule 24    conditional -> boolean_expression
Rule 25    conditional -> boolean_expression logic_operator boolean_expression
Rule 26    logic_operator -> LOGIC_AND
Rule 27    logic_operator -> LOGIC_OR
Rule 28    logic_operator -> LOGIC_XOR
Rule 29    boolean_expression -> comparation
Rule 30    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 31    boolean_expression -> LOGIC_NOT conditional
Rule 32    comparation -> values comparator_operator values
Rule 33    comparation -> values comparator_operator expression
Rule 34    comparation -> expression comparator_operator expression
Rule 35    comparator_operator -> EQUALS_EQUALS
Rule 36    comparator_operator -> IDENTICAL
Rule 37    comparator_operator -> NOT_EQUALS
Rule 38    comparator_operator -> NOT_IDENTICAL
Rule 39    comparator_operator -> SMALL_THAN
Rule 40    comparator_operator -> GREATER_THAN
Rule 41    comparator_operator -> SMALL_EQUALS_TO
Rule 42    comparator_operator -> GREATER_EQUALS_TO
Rule 43    comparator_operator -> SPACECRAFT
Rule 44    comparator_operator -> NULL_FUSION
Rule 45    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 46    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 47    print_statement -> ECHO printable_values
Rule 48    print_statement -> PRINT printable_values
Rule 49    printable_values -> values
Rule 50    printable_values -> values COMMA printable_values
Rule 51    printable_values -> VARIABLE
Rule 52    printable_values -> VARIABLE COMMA printable_values
Rule 53    printable_values -> conditional
Rule 54    printable_values -> conditional COMMA printable_values
Rule 55    printable_values -> access_method_object
Rule 56    values -> INTEGER
Rule 57    values -> STRING
Rule 58    values -> FLOAT
Rule 59    values -> boolean
Rule 60    boolean -> TRUE
Rule 61    boolean -> FALSE
Rule 62    expression -> term
Rule 63    expression -> term PLUS expression
Rule 64    expression -> term MINUS expression
Rule 65    term -> factor
Rule 66    term -> factor MULTIPLY term
Rule 67    term -> factor DIVIDE term
Rule 68    term -> factor MODULE term
Rule 69    term -> factor POW term
Rule 70    factor -> INTEGER
Rule 71    factor -> VARIABLE
Rule 72    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 73    assignment -> variable_assignment
Rule 74    assignment -> constant_assignment
Rule 75    variable_assignment -> VARIABLE assignment_operator values
Rule 76    variable_assignment -> VARIABLE assignment_operator expression
Rule 77    variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 78    variable_assignment -> VARIABLE assignment_operator types_structure
Rule 79    variable_assignment -> VARIABLE assignment_operator input
Rule 80    variable_assignment -> VARIABLE assignment_operator special_function
Rule 81    variable_assignment -> VARIABLE INCREASE
Rule 82    variable_assignment -> VARIABLE DECREMENT
Rule 83    variable_assignment -> INCREASE VARIABLE
Rule 84    variable_assignment -> DECREMENT VARIABLE
Rule 85    assignment_operator -> EQUALS
Rule 86    assignment_operator -> PLUS_EQUALS
Rule 87    constant_assignment -> const_syntax
Rule 88    constant_assignment -> define_syntax
Rule 89    const_syntax -> CONST IDENTIFIER EQUALS values
Rule 90    define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 91    function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 92    params -> real_params
Rule 93    params -> empty
Rule 94    real_params -> VARIABLE
Rule 95    real_params -> values
Rule 96    real_params -> real_params COMMA VARIABLE
Rule 97    real_params -> real_params COMMA values
Rule 98    empty -> <empty>
Rule 99    function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 100   special_function -> arrow_function
Rule 101   special_function -> anonymous_functions
Rule 102   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 103   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 104   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 105   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 106   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 107   types_structure -> structure_array_principal
Rule 108   types_structure -> structure_matrix_principal
Rule 109   types_structure -> structure_object_principal
Rule 110   structure_array_principal -> indexed_array
Rule 111   structure_array_principal -> associative_array
Rule 112   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 113   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 114   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 115   structure_array -> key EQUALS GREATER_THAN values
Rule 116   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 117   key -> INTEGER
Rule 118   key -> STRING
Rule 119   values_array_indexed -> values
Rule 120   values_array_indexed -> values COMMA values_array_indexed
Rule 121   structure_matrix_principal -> matrix_firstform
Rule 122   structure_matrix_principal -> matrix_secondform
Rule 123   structure_matrix_principal -> access_element_matrix
Rule 124   structure_matrix_principal -> modify_element_matrix
Rule 125   structure_matrix_principal -> add_element_matrix
Rule 126   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 127   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 128   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 129   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 130   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 131   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 132   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 133   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 134   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 135   structure_object_principal -> object_creation
Rule 136   structure_object_principal -> access_method_object
Rule 137   object_creation -> NEW IDENTIFIER
Rule 138   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 139   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 140   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
Rule 141   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
Rule 142   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
Rule 143   class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 144   class_extends_opt -> EXTENDS IDENTIFIER
Rule 145   class_extends_opt -> <empty>
Rule 146   class_body -> class_body class_member
Rule 147   class_body -> <empty>
Rule 148   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 149   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 150   class_member -> class_attribute
Rule 151   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 152   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 153   visibility_opt -> PUBLIC
Rule 154   visibility_opt -> PRIVATE
Rule 155   visibility_opt -> PROTECTED
Rule 156   visibility_opt -> <empty>
Rule 157   method_body -> classStatement
Rule 158   method_body -> classStatement return_form
Rule 159   method_body -> return_form
Rule 160   method_body -> classStatement BREAK SEMICOLON
Rule 161   method_body -> classStatement method_body
Rule 162   return_form -> RETURN values SEMICOLON
Rule 163   return_form -> RETURN access_method_object
Rule 164   return_form -> RETURN SEMICOLON
Rule 165   classStatement -> sentence
Rule 166   classStatement -> access_method_object

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 112 113 114 126 130 131
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 22 160
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 143
CLONE                : 
COLON                : 
COMMA                : 50 52 54 90 96 97 116 120 129 131
COMMENT              : 
CONCATENATION        : 
CONST                : 89
CONTINUE             : 
DECLARE              : 
DECREMENT            : 82 84
DEFAULT              : 
DEFINE               : 90
DIE                  : 
DIVIDE               : 67
DO                   : 
ECHO                 : 45 47
ELSE                 : 18
ELSEIF               : 15 16 17
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 85 89 102 115 116 133 134 141 142 151
EQUALS_EQUALS        : 35
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 144
FALSE                : 61
FEGTS                : 105
FINAL                : 
FINALLY              : 
FLOAT                : 58
FN                   : 102
FOR                  : 
FOREACH              : 
FUNCTION             : 99 103 148 149
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 42
GREATER_THAN         : 40 102 115 116 139 140 141 142
HALT_COMPILER        : 
IDENTICAL            : 36
IDENTIFIER           : 89 91 99 137 138 140 141 142 143 144 148 149
IF                   : 12 13 14
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 81 83
INSTEADOF            : 
INTEGER              : 56 70 117 132 132 133 133
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 11 12 13 14 15 16 17 18 104 143 148 149
LEFT_BRACKET         : 114 127 128 129 132 132 133 133 134
LEFT_PAREN           : 11 12 13 14 15 16 17 30 45 46 72 90 91 99 102 103 105 106 112 113 126 130 131 138 148 149
LIST                 : 
LOGIC_AND            : 26
LOGIC_NOT            : 31
LOGIC_OR             : 27
LOGIC_XOR            : 28
MATCH                : 
MINUS                : 64 139 140 141 142
MODULE               : 68
MULTIPLY             : 66
NAMESPACE            : 
NEW                  : 137 138
NOT_EQUALS           : 37
NOT_IDENTICAL        : 38
NULL_FUSION          : 44
PLUS                 : 63
PLUS_EQUALS          : 86
POW                  : 69
PRINT                : 46 48
PRIVATE              : 154
PROTECTED            : 155
PUBLIC               : 153
READLINE             : 106
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 20 21 162 163 164
RIGHT_BRACE          : 11 12 13 14 15 16 17 18 104 143 148 149
RIGHT_BRACKET        : 114 127 128 129 132 132 133 133 134
RIGHT_PAREN          : 11 12 13 14 15 16 17 30 45 46 72 90 91 99 102 103 105 106 112 113 126 130 131 138 148 149
SEMICOLON            : 3 4 20 21 22 91 126 127 132 133 140 141 142 151 152 160 162 164
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 41
SMALL_THAN           : 39
SPACECRAFT           : 43
STATIC               : 148
STDIN                : 105
STRING               : 57 90 106 118
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 60
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 51 52 71 75 76 77 78 79 80 81 82 83 84 94 96 132 133 134 139 140 141 142 142 151 152
WHILE                : 11
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 123
access_method_object : 55 136 163 166
add_element_matrix   : 125
anonymous_functions  : 101
arrow_function       : 100
assignment           : 4
assignment_operator  : 75 76 77 78 79 80
associative_array    : 111
body_statement       : 11 12 13 14 15 16 17 18 23 104
boolean              : 59
boolean_expression   : 24 25 25
classStatement       : 157 158 160 161
class_attribute      : 150
class_body           : 143 146
class_declaration    : 6
class_extends_opt    : 143
class_member         : 146
codeblock            : 99 102 103
comparation          : 29
comparator_operator  : 32 33 34
conditional          : 11 12 13 14 15 16 17 30 31 53 54
const_syntax         : 87
constant_assignment  : 74
control_structures   : 7
define_syntax        : 88
else_statement       : 14 17
elseif_statement     : 13 16
empty                : 93
expression           : 33 34 34 63 64 72 76
factor               : 65 66 67 68 69
function_declaration : 8
function_invocation  : 77 139
if_statement         : 9
indexed_array        : 110 134
input                : 79
key                  : 115 116
logic_operator       : 25
matrix_firstform     : 121
matrix_secondform    : 122
method_body          : 148 149 161
modify_element_matrix : 124
object_creation      : 135
params               : 91 99 102 103 138 148 149
print_statement      : 3
printable_values     : 45 46 47 48 50 52 54
program              : 1 0
real_params          : 92 96 97
return_form          : 158 159
sentence             : 1 2 19 20 21 22 23 165
special_function     : 80
structure_array      : 113 114 116
structure_array_principal : 107
structure_matrix_first : 126 131
structure_matrix_principal : 108
structure_matrix_second : 127 129
structure_object_principal : 109
term                 : 62 63 64 66 67 68 69
types_structure      : 5 78
values               : 20 32 32 33 49 50 75 89 90 95 97 115 116 119 120 128 129 130 131 133 141 151 162
values_array_indexed : 112 120
variable_assignment  : 73
visibility_opt       : 148 149 151 152
while_statement      : 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 2
    program                        shift and go to state 41
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 42


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 43


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> control_structures .

    ECHO            reduce using rule 7 (sentence -> control_structures .)
    PRINT           reduce using rule 7 (sentence -> control_structures .)
    CLASS           reduce using rule 7 (sentence -> control_structures .)
    FUNCTION        reduce using rule 7 (sentence -> control_structures .)
    VARIABLE        reduce using rule 7 (sentence -> control_structures .)
    INCREASE        reduce using rule 7 (sentence -> control_structures .)
    DECREMENT       reduce using rule 7 (sentence -> control_structures .)
    IF              reduce using rule 7 (sentence -> control_structures .)
    WHILE           reduce using rule 7 (sentence -> control_structures .)
    CONST           reduce using rule 7 (sentence -> control_structures .)
    DEFINE          reduce using rule 7 (sentence -> control_structures .)
    ARRAY           reduce using rule 7 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> control_structures .)
    NEW             reduce using rule 7 (sentence -> control_structures .)
    $end            reduce using rule 7 (sentence -> control_structures .)
    RETURN          reduce using rule 7 (sentence -> control_structures .)
    BREAK           reduce using rule 7 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> control_structures .)


state 8

    (8) sentence -> function_declaration .

    ECHO            reduce using rule 8 (sentence -> function_declaration .)
    PRINT           reduce using rule 8 (sentence -> function_declaration .)
    CLASS           reduce using rule 8 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 8 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 8 (sentence -> function_declaration .)
    INCREASE        reduce using rule 8 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 8 (sentence -> function_declaration .)
    IF              reduce using rule 8 (sentence -> function_declaration .)
    WHILE           reduce using rule 8 (sentence -> function_declaration .)
    CONST           reduce using rule 8 (sentence -> function_declaration .)
    DEFINE          reduce using rule 8 (sentence -> function_declaration .)
    ARRAY           reduce using rule 8 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> function_declaration .)
    NEW             reduce using rule 8 (sentence -> function_declaration .)
    $end            reduce using rule 8 (sentence -> function_declaration .)
    RETURN          reduce using rule 8 (sentence -> function_declaration .)
    BREAK           reduce using rule 8 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> function_declaration .)


state 9

    (45) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> ECHO . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 44
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LOGIC_NOT       shift and go to state 58

    printable_values               shift and go to state 45
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    access_method_object           shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 10

    (46) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (48) print_statement -> PRINT . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 62
    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LOGIC_NOT       shift and go to state 58

    printable_values               shift and go to state 63
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    access_method_object           shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 11

    (73) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 73 (assignment -> variable_assignment .)


state 12

    (74) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 74 (assignment -> constant_assignment .)


state 13

    (107) types_structure -> structure_array_principal .

    ECHO            reduce using rule 107 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 107 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 107 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 107 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 107 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 107 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 107 (types_structure -> structure_array_principal .)
    IF              reduce using rule 107 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 107 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 107 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 107 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 107 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 107 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 107 (types_structure -> structure_array_principal .)
    $end            reduce using rule 107 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 107 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 107 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 107 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 107 (types_structure -> structure_array_principal .)


state 14

    (108) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 108 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 108 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 108 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 108 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 108 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 108 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 108 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 108 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 108 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 108 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 108 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 108 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 108 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 108 (types_structure -> structure_matrix_principal .)


state 15

    (109) types_structure -> structure_object_principal .

    ECHO            reduce using rule 109 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 109 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 109 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 109 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 109 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 109 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 109 (types_structure -> structure_object_principal .)
    IF              reduce using rule 109 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 109 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 109 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 109 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 109 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 109 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 109 (types_structure -> structure_object_principal .)
    $end            reduce using rule 109 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 109 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 109 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 109 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 109 (types_structure -> structure_object_principal .)


state 16

    (143) class_declaration -> CLASS . IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 64


state 17

    (9) control_structures -> if_statement .

    ECHO            reduce using rule 9 (control_structures -> if_statement .)
    PRINT           reduce using rule 9 (control_structures -> if_statement .)
    CLASS           reduce using rule 9 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> if_statement .)
    INCREASE        reduce using rule 9 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> if_statement .)
    IF              reduce using rule 9 (control_structures -> if_statement .)
    WHILE           reduce using rule 9 (control_structures -> if_statement .)
    CONST           reduce using rule 9 (control_structures -> if_statement .)
    DEFINE          reduce using rule 9 (control_structures -> if_statement .)
    ARRAY           reduce using rule 9 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> if_statement .)
    NEW             reduce using rule 9 (control_structures -> if_statement .)
    $end            reduce using rule 9 (control_structures -> if_statement .)
    RETURN          reduce using rule 9 (control_structures -> if_statement .)
    BREAK           reduce using rule 9 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> if_statement .)


state 18

    (10) control_structures -> while_statement .

    ECHO            reduce using rule 10 (control_structures -> while_statement .)
    PRINT           reduce using rule 10 (control_structures -> while_statement .)
    CLASS           reduce using rule 10 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> while_statement .)
    INCREASE        reduce using rule 10 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> while_statement .)
    IF              reduce using rule 10 (control_structures -> while_statement .)
    WHILE           reduce using rule 10 (control_structures -> while_statement .)
    CONST           reduce using rule 10 (control_structures -> while_statement .)
    DEFINE          reduce using rule 10 (control_structures -> while_statement .)
    ARRAY           reduce using rule 10 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> while_statement .)
    NEW             reduce using rule 10 (control_structures -> while_statement .)
    $end            reduce using rule 10 (control_structures -> while_statement .)
    RETURN          reduce using rule 10 (control_structures -> while_statement .)
    BREAK           reduce using rule 10 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> while_statement .)


state 19

    (99) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 65


state 20

    (75) variable_assignment -> VARIABLE . assignment_operator values
    (76) variable_assignment -> VARIABLE . assignment_operator expression
    (77) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (78) variable_assignment -> VARIABLE . assignment_operator types_structure
    (79) variable_assignment -> VARIABLE . assignment_operator input
    (80) variable_assignment -> VARIABLE . assignment_operator special_function
    (81) variable_assignment -> VARIABLE . INCREASE
    (82) variable_assignment -> VARIABLE . DECREMENT
    (132) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (139) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (85) assignment_operator -> . EQUALS
    (86) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 67
    DECREMENT       shift and go to state 68
    LEFT_BRACKET    shift and go to state 69
    MINUS           shift and go to state 71
    EQUALS          shift and go to state 70
    PLUS_EQUALS     shift and go to state 72

    assignment_operator            shift and go to state 66

state 21

    (83) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 73


state 22

    (84) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 74


state 23

    (87) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 87 (constant_assignment -> const_syntax .)


state 24

    (88) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 88 (constant_assignment -> define_syntax .)


state 25

    (110) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 110 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 110 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 110 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 110 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 110 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 110 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 110 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 110 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 110 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 110 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 110 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 110 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 110 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 110 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 110 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 110 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 110 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 110 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 110 (structure_array_principal -> indexed_array .)


state 26

    (111) structure_array_principal -> associative_array .

    ECHO            reduce using rule 111 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 111 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 111 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 111 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 111 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 111 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 111 (structure_array_principal -> associative_array .)
    IF              reduce using rule 111 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 111 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 111 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 111 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 111 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 111 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 111 (structure_array_principal -> associative_array .)
    $end            reduce using rule 111 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 111 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 111 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 111 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 111 (structure_array_principal -> associative_array .)


state 27

    (121) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 121 (structure_matrix_principal -> matrix_firstform .)


state 28

    (122) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 122 (structure_matrix_principal -> matrix_secondform .)


state 29

    (123) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    CLASS           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    INCREASE        reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    DECREMENT       reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    IF              reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    WHILE           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    SEMICOLON       reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    RETURN          reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    BREAK           reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)
    RIGHT_BRACE     reduce using rule 123 (structure_matrix_principal -> access_element_matrix .)


state 30

    (124) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    CLASS           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    INCREASE        reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    DECREMENT       reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    IF              reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    WHILE           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    SEMICOLON       reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    RETURN          reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    BREAK           reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)
    RIGHT_BRACE     reduce using rule 124 (structure_matrix_principal -> modify_element_matrix .)


state 31

    (125) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 125 (structure_matrix_principal -> add_element_matrix .)


state 32

    (135) structure_object_principal -> object_creation .

    ECHO            reduce using rule 135 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 135 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 135 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 135 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 135 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 135 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 135 (structure_object_principal -> object_creation .)
    IF              reduce using rule 135 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 135 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 135 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 135 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 135 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 135 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 135 (structure_object_principal -> object_creation .)
    $end            reduce using rule 135 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 135 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 135 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 135 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 135 (structure_object_principal -> object_creation .)


state 33

    (136) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 136 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 136 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 136 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 136 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 136 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 136 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 136 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 136 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 136 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 136 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 136 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 136 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 136 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 136 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 136 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 136 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 136 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 136 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 136 (structure_object_principal -> access_method_object .)


state 34

    (12) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 75


state 35

    (11) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 76


state 36

    (89) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 77


state 37

    (90) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 78


state 38

    (112) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 79
    LEFT_BRACKET    shift and go to state 80


state 39

    (127) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (128) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (129) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 82

state 40

    (137) object_creation -> NEW . IDENTIFIER
    (138) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 83


state 41

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 42

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 43

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 44

    (45) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    printable_values               shift and go to state 85
    conditional                    shift and go to state 86
    expression                     shift and go to state 87
    values                         shift and go to state 46
    access_method_object           shift and go to state 49
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    boolean                        shift and go to state 53
    comparation                    shift and go to state 57
    factor                         shift and go to state 61

state 45

    (47) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 47 (print_statement -> ECHO printable_values .)


state 46

    (49) printable_values -> values .
    (50) printable_values -> values . COMMA printable_values
    (32) comparation -> values . comparator_operator values
    (33) comparation -> values . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 49 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 49 (printable_values -> values .)
    COMMA           shift and go to state 88
    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 89

state 47

    (51) printable_values -> VARIABLE .
    (52) printable_values -> VARIABLE . COMMA printable_values
    (139) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (71) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 51 (printable_values -> VARIABLE .)
    SEMICOLON       reduce using rule 51 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 51 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 100
    MINUS           shift and go to state 71
    MULTIPLY        reduce using rule 71 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 71 (factor -> VARIABLE .)
    MODULE          reduce using rule 71 (factor -> VARIABLE .)
    POW             reduce using rule 71 (factor -> VARIABLE .)
    PLUS            reduce using rule 71 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 71 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 71 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 71 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 71 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 71 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 71 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 71 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 71 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 71 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 71 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 71 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 71 (factor -> VARIABLE .) ]


state 48

    (53) printable_values -> conditional .
    (54) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 53 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 53 (printable_values -> conditional .)
    COMMA           shift and go to state 101


state 49

    (55) printable_values -> access_method_object .

    SEMICOLON       reduce using rule 55 (printable_values -> access_method_object .)
    RIGHT_PAREN     reduce using rule 55 (printable_values -> access_method_object .)


state 50

    (56) values -> INTEGER .
    (70) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (values -> INTEGER .)
    COMMA           reduce using rule 56 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 56 (values -> INTEGER .)
    IDENTICAL       reduce using rule 56 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 56 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 56 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 56 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 56 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 56 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 56 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 56 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 56 (values -> INTEGER .)
    SEMICOLON       reduce using rule 56 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 56 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 56 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 56 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 56 (values -> INTEGER .)
    MULTIPLY        reduce using rule 70 (factor -> INTEGER .)
    DIVIDE          reduce using rule 70 (factor -> INTEGER .)
    MODULE          reduce using rule 70 (factor -> INTEGER .)
    POW             reduce using rule 70 (factor -> INTEGER .)
    PLUS            reduce using rule 70 (factor -> INTEGER .)
    MINUS           reduce using rule 70 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 70 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 70 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 70 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 70 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 70 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 70 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 70 (factor -> INTEGER .) ]


state 51

    (57) values -> STRING .

    COMMA           reduce using rule 57 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 57 (values -> STRING .)
    IDENTICAL       reduce using rule 57 (values -> STRING .)
    NOT_EQUALS      reduce using rule 57 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 57 (values -> STRING .)
    SMALL_THAN      reduce using rule 57 (values -> STRING .)
    GREATER_THAN    reduce using rule 57 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 57 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 57 (values -> STRING .)
    SPACECRAFT      reduce using rule 57 (values -> STRING .)
    NULL_FUSION     reduce using rule 57 (values -> STRING .)
    SEMICOLON       reduce using rule 57 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 57 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 57 (values -> STRING .)
    LOGIC_AND       reduce using rule 57 (values -> STRING .)
    LOGIC_OR        reduce using rule 57 (values -> STRING .)
    LOGIC_XOR       reduce using rule 57 (values -> STRING .)


state 52

    (58) values -> FLOAT .

    COMMA           reduce using rule 58 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 58 (values -> FLOAT .)
    IDENTICAL       reduce using rule 58 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 58 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 58 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 58 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 58 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 58 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 58 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 58 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 58 (values -> FLOAT .)
    SEMICOLON       reduce using rule 58 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 58 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 58 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 58 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 58 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 58 (values -> FLOAT .)


state 53

    (59) values -> boolean .

    COMMA           reduce using rule 59 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 59 (values -> boolean .)
    IDENTICAL       reduce using rule 59 (values -> boolean .)
    NOT_EQUALS      reduce using rule 59 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 59 (values -> boolean .)
    SMALL_THAN      reduce using rule 59 (values -> boolean .)
    GREATER_THAN    reduce using rule 59 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 59 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 59 (values -> boolean .)
    SPACECRAFT      reduce using rule 59 (values -> boolean .)
    NULL_FUSION     reduce using rule 59 (values -> boolean .)
    SEMICOLON       reduce using rule 59 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 59 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 59 (values -> boolean .)
    LOGIC_AND       reduce using rule 59 (values -> boolean .)
    LOGIC_OR        reduce using rule 59 (values -> boolean .)
    LOGIC_XOR       reduce using rule 59 (values -> boolean .)


state 54

    (24) conditional -> boolean_expression .
    (25) conditional -> boolean_expression . logic_operator boolean_expression
    (26) logic_operator -> . LOGIC_AND
    (27) logic_operator -> . LOGIC_OR
    (28) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 24 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 24 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 24 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 103
    LOGIC_OR        shift and go to state 104
    LOGIC_XOR       shift and go to state 105

  ! LOGIC_AND       [ reduce using rule 24 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 24 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 24 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 102

state 55

    (60) boolean -> TRUE .

    COMMA           reduce using rule 60 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 60 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 60 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 60 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 60 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 60 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 60 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 60 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 60 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 60 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 60 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 60 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 60 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 60 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 60 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 60 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 60 (boolean -> TRUE .)


state 56

    (61) boolean -> FALSE .

    COMMA           reduce using rule 61 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 61 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 61 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 61 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 61 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 61 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 61 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 61 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 61 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 61 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 61 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 61 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 61 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 61 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 61 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 61 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 61 (boolean -> FALSE .)


state 57

    (29) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 29 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 29 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 29 (boolean_expression -> comparation .)
    COMMA           reduce using rule 29 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 29 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 29 (boolean_expression -> comparation .)


state 58

    (31) boolean_expression -> LOGIC_NOT . conditional
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108

    conditional                    shift and go to state 106
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 107
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 59

    (34) comparation -> expression . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 109

state 60

    (62) expression -> term .
    (63) expression -> term . PLUS expression
    (64) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 62 (expression -> term .)
    IDENTICAL       reduce using rule 62 (expression -> term .)
    NOT_EQUALS      reduce using rule 62 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 62 (expression -> term .)
    SMALL_THAN      reduce using rule 62 (expression -> term .)
    GREATER_THAN    reduce using rule 62 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 62 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 62 (expression -> term .)
    SPACECRAFT      reduce using rule 62 (expression -> term .)
    NULL_FUSION     reduce using rule 62 (expression -> term .)
    RIGHT_PAREN     reduce using rule 62 (expression -> term .)
    SEMICOLON       reduce using rule 62 (expression -> term .)
    LOGIC_AND       reduce using rule 62 (expression -> term .)
    LOGIC_OR        reduce using rule 62 (expression -> term .)
    LOGIC_XOR       reduce using rule 62 (expression -> term .)
    COMMA           reduce using rule 62 (expression -> term .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111


state 61

    (65) term -> factor .
    (66) term -> factor . MULTIPLY term
    (67) term -> factor . DIVIDE term
    (68) term -> factor . MODULE term
    (69) term -> factor . POW term

    PLUS            reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 65 (term -> factor .)
    IDENTICAL       reduce using rule 65 (term -> factor .)
    NOT_EQUALS      reduce using rule 65 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 65 (term -> factor .)
    SMALL_THAN      reduce using rule 65 (term -> factor .)
    GREATER_THAN    reduce using rule 65 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 65 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 65 (term -> factor .)
    SPACECRAFT      reduce using rule 65 (term -> factor .)
    NULL_FUSION     reduce using rule 65 (term -> factor .)
    RIGHT_PAREN     reduce using rule 65 (term -> factor .)
    SEMICOLON       reduce using rule 65 (term -> factor .)
    LOGIC_AND       reduce using rule 65 (term -> factor .)
    LOGIC_OR        reduce using rule 65 (term -> factor .)
    LOGIC_XOR       reduce using rule 65 (term -> factor .)
    COMMA           reduce using rule 65 (term -> factor .)
    MULTIPLY        shift and go to state 112
    DIVIDE          shift and go to state 113
    MODULE          shift and go to state 114
    POW             shift and go to state 115


state 62

    (46) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    printable_values               shift and go to state 116
    conditional                    shift and go to state 86
    expression                     shift and go to state 87
    values                         shift and go to state 46
    access_method_object           shift and go to state 49
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    boolean                        shift and go to state 53
    comparation                    shift and go to state 57
    factor                         shift and go to state 61

state 63

    (48) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 48 (print_statement -> PRINT printable_values .)


state 64

    (143) class_declaration -> CLASS IDENTIFIER . class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (144) class_extends_opt -> . EXTENDS IDENTIFIER
    (145) class_extends_opt -> .

    EXTENDS         shift and go to state 118
    LEFT_BRACE      reduce using rule 145 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 117

state 65

    (99) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 119


state 66

    (75) variable_assignment -> VARIABLE assignment_operator . values
    (76) variable_assignment -> VARIABLE assignment_operator . expression
    (77) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (78) variable_assignment -> VARIABLE assignment_operator . types_structure
    (79) variable_assignment -> VARIABLE assignment_operator . input
    (80) variable_assignment -> VARIABLE assignment_operator . special_function
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (91) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (105) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (106) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (100) special_function -> . arrow_function
    (101) special_function -> . anonymous_functions
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (102) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (103) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    IDENTIFIER      shift and go to state 127
    FEGTS           shift and go to state 129
    READLINE        shift and go to state 130
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    FN              shift and go to state 133
    FUNCTION        shift and go to state 134
    VARIABLE        shift and go to state 120
    LEFT_PAREN      shift and go to state 128
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    values                         shift and go to state 121
    expression                     shift and go to state 122
    function_invocation            shift and go to state 123
    types_structure                shift and go to state 124
    input                          shift and go to state 125
    special_function               shift and go to state 126
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    arrow_function                 shift and go to state 131
    anonymous_functions            shift and go to state 132
    factor                         shift and go to state 61
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 67

    (81) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 81 (variable_assignment -> VARIABLE INCREASE .)


state 68

    (82) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 82 (variable_assignment -> VARIABLE DECREMENT .)


state 69

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 135
    RIGHT_BRACKET   shift and go to state 136


state 70

    (85) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 85 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 85 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 85 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 85 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 85 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 85 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 85 (assignment_operator -> EQUALS .)
    FN              reduce using rule 85 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 85 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 85 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 85 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 85 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 85 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 85 (assignment_operator -> EQUALS .)


state 71

    (139) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    GREATER_THAN    shift and go to state 137


state 72

    (86) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 86 (assignment_operator -> PLUS_EQUALS .)


state 73

    (83) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 83 (variable_assignment -> INCREASE VARIABLE .)


state 74

    (84) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 84 (variable_assignment -> DECREMENT VARIABLE .)


state 75

    (12) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108

    conditional                    shift and go to state 138
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 107
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 76

    (11) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108

    conditional                    shift and go to state 139
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 107
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 77

    (89) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 140


state 78

    (90) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 141


state 79

    (112) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (113) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (126) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (119) values_array_indexed -> . values
    (120) values_array_indexed -> . values COMMA values_array_indexed
    (115) structure_array -> . key EQUALS GREATER_THAN values
    (116) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (130) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (131) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (117) key -> . INTEGER
    (118) key -> . STRING
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    ARRAY           shift and go to state 142
    INTEGER         shift and go to state 148
    STRING          shift and go to state 149
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values_array_indexed           shift and go to state 143
    structure_array                shift and go to state 144
    structure_matrix_first         shift and go to state 145
    values                         shift and go to state 146
    key                            shift and go to state 147
    boolean                        shift and go to state 53

state 80

    (114) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (115) structure_array -> . key EQUALS GREATER_THAN values
    (116) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (117) key -> . INTEGER
    (118) key -> . STRING

    INTEGER         shift and go to state 151
    STRING          shift and go to state 152

    structure_array                shift and go to state 150
    key                            shift and go to state 147

state 81

    (128) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (129) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 153
    boolean                        shift and go to state 53

state 82

    (127) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 155


state 83

    (137) object_creation -> NEW IDENTIFIER .
    (138) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 137 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 156


state 84

    (30) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 158
    VARIABLE        shift and go to state 108
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    conditional                    shift and go to state 157
    expression                     shift and go to state 87
    boolean_expression             shift and go to state 54
    term                           shift and go to state 60
    comparation                    shift and go to state 57
    factor                         shift and go to state 61
    values                         shift and go to state 107
    boolean                        shift and go to state 53

state 85

    (45) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 159


state 86

    (30) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (53) printable_values -> conditional .
    (54) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 160
    COMMA           shift and go to state 101

  ! RIGHT_PAREN     [ reduce using rule 53 (printable_values -> conditional .) ]


state 87

    (72) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (34) comparation -> expression . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 161
    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 109

state 88

    (50) printable_values -> values COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58

    values                         shift and go to state 46
    printable_values               shift and go to state 162
    conditional                    shift and go to state 48
    access_method_object           shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 89

    (32) comparation -> values comparator_operator . values
    (33) comparation -> values comparator_operator . expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    values                         shift and go to state 163
    expression                     shift and go to state 164
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 90

    (35) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 35 (comparator_operator -> EQUALS_EQUALS .)


state 91

    (36) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 36 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 36 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 36 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 36 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 36 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 36 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 36 (comparator_operator -> IDENTICAL .)


state 92

    (37) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 37 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 37 (comparator_operator -> NOT_EQUALS .)


state 93

    (38) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 38 (comparator_operator -> NOT_IDENTICAL .)


state 94

    (39) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 39 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 39 (comparator_operator -> SMALL_THAN .)


state 95

    (40) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 40 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 40 (comparator_operator -> GREATER_THAN .)


state 96

    (41) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 41 (comparator_operator -> SMALL_EQUALS_TO .)


state 97

    (42) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 42 (comparator_operator -> GREATER_EQUALS_TO .)


state 98

    (43) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 43 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 43 (comparator_operator -> SPACECRAFT .)


state 99

    (44) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 44 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 44 (comparator_operator -> NULL_FUSION .)


state 100

    (52) printable_values -> VARIABLE COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58

    printable_values               shift and go to state 165
    values                         shift and go to state 46
    conditional                    shift and go to state 48
    access_method_object           shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 101

    (54) printable_values -> conditional COMMA . printable_values
    (49) printable_values -> . values
    (50) printable_values -> . values COMMA printable_values
    (51) printable_values -> . VARIABLE
    (52) printable_values -> . VARIABLE COMMA printable_values
    (53) printable_values -> . conditional
    (54) printable_values -> . conditional COMMA printable_values
    (55) printable_values -> . access_method_object
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 47
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58

    conditional                    shift and go to state 48
    printable_values               shift and go to state 166
    values                         shift and go to state 46
    access_method_object           shift and go to state 49
    boolean                        shift and go to state 53
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    expression                     shift and go to state 59
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 102

    (25) conditional -> boolean_expression logic_operator . boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108

    boolean_expression             shift and go to state 167
    comparation                    shift and go to state 57
    values                         shift and go to state 107
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 103

    (26) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 26 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 26 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 26 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 26 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 26 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 26 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 26 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 26 (logic_operator -> LOGIC_AND .)


state 104

    (27) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 27 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 27 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 27 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 27 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 27 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 27 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 27 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 27 (logic_operator -> LOGIC_OR .)


state 105

    (28) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 28 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 28 (logic_operator -> LOGIC_XOR .)


state 106

    (31) boolean_expression -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 31 (boolean_expression -> LOGIC_NOT conditional .)


state 107

    (32) comparation -> values . comparator_operator values
    (33) comparation -> values . comparator_operator expression
    (35) comparator_operator -> . EQUALS_EQUALS
    (36) comparator_operator -> . IDENTICAL
    (37) comparator_operator -> . NOT_EQUALS
    (38) comparator_operator -> . NOT_IDENTICAL
    (39) comparator_operator -> . SMALL_THAN
    (40) comparator_operator -> . GREATER_THAN
    (41) comparator_operator -> . SMALL_EQUALS_TO
    (42) comparator_operator -> . GREATER_EQUALS_TO
    (43) comparator_operator -> . SPACECRAFT
    (44) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 90
    IDENTICAL       shift and go to state 91
    NOT_EQUALS      shift and go to state 92
    NOT_IDENTICAL   shift and go to state 93
    SMALL_THAN      shift and go to state 94
    GREATER_THAN    shift and go to state 95
    SMALL_EQUALS_TO shift and go to state 96
    GREATER_EQUALS_TO shift and go to state 97
    SPACECRAFT      shift and go to state 98
    NULL_FUSION     shift and go to state 99

    comparator_operator            shift and go to state 89

state 108

    (71) factor -> VARIABLE .

    MULTIPLY        reduce using rule 71 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 71 (factor -> VARIABLE .)
    MODULE          reduce using rule 71 (factor -> VARIABLE .)
    POW             reduce using rule 71 (factor -> VARIABLE .)
    PLUS            reduce using rule 71 (factor -> VARIABLE .)
    MINUS           reduce using rule 71 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 71 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 71 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 71 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 71 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 71 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 71 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 71 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 71 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 71 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 71 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 71 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 71 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 71 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 71 (factor -> VARIABLE .)
    COMMA           reduce using rule 71 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 71 (factor -> VARIABLE .)


state 109

    (34) comparation -> expression comparator_operator . expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    expression                     shift and go to state 168
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 110

    (63) expression -> term PLUS . expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    term                           shift and go to state 60
    expression                     shift and go to state 170
    factor                         shift and go to state 61

state 111

    (64) expression -> term MINUS . expression
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    term                           shift and go to state 60
    expression                     shift and go to state 171
    factor                         shift and go to state 61

state 112

    (66) term -> factor MULTIPLY . term
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 172

state 113

    (67) term -> factor DIVIDE . term
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 173

state 114

    (68) term -> factor MODULE . term
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 174

state 115

    (69) term -> factor POW . term
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    factor                         shift and go to state 61
    term                           shift and go to state 175

state 116

    (46) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 176


state 117

    (143) class_declaration -> CLASS IDENTIFIER class_extends_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 177


state 118

    (144) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 178


state 119

    (99) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 179
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 120

    (71) factor -> VARIABLE .
    (132) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (139) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 71 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 71 (factor -> VARIABLE .)
    MODULE          reduce using rule 71 (factor -> VARIABLE .)
    POW             reduce using rule 71 (factor -> VARIABLE .)
    PLUS            reduce using rule 71 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 71 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 69
    MINUS           shift and go to state 71

  ! MINUS           [ reduce using rule 71 (factor -> VARIABLE .) ]


state 121

    (75) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 75 (variable_assignment -> VARIABLE assignment_operator values .)


state 122

    (76) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 76 (variable_assignment -> VARIABLE assignment_operator expression .)


state 123

    (77) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 77 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 124

    (78) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 78 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 125

    (79) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 79 (variable_assignment -> VARIABLE assignment_operator input .)


state 126

    (80) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 80 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 127

    (91) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 184


state 128

    (72) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 169
    VARIABLE        shift and go to state 108
    LEFT_PAREN      shift and go to state 128

    expression                     shift and go to state 185
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 129

    (105) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 186


state 130

    (106) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 187


state 131

    (100) special_function -> arrow_function .

    SEMICOLON       reduce using rule 100 (special_function -> arrow_function .)


state 132

    (101) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 101 (special_function -> anonymous_functions .)


state 133

    (102) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 188


state 134

    (103) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 189


state 135

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 190


state 136

    (134) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 191


state 137

    (139) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (140) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER EQUALS VARIABLE SEMICOLON
    (91) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 193

    function_invocation            shift and go to state 192

state 138

    (12) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 194


state 139

    (11) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 195


state 140

    (89) const_syntax -> CONST IDENTIFIER EQUALS . values
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 196
    boolean                        shift and go to state 53

state 141

    (90) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 197


state 142

    (130) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (131) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 198


state 143

    (112) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 199


state 144

    (113) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 200


state 145

    (126) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 201


state 146

    (119) values_array_indexed -> values .
    (120) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 119 (values_array_indexed -> values .)
    COMMA           shift and go to state 202


state 147

    (115) structure_array -> key . EQUALS GREATER_THAN values
    (116) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 203


state 148

    (56) values -> INTEGER .
    (117) key -> INTEGER .

    COMMA           reduce using rule 56 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 56 (values -> INTEGER .)
    EQUALS          reduce using rule 117 (key -> INTEGER .)


state 149

    (57) values -> STRING .
    (118) key -> STRING .

    COMMA           reduce using rule 57 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 57 (values -> STRING .)
    EQUALS          reduce using rule 118 (key -> STRING .)


state 150

    (114) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 204


state 151

    (117) key -> INTEGER .

    EQUALS          reduce using rule 117 (key -> INTEGER .)


state 152

    (118) key -> STRING .

    EQUALS          reduce using rule 118 (key -> STRING .)


state 153

    (128) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (129) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 205


state 154

    (56) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 56 (values -> INTEGER .)
    COMMA           reduce using rule 56 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 56 (values -> INTEGER .)
    SEMICOLON       reduce using rule 56 (values -> INTEGER .)


state 155

    (127) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 206


state 156

    (138) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 207
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 157

    (30) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 160


state 158

    (70) factor -> INTEGER .
    (56) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 56 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 56 (values -> INTEGER .)
    MULTIPLY        reduce using rule 70 (factor -> INTEGER .)
    DIVIDE          reduce using rule 70 (factor -> INTEGER .)
    MODULE          reduce using rule 70 (factor -> INTEGER .)
    POW             reduce using rule 70 (factor -> INTEGER .)
    PLUS            reduce using rule 70 (factor -> INTEGER .)
    MINUS           reduce using rule 70 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 70 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 56 (values -> INTEGER .)
    IDENTICAL       reduce using rule 56 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 56 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 56 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 56 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 56 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 56 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 56 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 56 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 56 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 70 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 70 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 70 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 70 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 70 (factor -> INTEGER .) ]


state 159

    (45) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 45 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 160

    (30) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 161

    (72) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 72 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 162

    (50) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 50 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 50 (printable_values -> values COMMA printable_values .)


state 163

    (32) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 32 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 32 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 32 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 32 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 32 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 32 (comparation -> values comparator_operator values .)


state 164

    (33) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 33 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 33 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 33 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 33 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 33 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 33 (comparation -> values comparator_operator expression .)


state 165

    (52) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 52 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 52 (printable_values -> VARIABLE COMMA printable_values .)


state 166

    (54) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 54 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 54 (printable_values -> conditional COMMA printable_values .)


state 167

    (25) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 25 (conditional -> boolean_expression logic_operator boolean_expression .)


state 168

    (34) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 34 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 34 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 34 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 34 (comparation -> expression comparator_operator expression .)


state 169

    (70) factor -> INTEGER .

    MULTIPLY        reduce using rule 70 (factor -> INTEGER .)
    DIVIDE          reduce using rule 70 (factor -> INTEGER .)
    MODULE          reduce using rule 70 (factor -> INTEGER .)
    POW             reduce using rule 70 (factor -> INTEGER .)
    PLUS            reduce using rule 70 (factor -> INTEGER .)
    MINUS           reduce using rule 70 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 70 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 70 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 70 (factor -> INTEGER .)
    COMMA           reduce using rule 70 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 70 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 70 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 70 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 70 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 70 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 70 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 70 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 70 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 70 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 70 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 70 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 70 (factor -> INTEGER .)


state 170

    (63) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 63 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 63 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 63 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 63 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 63 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 63 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 63 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 63 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 63 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 63 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 63 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 63 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 63 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 63 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 63 (expression -> term PLUS expression .)
    COMMA           reduce using rule 63 (expression -> term PLUS expression .)


state 171

    (64) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 64 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 64 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 64 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 64 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 64 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 64 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 64 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 64 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 64 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 64 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 64 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 64 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 64 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 64 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 64 (expression -> term MINUS expression .)
    COMMA           reduce using rule 64 (expression -> term MINUS expression .)


state 172

    (66) term -> factor MULTIPLY term .

    PLUS            reduce using rule 66 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 66 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 66 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 66 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 66 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 66 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 66 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 66 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 66 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 66 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 66 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 66 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 66 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 66 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 66 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 66 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 66 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 66 (term -> factor MULTIPLY term .)


state 173

    (67) term -> factor DIVIDE term .

    PLUS            reduce using rule 67 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 67 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 67 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 67 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 67 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 67 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 67 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 67 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 67 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 67 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 67 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 67 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 67 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 67 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 67 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 67 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 67 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 67 (term -> factor DIVIDE term .)


state 174

    (68) term -> factor MODULE term .

    PLUS            reduce using rule 68 (term -> factor MODULE term .)
    MINUS           reduce using rule 68 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 68 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 68 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 68 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 68 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 68 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 68 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 68 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 68 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 68 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 68 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 68 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 68 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 68 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 68 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 68 (term -> factor MODULE term .)
    COMMA           reduce using rule 68 (term -> factor MODULE term .)


state 175

    (69) term -> factor POW term .

    PLUS            reduce using rule 69 (term -> factor POW term .)
    MINUS           reduce using rule 69 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 69 (term -> factor POW term .)
    IDENTICAL       reduce using rule 69 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 69 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 69 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 69 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 69 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 69 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 69 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 69 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 69 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 69 (term -> factor POW term .)
    SEMICOLON       reduce using rule 69 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 69 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 69 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 69 (term -> factor POW term .)
    COMMA           reduce using rule 69 (term -> factor POW term .)


state 176

    (46) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 46 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 177

    (143) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE . class_body RIGHT_BRACE
    (146) class_body -> . class_body class_member
    (147) class_body -> .

    RIGHT_BRACE     reduce using rule 147 (class_body -> .)
    PUBLIC          reduce using rule 147 (class_body -> .)
    PRIVATE         reduce using rule 147 (class_body -> .)
    PROTECTED       reduce using rule 147 (class_body -> .)
    STATIC          reduce using rule 147 (class_body -> .)
    FUNCTION        reduce using rule 147 (class_body -> .)
    VARIABLE        reduce using rule 147 (class_body -> .)

    class_body                     shift and go to state 208

state 178

    (144) class_extends_opt -> EXTENDS IDENTIFIER .

    LEFT_BRACE      reduce using rule 144 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 179

    (99) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 209


state 180

    (92) params -> real_params .
    (96) real_params -> real_params . COMMA VARIABLE
    (97) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 92 (params -> real_params .)
    COMMA           shift and go to state 210


state 181

    (93) params -> empty .

    RIGHT_PAREN     reduce using rule 93 (params -> empty .)


state 182

    (94) real_params -> VARIABLE .

    COMMA           reduce using rule 94 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 94 (real_params -> VARIABLE .)


state 183

    (95) real_params -> values .

    COMMA           reduce using rule 95 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 95 (real_params -> values .)


state 184

    (91) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 211
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 185

    (72) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 161


state 186

    (105) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 212


state 187

    (106) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 213


state 188

    (102) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 214
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 189

    (103) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 215
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 190

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 216


state 191

    (134) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 218

    indexed_array                  shift and go to state 217

state 192

    (139) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 139 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 193

    (140) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . SEMICOLON
    (141) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . EQUALS VARIABLE SEMICOLON
    (91) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    SEMICOLON       shift and go to state 219
    EQUALS          shift and go to state 220
    LEFT_PAREN      shift and go to state 184


state 194

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 221


state 195

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 222


state 196

    (89) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 89 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 197

    (90) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 223
    boolean                        shift and go to state 53

state 198

    (130) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (131) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 224
    boolean                        shift and go to state 53

state 199

    (112) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 112 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 200

    (113) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 113 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 201

    (126) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 225


state 202

    (120) values_array_indexed -> values COMMA . values_array_indexed
    (119) values_array_indexed -> . values
    (120) values_array_indexed -> . values COMMA values_array_indexed
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 146
    values_array_indexed           shift and go to state 226
    boolean                        shift and go to state 53

state 203

    (115) structure_array -> key EQUALS . GREATER_THAN values
    (116) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 227


state 204

    (114) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 114 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 205

    (128) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (129) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 128 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 228


state 206

    (127) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 127 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 207

    (138) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 229


state 208

    (143) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body . RIGHT_BRACE
    (146) class_body -> class_body . class_member
    (148) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (149) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (150) class_member -> . class_attribute
    (153) visibility_opt -> . PUBLIC
    (154) visibility_opt -> . PRIVATE
    (155) visibility_opt -> . PROTECTED
    (156) visibility_opt -> .
    (151) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (152) class_attribute -> . visibility_opt VARIABLE SEMICOLON

    RIGHT_BRACE     shift and go to state 230
    PUBLIC          shift and go to state 234
    PRIVATE         shift and go to state 235
    PROTECTED       shift and go to state 236
    STATIC          reduce using rule 156 (visibility_opt -> .)
    FUNCTION        reduce using rule 156 (visibility_opt -> .)
    VARIABLE        reduce using rule 156 (visibility_opt -> .)

    class_member                   shift and go to state 231
    visibility_opt                 shift and go to state 232
    class_attribute                shift and go to state 233

state 209

    (99) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (104) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 238

    codeblock                      shift and go to state 237

state 210

    (96) real_params -> real_params COMMA . VARIABLE
    (97) real_params -> real_params COMMA . values
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 239
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 240
    boolean                        shift and go to state 53

state 211

    (91) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 241


state 212

    (105) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 242


state 213

    (106) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 243


state 214

    (102) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 244


state 215

    (103) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 245


state 216

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 246


state 217

    (134) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 134 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 218

    (112) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 247


state 219

    (140) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .

    ECHO            reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    CLASS           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    FUNCTION        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    VARIABLE        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    INCREASE        reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    DECREMENT       reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    IF              reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    CONST           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    DEFINE          reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    ARRAY           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    LEFT_BRACKET    reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    NEW             reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    $end            reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    SEMICOLON       reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    RIGHT_PAREN     reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    RETURN          reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    BREAK           reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)
    RIGHT_BRACE     reduce using rule 140 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON .)


state 220

    (141) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . values SEMICOLON
    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS . VARIABLE SEMICOLON
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 248
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 249
    boolean                        shift and go to state 53

state 221

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 250
    sentence                       shift and go to state 251
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 222

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 252
    sentence                       shift and go to state 251
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 223

    (90) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 253


state 224

    (130) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (131) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 254


state 225

    (126) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 126 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 226

    (120) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 120 (values_array_indexed -> values COMMA values_array_indexed .)


state 227

    (115) structure_array -> key EQUALS GREATER_THAN . values
    (116) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 255
    boolean                        shift and go to state 53

state 228

    (129) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (128) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (129) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 81

    structure_matrix_second        shift and go to state 256

state 229

    (138) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 138 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 230

    (143) class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 143 (class_declaration -> CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 231

    (146) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 146 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 146 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 146 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 146 (class_body -> class_body class_member .)
    STATIC          reduce using rule 146 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 146 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 146 (class_body -> class_body class_member .)


state 232

    (148) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (149) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (151) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (152) class_attribute -> visibility_opt . VARIABLE SEMICOLON

    STATIC          shift and go to state 257
    FUNCTION        shift and go to state 258
    VARIABLE        shift and go to state 259


state 233

    (150) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 150 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 150 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 150 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 150 (class_member -> class_attribute .)
    STATIC          reduce using rule 150 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 150 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 150 (class_member -> class_attribute .)


state 234

    (153) visibility_opt -> PUBLIC .

    STATIC          reduce using rule 153 (visibility_opt -> PUBLIC .)
    FUNCTION        reduce using rule 153 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 153 (visibility_opt -> PUBLIC .)


state 235

    (154) visibility_opt -> PRIVATE .

    STATIC          reduce using rule 154 (visibility_opt -> PRIVATE .)
    FUNCTION        reduce using rule 154 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 154 (visibility_opt -> PRIVATE .)


state 236

    (155) visibility_opt -> PROTECTED .

    STATIC          reduce using rule 155 (visibility_opt -> PROTECTED .)
    FUNCTION        reduce using rule 155 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 155 (visibility_opt -> PROTECTED .)


state 237

    (99) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 99 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 238

    (104) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 260
    sentence                       shift and go to state 251
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 239

    (96) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 96 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 96 (real_params -> real_params COMMA VARIABLE .)


state 240

    (97) real_params -> real_params COMMA values .

    COMMA           reduce using rule 97 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 97 (real_params -> real_params COMMA values .)


state 241

    (91) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 261


state 242

    (105) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 105 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 243

    (106) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 106 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 244

    (102) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 262


state 245

    (103) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (104) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 238

    codeblock                      shift and go to state 263

state 246

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 264


state 247

    (112) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (119) values_array_indexed -> . values
    (120) values_array_indexed -> . values COMMA values_array_indexed
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values_array_indexed           shift and go to state 143
    values                         shift and go to state 146
    boolean                        shift and go to state 53

state 248

    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE . SEMICOLON

    SEMICOLON       shift and go to state 265


state 249

    (141) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 266


state 250

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 267


state 251

    (19) body_statement -> sentence .
    (20) body_statement -> sentence . RETURN values SEMICOLON
    (21) body_statement -> sentence . RETURN SEMICOLON
    (22) body_statement -> sentence . BREAK SEMICOLON
    (23) body_statement -> sentence . body_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    RIGHT_BRACE     reduce using rule 19 (body_statement -> sentence .)
    RETURN          shift and go to state 268
    BREAK           shift and go to state 269
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    sentence                       shift and go to state 251
    body_statement                 shift and go to state 270
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 252

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 271


state 253

    (90) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 90 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 254

    (130) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (131) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 130 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 272


state 255

    (115) structure_array -> key EQUALS GREATER_THAN values .
    (116) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 115 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 115 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 273


state 256

    (129) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 129 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 257

    (148) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 274


state 258

    (149) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 275


state 259

    (151) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (152) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 276
    SEMICOLON       shift and go to state 277


state 260

    (104) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 278


state 261

    (91) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    ECHO            reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    RIGHT_PAREN     reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 91 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 262

    (102) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 279


state 263

    (103) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 103 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 264

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 280
    EQUALS          shift and go to state 281


state 265

    (142) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .

    ECHO            reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    PRINT           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    CLASS           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    INCREASE        reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    DECREMENT       reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    IF              reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    WHILE           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    CONST           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    ARRAY           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    LEFT_BRACKET    reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    NEW             reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    $end            reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    SEMICOLON       reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    RIGHT_PAREN     reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    RETURN          reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    BREAK           reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)
    RIGHT_BRACE     reduce using rule 142 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON .)


state 266

    (141) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .

    ECHO            reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    PRINT           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    CLASS           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    IF              reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    WHILE           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    CONST           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    NEW             reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    $end            reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    RIGHT_PAREN     reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    RETURN          reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    BREAK           reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 141 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON .)


state 267

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 284
    ELSE            shift and go to state 285

    elseif_statement               shift and go to state 282
    else_statement                 shift and go to state 283

state 268

    (20) body_statement -> sentence RETURN . values SEMICOLON
    (21) body_statement -> sentence RETURN . SEMICOLON
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    SEMICOLON       shift and go to state 287
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 286
    boolean                        shift and go to state 53

state 269

    (22) body_statement -> sentence BREAK . SEMICOLON

    SEMICOLON       shift and go to state 288


state 270

    (23) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence body_statement .)


state 271

    (11) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 11 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 272

    (131) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (130) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (131) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 142

    structure_matrix_first         shift and go to state 289

state 273

    (116) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (115) structure_array -> . key EQUALS GREATER_THAN values
    (116) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (117) key -> . INTEGER
    (118) key -> . STRING

    INTEGER         shift and go to state 151
    STRING          shift and go to state 152

    key                            shift and go to state 147
    structure_array                shift and go to state 290

state 274

    (148) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 291


state 275

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 292


state 276

    (151) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 293
    boolean                        shift and go to state 53

state 277

    (152) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 152 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 278

    (104) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 104 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 279

    (102) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (104) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 238

    codeblock                      shift and go to state 294

state 280

    (132) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 132 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 281

    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 295
    boolean                        shift and go to state 53

state 282

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 283

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 284

    (15) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 296


state 285

    (18) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 297


state 286

    (20) body_statement -> sentence RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 298


state 287

    (21) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence RETURN SEMICOLON .)


state 288

    (22) body_statement -> sentence BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence BREAK SEMICOLON .)


state 289

    (131) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 131 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 290

    (116) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 116 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 116 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 291

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 299


state 292

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 300
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 293

    (151) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 301


state 294

    (102) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 102 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 295

    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 302


state 296

    (15) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (24) conditional -> . boolean_expression
    (25) conditional -> . boolean_expression logic_operator boolean_expression
    (29) boolean_expression -> . comparation
    (30) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (31) boolean_expression -> . LOGIC_NOT conditional
    (32) comparation -> . values comparator_operator values
    (33) comparation -> . values comparator_operator expression
    (34) comparation -> . expression comparator_operator expression
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (62) expression -> . term
    (63) expression -> . term PLUS expression
    (64) expression -> . term MINUS expression
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE
    (65) term -> . factor
    (66) term -> . factor MULTIPLY term
    (67) term -> . factor DIVIDE term
    (68) term -> . factor MODULE term
    (69) term -> . factor POW term
    (70) factor -> . INTEGER
    (71) factor -> . VARIABLE
    (72) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 84
    LOGIC_NOT       shift and go to state 58
    INTEGER         shift and go to state 50
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    VARIABLE        shift and go to state 108

    conditional                    shift and go to state 303
    boolean_expression             shift and go to state 54
    comparation                    shift and go to state 57
    values                         shift and go to state 107
    expression                     shift and go to state 59
    boolean                        shift and go to state 53
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 297

    (18) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 304
    sentence                       shift and go to state 251
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 298

    (20) body_statement -> sentence RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence RETURN values SEMICOLON .)


state 299

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (92) params -> . real_params
    (93) params -> . empty
    (94) real_params -> . VARIABLE
    (95) real_params -> . values
    (96) real_params -> . real_params COMMA VARIABLE
    (97) real_params -> . real_params COMMA values
    (98) empty -> .
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    VARIABLE        shift and go to state 182
    RIGHT_PAREN     reduce using rule 98 (empty -> .)
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    params                         shift and go to state 305
    real_params                    shift and go to state 180
    empty                          shift and go to state 181
    values                         shift and go to state 183
    boolean                        shift and go to state 53

state 300

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 306


state 301

    (151) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 151 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 302

    (133) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CLASS           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    IF              reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    WHILE           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RETURN          reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    BREAK           reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 133 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)


state 303

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 307


state 304

    (18) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 308


state 305

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 309


state 306

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 310


state 307

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 311


state 308

    (18) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 18 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 309

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 312


state 310

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (157) method_body -> . classStatement
    (158) method_body -> . classStatement return_form
    (159) method_body -> . return_form
    (160) method_body -> . classStatement BREAK SEMICOLON
    (161) method_body -> . classStatement method_body
    (165) classStatement -> . sentence
    (166) classStatement -> . access_method_object
    (162) return_form -> . RETURN values SEMICOLON
    (163) return_form -> . RETURN access_method_object
    (164) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 318
    VARIABLE        shift and go to state 319
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    method_body                    shift and go to state 313
    classStatement                 shift and go to state 314
    return_form                    shift and go to state 315
    sentence                       shift and go to state 316
    access_method_object           shift and go to state 317
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 311

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (19) body_statement -> . sentence
    (20) body_statement -> . sentence RETURN values SEMICOLON
    (21) body_statement -> . sentence RETURN SEMICOLON
    (22) body_statement -> . sentence BREAK SEMICOLON
    (23) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    VARIABLE        shift and go to state 20
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    body_statement                 shift and go to state 320
    sentence                       shift and go to state 251
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32
    access_method_object           shift and go to state 33

state 312

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (157) method_body -> . classStatement
    (158) method_body -> . classStatement return_form
    (159) method_body -> . return_form
    (160) method_body -> . classStatement BREAK SEMICOLON
    (161) method_body -> . classStatement method_body
    (165) classStatement -> . sentence
    (166) classStatement -> . access_method_object
    (162) return_form -> . RETURN values SEMICOLON
    (163) return_form -> . RETURN access_method_object
    (164) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 318
    VARIABLE        shift and go to state 319
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    method_body                    shift and go to state 321
    classStatement                 shift and go to state 314
    return_form                    shift and go to state 315
    sentence                       shift and go to state 316
    access_method_object           shift and go to state 317
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 313

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 322


state 314

    (157) method_body -> classStatement .
    (158) method_body -> classStatement . return_form
    (160) method_body -> classStatement . BREAK SEMICOLON
    (161) method_body -> classStatement . method_body
    (162) return_form -> . RETURN values SEMICOLON
    (163) return_form -> . RETURN access_method_object
    (164) return_form -> . RETURN SEMICOLON
    (157) method_body -> . classStatement
    (158) method_body -> . classStatement return_form
    (159) method_body -> . return_form
    (160) method_body -> . classStatement BREAK SEMICOLON
    (161) method_body -> . classStatement method_body
    (165) classStatement -> . sentence
    (166) classStatement -> . access_method_object
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . control_structures
    (8) sentence -> . function_declaration
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (45) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> . ECHO printable_values
    (48) print_statement -> . PRINT printable_values
    (73) assignment -> . variable_assignment
    (74) assignment -> . constant_assignment
    (107) types_structure -> . structure_array_principal
    (108) types_structure -> . structure_matrix_principal
    (109) types_structure -> . structure_object_principal
    (143) class_declaration -> . CLASS IDENTIFIER class_extends_opt LEFT_BRACE class_body RIGHT_BRACE
    (9) control_structures -> . if_statement
    (10) control_structures -> . while_statement
    (99) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (75) variable_assignment -> . VARIABLE assignment_operator values
    (76) variable_assignment -> . VARIABLE assignment_operator expression
    (77) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (78) variable_assignment -> . VARIABLE assignment_operator types_structure
    (79) variable_assignment -> . VARIABLE assignment_operator input
    (80) variable_assignment -> . VARIABLE assignment_operator special_function
    (81) variable_assignment -> . VARIABLE INCREASE
    (82) variable_assignment -> . VARIABLE DECREMENT
    (83) variable_assignment -> . INCREASE VARIABLE
    (84) variable_assignment -> . DECREMENT VARIABLE
    (87) constant_assignment -> . const_syntax
    (88) constant_assignment -> . define_syntax
    (110) structure_array_principal -> . indexed_array
    (111) structure_array_principal -> . associative_array
    (121) structure_matrix_principal -> . matrix_firstform
    (122) structure_matrix_principal -> . matrix_secondform
    (123) structure_matrix_principal -> . access_element_matrix
    (124) structure_matrix_principal -> . modify_element_matrix
    (125) structure_matrix_principal -> . add_element_matrix
    (135) structure_object_principal -> . object_creation
    (136) structure_object_principal -> . access_method_object
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (11) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (89) const_syntax -> . CONST IDENTIFIER EQUALS values
    (90) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (112) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (114) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (126) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (127) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (132) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) object_creation -> . NEW IDENTIFIER
    (138) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 157 (method_body -> classStatement .)
    BREAK           shift and go to state 324
    RETURN          shift and go to state 318
    VARIABLE        shift and go to state 319
    ECHO            shift and go to state 9
    PRINT           shift and go to state 10
    CLASS           shift and go to state 16
    FUNCTION        shift and go to state 19
    INCREASE        shift and go to state 21
    DECREMENT       shift and go to state 22
    IF              shift and go to state 34
    WHILE           shift and go to state 35
    CONST           shift and go to state 36
    DEFINE          shift and go to state 37
    ARRAY           shift and go to state 38
    LEFT_BRACKET    shift and go to state 39
    NEW             shift and go to state 40

    classStatement                 shift and go to state 314
    return_form                    shift and go to state 323
    method_body                    shift and go to state 325
    access_method_object           shift and go to state 317
    sentence                       shift and go to state 316
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    control_structures             shift and go to state 7
    function_declaration           shift and go to state 8
    variable_assignment            shift and go to state 11
    constant_assignment            shift and go to state 12
    structure_array_principal      shift and go to state 13
    structure_matrix_principal     shift and go to state 14
    structure_object_principal     shift and go to state 15
    if_statement                   shift and go to state 17
    while_statement                shift and go to state 18
    const_syntax                   shift and go to state 23
    define_syntax                  shift and go to state 24
    indexed_array                  shift and go to state 25
    associative_array              shift and go to state 26
    matrix_firstform               shift and go to state 27
    matrix_secondform              shift and go to state 28
    access_element_matrix          shift and go to state 29
    modify_element_matrix          shift and go to state 30
    add_element_matrix             shift and go to state 31
    object_creation                shift and go to state 32

state 315

    (159) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 159 (method_body -> return_form .)


state 316

    (165) classStatement -> sentence .

    BREAK           reduce using rule 165 (classStatement -> sentence .)
    RETURN          reduce using rule 165 (classStatement -> sentence .)
    VARIABLE        reduce using rule 165 (classStatement -> sentence .)
    ECHO            reduce using rule 165 (classStatement -> sentence .)
    PRINT           reduce using rule 165 (classStatement -> sentence .)
    CLASS           reduce using rule 165 (classStatement -> sentence .)
    FUNCTION        reduce using rule 165 (classStatement -> sentence .)
    INCREASE        reduce using rule 165 (classStatement -> sentence .)
    DECREMENT       reduce using rule 165 (classStatement -> sentence .)
    IF              reduce using rule 165 (classStatement -> sentence .)
    WHILE           reduce using rule 165 (classStatement -> sentence .)
    CONST           reduce using rule 165 (classStatement -> sentence .)
    DEFINE          reduce using rule 165 (classStatement -> sentence .)
    ARRAY           reduce using rule 165 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 165 (classStatement -> sentence .)
    NEW             reduce using rule 165 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 165 (classStatement -> sentence .)


state 317

    (166) classStatement -> access_method_object .
    (136) structure_object_principal -> access_method_object .

  ! reduce/reduce conflict for BREAK resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for RETURN resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for ECHO resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for PRINT resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for CLASS resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for INCREASE resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for DECREMENT resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for IF resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for WHILE resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for CONST resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for DEFINE resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for ARRAY resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for LEFT_BRACKET resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for NEW resolved using rule 136 (structure_object_principal -> access_method_object .)
  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 136 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 136 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 136 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 136 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 136 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 136 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 136 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 136 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 136 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 136 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 136 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 136 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 136 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 136 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 136 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 136 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 136 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 136 (structure_object_principal -> access_method_object .)

  ! BREAK           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! RETURN          [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! VARIABLE        [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! ECHO            [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! PRINT           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! CLASS           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! FUNCTION        [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! INCREASE        [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! DECREMENT       [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! IF              [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! WHILE           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! CONST           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! DEFINE          [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! ARRAY           [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! LEFT_BRACKET    [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! NEW             [ reduce using rule 166 (classStatement -> access_method_object .) ]
  ! RIGHT_BRACE     [ reduce using rule 166 (classStatement -> access_method_object .) ]


state 318

    (162) return_form -> RETURN . values SEMICOLON
    (163) return_form -> RETURN . access_method_object
    (164) return_form -> RETURN . SEMICOLON
    (56) values -> . INTEGER
    (57) values -> . STRING
    (58) values -> . FLOAT
    (59) values -> . boolean
    (139) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (140) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (60) boolean -> . TRUE
    (61) boolean -> . FALSE

    SEMICOLON       shift and go to state 327
    INTEGER         shift and go to state 154
    STRING          shift and go to state 51
    FLOAT           shift and go to state 52
    VARIABLE        shift and go to state 329
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    values                         shift and go to state 326
    access_method_object           shift and go to state 328
    boolean                        shift and go to state 53

state 319

    (139) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON
    (75) variable_assignment -> VARIABLE . assignment_operator values
    (76) variable_assignment -> VARIABLE . assignment_operator expression
    (77) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (78) variable_assignment -> VARIABLE . assignment_operator types_structure
    (79) variable_assignment -> VARIABLE . assignment_operator input
    (80) variable_assignment -> VARIABLE . assignment_operator special_function
    (81) variable_assignment -> VARIABLE . INCREASE
    (82) variable_assignment -> VARIABLE . DECREMENT
    (132) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (133) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (134) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (85) assignment_operator -> . EQUALS
    (86) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 71
    INCREASE        shift and go to state 67
    DECREMENT       shift and go to state 68
    LEFT_BRACKET    shift and go to state 69
    EQUALS          shift and go to state 70
    PLUS_EQUALS     shift and go to state 72

    assignment_operator            shift and go to state 66

state 320

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 330


state 321

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 331


state 322

    (149) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 149 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 323

    (158) method_body -> classStatement return_form .
    (159) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 158 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 158 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 159 (method_body -> return_form .) ]


state 324

    (160) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 332


state 325

    (161) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 161 (method_body -> classStatement method_body .)


state 326

    (162) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 333


state 327

    (164) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 164 (return_form -> RETURN SEMICOLON .)


state 328

    (163) return_form -> RETURN access_method_object .

    RIGHT_BRACE     reduce using rule 163 (return_form -> RETURN access_method_object .)


state 329

    (139) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (140) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER SEMICOLON
    (141) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS values SEMICOLON
    (142) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER EQUALS VARIABLE SEMICOLON

    MINUS           shift and go to state 71


state 330

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (18) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 284
    ELSE            shift and go to state 285

    elseif_statement               shift and go to state 334
    else_statement                 shift and go to state 335

state 331

    (148) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 148 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 332

    (160) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 160 (method_body -> classStatement BREAK SEMICOLON .)


state 333

    (162) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 162 (return_form -> RETURN values SEMICOLON .)


state 334

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 335

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 47 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 54 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 54 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 47
WARNING: reduce/reduce conflict in state 50 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 50
WARNING: reduce/reduce conflict in state 158 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 158
WARNING: reduce/reduce conflict in state 317 resolved using rule (structure_object_principal -> access_method_object)
WARNING: rejected rule (classStatement -> access_method_object) in state 317
WARNING: reduce/reduce conflict in state 323 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 323
WARNING: Rule (classStatement -> access_method_object) is never reduced
