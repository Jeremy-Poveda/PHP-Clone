Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    number_values -> INTEGER
Rule 43    number_values -> FLOAT
Rule 44    operator_aritmetic -> PLUS
Rule 45    operator_aritmetic -> MINUS
Rule 46    operator_aritmetic -> MULTIPLY
Rule 47    operator_aritmetic -> DIVIDE
Rule 48    operator_aritmetic -> MODULE
Rule 49    operator_aritmetic -> POW
Rule 50    conditional -> boolean_expression
Rule 51    conditional -> boolean_expression logic_operator boolean_expression
Rule 52    logic_operator -> LOGIC_AND
Rule 53    logic_operator -> LOGIC_OR
Rule 54    logic_operator -> LOGIC_XOR
Rule 55    boolean_expression -> comparation
Rule 56    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 57    boolean_expression -> logic_not_sentence
Rule 58    boolean_expression -> logic_expression
Rule 59    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 60    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 61    true_boolean_types -> TRUE
Rule 62    true_boolean_types -> STRING
Rule 63    true_boolean_types -> INTEGER
Rule 64    true_boolean_types -> FLOAT
Rule 65    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 66    false_boolean_types -> FALSE
Rule 67    false_boolean_types -> STRING
Rule 68    false_boolean_types -> INTEGER
Rule 69    false_boolean_types -> FLOAT
Rule 70    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 71    false_boolean_types -> NULL
Rule 72    logic_not_sentence -> LOGIC_NOT conditional
Rule 73    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 74    comparation -> values comparator_operator values
Rule 75    comparation -> values comparator_operator expression
Rule 76    comparation -> expression comparator_operator expression
Rule 77    comparation -> VARIABLE EQUALS_EQUALS values
Rule 78    comparation -> access_array_element EQUALS_EQUALS values
Rule 79    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 80    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 81    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 82    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 83    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 84    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 85    comparator_operator -> EQUALS_EQUALS
Rule 86    comparator_operator -> IDENTICAL
Rule 87    comparator_operator -> NOT_EQUALS
Rule 88    comparator_operator -> NOT_IDENTICAL
Rule 89    comparator_operator -> SMALL_THAN
Rule 90    comparator_operator -> GREATER_THAN
Rule 91    comparator_operator -> SMALL_EQUALS_TO
Rule 92    comparator_operator -> GREATER_EQUALS_TO
Rule 93    comparator_operator -> SPACECRAFT
Rule 94    comparator_operator -> NULL_FUSION
Rule 95    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 96    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 97    print_statement -> ECHO printable_values
Rule 98    print_statement -> PRINT printable_values
Rule 99    printable_values -> values
Rule 100   printable_values -> values COMMA printable_values
Rule 101   printable_values -> VARIABLE
Rule 102   printable_values -> VARIABLE COMMA printable_values
Rule 103   printable_values -> STRING STRING_CONCATENATION STRING
Rule 104   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 105   printable_values -> conditional
Rule 106   printable_values -> conditional COMMA printable_values
Rule 107   printable_values -> structure_object_principal
Rule 108   printable_values -> structure_object_principal COMMA printable_values
Rule 109   values -> INTEGER
Rule 110   values -> STRING
Rule 111   values -> FLOAT
Rule 112   values -> boolean
Rule 113   boolean -> TRUE
Rule 114   boolean -> FALSE
Rule 115   expression -> term
Rule 116   expression -> term PLUS expression
Rule 117   expression -> term MINUS expression
Rule 118   term -> factor
Rule 119   term -> factor MULTIPLY term
Rule 120   term -> factor DIVIDE term
Rule 121   term -> factor MODULE term
Rule 122   term -> factor POW term
Rule 123   factor -> INTEGER
Rule 124   factor -> VARIABLE
Rule 125   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 126   assignment -> variable_assignment
Rule 127   assignment -> constant_assignment
Rule 128   variable_assignment -> VARIABLE assignment_operator values
Rule 129   variable_assignment -> VARIABLE assignment_operator expression
Rule 130   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 131   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 132   variable_assignment -> VARIABLE assignment_operator input
Rule 133   variable_assignment -> VARIABLE assignment_operator special_function
Rule 134   variable_assignment -> VARIABLE INCREASE
Rule 135   variable_assignment -> VARIABLE DECREMENT
Rule 136   variable_assignment -> INCREASE VARIABLE
Rule 137   variable_assignment -> DECREMENT VARIABLE
Rule 138   assignment_operator -> EQUALS
Rule 139   assignment_operator -> PLUS_EQUALS
Rule 140   constant_assignment -> const_syntax
Rule 141   constant_assignment -> define_syntax
Rule 142   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 143   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 144   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 145   params -> real_params
Rule 146   params -> empty
Rule 147   real_params -> VARIABLE
Rule 148   real_params -> values
Rule 149   real_params -> real_params COMMA VARIABLE
Rule 150   real_params -> real_params COMMA values
Rule 151   empty -> <empty>
Rule 152   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 153   special_function -> arrow_function
Rule 154   special_function -> anonymous_functions
Rule 155   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 156   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 157   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 158   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 159   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 160   types_structure -> structure_array_principal
Rule 161   types_structure -> structure_matrix_principal
Rule 162   types_structure -> structure_object_principal
Rule 163   structure_array_principal -> indexed_array
Rule 164   structure_array_principal -> associative_array
Rule 165   structure_array_principal -> access_array_stucture
Rule 166   structure_array_principal -> access_array_element
Rule 167   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 168   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 169   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 170   structure_array -> key EQUALS GREATER_THAN values
Rule 171   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 172   key -> INTEGER
Rule 173   key -> STRING
Rule 174   values_array_indexed -> values
Rule 175   values_array_indexed -> values COMMA values_array_indexed
Rule 176   values_array_indexed -> object_creation
Rule 177   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 178   values_array_indexed -> indexed_array
Rule 179   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 180   access_array_stucture -> access_array_element SEMICOLON
Rule 181   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 182   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 183   structure_matrix_principal -> matrix_firstform
Rule 184   structure_matrix_principal -> matrix_secondform
Rule 185   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 186   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 187   structure_matrix_principal -> add_element_matrix
Rule 188   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 189   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 190   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 191   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 192   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 193   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 194   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 195   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 196   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 197   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 198   modify_element_matrix -> access_element_matrix EQUALS values
Rule 199   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 200   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 201   structure_object_principal -> object_creation
Rule 202   structure_object_principal -> access_method_object
Rule 203   object_creation -> NEW IDENTIFIER
Rule 204   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 205   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 206   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 207   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 208   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 209   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 210   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 211   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 212   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 213   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 214   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 215   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 216   accessType -> IDENTIFIER
Rule 217   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 218   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 219   interface_body -> interface_body interface_method
Rule 220   interface_body -> <empty>
Rule 221   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 222   class_extends_opt -> EXTENDS IDENTIFIER
Rule 223   class_extends_opt -> <empty>
Rule 224   class_implements_opt -> IMPLEMENTS interface_list
Rule 225   class_implements_opt -> <empty>
Rule 226   interface_list -> IDENTIFIER
Rule 227   interface_list -> interface_list COMMA IDENTIFIER
Rule 228   class_body -> class_body class_member
Rule 229   class_body -> <empty>
Rule 230   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 231   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 232   class_member -> class_attribute
Rule 233   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 234   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 235   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 236   visibility_opt -> PUBLIC
Rule 237   visibility_opt -> PRIVATE
Rule 238   visibility_opt -> PROTECTED
Rule 239   visibility_opt -> <empty>
Rule 240   method_body -> classStatement
Rule 241   method_body -> classStatement return_form
Rule 242   method_body -> return_form
Rule 243   method_body -> classStatement BREAK SEMICOLON
Rule 244   method_body -> classStatement method_body
Rule 245   return_form -> RETURN values SEMICOLON
Rule 246   return_form -> RETURN access_method_object SEMICOLON
Rule 247   return_form -> RETURN SEMICOLON
Rule 248   classStatement -> sentence
Rule 249   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 65 70 167 168 169 188 192 193
BREAK                : 24 27 243
CLASS                : 217
COLON                : 
COMMA                : 100 102 106 108 143 149 150 171 175 177 179 191 193 227
COMMENT              : 
CONST                : 142
DECREMENT            : 30 32 135 137
DEFINE               : 143
DIVIDE               : 47 120
ECHO                 : 95 97
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 138 142 155 170 171 198 199 200 207 208 209 212 213 214 233
EQUALS_EQUALS        : 77 78 79 80 81 82 83 84 85
EXTENDS              : 222
FALSE                : 66 114
FEGTS                : 158
FLOAT                : 43 64 69 111
FN                   : 155
FOR                  : 28
FUNCTION             : 152 156 221 230 231
GREATER_EQUALS_TO    : 92
GREATER_THAN         : 90 155 170 171 205 206 207 208 209 210 211 212 213 214
IDENTICAL            : 86
IDENTIFIER           : 40 41 142 144 152 203 204 215 216 217 218 221 222 226 227 230 231
IF                   : 14 15 16
IMPLEMENTS           : 224
INCREASE             : 29 31 134 136
INTEGER              : 33 42 63 68 109 123 172 181 194 194 196 197 215
INTERFACE            : 218
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 157 217 218 230 231
LEFT_BRACKET         : 169 181 182 189 190 191 194 194 195 195 196 196 197 197 200 215
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 56 65 70 95 96 125 143 144 152 155 156 158 159 167 168 188 192 193 204 221 230 231
LOGIC_AND            : 52
LOGIC_NOT            : 72 73
LOGIC_OR             : 53
LOGIC_XOR            : 54
MINUS                : 45 117 205 206 207 208 209 210 211 212 213 214
MODULE               : 48 121
MULTIPLY             : 46 119
NEW                  : 203 204
NOT_EQUALS           : 87
NOT_IDENTICAL        : 88
NULL                 : 71
NULL_FUSION          : 94
PLUS                 : 44 116
PLUS_EQUALS          : 33 139
POW                  : 49 122
PRINT                : 96 98
PRIVATE              : 237
PROTECTED            : 238
PUBLIC               : 236
READLINE             : 159
RETURN               : 22 23 26 245 246 247
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 157 217 218 230 231
RIGHT_BRACKET        : 169 181 182 189 190 191 194 194 195 195 196 196 197 197 200 215
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 56 65 70 95 96 125 143 144 152 155 156 158 159 167 168 188 192 193 204 221 230 231
SEMICOLON            : 3 4 22 23 24 26 27 28 28 180 185 186 188 189 221 233 234 235 243 245 246 247 249
SMALL_EQUALS_TO      : 91
SMALL_THAN           : 89
SPACECRAFT           : 93
STATIC               : 230
STDIN                : 158
STRING               : 62 67 103 103 104 110 143 159 173
STRING_CONCATENATION : 103 104
TRUE                 : 61 113
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 73 77 79 80 81 81 83 84 101 102 104 124 128 129 130 131 132 133 134 135 136 137 147 149 181 182 182 194 195 195 195 196 196 197 197 199 200 205 206 207 208 208 209 213 233 234
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 206 207 208 209 211 212 213 214
access_array_element : 41 78 79 80 82 82 166 180 209 210 211 212 213 214 214
access_array_stucture : 165
access_element_matrix : 83 84 185 198 199
access_method_object : 202 246 249
add_element_matrix   : 187
anonymous_functions  : 154
arrow_function       : 153
assignment           : 4
assignment_operator  : 128 129 130 131 132 133
associative_array    : 164
body_statement       : 13 14 15 16 17 18 19 20 25 28 157
boolean              : 112
boolean_expression   : 50 51 51
classStatement       : 240 241 243 244
class_attribute      : 232
class_body           : 217 228
class_declaration    : 6
class_extends_opt    : 217 218
class_implements_opt : 217
class_member         : 228
codeblock            : 152 155 156
comparation          : 55
comparator_operator  : 35 74 75 76
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 56 72 105 106
const_syntax         : 140
constant_assignment  : 127 235
control_structures   : 8
define_syntax        : 141
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 146
expression           : 75 76 76 116 117 125 129
expression_for       : 28 35 38 38 39
factor               : 118 119 120 121 122
false_boolean_types  : 59 60
for_statement        : 12
function_declaration : 9
function_invocation  : 130 205 210
if_statement         : 10
increment_statement  : 28
indexed_array        : 163 178 179 200
input                : 132
interface_body       : 218 219
interface_declaration : 7
interface_list       : 224 227
interface_method     : 219
key                  : 170 171
logic_expression     : 58
logic_not_sentence   : 57
logic_operator       : 51 59 60
matrix_firstform     : 183
matrix_secondform    : 184
method_body          : 230 231 244
modify_element_matrix : 186
number_values        : 34 37
object_creation      : 176 177 201
operator_aritmetic   : 34 38
params               : 144 152 155 156 204 221 230 231
print_statement      : 3
printable_values     : 95 96 97 98 100 102 106 108
program              : 1 0
real_params          : 145 149 150
return_form          : 241 242
sentence             : 1 2 21 22 23 24 25 248
special_function     : 133
structure_array      : 168 169 171
structure_array_principal : 160
structure_matrix_first : 188 193
structure_matrix_principal : 161
structure_matrix_second : 189 191
structure_object_principal : 107 108 162
term                 : 115 116 117 119 120 121 122
true_boolean_types   : 59 60
types_structure      : 5 131
values               : 22 26 65 74 74 75 77 78 99 100 128 142 143 148 150 170 171 174 175 190 191 192 193 198 207 212 233 245
values_array_indexed : 167 175 177 179
variable_assignment  : 126
visibility_opt       : 221 230 231 233 234 235
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (95) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> ECHO . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 11

    (96) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> PRINT . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 76
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 77
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 12

    (126) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 126 (assignment -> variable_assignment .)


state 13

    (127) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 127 (assignment -> constant_assignment .)


state 14

    (160) types_structure -> structure_array_principal .

    ECHO            reduce using rule 160 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 160 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 160 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 160 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 160 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 160 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 160 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 160 (types_structure -> structure_array_principal .)
    IF              reduce using rule 160 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 160 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 160 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 160 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 160 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 160 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 160 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 160 (types_structure -> structure_array_principal .)
    $end            reduce using rule 160 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 160 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 160 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 160 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 160 (types_structure -> structure_array_principal .)


state 15

    (161) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 161 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 161 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 161 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 161 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 161 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 161 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 161 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 161 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 161 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 161 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 161 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 161 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 161 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 161 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 161 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 161 (types_structure -> structure_matrix_principal .)


state 16

    (162) types_structure -> structure_object_principal .

    ECHO            reduce using rule 162 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 162 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 162 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 162 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 162 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 162 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 162 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 162 (types_structure -> structure_object_principal .)
    IF              reduce using rule 162 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 162 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 162 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 162 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 162 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 162 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 162 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 162 (types_structure -> structure_object_principal .)
    $end            reduce using rule 162 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 162 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 162 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 162 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 162 (types_structure -> structure_object_principal .)


state 17

    (217) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 78


state 18

    (218) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 79


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (152) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 80


state 23

    (128) variable_assignment -> VARIABLE . assignment_operator values
    (129) variable_assignment -> VARIABLE . assignment_operator expression
    (130) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (131) variable_assignment -> VARIABLE . assignment_operator types_structure
    (132) variable_assignment -> VARIABLE . assignment_operator input
    (133) variable_assignment -> VARIABLE . assignment_operator special_function
    (134) variable_assignment -> VARIABLE . INCREASE
    (135) variable_assignment -> VARIABLE . DECREMENT
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (138) assignment_operator -> . EQUALS
    (139) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 82
    DECREMENT       shift and go to state 83
    LEFT_BRACKET    shift and go to state 84
    MINUS           shift and go to state 86
    EQUALS          shift and go to state 85
    PLUS_EQUALS     shift and go to state 87

    assignment_operator            shift and go to state 81

state 24

    (136) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 88


state 25

    (137) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 89


state 26

    (140) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 140 (constant_assignment -> const_syntax .)


state 27

    (141) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 141 (constant_assignment -> define_syntax .)


state 28

    (163) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 163 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 163 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 163 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 163 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 163 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 163 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 163 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 163 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 163 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 163 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 163 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 163 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 163 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 163 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 163 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 163 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 163 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 163 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 163 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 163 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 163 (structure_array_principal -> indexed_array .)


state 29

    (164) structure_array_principal -> associative_array .

    ECHO            reduce using rule 164 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 164 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 164 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 164 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 164 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 164 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 164 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 164 (structure_array_principal -> associative_array .)
    IF              reduce using rule 164 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 164 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 164 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 164 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 164 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 164 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 164 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 164 (structure_array_principal -> associative_array .)
    $end            reduce using rule 164 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 164 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 164 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 164 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 164 (structure_array_principal -> associative_array .)


state 30

    (165) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 165 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 165 (structure_array_principal -> access_array_stucture .)


state 31

    (166) structure_array_principal -> access_array_element .
    (180) access_array_stucture -> access_array_element . SEMICOLON
    (210) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (211) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (212) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ECHO            reduce using rule 166 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 166 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 166 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 166 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 166 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 166 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 166 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 166 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 166 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 166 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 166 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 166 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 166 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 166 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 166 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 166 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 166 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 166 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 166 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 166 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 90
    MINUS           shift and go to state 91

  ! SEMICOLON       [ reduce using rule 166 (structure_array_principal -> access_array_element .) ]


state 32

    (183) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 183 (structure_matrix_principal -> matrix_firstform .)


state 33

    (184) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 184 (structure_matrix_principal -> matrix_secondform .)


state 34

    (185) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (198) modify_element_matrix -> access_element_matrix . EQUALS values
    (199) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 92
    EQUALS          shift and go to state 93


state 35

    (186) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 94


state 36

    (187) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 187 (structure_matrix_principal -> add_element_matrix .)


state 37

    (201) structure_object_principal -> object_creation .

    ECHO            reduce using rule 201 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 201 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 201 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 201 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 201 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 201 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 201 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 201 (structure_object_principal -> object_creation .)
    IF              reduce using rule 201 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 201 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 201 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 201 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 201 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 201 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 201 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 201 (structure_object_principal -> object_creation .)
    $end            reduce using rule 201 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 201 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 201 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 201 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 201 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 201 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 201 (structure_object_principal -> object_creation .)


state 38

    (202) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 202 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 202 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 202 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 202 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 202 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 202 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 202 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 202 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 202 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 202 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 202 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 202 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 202 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 202 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 202 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 202 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 202 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 202 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 202 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 202 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 202 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 202 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 202 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 95


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 96


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 97


state 42

    (142) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 98


state 43

    (143) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 99


state 44

    (167) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (188) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 100
    LEFT_BRACKET    shift and go to state 101


state 45

    (189) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (190) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (191) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 102

    structure_matrix_second        shift and go to state 103

state 46

    (203) object_creation -> NEW . IDENTIFIER
    (204) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 104


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (95) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (125) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 109
    STRING          shift and go to state 54
    INTEGER         shift and go to state 110
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 105
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 106
    conditional                    shift and go to state 107
    expression                     shift and go to state 108
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    access_array_element           shift and go to state 66
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71

state 51

    (97) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 97 (print_statement -> ECHO printable_values .)


state 52

    (99) printable_values -> values .
    (100) printable_values -> values . COMMA printable_values
    (74) comparation -> values . comparator_operator values
    (75) comparation -> values . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 99 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 99 (printable_values -> values .)
    COMMA           shift and go to state 111
    EQUALS_EQUALS   shift and go to state 113
    IDENTICAL       shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    NOT_IDENTICAL   shift and go to state 116
    SMALL_THAN      shift and go to state 117
    GREATER_THAN    shift and go to state 118
    SMALL_EQUALS_TO shift and go to state 119
    GREATER_EQUALS_TO shift and go to state 120
    SPACECRAFT      shift and go to state 121
    NULL_FUSION     shift and go to state 122

    comparator_operator            shift and go to state 112

state 53

    (101) printable_values -> VARIABLE .
    (102) printable_values -> VARIABLE . COMMA printable_values
    (104) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) factor -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 101 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 101 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 123
    STRING_CONCATENATION shift and go to state 124
    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 125
    LEFT_BRACKET    shift and go to state 126
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)

  ! MINUS           [ reduce using rule 124 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 124 (factor -> VARIABLE .) ]


state 54

    (103) printable_values -> STRING . STRING_CONCATENATION STRING
    (110) values -> STRING .
    (62) true_boolean_types -> STRING .
    (67) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 127
    COMMA           reduce using rule 110 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 110 (values -> STRING .)
    IDENTICAL       reduce using rule 110 (values -> STRING .)
    NOT_EQUALS      reduce using rule 110 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 110 (values -> STRING .)
    SMALL_THAN      reduce using rule 110 (values -> STRING .)
    GREATER_THAN    reduce using rule 110 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 110 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 110 (values -> STRING .)
    SPACECRAFT      reduce using rule 110 (values -> STRING .)
    NULL_FUSION     reduce using rule 110 (values -> STRING .)
    SEMICOLON       reduce using rule 110 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 110 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 67 (false_boolean_types -> STRING .) ]


state 55

    (105) printable_values -> conditional .
    (106) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 105 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> conditional .)
    COMMA           shift and go to state 128


state 56

    (107) printable_values -> structure_object_principal .
    (108) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 107 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 129


state 57

    (109) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .
    (123) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 109 (values -> INTEGER .)
    COMMA           reduce using rule 109 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 109 (values -> INTEGER .)
    IDENTICAL       reduce using rule 109 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 109 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 109 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 109 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 109 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 109 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 109 (values -> INTEGER .)
    SEMICOLON       reduce using rule 109 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 123 (factor -> INTEGER .)
    DIVIDE          reduce using rule 123 (factor -> INTEGER .)
    MODULE          reduce using rule 123 (factor -> INTEGER .)
    POW             reduce using rule 123 (factor -> INTEGER .)
    PLUS            reduce using rule 123 (factor -> INTEGER .)
    MINUS           reduce using rule 123 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 123 (factor -> INTEGER .) ]


state 58

    (111) values -> FLOAT .
    (64) true_boolean_types -> FLOAT .
    (69) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 111 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 111 (values -> FLOAT .)
    IDENTICAL       reduce using rule 111 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 111 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 111 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 111 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 111 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 111 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 111 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 111 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 111 (values -> FLOAT .)
    SEMICOLON       reduce using rule 111 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 111 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> FLOAT .) ]


state 59

    (112) values -> boolean .

    COMMA           reduce using rule 112 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 112 (values -> boolean .)
    IDENTICAL       reduce using rule 112 (values -> boolean .)
    NOT_EQUALS      reduce using rule 112 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 112 (values -> boolean .)
    SMALL_THAN      reduce using rule 112 (values -> boolean .)
    GREATER_THAN    reduce using rule 112 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 112 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 112 (values -> boolean .)
    SPACECRAFT      reduce using rule 112 (values -> boolean .)
    NULL_FUSION     reduce using rule 112 (values -> boolean .)
    SEMICOLON       reduce using rule 112 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 112 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 112 (values -> boolean .)
    LOGIC_AND       reduce using rule 112 (values -> boolean .)
    LOGIC_OR        reduce using rule 112 (values -> boolean .)
    LOGIC_XOR       reduce using rule 112 (values -> boolean .)
    ECHO            reduce using rule 112 (values -> boolean .)
    PRINT           reduce using rule 112 (values -> boolean .)
    CLASS           reduce using rule 112 (values -> boolean .)
    INTERFACE       reduce using rule 112 (values -> boolean .)
    FUNCTION        reduce using rule 112 (values -> boolean .)
    VARIABLE        reduce using rule 112 (values -> boolean .)
    INCREASE        reduce using rule 112 (values -> boolean .)
    DECREMENT       reduce using rule 112 (values -> boolean .)
    IF              reduce using rule 112 (values -> boolean .)
    WHILE           reduce using rule 112 (values -> boolean .)
    FOR             reduce using rule 112 (values -> boolean .)
    CONST           reduce using rule 112 (values -> boolean .)
    DEFINE          reduce using rule 112 (values -> boolean .)
    ARRAY           reduce using rule 112 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 112 (values -> boolean .)
    NEW             reduce using rule 112 (values -> boolean .)
    $end            reduce using rule 112 (values -> boolean .)
    RETURN          reduce using rule 112 (values -> boolean .)
    BREAK           reduce using rule 112 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 112 (values -> boolean .)


state 60

    (50) conditional -> boolean_expression .
    (51) conditional -> boolean_expression . logic_operator boolean_expression
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 50 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 50 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 50 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 131
    LOGIC_OR        shift and go to state 132
    LOGIC_XOR       shift and go to state 133

  ! LOGIC_AND       [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 50 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 130

state 61

    (113) boolean -> TRUE .
    (61) true_boolean_types -> TRUE .

    COMMA           reduce using rule 113 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 113 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 113 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 113 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 113 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 113 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 113 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 113 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 113 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 113 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 113 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 113 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 113 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)


state 62

    (114) boolean -> FALSE .
    (66) false_boolean_types -> FALSE .

    COMMA           reduce using rule 114 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 114 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 114 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 114 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 114 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 114 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 114 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 114 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 114 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 114 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 114 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 114 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 114 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)


state 63

    (55) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 55 (boolean_expression -> comparation .)
    COMMA           reduce using rule 55 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 55 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 55 (boolean_expression -> comparation .)


state 64

    (57) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> logic_not_sentence .)


state 65

    (58) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_expression .)


state 66

    (210) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (211) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (212) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (78) comparation -> access_array_element . EQUALS_EQUALS values
    (79) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (82) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 134


state 67

    (76) comparation -> expression . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 113
    IDENTICAL       shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    NOT_IDENTICAL   shift and go to state 116
    SMALL_THAN      shift and go to state 117
    GREATER_THAN    shift and go to state 118
    SMALL_EQUALS_TO shift and go to state 119
    GREATER_EQUALS_TO shift and go to state 120
    SPACECRAFT      shift and go to state 121
    NULL_FUSION     shift and go to state 122

    comparator_operator            shift and go to state 135

state 68

    (83) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 136


state 69

    (72) logic_not_sentence -> LOGIC_NOT . conditional
    (73) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 138
    LEFT_PAREN      shift and go to state 105
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    conditional                    shift and go to state 137
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 139
    expression                     shift and go to state 67
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 70

    (59) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 131
    LOGIC_OR        shift and go to state 132
    LOGIC_XOR       shift and go to state 133

    logic_operator                 shift and go to state 144

state 71

    (60) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 131
    LOGIC_OR        shift and go to state 132
    LOGIC_XOR       shift and go to state 133

    logic_operator                 shift and go to state 145

state 72

    (115) expression -> term .
    (116) expression -> term . PLUS expression
    (117) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 115 (expression -> term .)
    IDENTICAL       reduce using rule 115 (expression -> term .)
    NOT_EQUALS      reduce using rule 115 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 115 (expression -> term .)
    SMALL_THAN      reduce using rule 115 (expression -> term .)
    GREATER_THAN    reduce using rule 115 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 115 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 115 (expression -> term .)
    SPACECRAFT      reduce using rule 115 (expression -> term .)
    NULL_FUSION     reduce using rule 115 (expression -> term .)
    RIGHT_PAREN     reduce using rule 115 (expression -> term .)
    SEMICOLON       reduce using rule 115 (expression -> term .)
    LOGIC_AND       reduce using rule 115 (expression -> term .)
    LOGIC_OR        reduce using rule 115 (expression -> term .)
    LOGIC_XOR       reduce using rule 115 (expression -> term .)
    COMMA           reduce using rule 115 (expression -> term .)
    PLUS            shift and go to state 146
    MINUS           shift and go to state 147


state 73

    (65) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (70) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 148


state 74

    (71) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 71 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> NULL .)


state 75

    (118) term -> factor .
    (119) term -> factor . MULTIPLY term
    (120) term -> factor . DIVIDE term
    (121) term -> factor . MODULE term
    (122) term -> factor . POW term

    PLUS            reduce using rule 118 (term -> factor .)
    MINUS           reduce using rule 118 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 118 (term -> factor .)
    IDENTICAL       reduce using rule 118 (term -> factor .)
    NOT_EQUALS      reduce using rule 118 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 118 (term -> factor .)
    SMALL_THAN      reduce using rule 118 (term -> factor .)
    GREATER_THAN    reduce using rule 118 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 118 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 118 (term -> factor .)
    SPACECRAFT      reduce using rule 118 (term -> factor .)
    NULL_FUSION     reduce using rule 118 (term -> factor .)
    RIGHT_PAREN     reduce using rule 118 (term -> factor .)
    SEMICOLON       reduce using rule 118 (term -> factor .)
    LOGIC_AND       reduce using rule 118 (term -> factor .)
    LOGIC_OR        reduce using rule 118 (term -> factor .)
    LOGIC_XOR       reduce using rule 118 (term -> factor .)
    COMMA           reduce using rule 118 (term -> factor .)
    MULTIPLY        shift and go to state 149
    DIVIDE          shift and go to state 150
    MODULE          shift and go to state 151
    POW             shift and go to state 152


state 76

    (96) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (125) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 109
    STRING          shift and go to state 54
    INTEGER         shift and go to state 110
    FLOAT           shift and go to state 58
    LEFT_PAREN      shift and go to state 105
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 153
    conditional                    shift and go to state 107
    expression                     shift and go to state 108
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    boolean                        shift and go to state 59
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    access_array_element           shift and go to state 66
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71

state 77

    (98) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 98 (print_statement -> PRINT printable_values .)


state 78

    (217) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (222) class_extends_opt -> . EXTENDS IDENTIFIER
    (223) class_extends_opt -> .

    EXTENDS         shift and go to state 155
    IMPLEMENTS      reduce using rule 223 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 223 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 154

state 79

    (218) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (222) class_extends_opt -> . EXTENDS IDENTIFIER
    (223) class_extends_opt -> .

    EXTENDS         shift and go to state 155
    LEFT_BRACE      reduce using rule 223 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 156

state 80

    (152) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 157


state 81

    (128) variable_assignment -> VARIABLE assignment_operator . values
    (129) variable_assignment -> VARIABLE assignment_operator . expression
    (130) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (131) variable_assignment -> VARIABLE assignment_operator . types_structure
    (132) variable_assignment -> VARIABLE assignment_operator . input
    (133) variable_assignment -> VARIABLE assignment_operator . special_function
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (144) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (158) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (159) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (153) special_function -> . arrow_function
    (154) special_function -> . anonymous_functions
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (155) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (156) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    INTEGER         shift and go to state 165
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    IDENTIFIER      shift and go to state 168
    FEGTS           shift and go to state 170
    READLINE        shift and go to state 171
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175
    FN              shift and go to state 176
    FUNCTION        shift and go to state 177
    VARIABLE        shift and go to state 158
    LEFT_PAREN      shift and go to state 169
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    values                         shift and go to state 159
    expression                     shift and go to state 160
    function_invocation            shift and go to state 161
    types_structure                shift and go to state 162
    input                          shift and go to state 163
    special_function               shift and go to state 164
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 172
    anonymous_functions            shift and go to state 173
    factor                         shift and go to state 75
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 82

    (134) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 134 (variable_assignment -> VARIABLE INCREASE .)


state 83

    (135) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 135 (variable_assignment -> VARIABLE DECREMENT .)


state 84

    (181) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 179
    VARIABLE        shift and go to state 178
    RIGHT_BRACKET   shift and go to state 180


state 85

    (138) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 138 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 138 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 138 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 138 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 138 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 138 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 138 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 138 (assignment_operator -> EQUALS .)
    FN              reduce using rule 138 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 138 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 138 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 138 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 138 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 138 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 138 (assignment_operator -> EQUALS .)


state 86

    (205) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (207) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 181


state 87

    (139) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 139 (assignment_operator -> PLUS_EQUALS .)


state 88

    (136) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 136 (variable_assignment -> INCREASE VARIABLE .)


state 89

    (137) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 137 (variable_assignment -> DECREMENT VARIABLE .)


state 90

    (180) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 180 (access_array_stucture -> access_array_element SEMICOLON .)


state 91

    (210) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (211) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (212) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (213) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 182


state 92

    (185) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 185 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 93

    (198) modify_element_matrix -> access_element_matrix EQUALS . values
    (199) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 184
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 183
    boolean                        shift and go to state 59

state 94

    (186) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 186 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 95

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 187
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    conditional                    shift and go to state 186
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 139
    expression                     shift and go to state 67
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 96

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 187
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    conditional                    shift and go to state 188
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 139
    expression                     shift and go to state 67
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 97

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 189


state 98

    (142) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 190


state 99

    (143) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 191


state 100

    (167) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (168) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (188) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (170) structure_array -> . key EQUALS GREATER_THAN values
    (171) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (192) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (193) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (172) key -> . INTEGER
    (173) key -> . STRING
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    ARRAY           shift and go to state 192
    INTEGER         shift and go to state 200
    STRING          shift and go to state 201
    FLOAT           shift and go to state 167
    NEW             shift and go to state 46
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values_array_indexed           shift and go to state 193
    structure_array                shift and go to state 194
    structure_matrix_first         shift and go to state 195
    values                         shift and go to state 196
    object_creation                shift and go to state 197
    indexed_array                  shift and go to state 198
    key                            shift and go to state 199
    boolean                        shift and go to state 59

state 101

    (169) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (170) structure_array -> . key EQUALS GREATER_THAN values
    (171) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (172) key -> . INTEGER
    (173) key -> . STRING

    INTEGER         shift and go to state 203
    STRING          shift and go to state 204

    structure_array                shift and go to state 202
    key                            shift and go to state 199

state 102

    (190) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (191) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 205
    boolean                        shift and go to state 59

state 103

    (189) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 206


state 104

    (203) object_creation -> NEW IDENTIFIER .
    (204) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 203 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 207


state 105

    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (125) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 209
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 210
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    conditional                    shift and go to state 208
    expression                     shift and go to state 108
    boolean_expression             shift and go to state 60
    term                           shift and go to state 72
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    factor                         shift and go to state 75
    values                         shift and go to state 139
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59

state 106

    (95) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 211


state 107

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (105) printable_values -> conditional .
    (106) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 212
    COMMA           shift and go to state 128

  ! RIGHT_PAREN     [ reduce using rule 105 (printable_values -> conditional .) ]


state 108

    (125) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (76) comparation -> expression . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 213
    EQUALS_EQUALS   shift and go to state 113
    IDENTICAL       shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    NOT_IDENTICAL   shift and go to state 116
    SMALL_THAN      shift and go to state 117
    GREATER_THAN    shift and go to state 118
    SMALL_EQUALS_TO shift and go to state 119
    GREATER_EQUALS_TO shift and go to state 120
    SPACECRAFT      shift and go to state 121
    NULL_FUSION     shift and go to state 122

    comparator_operator            shift and go to state 135

state 109

    (101) printable_values -> VARIABLE .
    (102) printable_values -> VARIABLE . COMMA printable_values
    (104) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (124) factor -> VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 101 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    RIGHT_PAREN     reduce using rule 101 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 123
    STRING_CONCATENATION shift and go to state 124
    MINUS           shift and go to state 86
    EQUALS_EQUALS   shift and go to state 125
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 126

  ! MINUS           [ reduce using rule 124 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 124 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 124 (factor -> VARIABLE .) ]


state 110

    (109) values -> INTEGER .
    (123) factor -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 109 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 109 (values -> INTEGER .)
    IDENTICAL       reduce using rule 109 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 109 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 109 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 109 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 109 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 109 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 109 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (values -> INTEGER .)
    MULTIPLY        reduce using rule 123 (factor -> INTEGER .)
    DIVIDE          reduce using rule 123 (factor -> INTEGER .)
    MODULE          reduce using rule 123 (factor -> INTEGER .)
    POW             reduce using rule 123 (factor -> INTEGER .)
    PLUS            reduce using rule 123 (factor -> INTEGER .)
    MINUS           reduce using rule 123 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 123 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 123 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]


state 111

    (100) printable_values -> values COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    values                         shift and go to state 52
    printable_values               shift and go to state 214
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 112

    (74) comparation -> values comparator_operator . values
    (75) comparation -> values comparator_operator . expression
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 165
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    values                         shift and go to state 215
    expression                     shift and go to state 216
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 113

    (85) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 85 (comparator_operator -> EQUALS_EQUALS .)


state 114

    (86) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 86 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 86 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 86 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 86 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 86 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 86 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 86 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 86 (comparator_operator -> IDENTICAL .)


state 115

    (87) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 87 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 87 (comparator_operator -> NOT_EQUALS .)


state 116

    (88) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 88 (comparator_operator -> NOT_IDENTICAL .)


state 117

    (89) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 89 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 89 (comparator_operator -> SMALL_THAN .)


state 118

    (90) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> GREATER_THAN .)


state 119

    (91) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> SMALL_EQUALS_TO .)


state 120

    (92) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> GREATER_EQUALS_TO .)


state 121

    (93) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> SPACECRAFT .)


state 122

    (94) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> NULL_FUSION .)


state 123

    (102) printable_values -> VARIABLE COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    printable_values               shift and go to state 218
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 124

    (104) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 219


state 125

    (77) comparation -> VARIABLE EQUALS_EQUALS . values
    (80) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (81) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (84) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 220
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 221
    access_array_element           shift and go to state 222
    access_element_matrix          shift and go to state 223
    boolean                        shift and go to state 59

state 126

    (181) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 179
    VARIABLE        shift and go to state 178


state 127

    (103) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 224


state 128

    (106) printable_values -> conditional COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    conditional                    shift and go to state 55
    printable_values               shift and go to state 225
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 129

    (108) printable_values -> structure_object_principal COMMA . printable_values
    (99) printable_values -> . values
    (100) printable_values -> . values COMMA printable_values
    (101) printable_values -> . VARIABLE
    (102) printable_values -> . VARIABLE COMMA printable_values
    (103) printable_values -> . STRING STRING_CONCATENATION STRING
    (104) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (105) printable_values -> . conditional
    (106) printable_values -> . conditional COMMA printable_values
    (107) printable_values -> . structure_object_principal
    (108) printable_values -> . structure_object_principal COMMA printable_values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    LEFT_PAREN      shift and go to state 105
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 69
    ARRAY           shift and go to state 73
    NULL            shift and go to state 74

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 226
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    boolean                        shift and go to state 59
    boolean_expression             shift and go to state 60
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    access_array_element           shift and go to state 66
    expression                     shift and go to state 67
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 130

    (51) conditional -> boolean_expression logic_operator . boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 187
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    boolean_expression             shift and go to state 227
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 139
    expression                     shift and go to state 67
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 131

    (52) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 52 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 52 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 52 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 52 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 52 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 52 (logic_operator -> LOGIC_AND .)


state 132

    (53) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_OR .)


state 133

    (54) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_XOR .)


state 134

    (78) comparation -> access_array_element EQUALS_EQUALS . values
    (79) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (82) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 230
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    access_array_element           shift and go to state 228
    values                         shift and go to state 229
    boolean                        shift and go to state 59

state 135

    (76) comparation -> expression comparator_operator . expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    expression                     shift and go to state 231
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 136

    (83) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 233


state 137

    (72) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 72 (logic_not_sentence -> LOGIC_NOT conditional .)


state 138

    (73) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    LOGIC_AND       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_OR        reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    LOGIC_XOR       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    COMMA           reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 73 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 125
    LEFT_BRACKET    shift and go to state 126
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    MINUS           reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 124 (factor -> VARIABLE .) ]


state 139

    (74) comparation -> values . comparator_operator values
    (75) comparation -> values . comparator_operator expression
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 113
    IDENTICAL       shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    NOT_IDENTICAL   shift and go to state 116
    SMALL_THAN      shift and go to state 117
    GREATER_THAN    shift and go to state 118
    SMALL_EQUALS_TO shift and go to state 119
    GREATER_EQUALS_TO shift and go to state 120
    SPACECRAFT      shift and go to state 121
    NULL_FUSION     shift and go to state 122

    comparator_operator            shift and go to state 112

state 140

    (78) comparation -> access_array_element . EQUALS_EQUALS values
    (79) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (82) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 134


state 141

    (110) values -> STRING .
    (62) true_boolean_types -> STRING .
    (67) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    EQUALS_EQUALS   reduce using rule 110 (values -> STRING .)
    IDENTICAL       reduce using rule 110 (values -> STRING .)
    NOT_EQUALS      reduce using rule 110 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 110 (values -> STRING .)
    SMALL_THAN      reduce using rule 110 (values -> STRING .)
    GREATER_THAN    reduce using rule 110 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 110 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 110 (values -> STRING .)
    SPACECRAFT      reduce using rule 110 (values -> STRING .)
    NULL_FUSION     reduce using rule 110 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 67 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 67 (false_boolean_types -> STRING .) ]


state 142

    (61) true_boolean_types -> TRUE .
    (113) boolean -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 113 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 113 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 113 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 113 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 113 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 113 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 113 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 113 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 113 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 113 (boolean -> TRUE .)


state 143

    (66) false_boolean_types -> FALSE .
    (114) boolean -> FALSE .

    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 114 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 114 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 114 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 114 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 114 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 114 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 114 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 114 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 114 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 114 (boolean -> FALSE .)


state 144

    (59) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL

    FALSE           shift and go to state 235
    STRING          shift and go to state 236
    INTEGER         shift and go to state 237
    FLOAT           shift and go to state 238
    ARRAY           shift and go to state 239
    NULL            shift and go to state 74

    false_boolean_types            shift and go to state 234

state 145

    (60) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 241
    STRING          shift and go to state 242
    INTEGER         shift and go to state 243
    FLOAT           shift and go to state 244
    ARRAY           shift and go to state 245

    true_boolean_types             shift and go to state 240

state 146

    (116) expression -> term PLUS . expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    term                           shift and go to state 72
    expression                     shift and go to state 246
    factor                         shift and go to state 75

state 147

    (117) expression -> term MINUS . expression
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    term                           shift and go to state 72
    expression                     shift and go to state 247
    factor                         shift and go to state 75

state 148

    (65) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (70) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 249
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 248
    boolean                        shift and go to state 59

state 149

    (119) term -> factor MULTIPLY . term
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    factor                         shift and go to state 75
    term                           shift and go to state 250

state 150

    (120) term -> factor DIVIDE . term
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    factor                         shift and go to state 75
    term                           shift and go to state 251

state 151

    (121) term -> factor MODULE . term
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    factor                         shift and go to state 75
    term                           shift and go to state 252

state 152

    (122) term -> factor POW . term
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    factor                         shift and go to state 75
    term                           shift and go to state 253

state 153

    (96) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 254


state 154

    (217) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (224) class_implements_opt -> . IMPLEMENTS interface_list
    (225) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 256
    LEFT_BRACE      reduce using rule 225 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 255

state 155

    (222) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 257


state 156

    (218) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 258


state 157

    (152) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 259
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 158

    (124) factor -> VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 124 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 84
    MINUS           shift and go to state 86

  ! MINUS           [ reduce using rule 124 (factor -> VARIABLE .) ]


state 159

    (128) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 128 (variable_assignment -> VARIABLE assignment_operator values .)


state 160

    (129) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 129 (variable_assignment -> VARIABLE assignment_operator expression .)


state 161

    (130) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 130 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 162

    (131) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 131 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 163

    (132) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 132 (variable_assignment -> VARIABLE assignment_operator input .)


state 164

    (133) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 133 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 165

    (109) values -> INTEGER .
    (123) factor -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 109 (values -> INTEGER .)
    SEMICOLON       reduce using rule 109 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 109 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 109 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 109 (values -> INTEGER .)
    COMMA           reduce using rule 109 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (values -> INTEGER .)
    MULTIPLY        reduce using rule 123 (factor -> INTEGER .)
    DIVIDE          reduce using rule 123 (factor -> INTEGER .)
    MODULE          reduce using rule 123 (factor -> INTEGER .)
    POW             reduce using rule 123 (factor -> INTEGER .)
    PLUS            reduce using rule 123 (factor -> INTEGER .)
    MINUS           reduce using rule 123 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 123 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 123 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 123 (factor -> INTEGER .) ]


state 166

    (110) values -> STRING .

    SEMICOLON       reduce using rule 110 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 110 (values -> STRING .)
    LOGIC_AND       reduce using rule 110 (values -> STRING .)
    LOGIC_OR        reduce using rule 110 (values -> STRING .)
    LOGIC_XOR       reduce using rule 110 (values -> STRING .)
    COMMA           reduce using rule 110 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 110 (values -> STRING .)
    ECHO            reduce using rule 110 (values -> STRING .)
    PRINT           reduce using rule 110 (values -> STRING .)
    CLASS           reduce using rule 110 (values -> STRING .)
    INTERFACE       reduce using rule 110 (values -> STRING .)
    FUNCTION        reduce using rule 110 (values -> STRING .)
    VARIABLE        reduce using rule 110 (values -> STRING .)
    INCREASE        reduce using rule 110 (values -> STRING .)
    DECREMENT       reduce using rule 110 (values -> STRING .)
    IF              reduce using rule 110 (values -> STRING .)
    WHILE           reduce using rule 110 (values -> STRING .)
    FOR             reduce using rule 110 (values -> STRING .)
    CONST           reduce using rule 110 (values -> STRING .)
    DEFINE          reduce using rule 110 (values -> STRING .)
    ARRAY           reduce using rule 110 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 110 (values -> STRING .)
    NEW             reduce using rule 110 (values -> STRING .)
    $end            reduce using rule 110 (values -> STRING .)
    RETURN          reduce using rule 110 (values -> STRING .)
    BREAK           reduce using rule 110 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 110 (values -> STRING .)


state 167

    (111) values -> FLOAT .

    SEMICOLON       reduce using rule 111 (values -> FLOAT .)
    COMMA           reduce using rule 111 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 111 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 111 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 111 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 111 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 111 (values -> FLOAT .)
    ECHO            reduce using rule 111 (values -> FLOAT .)
    PRINT           reduce using rule 111 (values -> FLOAT .)
    CLASS           reduce using rule 111 (values -> FLOAT .)
    INTERFACE       reduce using rule 111 (values -> FLOAT .)
    FUNCTION        reduce using rule 111 (values -> FLOAT .)
    VARIABLE        reduce using rule 111 (values -> FLOAT .)
    INCREASE        reduce using rule 111 (values -> FLOAT .)
    DECREMENT       reduce using rule 111 (values -> FLOAT .)
    IF              reduce using rule 111 (values -> FLOAT .)
    WHILE           reduce using rule 111 (values -> FLOAT .)
    FOR             reduce using rule 111 (values -> FLOAT .)
    CONST           reduce using rule 111 (values -> FLOAT .)
    DEFINE          reduce using rule 111 (values -> FLOAT .)
    ARRAY           reduce using rule 111 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 111 (values -> FLOAT .)
    NEW             reduce using rule 111 (values -> FLOAT .)
    $end            reduce using rule 111 (values -> FLOAT .)
    RETURN          reduce using rule 111 (values -> FLOAT .)
    BREAK           reduce using rule 111 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 111 (values -> FLOAT .)


state 168

    (144) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 264


state 169

    (125) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 232
    VARIABLE        shift and go to state 217
    LEFT_PAREN      shift and go to state 169

    expression                     shift and go to state 265
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 170

    (158) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 266


state 171

    (159) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 267


state 172

    (153) special_function -> arrow_function .

    SEMICOLON       reduce using rule 153 (special_function -> arrow_function .)


state 173

    (154) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 154 (special_function -> anonymous_functions .)


state 174

    (113) boolean -> TRUE .

    SEMICOLON       reduce using rule 113 (boolean -> TRUE .)
    COMMA           reduce using rule 113 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 113 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 113 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 113 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 113 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 113 (boolean -> TRUE .)
    ECHO            reduce using rule 113 (boolean -> TRUE .)
    PRINT           reduce using rule 113 (boolean -> TRUE .)
    CLASS           reduce using rule 113 (boolean -> TRUE .)
    INTERFACE       reduce using rule 113 (boolean -> TRUE .)
    FUNCTION        reduce using rule 113 (boolean -> TRUE .)
    VARIABLE        reduce using rule 113 (boolean -> TRUE .)
    INCREASE        reduce using rule 113 (boolean -> TRUE .)
    DECREMENT       reduce using rule 113 (boolean -> TRUE .)
    IF              reduce using rule 113 (boolean -> TRUE .)
    WHILE           reduce using rule 113 (boolean -> TRUE .)
    FOR             reduce using rule 113 (boolean -> TRUE .)
    CONST           reduce using rule 113 (boolean -> TRUE .)
    DEFINE          reduce using rule 113 (boolean -> TRUE .)
    ARRAY           reduce using rule 113 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 113 (boolean -> TRUE .)
    NEW             reduce using rule 113 (boolean -> TRUE .)
    $end            reduce using rule 113 (boolean -> TRUE .)
    RETURN          reduce using rule 113 (boolean -> TRUE .)
    BREAK           reduce using rule 113 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 113 (boolean -> TRUE .)


state 175

    (114) boolean -> FALSE .

    SEMICOLON       reduce using rule 114 (boolean -> FALSE .)
    COMMA           reduce using rule 114 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 114 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 114 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 114 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 114 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 114 (boolean -> FALSE .)
    ECHO            reduce using rule 114 (boolean -> FALSE .)
    PRINT           reduce using rule 114 (boolean -> FALSE .)
    CLASS           reduce using rule 114 (boolean -> FALSE .)
    INTERFACE       reduce using rule 114 (boolean -> FALSE .)
    FUNCTION        reduce using rule 114 (boolean -> FALSE .)
    VARIABLE        reduce using rule 114 (boolean -> FALSE .)
    INCREASE        reduce using rule 114 (boolean -> FALSE .)
    DECREMENT       reduce using rule 114 (boolean -> FALSE .)
    IF              reduce using rule 114 (boolean -> FALSE .)
    WHILE           reduce using rule 114 (boolean -> FALSE .)
    FOR             reduce using rule 114 (boolean -> FALSE .)
    CONST           reduce using rule 114 (boolean -> FALSE .)
    DEFINE          reduce using rule 114 (boolean -> FALSE .)
    ARRAY           reduce using rule 114 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 114 (boolean -> FALSE .)
    NEW             reduce using rule 114 (boolean -> FALSE .)
    $end            reduce using rule 114 (boolean -> FALSE .)
    RETURN          reduce using rule 114 (boolean -> FALSE .)
    BREAK           reduce using rule 114 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 114 (boolean -> FALSE .)


state 176

    (155) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 268


state 177

    (156) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 269


state 178

    (182) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 270


state 179

    (181) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 271


state 180

    (200) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 272


state 181

    (205) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (206) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (207) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (208) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (144) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (215) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 275

    function_invocation            shift and go to state 273
    accessType                     shift and go to state 274

state 182

    (210) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (211) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (212) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (213) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (144) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (215) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 275

    function_invocation            shift and go to state 276
    accessType                     shift and go to state 277

state 183

    (198) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 198 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 184

    (199) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 199 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 185

    (109) values -> INTEGER .

    SEMICOLON       reduce using rule 109 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 109 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 109 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 109 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 109 (values -> INTEGER .)
    COMMA           reduce using rule 109 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (values -> INTEGER .)
    ECHO            reduce using rule 109 (values -> INTEGER .)
    PRINT           reduce using rule 109 (values -> INTEGER .)
    CLASS           reduce using rule 109 (values -> INTEGER .)
    INTERFACE       reduce using rule 109 (values -> INTEGER .)
    FUNCTION        reduce using rule 109 (values -> INTEGER .)
    VARIABLE        reduce using rule 109 (values -> INTEGER .)
    INCREASE        reduce using rule 109 (values -> INTEGER .)
    DECREMENT       reduce using rule 109 (values -> INTEGER .)
    IF              reduce using rule 109 (values -> INTEGER .)
    WHILE           reduce using rule 109 (values -> INTEGER .)
    FOR             reduce using rule 109 (values -> INTEGER .)
    CONST           reduce using rule 109 (values -> INTEGER .)
    DEFINE          reduce using rule 109 (values -> INTEGER .)
    ARRAY           reduce using rule 109 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 109 (values -> INTEGER .)
    NEW             reduce using rule 109 (values -> INTEGER .)
    $end            reduce using rule 109 (values -> INTEGER .)
    RETURN          reduce using rule 109 (values -> INTEGER .)
    BREAK           reduce using rule 109 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 109 (values -> INTEGER .)


state 186

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 278


state 187

    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (124) factor -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 125
    LEFT_BRACKET    shift and go to state 126
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    MINUS           reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 124 (factor -> VARIABLE .) ]


state 188

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 279


state 189

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 280


state 190

    (142) const_syntax -> CONST IDENTIFIER EQUALS . values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 281
    boolean                        shift and go to state 59

state 191

    (143) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 282


state 192

    (192) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (167) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 283


state 193

    (167) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 284


state 194

    (168) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 285


state 195

    (188) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 286


state 196

    (174) values_array_indexed -> values .
    (175) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 174 (values_array_indexed -> values .)
    COMMA           shift and go to state 287


state 197

    (176) values_array_indexed -> object_creation .
    (177) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 176 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 288


state 198

    (178) values_array_indexed -> indexed_array .
    (179) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 178 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 289


state 199

    (170) structure_array -> key . EQUALS GREATER_THAN values
    (171) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 290


state 200

    (109) values -> INTEGER .
    (172) key -> INTEGER .

    COMMA           reduce using rule 109 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 109 (values -> INTEGER .)
    EQUALS          reduce using rule 172 (key -> INTEGER .)


state 201

    (110) values -> STRING .
    (173) key -> STRING .

    COMMA           reduce using rule 110 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 110 (values -> STRING .)
    EQUALS          reduce using rule 173 (key -> STRING .)


state 202

    (169) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 291


state 203

    (172) key -> INTEGER .

    EQUALS          reduce using rule 172 (key -> INTEGER .)


state 204

    (173) key -> STRING .

    EQUALS          reduce using rule 173 (key -> STRING .)


state 205

    (190) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (191) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 292


state 206

    (189) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 293


state 207

    (204) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 294
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 208

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 212


state 209

    (77) comparation -> VARIABLE . EQUALS_EQUALS values
    (80) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (81) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (84) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (124) factor -> VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 125
    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    MINUS           reduce using rule 124 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 126

  ! EQUALS_EQUALS   [ reduce using rule 124 (factor -> VARIABLE .) ]


state 210

    (123) factor -> INTEGER .
    (109) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (68) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 109 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 123 (factor -> INTEGER .)
    DIVIDE          reduce using rule 123 (factor -> INTEGER .)
    MODULE          reduce using rule 123 (factor -> INTEGER .)
    POW             reduce using rule 123 (factor -> INTEGER .)
    PLUS            reduce using rule 123 (factor -> INTEGER .)
    MINUS           reduce using rule 123 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 109 (values -> INTEGER .)
    IDENTICAL       reduce using rule 109 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 109 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 109 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 109 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 109 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 109 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 109 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 109 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 123 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 123 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 123 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> INTEGER .) ]


state 211

    (95) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 95 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 212

    (56) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 213

    (125) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 125 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 214

    (100) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 100 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 100 (printable_values -> values COMMA printable_values .)


state 215

    (74) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 74 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 74 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 74 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 74 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 74 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 74 (comparation -> values comparator_operator values .)


state 216

    (75) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 75 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 75 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 75 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 75 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 75 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 75 (comparation -> values comparator_operator expression .)


state 217

    (124) factor -> VARIABLE .

    MULTIPLY        reduce using rule 124 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 124 (factor -> VARIABLE .)
    MODULE          reduce using rule 124 (factor -> VARIABLE .)
    POW             reduce using rule 124 (factor -> VARIABLE .)
    PLUS            reduce using rule 124 (factor -> VARIABLE .)
    MINUS           reduce using rule 124 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 124 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 124 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 124 (factor -> VARIABLE .)
    COMMA           reduce using rule 124 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 124 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 124 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 124 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 124 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 124 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 124 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 124 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 124 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 124 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 124 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 124 (factor -> VARIABLE .)


state 218

    (102) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 102 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 102 (printable_values -> VARIABLE COMMA printable_values .)


state 219

    (104) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 104 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 220

    (81) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 126


state 221

    (77) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 77 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 222

    (80) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 223

    (84) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 224

    (103) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 103 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 225

    (106) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 106 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> conditional COMMA printable_values .)


state 226

    (108) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 108 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> structure_object_principal COMMA printable_values .)


state 227

    (51) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)


state 228

    (82) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 229

    (78) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 78 (comparation -> access_array_element EQUALS_EQUALS values .)


state 230

    (79) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 295


state 231

    (76) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 76 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 76 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 76 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 76 (comparation -> expression comparator_operator expression .)


state 232

    (123) factor -> INTEGER .

    MULTIPLY        reduce using rule 123 (factor -> INTEGER .)
    DIVIDE          reduce using rule 123 (factor -> INTEGER .)
    MODULE          reduce using rule 123 (factor -> INTEGER .)
    POW             reduce using rule 123 (factor -> INTEGER .)
    PLUS            reduce using rule 123 (factor -> INTEGER .)
    MINUS           reduce using rule 123 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 123 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 123 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 123 (factor -> INTEGER .)
    COMMA           reduce using rule 123 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 123 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 123 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 123 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 123 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 123 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 123 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 123 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 123 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 123 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 123 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 123 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 123 (factor -> INTEGER .)


state 233

    (83) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 234

    (59) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 235

    (66) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 66 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 66 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 66 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 66 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 66 (false_boolean_types -> FALSE .)


state 236

    (67) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 67 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 67 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 67 (false_boolean_types -> STRING .)


state 237

    (68) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 68 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 68 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 68 (false_boolean_types -> INTEGER .)


state 238

    (69) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 69 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 69 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 69 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 69 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 69 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 69 (false_boolean_types -> FLOAT .)


state 239

    (70) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 296


state 240

    (60) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 241

    (61) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 61 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 61 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 61 (true_boolean_types -> TRUE .)


state 242

    (62) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 62 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 62 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 62 (true_boolean_types -> STRING .)


state 243

    (63) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 63 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 63 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 63 (true_boolean_types -> INTEGER .)


state 244

    (64) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 64 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> FLOAT .)


state 245

    (65) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 297


state 246

    (116) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 116 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 116 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 116 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 116 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 116 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 116 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 116 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 116 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 116 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 116 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 116 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 116 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 116 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 116 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 116 (expression -> term PLUS expression .)
    COMMA           reduce using rule 116 (expression -> term PLUS expression .)


state 247

    (117) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 117 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 117 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 117 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 117 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 117 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 117 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 117 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 117 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 117 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 117 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 117 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 117 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 117 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 117 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 117 (expression -> term MINUS expression .)
    COMMA           reduce using rule 117 (expression -> term MINUS expression .)


state 248

    (65) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 298


state 249

    (70) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 250

    (119) term -> factor MULTIPLY term .

    PLUS            reduce using rule 119 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 119 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 119 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 119 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 119 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 119 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 119 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 119 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 119 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 119 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 119 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 119 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 119 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 119 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 119 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 119 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 119 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 119 (term -> factor MULTIPLY term .)


state 251

    (120) term -> factor DIVIDE term .

    PLUS            reduce using rule 120 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 120 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 120 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 120 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 120 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 120 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 120 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 120 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 120 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 120 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 120 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 120 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 120 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 120 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 120 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 120 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 120 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 120 (term -> factor DIVIDE term .)


state 252

    (121) term -> factor MODULE term .

    PLUS            reduce using rule 121 (term -> factor MODULE term .)
    MINUS           reduce using rule 121 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 121 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 121 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 121 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 121 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 121 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 121 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 121 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 121 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 121 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 121 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 121 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 121 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 121 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 121 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 121 (term -> factor MODULE term .)
    COMMA           reduce using rule 121 (term -> factor MODULE term .)


state 253

    (122) term -> factor POW term .

    PLUS            reduce using rule 122 (term -> factor POW term .)
    MINUS           reduce using rule 122 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 122 (term -> factor POW term .)
    IDENTICAL       reduce using rule 122 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 122 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 122 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 122 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 122 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 122 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 122 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 122 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 122 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 122 (term -> factor POW term .)
    SEMICOLON       reduce using rule 122 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 122 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 122 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 122 (term -> factor POW term .)
    COMMA           reduce using rule 122 (term -> factor POW term .)


state 254

    (96) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 96 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 255

    (217) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 299


state 256

    (224) class_implements_opt -> IMPLEMENTS . interface_list
    (226) interface_list -> . IDENTIFIER
    (227) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 301

    interface_list                 shift and go to state 300

state 257

    (222) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 222 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 222 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 258

    (218) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (219) interface_body -> . interface_body interface_method
    (220) interface_body -> .

    RIGHT_BRACE     reduce using rule 220 (interface_body -> .)
    PUBLIC          reduce using rule 220 (interface_body -> .)
    PRIVATE         reduce using rule 220 (interface_body -> .)
    PROTECTED       reduce using rule 220 (interface_body -> .)
    FUNCTION        reduce using rule 220 (interface_body -> .)

    interface_body                 shift and go to state 302

state 259

    (152) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 303


state 260

    (145) params -> real_params .
    (149) real_params -> real_params . COMMA VARIABLE
    (150) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 145 (params -> real_params .)
    COMMA           shift and go to state 304


state 261

    (146) params -> empty .

    RIGHT_PAREN     reduce using rule 146 (params -> empty .)


state 262

    (147) real_params -> VARIABLE .

    COMMA           reduce using rule 147 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 147 (real_params -> VARIABLE .)


state 263

    (148) real_params -> values .

    COMMA           reduce using rule 148 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 148 (real_params -> values .)


state 264

    (144) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 305
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 265

    (125) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 213


state 266

    (158) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 306


state 267

    (159) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 307


state 268

    (155) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 308
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 269

    (156) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 309
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 270

    (182) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (195) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 310

  ! LEFT_BRACKET    [ reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 271

    (181) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (194) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 311

  ! LEFT_BRACKET    [ reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 272

    (200) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 313

    indexed_array                  shift and go to state 312

state 273

    (205) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 205 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 274

    (206) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (207) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (208) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (209) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 206 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 314


state 275

    (144) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (215) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (216) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 264
    LEFT_BRACKET    shift and go to state 315
    EQUALS          reduce using rule 216 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 216 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 216 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 216 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 216 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 216 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 216 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 216 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 216 (accessType -> IDENTIFIER .)
    IF              reduce using rule 216 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 216 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 216 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 216 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 216 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 216 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 216 (accessType -> IDENTIFIER .)
    $end            reduce using rule 216 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 216 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 216 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 216 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 216 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 216 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 216 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 216 (accessType -> IDENTIFIER .) ]


state 276

    (210) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 210 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 277

    (211) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (212) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (213) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (214) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 211 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 316


state 278

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 317


state 279

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 318


state 280

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 320
    LEFT_PAREN      shift and go to state 319
    IDENTIFIER      shift and go to state 323
    INTEGER         shift and go to state 324
    FLOAT           shift and go to state 325

    expression_for                 shift and go to state 321
    number_values                  shift and go to state 322

state 281

    (142) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 142 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 282

    (143) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 326
    boolean                        shift and go to state 59

state 283

    (192) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (167) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175
    NEW             shift and go to state 46
    ARRAY           shift and go to state 313

    values                         shift and go to state 327
    values_array_indexed           shift and go to state 193
    boolean                        shift and go to state 59
    object_creation                shift and go to state 197
    indexed_array                  shift and go to state 198

state 284

    (167) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 167 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 285

    (168) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 168 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 286

    (188) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 328


state 287

    (175) values_array_indexed -> values COMMA . values_array_indexed
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    NEW             shift and go to state 46
    ARRAY           shift and go to state 313
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 196
    values_array_indexed           shift and go to state 329
    object_creation                shift and go to state 197
    indexed_array                  shift and go to state 198
    boolean                        shift and go to state 59

state 288

    (177) values_array_indexed -> object_creation COMMA . values_array_indexed
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    NEW             shift and go to state 46
    ARRAY           shift and go to state 313
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    object_creation                shift and go to state 197
    values_array_indexed           shift and go to state 330
    values                         shift and go to state 196
    indexed_array                  shift and go to state 198
    boolean                        shift and go to state 59

state 289

    (179) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    NEW             shift and go to state 46
    ARRAY           shift and go to state 313
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    indexed_array                  shift and go to state 198
    values_array_indexed           shift and go to state 331
    values                         shift and go to state 196
    object_creation                shift and go to state 197
    boolean                        shift and go to state 59

state 290

    (170) structure_array -> key EQUALS . GREATER_THAN values
    (171) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 332


state 291

    (169) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 169 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 292

    (190) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (191) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 190 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 333


state 293

    (189) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 189 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 294

    (204) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 334


state 295

    (181) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 336
    VARIABLE        shift and go to state 335


state 296

    (70) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 249


state 297

    (65) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 248
    boolean                        shift and go to state 59

state 298

    (65) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 299

    (217) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (228) class_body -> . class_body class_member
    (229) class_body -> .

    RIGHT_BRACE     reduce using rule 229 (class_body -> .)
    PUBLIC          reduce using rule 229 (class_body -> .)
    PRIVATE         reduce using rule 229 (class_body -> .)
    PROTECTED       reduce using rule 229 (class_body -> .)
    STATIC          reduce using rule 229 (class_body -> .)
    FUNCTION        reduce using rule 229 (class_body -> .)
    VARIABLE        reduce using rule 229 (class_body -> .)
    CONST           reduce using rule 229 (class_body -> .)
    DEFINE          reduce using rule 229 (class_body -> .)

    class_body                     shift and go to state 337

state 300

    (224) class_implements_opt -> IMPLEMENTS interface_list .
    (227) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 224 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 338


state 301

    (226) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 226 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 226 (interface_list -> IDENTIFIER .)


state 302

    (218) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (219) interface_body -> interface_body . interface_method
    (221) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (236) visibility_opt -> . PUBLIC
    (237) visibility_opt -> . PRIVATE
    (238) visibility_opt -> . PROTECTED
    (239) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 339
    PUBLIC          shift and go to state 342
    PRIVATE         shift and go to state 343
    PROTECTED       shift and go to state 344
    FUNCTION        reduce using rule 239 (visibility_opt -> .)

    interface_method               shift and go to state 340
    visibility_opt                 shift and go to state 341

state 303

    (152) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (157) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 346

    codeblock                      shift and go to state 345

state 304

    (149) real_params -> real_params COMMA . VARIABLE
    (150) real_params -> real_params COMMA . values
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 347
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 348
    boolean                        shift and go to state 59

state 305

    (144) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 349


state 306

    (158) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 350


state 307

    (159) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 351


state 308

    (155) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 352


state 309

    (156) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 353


state 310

    (195) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 354
    INTEGER         shift and go to state 355


state 311

    (194) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 357
    VARIABLE        shift and go to state 356


state 312

    (200) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 200 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 313

    (167) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 358


state 314

    (207) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (208) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (209) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 359
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 360
    access_array_element           shift and go to state 361
    boolean                        shift and go to state 59

state 315

    (215) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 362


state 316

    (212) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (213) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (214) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 365
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    access_array_element           shift and go to state 363
    values                         shift and go to state 364
    boolean                        shift and go to state 59

state 317

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 366
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 318

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 370
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 319

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 320
    LEFT_PAREN      shift and go to state 319
    IDENTIFIER      shift and go to state 323
    INTEGER         shift and go to state 324
    FLOAT           shift and go to state 325

    expression_for                 shift and go to state 371
    number_values                  shift and go to state 322

state 320

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 321

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 372
    PLUS            shift and go to state 374
    MINUS           shift and go to state 375
    MULTIPLY        shift and go to state 376
    DIVIDE          shift and go to state 377
    MODULE          shift and go to state 378
    POW             shift and go to state 379

    operator_aritmetic             shift and go to state 373

state 322

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 323

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 380


state 324

    (42) number_values -> INTEGER .

    SEMICOLON       reduce using rule 42 (number_values -> INTEGER .)
    PLUS            reduce using rule 42 (number_values -> INTEGER .)
    MINUS           reduce using rule 42 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 42 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 42 (number_values -> INTEGER .)
    MODULE          reduce using rule 42 (number_values -> INTEGER .)
    POW             reduce using rule 42 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 42 (number_values -> INTEGER .)


state 325

    (43) number_values -> FLOAT .

    SEMICOLON       reduce using rule 43 (number_values -> FLOAT .)
    PLUS            reduce using rule 43 (number_values -> FLOAT .)
    MINUS           reduce using rule 43 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 43 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 43 (number_values -> FLOAT .)
    MODULE          reduce using rule 43 (number_values -> FLOAT .)
    POW             reduce using rule 43 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> FLOAT .)


state 326

    (143) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 381


state 327

    (192) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (174) values_array_indexed -> values .
    (175) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 382
    COMMA           shift and go to state 287

  ! RIGHT_PAREN     [ reduce using rule 174 (values_array_indexed -> values .) ]


state 328

    (188) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 188 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 329

    (175) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 175 (values_array_indexed -> values COMMA values_array_indexed .)


state 330

    (177) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 177 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 331

    (179) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 179 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 332

    (170) structure_array -> key EQUALS GREATER_THAN . values
    (171) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 383
    boolean                        shift and go to state 59

state 333

    (191) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (190) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (191) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 102

    structure_matrix_second        shift and go to state 384

state 334

    (204) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 204 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 335

    (182) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 385


state 336

    (181) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 386


state 337

    (217) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (228) class_body -> class_body . class_member
    (230) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (231) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (232) class_member -> . class_attribute
    (236) visibility_opt -> . PUBLIC
    (237) visibility_opt -> . PRIVATE
    (238) visibility_opt -> . PROTECTED
    (239) visibility_opt -> .
    (233) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (234) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (235) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 387
    PUBLIC          shift and go to state 342
    PRIVATE         shift and go to state 343
    PROTECTED       shift and go to state 344
    STATIC          reduce using rule 239 (visibility_opt -> .)
    FUNCTION        reduce using rule 239 (visibility_opt -> .)
    VARIABLE        reduce using rule 239 (visibility_opt -> .)
    CONST           reduce using rule 239 (visibility_opt -> .)
    DEFINE          reduce using rule 239 (visibility_opt -> .)

    class_member                   shift and go to state 388
    visibility_opt                 shift and go to state 389
    class_attribute                shift and go to state 390

state 338

    (227) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 391


state 339

    (218) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 218 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 340

    (219) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 219 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 219 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 219 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 219 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 219 (interface_body -> interface_body interface_method .)


state 341

    (221) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 392


state 342

    (236) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 236 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 236 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 236 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 236 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 236 (visibility_opt -> PUBLIC .)


state 343

    (237) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 237 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 237 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 237 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 237 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 237 (visibility_opt -> PRIVATE .)


state 344

    (238) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 238 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 238 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 238 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 238 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 238 (visibility_opt -> PROTECTED .)


state 345

    (152) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 152 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 346

    (157) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 393
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 347

    (149) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 149 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 149 (real_params -> real_params COMMA VARIABLE .)


state 348

    (150) real_params -> real_params COMMA values .

    COMMA           reduce using rule 150 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 150 (real_params -> real_params COMMA values .)


state 349

    (144) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    SEMICOLON       reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 144 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 350

    (158) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 158 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 351

    (159) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 159 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 352

    (155) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 394


state 353

    (156) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (157) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 346

    codeblock                      shift and go to state 395

state 354

    (195) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 396


state 355

    (196) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 397


state 356

    (197) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 398


state 357

    (194) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 399


state 358

    (167) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (174) values_array_indexed -> . values
    (175) values_array_indexed -> . values COMMA values_array_indexed
    (176) values_array_indexed -> . object_creation
    (177) values_array_indexed -> . object_creation COMMA values_array_indexed
    (178) values_array_indexed -> . indexed_array
    (179) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    NEW             shift and go to state 46
    ARRAY           shift and go to state 313
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values_array_indexed           shift and go to state 193
    values                         shift and go to state 196
    object_creation                shift and go to state 197
    indexed_array                  shift and go to state 198
    boolean                        shift and go to state 59

state 359

    (208) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 295

  ! LEFT_BRACKET    [ reduce using rule 208 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 360

    (207) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 207 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 361

    (209) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 209 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 362

    (215) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 400


state 363

    (214) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 214 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 364

    (212) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 212 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 365

    (213) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 295

  ! LEFT_BRACKET    [ reduce using rule 213 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 366

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 401


state 367

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 402
    BREAK           shift and go to state 403
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 367
    body_statement                 shift and go to state 404
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 368

    (26) body_statement -> RETURN . values SEMICOLON
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 405
    boolean                        shift and go to state 59

state 369

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 406


state 370

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 407


state 371

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 408
    PLUS            shift and go to state 374
    MINUS           shift and go to state 375
    MULTIPLY        shift and go to state 376
    DIVIDE          shift and go to state 377
    MODULE          shift and go to state 378
    POW             shift and go to state 379

    operator_aritmetic             shift and go to state 373

state 372

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 409

    condition_for                  shift and go to state 410

state 373

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 320
    LEFT_PAREN      shift and go to state 319
    IDENTIFIER      shift and go to state 323
    INTEGER         shift and go to state 324
    FLOAT           shift and go to state 325

    expression_for                 shift and go to state 411
    number_values                  shift and go to state 322

state 374

    (44) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 44 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 44 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 44 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 44 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 44 (operator_aritmetic -> PLUS .)


state 375

    (45) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> MINUS .)


state 376

    (46) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MULTIPLY .)


state 377

    (47) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> DIVIDE .)


state 378

    (48) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MODULE .)


state 379

    (49) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> POW .)


state 380

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 412

    access_array_element           shift and go to state 413

state 381

    (143) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 143 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 382

    (192) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (193) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 192 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 414


state 383

    (170) structure_array -> key EQUALS GREATER_THAN values .
    (171) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 170 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 170 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 415


state 384

    (191) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 191 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 385

    (182) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 182 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 386

    (181) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 181 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 387

    (217) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 217 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 388

    (228) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 228 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 228 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 228 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 228 (class_body -> class_body class_member .)
    STATIC          reduce using rule 228 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 228 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 228 (class_body -> class_body class_member .)
    CONST           reduce using rule 228 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 228 (class_body -> class_body class_member .)


state 389

    (230) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (231) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (233) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (234) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (235) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 416
    FUNCTION        shift and go to state 417
    VARIABLE        shift and go to state 418
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 419
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 390

    (232) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 232 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 232 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 232 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 232 (class_member -> class_attribute .)
    STATIC          reduce using rule 232 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 232 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 232 (class_member -> class_attribute .)
    CONST           reduce using rule 232 (class_member -> class_attribute .)
    DEFINE          reduce using rule 232 (class_member -> class_attribute .)


state 391

    (227) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 227 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 227 (interface_list -> interface_list COMMA IDENTIFIER .)


state 392

    (221) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 420


state 393

    (157) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 421


state 394

    (155) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 422


state 395

    (156) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 156 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 396

    (195) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 195 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 397

    (196) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 196 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 398

    (197) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 197 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 399

    (194) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 194 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 400

    (215) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 215 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 401

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 425
    ELSE            shift and go to state 426

    elseif_statement               shift and go to state 423
    else_statement                 shift and go to state 424

state 402

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    SEMICOLON       shift and go to state 428
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 427
    boolean                        shift and go to state 59

state 403

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 429


state 404

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 405

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 430


state 406

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 407

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 408

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 409

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (85) comparator_operator -> . EQUALS_EQUALS
    (86) comparator_operator -> . IDENTICAL
    (87) comparator_operator -> . NOT_EQUALS
    (88) comparator_operator -> . NOT_IDENTICAL
    (89) comparator_operator -> . SMALL_THAN
    (90) comparator_operator -> . GREATER_THAN
    (91) comparator_operator -> . SMALL_EQUALS_TO
    (92) comparator_operator -> . GREATER_EQUALS_TO
    (93) comparator_operator -> . SPACECRAFT
    (94) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 113
    IDENTICAL       shift and go to state 114
    NOT_EQUALS      shift and go to state 115
    NOT_IDENTICAL   shift and go to state 116
    SMALL_THAN      shift and go to state 117
    GREATER_THAN    shift and go to state 118
    SMALL_EQUALS_TO shift and go to state 119
    GREATER_EQUALS_TO shift and go to state 120
    SPACECRAFT      shift and go to state 121
    NULL_FUSION     shift and go to state 122

    comparator_operator            shift and go to state 431

state 410

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 432


state 411

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 374
    MINUS           shift and go to state 375
    MULTIPLY        shift and go to state 376
    DIVIDE          shift and go to state 377
    MODULE          shift and go to state 378
    POW             shift and go to state 379

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 373

state 412

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 433
    LEFT_BRACKET    shift and go to state 295


state 413

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 434


state 414

    (193) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (192) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (193) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 435

    structure_matrix_first         shift and go to state 436

state 415

    (171) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (170) structure_array -> . key EQUALS GREATER_THAN values
    (171) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (172) key -> . INTEGER
    (173) key -> . STRING

    INTEGER         shift and go to state 203
    STRING          shift and go to state 204

    key                            shift and go to state 199
    structure_array                shift and go to state 437

state 416

    (230) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 438


state 417

    (231) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 439


state 418

    (233) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (234) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 440
    SEMICOLON       shift and go to state 441


state 419

    (235) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 442


state 420

    (221) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 443


state 421

    (157) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 157 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 422

    (155) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (157) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 346

    codeblock                      shift and go to state 444

state 423

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 424

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 425

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 445


state 426

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 446


state 427

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 447


state 428

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 429

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 430

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 431

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 320
    LEFT_PAREN      shift and go to state 319
    IDENTIFIER      shift and go to state 323
    INTEGER         shift and go to state 324
    FLOAT           shift and go to state 325

    expression_for                 shift and go to state 448
    number_values                  shift and go to state 322

state 432

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 449
    INCREASE        shift and go to state 451
    DECREMENT       shift and go to state 452

    increment_statement            shift and go to state 450

state 433

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 434

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 435

    (192) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 453


state 436

    (193) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 193 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 437

    (171) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 171 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 171 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 438

    (230) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 454


state 439

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 455


state 440

    (233) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 456
    boolean                        shift and go to state 59

state 441

    (234) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 234 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 442

    (235) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 235 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 443

    (221) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 457
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 444

    (155) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 155 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 445

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (74) comparation -> . values comparator_operator values
    (75) comparation -> . values comparator_operator expression
    (76) comparation -> . expression comparator_operator expression
    (77) comparation -> . VARIABLE EQUALS_EQUALS values
    (78) comparation -> . access_array_element EQUALS_EQUALS values
    (79) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (80) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (81) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (82) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (83) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (84) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (72) logic_not_sentence -> . LOGIC_NOT conditional
    (73) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (115) expression -> . term
    (116) expression -> . term PLUS expression
    (117) expression -> . term MINUS expression
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (66) false_boolean_types -> . FALSE
    (67) false_boolean_types -> . STRING
    (68) false_boolean_types -> . INTEGER
    (69) false_boolean_types -> . FLOAT
    (70) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (71) false_boolean_types -> . NULL
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (118) term -> . factor
    (119) term -> . factor MULTIPLY term
    (120) term -> . factor DIVIDE term
    (121) term -> . factor MODULE term
    (122) term -> . factor POW term
    (123) factor -> . INTEGER
    (124) factor -> . VARIABLE
    (125) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 105
    VARIABLE        shift and go to state 187
    LOGIC_NOT       shift and go to state 69
    INTEGER         shift and go to state 57
    STRING          shift and go to state 141
    FLOAT           shift and go to state 58
    TRUE            shift and go to state 142
    ARRAY           shift and go to state 73
    FALSE           shift and go to state 143
    NULL            shift and go to state 74

    conditional                    shift and go to state 458
    boolean_expression             shift and go to state 60
    comparation                    shift and go to state 63
    logic_not_sentence             shift and go to state 64
    logic_expression               shift and go to state 65
    values                         shift and go to state 139
    expression                     shift and go to state 67
    access_array_element           shift and go to state 140
    access_element_matrix          shift and go to state 68
    true_boolean_types             shift and go to state 70
    false_boolean_types            shift and go to state 71
    boolean                        shift and go to state 59
    term                           shift and go to state 72
    factor                         shift and go to state 75

state 446

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 459
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 447

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 448

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 374
    MINUS           shift and go to state 375
    MULTIPLY        shift and go to state 376
    DIVIDE          shift and go to state 377
    MODULE          shift and go to state 378
    POW             shift and go to state 379

    operator_aritmetic             shift and go to state 373

state 449

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 460
    DECREMENT       shift and go to state 461
    PLUS_EQUALS     shift and go to state 462
    EQUALS          shift and go to state 463


state 450

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 464


state 451

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 465


state 452

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 466


state 453

    (192) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 467
    boolean                        shift and go to state 59

state 454

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 468


state 455

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 469
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 456

    (233) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 470


state 457

    (221) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 471


state 458

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 472


state 459

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 473


state 460

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 461

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 462

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 474


state 463

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 475


state 464

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 476


state 465

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 466

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 467

    (192) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (193) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 382


state 468

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (145) params -> . real_params
    (146) params -> . empty
    (147) real_params -> . VARIABLE
    (148) real_params -> . values
    (149) real_params -> . real_params COMMA VARIABLE
    (150) real_params -> . real_params COMMA values
    (151) empty -> .
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE

    VARIABLE        shift and go to state 262
    RIGHT_PAREN     reduce using rule 151 (empty -> .)
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    params                         shift and go to state 477
    real_params                    shift and go to state 260
    empty                          shift and go to state 261
    values                         shift and go to state 263
    boolean                        shift and go to state 59

state 469

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 478


state 470

    (233) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 233 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 471

    (221) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 479


state 472

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 480


state 473

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 474

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 475

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    PLUS            shift and go to state 374
    MINUS           shift and go to state 375
    MULTIPLY        shift and go to state 376
    DIVIDE          shift and go to state 377
    MODULE          shift and go to state 378
    POW             shift and go to state 379

    operator_aritmetic             shift and go to state 481

state 476

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 482
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 477

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 483


state 478

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 484


state 479

    (221) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 221 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 221 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 221 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 221 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 221 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 480

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 368
    BREAK           shift and go to state 369
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 485
    sentence                       shift and go to state 367
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 481

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    INTEGER         shift and go to state 324
    FLOAT           shift and go to state 325

    number_values                  shift and go to state 486

state 482

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 487


state 483

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 488


state 484

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (240) method_body -> . classStatement
    (241) method_body -> . classStatement return_form
    (242) method_body -> . return_form
    (243) method_body -> . classStatement BREAK SEMICOLON
    (244) method_body -> . classStatement method_body
    (248) classStatement -> . sentence
    (249) classStatement -> . access_method_object SEMICOLON
    (245) return_form -> . RETURN values SEMICOLON
    (246) return_form -> . RETURN access_method_object SEMICOLON
    (247) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 494
    VARIABLE        shift and go to state 495
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 489
    classStatement                 shift and go to state 490
    return_form                    shift and go to state 491
    sentence                       shift and go to state 492
    access_method_object           shift and go to state 493
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 496
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 485

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 497


state 486

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 487

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 488

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (240) method_body -> . classStatement
    (241) method_body -> . classStatement return_form
    (242) method_body -> . return_form
    (243) method_body -> . classStatement BREAK SEMICOLON
    (244) method_body -> . classStatement method_body
    (248) classStatement -> . sentence
    (249) classStatement -> . access_method_object SEMICOLON
    (245) return_form -> . RETURN values SEMICOLON
    (246) return_form -> . RETURN access_method_object SEMICOLON
    (247) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 494
    VARIABLE        shift and go to state 495
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 498
    classStatement                 shift and go to state 490
    return_form                    shift and go to state 491
    sentence                       shift and go to state 492
    access_method_object           shift and go to state 493
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 496
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 489

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 499


state 490

    (240) method_body -> classStatement .
    (241) method_body -> classStatement . return_form
    (243) method_body -> classStatement . BREAK SEMICOLON
    (244) method_body -> classStatement . method_body
    (245) return_form -> . RETURN values SEMICOLON
    (246) return_form -> . RETURN access_method_object SEMICOLON
    (247) return_form -> . RETURN SEMICOLON
    (240) method_body -> . classStatement
    (241) method_body -> . classStatement return_form
    (242) method_body -> . return_form
    (243) method_body -> . classStatement BREAK SEMICOLON
    (244) method_body -> . classStatement method_body
    (248) classStatement -> . sentence
    (249) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (95) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (96) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (97) print_statement -> . ECHO printable_values
    (98) print_statement -> . PRINT printable_values
    (126) assignment -> . variable_assignment
    (127) assignment -> . constant_assignment
    (160) types_structure -> . structure_array_principal
    (161) types_structure -> . structure_matrix_principal
    (162) types_structure -> . structure_object_principal
    (217) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (218) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (152) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) variable_assignment -> . VARIABLE assignment_operator values
    (129) variable_assignment -> . VARIABLE assignment_operator expression
    (130) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (131) variable_assignment -> . VARIABLE assignment_operator types_structure
    (132) variable_assignment -> . VARIABLE assignment_operator input
    (133) variable_assignment -> . VARIABLE assignment_operator special_function
    (134) variable_assignment -> . VARIABLE INCREASE
    (135) variable_assignment -> . VARIABLE DECREMENT
    (136) variable_assignment -> . INCREASE VARIABLE
    (137) variable_assignment -> . DECREMENT VARIABLE
    (140) constant_assignment -> . const_syntax
    (141) constant_assignment -> . define_syntax
    (163) structure_array_principal -> . indexed_array
    (164) structure_array_principal -> . associative_array
    (165) structure_array_principal -> . access_array_stucture
    (166) structure_array_principal -> . access_array_element
    (183) structure_matrix_principal -> . matrix_firstform
    (184) structure_matrix_principal -> . matrix_secondform
    (185) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (186) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (187) structure_matrix_principal -> . add_element_matrix
    (201) structure_object_principal -> . object_creation
    (202) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (142) const_syntax -> . CONST IDENTIFIER EQUALS values
    (143) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (167) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (168) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (169) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (180) access_array_stucture -> . access_array_element SEMICOLON
    (188) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (189) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (194) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (198) modify_element_matrix -> . access_element_matrix EQUALS values
    (199) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (200) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (203) object_creation -> . NEW IDENTIFIER
    (204) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 240 (method_body -> classStatement .)
    BREAK           shift and go to state 501
    RETURN          shift and go to state 494
    VARIABLE        shift and go to state 495
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 490
    return_form                    shift and go to state 500
    method_body                    shift and go to state 502
    access_method_object           shift and go to state 493
    sentence                       shift and go to state 492
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 496
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 491

    (242) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 242 (method_body -> return_form .)


state 492

    (248) classStatement -> sentence .

    BREAK           reduce using rule 248 (classStatement -> sentence .)
    RETURN          reduce using rule 248 (classStatement -> sentence .)
    VARIABLE        reduce using rule 248 (classStatement -> sentence .)
    ECHO            reduce using rule 248 (classStatement -> sentence .)
    PRINT           reduce using rule 248 (classStatement -> sentence .)
    CLASS           reduce using rule 248 (classStatement -> sentence .)
    INTERFACE       reduce using rule 248 (classStatement -> sentence .)
    FUNCTION        reduce using rule 248 (classStatement -> sentence .)
    INCREASE        reduce using rule 248 (classStatement -> sentence .)
    DECREMENT       reduce using rule 248 (classStatement -> sentence .)
    IF              reduce using rule 248 (classStatement -> sentence .)
    WHILE           reduce using rule 248 (classStatement -> sentence .)
    FOR             reduce using rule 248 (classStatement -> sentence .)
    CONST           reduce using rule 248 (classStatement -> sentence .)
    DEFINE          reduce using rule 248 (classStatement -> sentence .)
    ARRAY           reduce using rule 248 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 248 (classStatement -> sentence .)
    NEW             reduce using rule 248 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 248 (classStatement -> sentence .)


state 493

    (249) classStatement -> access_method_object . SEMICOLON
    (202) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 503
    BREAK           reduce using rule 202 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 202 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 202 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 202 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 202 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 202 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 202 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 202 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 202 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 202 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 202 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 202 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 202 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 202 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 202 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 202 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 202 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 202 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 202 (structure_object_principal -> access_method_object .)


state 494

    (245) return_form -> RETURN . values SEMICOLON
    (246) return_form -> RETURN . access_method_object SEMICOLON
    (247) return_form -> RETURN . SEMICOLON
    (109) values -> . INTEGER
    (110) values -> . STRING
    (111) values -> . FLOAT
    (112) values -> . boolean
    (205) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (206) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (207) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (210) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (211) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (212) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (113) boolean -> . TRUE
    (114) boolean -> . FALSE
    (181) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 505
    INTEGER         shift and go to state 185
    STRING          shift and go to state 166
    FLOAT           shift and go to state 167
    VARIABLE        shift and go to state 507
    TRUE            shift and go to state 174
    FALSE           shift and go to state 175

    values                         shift and go to state 504
    access_method_object           shift and go to state 506
    boolean                        shift and go to state 59
    access_array_element           shift and go to state 508

state 495

    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (128) variable_assignment -> VARIABLE . assignment_operator values
    (129) variable_assignment -> VARIABLE . assignment_operator expression
    (130) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (131) variable_assignment -> VARIABLE . assignment_operator types_structure
    (132) variable_assignment -> VARIABLE . assignment_operator input
    (133) variable_assignment -> VARIABLE . assignment_operator special_function
    (134) variable_assignment -> VARIABLE . INCREASE
    (135) variable_assignment -> VARIABLE . DECREMENT
    (194) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (195) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (196) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (197) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (200) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (138) assignment_operator -> . EQUALS
    (139) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 86
    LEFT_BRACKET    shift and go to state 84
    INCREASE        shift and go to state 82
    DECREMENT       shift and go to state 83
    EQUALS          shift and go to state 85
    PLUS_EQUALS     shift and go to state 87

    assignment_operator            shift and go to state 81

state 496

    (210) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (211) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (212) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (166) structure_array_principal -> access_array_element .
    (180) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 91
    BREAK           reduce using rule 166 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 166 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 166 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 166 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 166 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 166 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 166 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 166 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 166 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 166 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 166 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 166 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 166 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 166 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 166 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 166 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 166 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 166 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 166 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 90


state 497

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 425
    ELSE            shift and go to state 426

    elseif_statement               shift and go to state 509
    else_statement                 shift and go to state 510

state 498

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 511


state 499

    (231) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 231 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 500

    (241) method_body -> classStatement return_form .
    (242) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 241 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 241 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 242 (method_body -> return_form .) ]


state 501

    (243) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 512


state 502

    (244) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 244 (method_body -> classStatement method_body .)


state 503

    (249) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 249 (classStatement -> access_method_object SEMICOLON .)


state 504

    (245) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 513


state 505

    (247) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 247 (return_form -> RETURN SEMICOLON .)


state 506

    (246) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 514


state 507

    (205) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (206) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (207) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (208) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (209) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (181) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (182) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 86
    LEFT_BRACKET    shift and go to state 295


state 508

    (210) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (211) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (212) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (213) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (214) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 91


state 509

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 510

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 511

    (230) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 230 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 512

    (243) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 243 (method_body -> classStatement BREAK SEMICOLON .)


state 513

    (245) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 245 (return_form -> RETURN values SEMICOLON .)


state 514

    (246) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 246 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 60 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 60 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 187 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 209 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 270 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 271 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 275 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 327 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 359 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 365 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 411 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 411 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 411 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 411 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 411 resolved as shift
WARNING: shift/reduce conflict for POW in state 411 resolved as shift
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 57 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 57
WARNING: reduce/reduce conflict in state 58 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 58
WARNING: reduce/reduce conflict in state 109 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 109
WARNING: reduce/reduce conflict in state 110 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 110
WARNING: reduce/reduce conflict in state 110 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 110
WARNING: reduce/reduce conflict in state 141 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 141
WARNING: reduce/reduce conflict in state 165 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 165
WARNING: reduce/reduce conflict in state 210 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 210
WARNING: reduce/reduce conflict in state 210 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 210
WARNING: reduce/reduce conflict in state 429 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 429
WARNING: reduce/reduce conflict in state 447 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 447
WARNING: reduce/reduce conflict in state 500 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 500
