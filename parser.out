Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    ELSE
    ELSEIF
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EQUALS_EQUALS
    ERROR_CONTROL
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FOR
    FOREACH
    GLOBAL
    GOTO
    GREATER_EQUALS_TO
    HALT_COMPILER
    IDENTICAL
    IF
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    LOGIC_AND
    LOGIC_NOT
    LOGIC_OR
    LOGIC_XOR
    MATCH
    NAMESPACE
    NOT_EQUALS
    NOT_IDENTICAL
    NULL_FUSION
    OR
    PLUS_EQUALS
    POST_DECREMENT
    POST_INCREASE
    PRE_DECREMENT
    PRE_INCREASE
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    RETURN
    SHIF_LEFT
    SHIF_RIGHT
    SMALL_EQUALS_TO
    SMALL_THAN
    SPACECRAFT
    STATIC
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    WHILE
    XOR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment
Rule 5     sentence -> types_structure
Rule 6     print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 7     print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 8     print_statement -> ECHO printable_values
Rule 9     print_statement -> PRINT printable_values
Rule 10    printable_values -> values
Rule 11    printable_values -> values COMMA printable_values
Rule 12    printable_values -> VARIABLE
Rule 13    printable_values -> VARIABLE COMMA printable_values
Rule 14    values -> INTEGER
Rule 15    values -> STRING
Rule 16    values -> FLOAT
Rule 17    values -> boolean
Rule 18    boolean -> TRUE
Rule 19    boolean -> FALSE
Rule 20    expression -> term
Rule 21    expression -> term PLUS expression
Rule 22    expression -> term MINUS expression
Rule 23    term -> factor
Rule 24    term -> factor MULTIPLY term
Rule 25    term -> factor DIVIDE term
Rule 26    term -> factor MODULE term
Rule 27    term -> factor POW term
Rule 28    factor -> INTEGER
Rule 29    factor -> VARIABLE
Rule 30    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 31    assignment -> variable_assignment
Rule 32    assignment -> function_assignment
Rule 33    assignment -> constant_assignment
Rule 34    variable_assignment -> VARIABLE EQUALS values SEMICOLON
Rule 35    variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON
Rule 36    variable_assignment -> VARIABLE EQUALS expression SEMICOLON
Rule 37    variable_assignment -> VARIABLE EQUALS types_structure
Rule 38    variable_assignment -> VARIABLE EQUALS input SEMICOLON
Rule 39    constant_assignment -> const_syntax
Rule 40    constant_assignment -> define_syntax
Rule 41    const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON
Rule 42    define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
Rule 43    function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 44    params -> real_params
Rule 45    params -> empty
Rule 46    real_params -> VARIABLE
Rule 47    real_params -> values
Rule 48    real_params -> real_params COMMA VARIABLE
Rule 49    real_params -> real_params COMMA values
Rule 50    empty -> <empty>
Rule 51    function_assignment -> VARIABLE EQUALS special_function SEMICOLON
Rule 52    function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 53    special_function -> arrow_function
Rule 54    special_function -> anonymous_functions
Rule 55    arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 56    anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 57    codeblock -> LEFT_BRACE RIGHT_BRACE
Rule 58    input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 59    input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 60    types_structure -> structure_array_principal
Rule 61    types_structure -> structure_matrix_principal
Rule 62    types_structure -> structure_object_principal
Rule 63    structure_array_principal -> indexed_array
Rule 64    structure_array_principal -> associative_array
Rule 65    indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
Rule 66    associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
Rule 67    associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
Rule 68    structure_array -> key EQUALS GREATER_THAN values
Rule 69    structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 70    key -> INTEGER
Rule 71    key -> STRING
Rule 72    values_array_indexed -> values
Rule 73    values_array_indexed -> values COMMA values_array_indexed
Rule 74    structure_matrix_principal -> matrix_firstform
Rule 75    structure_matrix_principal -> matrix_secondform
Rule 76    structure_matrix_principal -> access_element_matrix
Rule 77    structure_matrix_principal -> modify_element_matrix
Rule 78    structure_matrix_principal -> add_element_matrix
Rule 79    matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 80    matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 81    structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 82    structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 83    structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 84    structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 85    access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 86    modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 87    add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 88    structure_object_principal -> object_creation
Rule 89    structure_object_principal -> access_method_object
Rule 90    object_creation -> NEW class_name SEMICOLON
Rule 91    class_name -> IDENTIFIER
Rule 92    access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
ARRAY                : 65 66 67 79 83 84
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
COLON                : 
COMMA                : 11 13 42 48 49 69 73 82 84
COMMENT              : 
CONCATENATION        : 
CONST                : 41
CONTINUE             : 
DECLARE              : 
DEFAULT              : 
DEFINE               : 42
DIE                  : 
DIVIDE               : 25
DO                   : 
ECHO                 : 6 8
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 34 35 36 37 38 41 51 55 68 69 86 87
EQUALS_EQUALS        : 
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 19
FEGTS                : 58
FINAL                : 
FINALLY              : 
FLOAT                : 16
FN                   : 55
FOR                  : 
FOREACH              : 
FUNCTION             : 52 56
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 
GREATER_THAN         : 55 68 69 92
HALT_COMPILER        : 
IDENTICAL            : 
IDENTIFIER           : 41 43 52 91 92
IF                   : 
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 14 28 70 85 85 86 86
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 57
LEFT_BRACKET         : 67 80 81 82 85 85 86 86 87
LEFT_PAREN           : 6 7 30 42 43 52 55 56 58 59 65 66 79 83 84 92
LIST                 : 
LOGIC_AND            : 
LOGIC_NOT            : 
LOGIC_OR             : 
LOGIC_XOR            : 
MATCH                : 
MINUS                : 22 92
MODULE               : 26
MULTIPLY             : 24
NAMESPACE            : 
NEW                  : 90
NOT_EQUALS           : 
NOT_IDENTICAL        : 
NULL_FUSION          : 
OR                   : 
PLUS                 : 21
PLUS_EQUALS          : 
POST_DECREMENT       : 
POST_INCREASE        : 
POW                  : 27
PRE_DECREMENT        : 
PRE_INCREASE         : 
PRINT                : 7 9
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
READLINE             : 59
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 
RIGHT_BRACE          : 57
RIGHT_BRACKET        : 67 80 81 82 85 85 86 86 87
RIGHT_PAREN          : 6 7 30 42 43 52 55 56 58 59 65 66 79 83 84 92
SEMICOLON            : 3 34 35 36 38 41 42 43 51 65 66 67 79 80 85 86 90 92
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 
SMALL_THAN           : 
SPACECRAFT           : 
STATIC               : 
STDIN                : 58
STRING               : 15 42 59 71
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 18
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 12 13 29 34 35 36 37 38 46 48 51 85 86 87 92
WHILE                : 
XOR                  : 
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 76
access_method_object : 89
add_element_matrix   : 78
anonymous_functions  : 54
arrow_function       : 53
assignment           : 4
associative_array    : 64
boolean              : 17
class_name           : 90
codeblock            : 52 55 56
const_syntax         : 39
constant_assignment  : 33
define_syntax        : 40
empty                : 45
expression           : 21 22 30 36
factor               : 23 24 25 26 27
function_assignment  : 32
function_invocation  : 35
indexed_array        : 63 87
input                : 38
key                  : 68 69
matrix_firstform     : 74
matrix_secondform    : 75
modify_element_matrix : 77
object_creation      : 88
params               : 43 52 55 56
print_statement      : 3
printable_values     : 6 7 8 9 11 13
program              : 1 0
real_params          : 44 48 49
sentence             : 1 2
special_function     : 51
structure_array      : 66 67 69
structure_array_principal : 60
structure_matrix_first : 79 84
structure_matrix_principal : 61
structure_matrix_second : 80 82
structure_object_principal : 62
term                 : 20 21 22 24 25 26 27
types_structure      : 5 37
values               : 10 11 34 41 42 47 49 68 69 72 73 81 82 83 84 86
values_array_indexed : 65 73
variable_assignment  : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment
    (5) sentence -> . types_structure
    (6) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (7) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> . ECHO printable_values
    (9) print_statement -> . PRINT printable_values
    (31) assignment -> . variable_assignment
    (32) assignment -> . function_assignment
    (33) assignment -> . constant_assignment
    (60) types_structure -> . structure_array_principal
    (61) types_structure -> . structure_matrix_principal
    (62) types_structure -> . structure_object_principal
    (34) variable_assignment -> . VARIABLE EQUALS values SEMICOLON
    (35) variable_assignment -> . VARIABLE EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> . VARIABLE EQUALS expression SEMICOLON
    (37) variable_assignment -> . VARIABLE EQUALS types_structure
    (38) variable_assignment -> . VARIABLE EQUALS input SEMICOLON
    (51) function_assignment -> . VARIABLE EQUALS special_function SEMICOLON
    (52) function_assignment -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (39) constant_assignment -> . const_syntax
    (40) constant_assignment -> . define_syntax
    (63) structure_array_principal -> . indexed_array
    (64) structure_array_principal -> . associative_array
    (74) structure_matrix_principal -> . matrix_firstform
    (75) structure_matrix_principal -> . matrix_secondform
    (76) structure_matrix_principal -> . access_element_matrix
    (77) structure_matrix_principal -> . modify_element_matrix
    (78) structure_matrix_principal -> . add_element_matrix
    (88) structure_object_principal -> . object_creation
    (89) structure_object_principal -> . access_method_object
    (41) const_syntax -> . CONST IDENTIFIER EQUALS values SEMICOLON
    (42) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
    (65) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (66) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (67) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (79) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (80) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (85) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (90) object_creation -> . NEW class_name SEMICOLON
    (92) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 14
    FUNCTION        shift and go to state 15
    CONST           shift and go to state 27
    DEFINE          shift and go to state 28
    ARRAY           shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    NEW             shift and go to state 31

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    variable_assignment            shift and go to state 8
    function_assignment            shift and go to state 9
    constant_assignment            shift and go to state 10
    structure_array_principal      shift and go to state 11
    structure_matrix_principal     shift and go to state 12
    structure_object_principal     shift and go to state 13
    const_syntax                   shift and go to state 16
    define_syntax                  shift and go to state 17
    indexed_array                  shift and go to state 18
    associative_array              shift and go to state 19
    matrix_firstform               shift and go to state 20
    matrix_secondform              shift and go to state 21
    access_element_matrix          shift and go to state 22
    modify_element_matrix          shift and go to state 23
    add_element_matrix             shift and go to state 24
    object_creation                shift and go to state 25
    access_method_object           shift and go to state 26

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment
    (5) sentence -> . types_structure
    (6) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (7) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> . ECHO printable_values
    (9) print_statement -> . PRINT printable_values
    (31) assignment -> . variable_assignment
    (32) assignment -> . function_assignment
    (33) assignment -> . constant_assignment
    (60) types_structure -> . structure_array_principal
    (61) types_structure -> . structure_matrix_principal
    (62) types_structure -> . structure_object_principal
    (34) variable_assignment -> . VARIABLE EQUALS values SEMICOLON
    (35) variable_assignment -> . VARIABLE EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> . VARIABLE EQUALS expression SEMICOLON
    (37) variable_assignment -> . VARIABLE EQUALS types_structure
    (38) variable_assignment -> . VARIABLE EQUALS input SEMICOLON
    (51) function_assignment -> . VARIABLE EQUALS special_function SEMICOLON
    (52) function_assignment -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (39) constant_assignment -> . const_syntax
    (40) constant_assignment -> . define_syntax
    (63) structure_array_principal -> . indexed_array
    (64) structure_array_principal -> . associative_array
    (74) structure_matrix_principal -> . matrix_firstform
    (75) structure_matrix_principal -> . matrix_secondform
    (76) structure_matrix_principal -> . access_element_matrix
    (77) structure_matrix_principal -> . modify_element_matrix
    (78) structure_matrix_principal -> . add_element_matrix
    (88) structure_object_principal -> . object_creation
    (89) structure_object_principal -> . access_method_object
    (41) const_syntax -> . CONST IDENTIFIER EQUALS values SEMICOLON
    (42) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON
    (65) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (66) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (67) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (79) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (80) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (85) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (90) object_creation -> . NEW class_name SEMICOLON
    (92) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 6
    PRINT           shift and go to state 7
    VARIABLE        shift and go to state 14
    FUNCTION        shift and go to state 15
    CONST           shift and go to state 27
    DEFINE          shift and go to state 28
    ARRAY           shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    NEW             shift and go to state 31

    sentence                       shift and go to state 2
    program                        shift and go to state 32
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    variable_assignment            shift and go to state 8
    function_assignment            shift and go to state 9
    constant_assignment            shift and go to state 10
    structure_array_principal      shift and go to state 11
    structure_matrix_principal     shift and go to state 12
    structure_object_principal     shift and go to state 13
    const_syntax                   shift and go to state 16
    define_syntax                  shift and go to state 17
    indexed_array                  shift and go to state 18
    associative_array              shift and go to state 19
    matrix_firstform               shift and go to state 20
    matrix_secondform              shift and go to state 21
    access_element_matrix          shift and go to state 22
    modify_element_matrix          shift and go to state 23
    add_element_matrix             shift and go to state 24
    object_creation                shift and go to state 25
    access_method_object           shift and go to state 26

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 33


state 4

    (4) sentence -> assignment .

    ECHO            reduce using rule 4 (sentence -> assignment .)
    PRINT           reduce using rule 4 (sentence -> assignment .)
    VARIABLE        reduce using rule 4 (sentence -> assignment .)
    FUNCTION        reduce using rule 4 (sentence -> assignment .)
    CONST           reduce using rule 4 (sentence -> assignment .)
    DEFINE          reduce using rule 4 (sentence -> assignment .)
    ARRAY           reduce using rule 4 (sentence -> assignment .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment .)
    NEW             reduce using rule 4 (sentence -> assignment .)
    $end            reduce using rule 4 (sentence -> assignment .)


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (8) print_statement -> ECHO . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 34
    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 35
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 7

    (7) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (9) print_statement -> PRINT . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 44
    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 45
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 8

    (31) assignment -> variable_assignment .

    ECHO            reduce using rule 31 (assignment -> variable_assignment .)
    PRINT           reduce using rule 31 (assignment -> variable_assignment .)
    VARIABLE        reduce using rule 31 (assignment -> variable_assignment .)
    FUNCTION        reduce using rule 31 (assignment -> variable_assignment .)
    CONST           reduce using rule 31 (assignment -> variable_assignment .)
    DEFINE          reduce using rule 31 (assignment -> variable_assignment .)
    ARRAY           reduce using rule 31 (assignment -> variable_assignment .)
    LEFT_BRACKET    reduce using rule 31 (assignment -> variable_assignment .)
    NEW             reduce using rule 31 (assignment -> variable_assignment .)
    $end            reduce using rule 31 (assignment -> variable_assignment .)


state 9

    (32) assignment -> function_assignment .

    ECHO            reduce using rule 32 (assignment -> function_assignment .)
    PRINT           reduce using rule 32 (assignment -> function_assignment .)
    VARIABLE        reduce using rule 32 (assignment -> function_assignment .)
    FUNCTION        reduce using rule 32 (assignment -> function_assignment .)
    CONST           reduce using rule 32 (assignment -> function_assignment .)
    DEFINE          reduce using rule 32 (assignment -> function_assignment .)
    ARRAY           reduce using rule 32 (assignment -> function_assignment .)
    LEFT_BRACKET    reduce using rule 32 (assignment -> function_assignment .)
    NEW             reduce using rule 32 (assignment -> function_assignment .)
    $end            reduce using rule 32 (assignment -> function_assignment .)


state 10

    (33) assignment -> constant_assignment .

    ECHO            reduce using rule 33 (assignment -> constant_assignment .)
    PRINT           reduce using rule 33 (assignment -> constant_assignment .)
    VARIABLE        reduce using rule 33 (assignment -> constant_assignment .)
    FUNCTION        reduce using rule 33 (assignment -> constant_assignment .)
    CONST           reduce using rule 33 (assignment -> constant_assignment .)
    DEFINE          reduce using rule 33 (assignment -> constant_assignment .)
    ARRAY           reduce using rule 33 (assignment -> constant_assignment .)
    LEFT_BRACKET    reduce using rule 33 (assignment -> constant_assignment .)
    NEW             reduce using rule 33 (assignment -> constant_assignment .)
    $end            reduce using rule 33 (assignment -> constant_assignment .)


state 11

    (60) types_structure -> structure_array_principal .

    ECHO            reduce using rule 60 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 60 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 60 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 60 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 60 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 60 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 60 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 60 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 60 (types_structure -> structure_array_principal .)
    $end            reduce using rule 60 (types_structure -> structure_array_principal .)


state 12

    (61) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 61 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 61 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 61 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 61 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 61 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 61 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 61 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 61 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 61 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 61 (types_structure -> structure_matrix_principal .)


state 13

    (62) types_structure -> structure_object_principal .

    ECHO            reduce using rule 62 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 62 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 62 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 62 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 62 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 62 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 62 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 62 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 62 (types_structure -> structure_object_principal .)
    $end            reduce using rule 62 (types_structure -> structure_object_principal .)


state 14

    (34) variable_assignment -> VARIABLE . EQUALS values SEMICOLON
    (35) variable_assignment -> VARIABLE . EQUALS function_invocation SEMICOLON
    (36) variable_assignment -> VARIABLE . EQUALS expression SEMICOLON
    (37) variable_assignment -> VARIABLE . EQUALS types_structure
    (38) variable_assignment -> VARIABLE . EQUALS input SEMICOLON
    (51) function_assignment -> VARIABLE . EQUALS special_function SEMICOLON
    (85) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (92) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    EQUALS          shift and go to state 46
    LEFT_BRACKET    shift and go to state 47
    MINUS           shift and go to state 48


state 15

    (52) function_assignment -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 49


state 16

    (39) constant_assignment -> const_syntax .

    ECHO            reduce using rule 39 (constant_assignment -> const_syntax .)
    PRINT           reduce using rule 39 (constant_assignment -> const_syntax .)
    VARIABLE        reduce using rule 39 (constant_assignment -> const_syntax .)
    FUNCTION        reduce using rule 39 (constant_assignment -> const_syntax .)
    CONST           reduce using rule 39 (constant_assignment -> const_syntax .)
    DEFINE          reduce using rule 39 (constant_assignment -> const_syntax .)
    ARRAY           reduce using rule 39 (constant_assignment -> const_syntax .)
    LEFT_BRACKET    reduce using rule 39 (constant_assignment -> const_syntax .)
    NEW             reduce using rule 39 (constant_assignment -> const_syntax .)
    $end            reduce using rule 39 (constant_assignment -> const_syntax .)


state 17

    (40) constant_assignment -> define_syntax .

    ECHO            reduce using rule 40 (constant_assignment -> define_syntax .)
    PRINT           reduce using rule 40 (constant_assignment -> define_syntax .)
    VARIABLE        reduce using rule 40 (constant_assignment -> define_syntax .)
    FUNCTION        reduce using rule 40 (constant_assignment -> define_syntax .)
    CONST           reduce using rule 40 (constant_assignment -> define_syntax .)
    DEFINE          reduce using rule 40 (constant_assignment -> define_syntax .)
    ARRAY           reduce using rule 40 (constant_assignment -> define_syntax .)
    LEFT_BRACKET    reduce using rule 40 (constant_assignment -> define_syntax .)
    NEW             reduce using rule 40 (constant_assignment -> define_syntax .)
    $end            reduce using rule 40 (constant_assignment -> define_syntax .)


state 18

    (63) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 63 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 63 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 63 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 63 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 63 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 63 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 63 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 63 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 63 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 63 (structure_array_principal -> indexed_array .)


state 19

    (64) structure_array_principal -> associative_array .

    ECHO            reduce using rule 64 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 64 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 64 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 64 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 64 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 64 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 64 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 64 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 64 (structure_array_principal -> associative_array .)
    $end            reduce using rule 64 (structure_array_principal -> associative_array .)


state 20

    (74) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 74 (structure_matrix_principal -> matrix_firstform .)


state 21

    (75) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 75 (structure_matrix_principal -> matrix_secondform .)


state 22

    (76) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 76 (structure_matrix_principal -> access_element_matrix .)


state 23

    (77) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 77 (structure_matrix_principal -> modify_element_matrix .)


state 24

    (78) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 78 (structure_matrix_principal -> add_element_matrix .)


state 25

    (88) structure_object_principal -> object_creation .

    ECHO            reduce using rule 88 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 88 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 88 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 88 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 88 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 88 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 88 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 88 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 88 (structure_object_principal -> object_creation .)
    $end            reduce using rule 88 (structure_object_principal -> object_creation .)


state 26

    (89) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 89 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 89 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 89 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 89 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 89 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 89 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 89 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 89 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 89 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 89 (structure_object_principal -> access_method_object .)


state 27

    (41) const_syntax -> CONST . IDENTIFIER EQUALS values SEMICOLON

    IDENTIFIER      shift and go to state 50


state 28

    (42) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 51


state 29

    (65) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (66) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (67) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (79) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 52
    LEFT_BRACKET    shift and go to state 53


state 30

    (80) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (81) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (82) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 54

    structure_matrix_second        shift and go to state 55

state 31

    (90) object_creation -> NEW . class_name SEMICOLON
    (91) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 57

    class_name                     shift and go to state 56

state 32

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 33

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 34

    (6) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 58
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 35

    (8) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 8 (print_statement -> ECHO printable_values .)


state 36

    (10) printable_values -> values .
    (11) printable_values -> values . COMMA printable_values

    SEMICOLON       reduce using rule 10 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 10 (printable_values -> values .)
    COMMA           shift and go to state 59


state 37

    (12) printable_values -> VARIABLE .
    (13) printable_values -> VARIABLE . COMMA printable_values

    SEMICOLON       reduce using rule 12 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 12 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 60


state 38

    (14) values -> INTEGER .

    COMMA           reduce using rule 14 (values -> INTEGER .)
    SEMICOLON       reduce using rule 14 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 14 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 14 (values -> INTEGER .)


state 39

    (15) values -> STRING .

    COMMA           reduce using rule 15 (values -> STRING .)
    SEMICOLON       reduce using rule 15 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 15 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 15 (values -> STRING .)


state 40

    (16) values -> FLOAT .

    COMMA           reduce using rule 16 (values -> FLOAT .)
    SEMICOLON       reduce using rule 16 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 16 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 16 (values -> FLOAT .)


state 41

    (17) values -> boolean .

    COMMA           reduce using rule 17 (values -> boolean .)
    SEMICOLON       reduce using rule 17 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 17 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 17 (values -> boolean .)


state 42

    (18) boolean -> TRUE .

    COMMA           reduce using rule 18 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 18 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 18 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 18 (boolean -> TRUE .)


state 43

    (19) boolean -> FALSE .

    COMMA           reduce using rule 19 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 19 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 19 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 19 (boolean -> FALSE .)


state 44

    (7) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 61
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 45

    (9) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 9 (print_statement -> PRINT printable_values .)


state 46

    (34) variable_assignment -> VARIABLE EQUALS . values SEMICOLON
    (35) variable_assignment -> VARIABLE EQUALS . function_invocation SEMICOLON
    (36) variable_assignment -> VARIABLE EQUALS . expression SEMICOLON
    (37) variable_assignment -> VARIABLE EQUALS . types_structure
    (38) variable_assignment -> VARIABLE EQUALS . input SEMICOLON
    (51) function_assignment -> VARIABLE EQUALS . special_function SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (43) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (60) types_structure -> . structure_array_principal
    (61) types_structure -> . structure_matrix_principal
    (62) types_structure -> . structure_object_principal
    (58) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (59) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (53) special_function -> . arrow_function
    (54) special_function -> . anonymous_functions
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (63) structure_array_principal -> . indexed_array
    (64) structure_array_principal -> . associative_array
    (74) structure_matrix_principal -> . matrix_firstform
    (75) structure_matrix_principal -> . matrix_secondform
    (76) structure_matrix_principal -> . access_element_matrix
    (77) structure_matrix_principal -> . modify_element_matrix
    (78) structure_matrix_principal -> . add_element_matrix
    (88) structure_object_principal -> . object_creation
    (89) structure_object_principal -> . access_method_object
    (55) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (56) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (65) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON
    (66) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON
    (67) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON
    (79) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (80) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (85) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (90) object_creation -> . NEW class_name SEMICOLON
    (92) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    INTEGER         shift and go to state 69
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    IDENTIFIER      shift and go to state 70
    FEGTS           shift and go to state 73
    READLINE        shift and go to state 74
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43
    FN              shift and go to state 78
    FUNCTION        shift and go to state 79
    VARIABLE        shift and go to state 62
    LEFT_PAREN      shift and go to state 71
    ARRAY           shift and go to state 29
    LEFT_BRACKET    shift and go to state 30
    NEW             shift and go to state 31

    values                         shift and go to state 63
    function_invocation            shift and go to state 64
    expression                     shift and go to state 65
    types_structure                shift and go to state 66
    input                          shift and go to state 67
    special_function               shift and go to state 68
    boolean                        shift and go to state 41
    term                           shift and go to state 72
    structure_array_principal      shift and go to state 11
    structure_matrix_principal     shift and go to state 12
    structure_object_principal     shift and go to state 13
    arrow_function                 shift and go to state 75
    anonymous_functions            shift and go to state 76
    factor                         shift and go to state 77
    indexed_array                  shift and go to state 18
    associative_array              shift and go to state 19
    matrix_firstform               shift and go to state 20
    matrix_secondform              shift and go to state 21
    access_element_matrix          shift and go to state 22
    modify_element_matrix          shift and go to state 23
    add_element_matrix             shift and go to state 24
    object_creation                shift and go to state 25
    access_method_object           shift and go to state 26

state 47

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 80
    RIGHT_BRACKET   shift and go to state 81


state 48

    (92) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 82


state 49

    (52) function_assignment -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 83


state 50

    (41) const_syntax -> CONST IDENTIFIER . EQUALS values SEMICOLON

    EQUALS          shift and go to state 84


state 51

    (42) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN SEMICOLON

    STRING          shift and go to state 85


state 52

    (65) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN SEMICOLON
    (66) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN SEMICOLON
    (79) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (72) values_array_indexed -> . values
    (73) values_array_indexed -> . values COMMA values_array_indexed
    (68) structure_array -> . key EQUALS GREATER_THAN values
    (69) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (83) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (84) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (70) key -> . INTEGER
    (71) key -> . STRING
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    ARRAY           shift and go to state 86
    INTEGER         shift and go to state 92
    STRING          shift and go to state 93
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values_array_indexed           shift and go to state 87
    structure_array                shift and go to state 88
    structure_matrix_first         shift and go to state 89
    values                         shift and go to state 90
    key                            shift and go to state 91
    boolean                        shift and go to state 41

state 53

    (67) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET SEMICOLON
    (68) structure_array -> . key EQUALS GREATER_THAN values
    (69) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (70) key -> . INTEGER
    (71) key -> . STRING

    INTEGER         shift and go to state 95
    STRING          shift and go to state 96

    structure_array                shift and go to state 94
    key                            shift and go to state 91

state 54

    (81) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (82) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 97
    boolean                        shift and go to state 41

state 55

    (80) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 98


state 56

    (90) object_creation -> NEW class_name . SEMICOLON

    SEMICOLON       shift and go to state 99


state 57

    (91) class_name -> IDENTIFIER .

    SEMICOLON       reduce using rule 91 (class_name -> IDENTIFIER .)


state 58

    (6) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 100


state 59

    (11) printable_values -> values COMMA . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 36
    printable_values               shift and go to state 101
    boolean                        shift and go to state 41

state 60

    (13) printable_values -> VARIABLE COMMA . printable_values
    (10) printable_values -> . values
    (11) printable_values -> . values COMMA printable_values
    (12) printable_values -> . VARIABLE
    (13) printable_values -> . VARIABLE COMMA printable_values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 37
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    printable_values               shift and go to state 102
    values                         shift and go to state 36
    boolean                        shift and go to state 41

state 61

    (7) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 103


state 62

    (29) factor -> VARIABLE .
    (85) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (87) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (92) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 29 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 29 (factor -> VARIABLE .)
    MODULE          reduce using rule 29 (factor -> VARIABLE .)
    POW             reduce using rule 29 (factor -> VARIABLE .)
    PLUS            reduce using rule 29 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 47
    MINUS           shift and go to state 48

  ! MINUS           [ reduce using rule 29 (factor -> VARIABLE .) ]


state 63

    (34) variable_assignment -> VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 104


state 64

    (35) variable_assignment -> VARIABLE EQUALS function_invocation . SEMICOLON

    SEMICOLON       shift and go to state 105


state 65

    (36) variable_assignment -> VARIABLE EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 106


state 66

    (37) variable_assignment -> VARIABLE EQUALS types_structure .

    ECHO            reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    PRINT           reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    VARIABLE        reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    FUNCTION        reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    CONST           reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    DEFINE          reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    ARRAY           reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    LEFT_BRACKET    reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    NEW             reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)
    $end            reduce using rule 37 (variable_assignment -> VARIABLE EQUALS types_structure .)


state 67

    (38) variable_assignment -> VARIABLE EQUALS input . SEMICOLON

    SEMICOLON       shift and go to state 107


state 68

    (51) function_assignment -> VARIABLE EQUALS special_function . SEMICOLON

    SEMICOLON       shift and go to state 108


state 69

    (14) values -> INTEGER .
    (28) factor -> INTEGER .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 14 (values -> INTEGER .)
    SEMICOLON       reduce using rule 14 (values -> INTEGER .)
    MULTIPLY        reduce using rule 28 (factor -> INTEGER .)
    DIVIDE          reduce using rule 28 (factor -> INTEGER .)
    MODULE          reduce using rule 28 (factor -> INTEGER .)
    POW             reduce using rule 28 (factor -> INTEGER .)
    PLUS            reduce using rule 28 (factor -> INTEGER .)
    MINUS           reduce using rule 28 (factor -> INTEGER .)

  ! SEMICOLON       [ reduce using rule 28 (factor -> INTEGER .) ]


state 70

    (43) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 109


state 71

    (30) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    expression                     shift and go to state 110
    term                           shift and go to state 72
    factor                         shift and go to state 77

state 72

    (20) expression -> term .
    (21) expression -> term . PLUS expression
    (22) expression -> term . MINUS expression

    SEMICOLON       reduce using rule 20 (expression -> term .)
    RIGHT_PAREN     reduce using rule 20 (expression -> term .)
    PLUS            shift and go to state 113
    MINUS           shift and go to state 114


state 73

    (58) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 115


state 74

    (59) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 116


state 75

    (53) special_function -> arrow_function .

    SEMICOLON       reduce using rule 53 (special_function -> arrow_function .)


state 76

    (54) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 54 (special_function -> anonymous_functions .)


state 77

    (23) term -> factor .
    (24) term -> factor . MULTIPLY term
    (25) term -> factor . DIVIDE term
    (26) term -> factor . MODULE term
    (27) term -> factor . POW term

    PLUS            reduce using rule 23 (term -> factor .)
    MINUS           reduce using rule 23 (term -> factor .)
    SEMICOLON       reduce using rule 23 (term -> factor .)
    RIGHT_PAREN     reduce using rule 23 (term -> factor .)
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 118
    MODULE          shift and go to state 119
    POW             shift and go to state 120


state 78

    (55) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 121


state 79

    (56) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 122


state 80

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 123


state 81

    (87) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 124


state 82

    (92) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 125


state 83

    (52) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (44) params -> . real_params
    (45) params -> . empty
    (46) real_params -> . VARIABLE
    (47) real_params -> . values
    (48) real_params -> . real_params COMMA VARIABLE
    (49) real_params -> . real_params COMMA values
    (50) empty -> .
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 129
    RIGHT_PAREN     reduce using rule 50 (empty -> .)
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    params                         shift and go to state 126
    real_params                    shift and go to state 127
    empty                          shift and go to state 128
    values                         shift and go to state 130
    boolean                        shift and go to state 41

state 84

    (41) const_syntax -> CONST IDENTIFIER EQUALS . values SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 131
    boolean                        shift and go to state 41

state 85

    (42) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN SEMICOLON

    COMMA           shift and go to state 132


state 86

    (83) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (84) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 133


state 87

    (65) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 134


state 88

    (66) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 135


state 89

    (79) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 136


state 90

    (72) values_array_indexed -> values .
    (73) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 72 (values_array_indexed -> values .)
    COMMA           shift and go to state 137


state 91

    (68) structure_array -> key . EQUALS GREATER_THAN values
    (69) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 138


state 92

    (14) values -> INTEGER .
    (70) key -> INTEGER .

    COMMA           reduce using rule 14 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 14 (values -> INTEGER .)
    EQUALS          reduce using rule 70 (key -> INTEGER .)


state 93

    (15) values -> STRING .
    (71) key -> STRING .

    COMMA           reduce using rule 15 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 15 (values -> STRING .)
    EQUALS          reduce using rule 71 (key -> STRING .)


state 94

    (67) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 139


state 95

    (70) key -> INTEGER .

    EQUALS          reduce using rule 70 (key -> INTEGER .)


state 96

    (71) key -> STRING .

    EQUALS          reduce using rule 71 (key -> STRING .)


state 97

    (81) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (82) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 140


state 98

    (80) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 141


state 99

    (90) object_creation -> NEW class_name SEMICOLON .

    ECHO            reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    PRINT           reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    VARIABLE        reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    FUNCTION        reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    CONST           reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    DEFINE          reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    ARRAY           reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    LEFT_BRACKET    reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    NEW             reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)
    $end            reduce using rule 90 (object_creation -> NEW class_name SEMICOLON .)


state 100

    (6) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 6 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 101

    (11) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 11 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 11 (printable_values -> values COMMA printable_values .)


state 102

    (13) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 13 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 13 (printable_values -> VARIABLE COMMA printable_values .)


state 103

    (7) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 7 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 104

    (34) variable_assignment -> VARIABLE EQUALS values SEMICOLON .

    ECHO            reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    PRINT           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    NEW             reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)
    $end            reduce using rule 34 (variable_assignment -> VARIABLE EQUALS values SEMICOLON .)


state 105

    (35) variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .

    ECHO            reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    PRINT           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    VARIABLE        reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    FUNCTION        reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    CONST           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    DEFINE          reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    ARRAY           reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    LEFT_BRACKET    reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    NEW             reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)
    $end            reduce using rule 35 (variable_assignment -> VARIABLE EQUALS function_invocation SEMICOLON .)


state 106

    (36) variable_assignment -> VARIABLE EQUALS expression SEMICOLON .

    ECHO            reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    VARIABLE        reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    FUNCTION        reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    CONST           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    DEFINE          reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    ARRAY           reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    LEFT_BRACKET    reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    NEW             reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)
    $end            reduce using rule 36 (variable_assignment -> VARIABLE EQUALS expression SEMICOLON .)


state 107

    (38) variable_assignment -> VARIABLE EQUALS input SEMICOLON .

    ECHO            reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    PRINT           reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    VARIABLE        reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    FUNCTION        reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    CONST           reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    DEFINE          reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    ARRAY           reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    LEFT_BRACKET    reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    NEW             reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)
    $end            reduce using rule 38 (variable_assignment -> VARIABLE EQUALS input SEMICOLON .)


state 108

    (51) function_assignment -> VARIABLE EQUALS special_function SEMICOLON .

    ECHO            reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    PRINT           reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    VARIABLE        reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    FUNCTION        reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    CONST           reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    DEFINE          reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    ARRAY           reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    LEFT_BRACKET    reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    NEW             reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)
    $end            reduce using rule 51 (function_assignment -> VARIABLE EQUALS special_function SEMICOLON .)


state 109

    (43) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (44) params -> . real_params
    (45) params -> . empty
    (46) real_params -> . VARIABLE
    (47) real_params -> . values
    (48) real_params -> . real_params COMMA VARIABLE
    (49) real_params -> . real_params COMMA values
    (50) empty -> .
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 129
    RIGHT_PAREN     reduce using rule 50 (empty -> .)
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    params                         shift and go to state 142
    real_params                    shift and go to state 127
    empty                          shift and go to state 128
    values                         shift and go to state 130
    boolean                        shift and go to state 41

state 110

    (30) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 143


state 111

    (28) factor -> INTEGER .

    MULTIPLY        reduce using rule 28 (factor -> INTEGER .)
    DIVIDE          reduce using rule 28 (factor -> INTEGER .)
    MODULE          reduce using rule 28 (factor -> INTEGER .)
    POW             reduce using rule 28 (factor -> INTEGER .)
    PLUS            reduce using rule 28 (factor -> INTEGER .)
    MINUS           reduce using rule 28 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 28 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 28 (factor -> INTEGER .)


state 112

    (29) factor -> VARIABLE .

    MULTIPLY        reduce using rule 29 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 29 (factor -> VARIABLE .)
    MODULE          reduce using rule 29 (factor -> VARIABLE .)
    POW             reduce using rule 29 (factor -> VARIABLE .)
    PLUS            reduce using rule 29 (factor -> VARIABLE .)
    MINUS           reduce using rule 29 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 29 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (factor -> VARIABLE .)


state 113

    (21) expression -> term PLUS . expression
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    term                           shift and go to state 72
    expression                     shift and go to state 144
    factor                         shift and go to state 77

state 114

    (22) expression -> term MINUS . expression
    (20) expression -> . term
    (21) expression -> . term PLUS expression
    (22) expression -> . term MINUS expression
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    term                           shift and go to state 72
    expression                     shift and go to state 145
    factor                         shift and go to state 77

state 115

    (58) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 146


state 116

    (59) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 147


state 117

    (24) term -> factor MULTIPLY . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    factor                         shift and go to state 77
    term                           shift and go to state 148

state 118

    (25) term -> factor DIVIDE . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    factor                         shift and go to state 77
    term                           shift and go to state 149

state 119

    (26) term -> factor MODULE . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    factor                         shift and go to state 77
    term                           shift and go to state 150

state 120

    (27) term -> factor POW . term
    (23) term -> . factor
    (24) term -> . factor MULTIPLY term
    (25) term -> . factor DIVIDE term
    (26) term -> . factor MODULE term
    (27) term -> . factor POW term
    (28) factor -> . INTEGER
    (29) factor -> . VARIABLE
    (30) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 111
    VARIABLE        shift and go to state 112
    LEFT_PAREN      shift and go to state 71

    factor                         shift and go to state 77
    term                           shift and go to state 151

state 121

    (55) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (44) params -> . real_params
    (45) params -> . empty
    (46) real_params -> . VARIABLE
    (47) real_params -> . values
    (48) real_params -> . real_params COMMA VARIABLE
    (49) real_params -> . real_params COMMA values
    (50) empty -> .
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 129
    RIGHT_PAREN     reduce using rule 50 (empty -> .)
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    params                         shift and go to state 152
    real_params                    shift and go to state 127
    empty                          shift and go to state 128
    values                         shift and go to state 130
    boolean                        shift and go to state 41

state 122

    (56) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (44) params -> . real_params
    (45) params -> . empty
    (46) real_params -> . VARIABLE
    (47) real_params -> . values
    (48) real_params -> . real_params COMMA VARIABLE
    (49) real_params -> . real_params COMMA values
    (50) empty -> .
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 129
    RIGHT_PAREN     reduce using rule 50 (empty -> .)
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    params                         shift and go to state 153
    real_params                    shift and go to state 127
    empty                          shift and go to state 128
    values                         shift and go to state 130
    boolean                        shift and go to state 41

state 123

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 154


state 124

    (87) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (65) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON

    ARRAY           shift and go to state 156

    indexed_array                  shift and go to state 155

state 125

    (92) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . LEFT_PAREN RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 157


state 126

    (52) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 158


state 127

    (44) params -> real_params .
    (48) real_params -> real_params . COMMA VARIABLE
    (49) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 44 (params -> real_params .)
    COMMA           shift and go to state 159


state 128

    (45) params -> empty .

    RIGHT_PAREN     reduce using rule 45 (params -> empty .)


state 129

    (46) real_params -> VARIABLE .

    COMMA           reduce using rule 46 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 46 (real_params -> VARIABLE .)


state 130

    (47) real_params -> values .

    COMMA           reduce using rule 47 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 47 (real_params -> values .)


state 131

    (41) const_syntax -> CONST IDENTIFIER EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 160


state 132

    (42) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 161
    boolean                        shift and go to state 41

state 133

    (83) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (84) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 162
    boolean                        shift and go to state 41

state 134

    (65) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 163


state 135

    (66) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 136

    (79) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 165


state 137

    (73) values_array_indexed -> values COMMA . values_array_indexed
    (72) values_array_indexed -> . values
    (73) values_array_indexed -> . values COMMA values_array_indexed
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 90
    values_array_indexed           shift and go to state 166
    boolean                        shift and go to state 41

state 138

    (68) structure_array -> key EQUALS . GREATER_THAN values
    (69) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 167


state 139

    (67) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 168


state 140

    (81) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (82) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 81 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 169


state 141

    (80) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 80 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 142

    (43) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 170


state 143

    (30) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 30 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 144

    (21) expression -> term PLUS expression .

    SEMICOLON       reduce using rule 21 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 21 (expression -> term PLUS expression .)


state 145

    (22) expression -> term MINUS expression .

    SEMICOLON       reduce using rule 22 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 22 (expression -> term MINUS expression .)


state 146

    (58) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 171


state 147

    (59) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 172


state 148

    (24) term -> factor MULTIPLY term .

    PLUS            reduce using rule 24 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 24 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 24 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 24 (term -> factor MULTIPLY term .)


state 149

    (25) term -> factor DIVIDE term .

    PLUS            reduce using rule 25 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 25 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 25 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 25 (term -> factor DIVIDE term .)


state 150

    (26) term -> factor MODULE term .

    PLUS            reduce using rule 26 (term -> factor MODULE term .)
    MINUS           reduce using rule 26 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 26 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 26 (term -> factor MODULE term .)


state 151

    (27) term -> factor POW term .

    PLUS            reduce using rule 27 (term -> factor POW term .)
    MINUS           reduce using rule 27 (term -> factor POW term .)
    SEMICOLON       reduce using rule 27 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 27 (term -> factor POW term .)


state 152

    (55) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 173


state 153

    (56) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 174


state 154

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 175


state 155

    (87) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 87 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 156

    (65) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 176


state 157

    (92) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 177


state 158

    (52) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (57) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 179

    codeblock                      shift and go to state 178

state 159

    (48) real_params -> real_params COMMA . VARIABLE
    (49) real_params -> real_params COMMA . values
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    VARIABLE        shift and go to state 180
    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 181
    boolean                        shift and go to state 41

state 160

    (41) const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .

    ECHO            reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    PRINT           reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    CONST           reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    NEW             reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)
    $end            reduce using rule 41 (const_syntax -> CONST IDENTIFIER EQUALS values SEMICOLON .)


state 161

    (42) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 182


state 162

    (83) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (84) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 183


state 163

    (65) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 65 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN SEMICOLON .)


state 164

    (66) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 66 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN SEMICOLON .)


state 165

    (79) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 79 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 166

    (73) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 73 (values_array_indexed -> values COMMA values_array_indexed .)


state 167

    (68) structure_array -> key EQUALS GREATER_THAN . values
    (69) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 184
    boolean                        shift and go to state 41

state 168

    (67) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 67 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET SEMICOLON .)


state 169

    (82) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (81) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (82) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 54

    structure_matrix_second        shift and go to state 185

state 170

    (43) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 186


state 171

    (58) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 58 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 172

    (59) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 59 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 173

    (55) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 187


state 174

    (56) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (57) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 179

    codeblock                      shift and go to state 188

state 175

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 189


state 176

    (65) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN SEMICOLON
    (72) values_array_indexed -> . values
    (73) values_array_indexed -> . values COMMA values_array_indexed
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values_array_indexed           shift and go to state 87
    values                         shift and go to state 90
    boolean                        shift and go to state 41

state 177

    (92) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 190


state 178

    (52) function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 52 (function_assignment -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 179

    (57) codeblock -> LEFT_BRACE . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 191


state 180

    (48) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 48 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 48 (real_params -> real_params COMMA VARIABLE .)


state 181

    (49) real_params -> real_params COMMA values .

    COMMA           reduce using rule 49 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 49 (real_params -> real_params COMMA values .)


state 182

    (42) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 183

    (83) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (84) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 83 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 193


state 184

    (68) structure_array -> key EQUALS GREATER_THAN values .
    (69) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 68 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 68 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 194


state 185

    (82) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 82 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 186

    (43) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 43 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 187

    (55) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 195


state 188

    (56) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 56 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 189

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 196
    EQUALS          shift and go to state 197


state 190

    (92) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 92 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)


state 191

    (57) codeblock -> LEFT_BRACE RIGHT_BRACE .

    ECHO            reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    VARIABLE        reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    CONST           reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DEFINE          reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    ARRAY           reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    NEW             reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    $end            reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 57 (codeblock -> LEFT_BRACE RIGHT_BRACE .)


state 192

    (42) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 42 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN SEMICOLON .)


state 193

    (84) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (83) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (84) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 86

    structure_matrix_first         shift and go to state 198

state 194

    (69) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (68) structure_array -> . key EQUALS GREATER_THAN values
    (69) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (70) key -> . INTEGER
    (71) key -> . STRING

    INTEGER         shift and go to state 95
    STRING          shift and go to state 96

    key                            shift and go to state 91
    structure_array                shift and go to state 199

state 195

    (55) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (57) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 179

    codeblock                      shift and go to state 200

state 196

    (85) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 85 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 197

    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (14) values -> . INTEGER
    (15) values -> . STRING
    (16) values -> . FLOAT
    (17) values -> . boolean
    (18) boolean -> . TRUE
    (19) boolean -> . FALSE

    INTEGER         shift and go to state 38
    STRING          shift and go to state 39
    FLOAT           shift and go to state 40
    TRUE            shift and go to state 42
    FALSE           shift and go to state 43

    values                         shift and go to state 201
    boolean                        shift and go to state 41

state 198

    (84) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 84 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 199

    (69) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 69 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 69 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 200

    (55) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 55 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 201

    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 202


state 202

    (86) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 86 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 62 resolved as shift
WARNING: reduce/reduce conflict in state 69 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 69
