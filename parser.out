Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AS
    BIT_AND
    BIT_NOT
    BIT_OR
    BIT_XOR
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    COLON
    COMMENT
    CONCATENATION
    CONTINUE
    DECLARE
    DEFAULT
    DIE
    DO
    EMPTY
    ENDDECLARE
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    ERROR_CONTROL
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FOR
    FOREACH
    GLOBAL
    GOTO
    HALT_COMPILER
    IMPLEMENTS
    INCLUDE
    INCLUDE_ONCE
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LIST
    MATCH
    NAMESPACE
    PRIVATE
    PROTECTED
    PUBLIC
    REQUIRE
    REQUIRE_ONCE
    SHIF_LEFT
    SHIF_RIGHT
    STATIC
    STRING_CONCATENATION
    SWITCH
    THROW
    TRAIT
    TRY
    UNSET
    USE
    VAR
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> control_structures
Rule 7     sentence -> function_declaration
Rule 8     control_structures -> if_statement
Rule 9     control_structures -> while_statement
Rule 10    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 11    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 12    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 13    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 14    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    body_statement -> sentence
Rule 19    body_statement -> sentence RETURN values SEMICOLON
Rule 20    body_statement -> sentence RETURN SEMICOLON
Rule 21    body_statement -> sentence BREAK SEMICOLON
Rule 22    body_statement -> sentence body_statement
Rule 23    conditional -> boolean_expression
Rule 24    conditional -> boolean_expression logic_operator boolean_expression
Rule 25    logic_operator -> LOGIC_AND
Rule 26    logic_operator -> LOGIC_OR
Rule 27    logic_operator -> LOGIC_XOR
Rule 28    boolean_expression -> comparation
Rule 29    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 30    boolean_expression -> LOGIC_NOT conditional
Rule 31    comparation -> values comparator_operator values
Rule 32    comparation -> values comparator_operator expression
Rule 33    comparation -> expression comparator_operator expression
Rule 34    comparator_operator -> EQUALS_EQUALS
Rule 35    comparator_operator -> IDENTICAL
Rule 36    comparator_operator -> NOT_EQUALS
Rule 37    comparator_operator -> NOT_IDENTICAL
Rule 38    comparator_operator -> SMALL_THAN
Rule 39    comparator_operator -> GREATER_THAN
Rule 40    comparator_operator -> SMALL_EQUALS_TO
Rule 41    comparator_operator -> GREATER_EQUALS_TO
Rule 42    comparator_operator -> SPACECRAFT
Rule 43    comparator_operator -> NULL_FUSION
Rule 44    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 45    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 46    print_statement -> ECHO printable_values
Rule 47    print_statement -> PRINT printable_values
Rule 48    printable_values -> values
Rule 49    printable_values -> values COMMA printable_values
Rule 50    printable_values -> VARIABLE
Rule 51    printable_values -> VARIABLE COMMA printable_values
Rule 52    printable_values -> conditional
Rule 53    printable_values -> conditional COMMA printable_values
Rule 54    values -> INTEGER
Rule 55    values -> STRING
Rule 56    values -> FLOAT
Rule 57    values -> boolean
Rule 58    boolean -> TRUE
Rule 59    boolean -> FALSE
Rule 60    expression -> term
Rule 61    expression -> term PLUS expression
Rule 62    expression -> term MINUS expression
Rule 63    term -> factor
Rule 64    term -> factor MULTIPLY term
Rule 65    term -> factor DIVIDE term
Rule 66    term -> factor MODULE term
Rule 67    term -> factor POW term
Rule 68    factor -> INTEGER
Rule 69    factor -> VARIABLE
Rule 70    factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 71    assignment -> variable_assignment
Rule 72    assignment -> constant_assignment
Rule 73    variable_assignment -> VARIABLE assignment_operator values
Rule 74    variable_assignment -> VARIABLE assignment_operator expression
Rule 75    variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 76    variable_assignment -> VARIABLE assignment_operator types_structure
Rule 77    variable_assignment -> VARIABLE assignment_operator input
Rule 78    variable_assignment -> VARIABLE assignment_operator special_function
Rule 79    variable_assignment -> VARIABLE INCREASE
Rule 80    variable_assignment -> VARIABLE DECREMENT
Rule 81    variable_assignment -> INCREASE VARIABLE
Rule 82    variable_assignment -> DECREMENT VARIABLE
Rule 83    assignment_operator -> EQUALS
Rule 84    assignment_operator -> PLUS_EQUALS
Rule 85    constant_assignment -> const_syntax
Rule 86    constant_assignment -> define_syntax
Rule 87    const_syntax -> CONST IDENTIFIER EQUALS values
Rule 88    define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 89    function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 90    params -> real_params
Rule 91    params -> empty
Rule 92    real_params -> VARIABLE
Rule 93    real_params -> values
Rule 94    real_params -> real_params COMMA VARIABLE
Rule 95    real_params -> real_params COMMA values
Rule 96    empty -> <empty>
Rule 97    function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 98    special_function -> arrow_function
Rule 99    special_function -> anonymous_functions
Rule 100   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 101   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 102   codeblock -> LEFT_BRACE RIGHT_BRACE
Rule 103   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 104   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 105   types_structure -> structure_array_principal
Rule 106   types_structure -> structure_matrix_principal
Rule 107   types_structure -> structure_object_principal
Rule 108   structure_array_principal -> indexed_array
Rule 109   structure_array_principal -> associative_array
Rule 110   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 111   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 112   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 113   structure_array -> key EQUALS GREATER_THAN values
Rule 114   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 115   key -> INTEGER
Rule 116   key -> STRING
Rule 117   values_array_indexed -> values
Rule 118   values_array_indexed -> values COMMA values_array_indexed
Rule 119   structure_matrix_principal -> matrix_firstform
Rule 120   structure_matrix_principal -> matrix_secondform
Rule 121   structure_matrix_principal -> access_element_matrix
Rule 122   structure_matrix_principal -> modify_element_matrix
Rule 123   structure_matrix_principal -> add_element_matrix
Rule 124   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 125   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 126   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 127   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 128   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 129   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 130   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
Rule 131   modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
Rule 132   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 133   structure_object_principal -> object_creation
Rule 134   structure_object_principal -> access_method_object
Rule 135   object_creation -> NEW class_name SEMICOLON
Rule 136   class_name -> IDENTIFIER
Rule 137   access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

Terminals, with rules where they appear

ABSTRACT             : 
ARRAY                : 110 111 112 124 128 129
AS                   : 
BIT_AND              : 
BIT_NOT              : 
BIT_OR               : 
BIT_XOR              : 
BREAK                : 21
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
COLON                : 
COMMA                : 49 51 53 88 94 95 114 118 127 129
COMMENT              : 
CONCATENATION        : 
CONST                : 87
CONTINUE             : 
DECLARE              : 
DECREMENT            : 80 82
DEFAULT              : 
DEFINE               : 88
DIE                  : 
DIVIDE               : 65
DO                   : 
ECHO                 : 44 46
ELSE                 : 17
ELSEIF               : 14 15 16
EMPTY                : 
ENDDECLARE           : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUALS               : 83 87 100 113 114 131 132
EQUALS_EQUALS        : 34
ERROR_CONTROL        : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FALSE                : 59
FEGTS                : 103
FINAL                : 
FINALLY              : 
FLOAT                : 56
FN                   : 100
FOR                  : 
FOREACH              : 
FUNCTION             : 97 101
GLOBAL               : 
GOTO                 : 
GREATER_EQUALS_TO    : 41
GREATER_THAN         : 39 100 113 114 137
HALT_COMPILER        : 
IDENTICAL            : 35
IDENTIFIER           : 87 89 97 136 137
IF                   : 11 12 13
IMPLEMENTS           : 
INCLUDE              : 
INCLUDE_ONCE         : 
INCREASE             : 79 81
INSTANCEOF           : 
INSTEADOF            : 
INTEGER              : 54 68 115 130 130 131 131
INTERFACE            : 
ISSET                : 
LEFT_BRACE           : 10 11 12 13 14 15 16 17 102
LEFT_BRACKET         : 112 125 126 127 130 130 131 131 132
LEFT_PAREN           : 10 11 12 13 14 15 16 29 44 45 70 88 89 97 100 101 103 104 110 111 124 128 129 137
LIST                 : 
LOGIC_AND            : 25
LOGIC_NOT            : 30
LOGIC_OR             : 26
LOGIC_XOR            : 27
MATCH                : 
MINUS                : 62 137
MODULE               : 66
MULTIPLY             : 64
NAMESPACE            : 
NEW                  : 135
NOT_EQUALS           : 36
NOT_IDENTICAL        : 37
NULL_FUSION          : 43
PLUS                 : 61
PLUS_EQUALS          : 84
POW                  : 67
PRINT                : 45 47
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
READLINE             : 104
REQUIRE              : 
REQUIRE_ONCE         : 
RETURN               : 19 20
RIGHT_BRACE          : 10 11 12 13 14 15 16 17 102
RIGHT_BRACKET        : 112 125 126 127 130 130 131 131 132
RIGHT_PAREN          : 10 11 12 13 14 15 16 29 44 45 70 88 89 97 100 101 103 104 110 111 124 128 129 137
SEMICOLON            : 3 4 19 20 21 89 124 125 130 131 135 137
SHIF_LEFT            : 
SHIF_RIGHT           : 
SMALL_EQUALS_TO      : 40
SMALL_THAN           : 38
SPACECRAFT           : 42
STATIC               : 
STDIN                : 103
STRING               : 55 88 104 116
STRING_CONCATENATION : 
SWITCH               : 
THROW                : 
TRAIT                : 
TRUE                 : 58
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 50 51 69 73 74 75 76 77 78 79 80 81 82 92 94 130 131 132 137
WHILE                : 10
YIELD                : 
error                : 

Nonterminals, with rules where they appear

access_element_matrix : 121
access_method_object : 134
add_element_matrix   : 123
anonymous_functions  : 99
arrow_function       : 98
assignment           : 4
assignment_operator  : 73 74 75 76 77 78
associative_array    : 109
body_statement       : 10 11 12 13 14 15 16 17 22
boolean              : 57
boolean_expression   : 23 24 24
class_name           : 135
codeblock            : 97 100 101
comparation          : 28
comparator_operator  : 31 32 33
conditional          : 10 11 12 13 14 15 16 29 30 52 53
const_syntax         : 85
constant_assignment  : 72
control_structures   : 6
define_syntax        : 86
else_statement       : 13 16
elseif_statement     : 12 15
empty                : 91
expression           : 32 33 33 61 62 70 74
factor               : 63 64 65 66 67
function_declaration : 7
function_invocation  : 75
if_statement         : 8
indexed_array        : 108 132
input                : 77
key                  : 113 114
logic_operator       : 24
matrix_firstform     : 119
matrix_secondform    : 120
modify_element_matrix : 122
object_creation      : 133
params               : 89 97 100 101
print_statement      : 3
printable_values     : 44 45 46 47 49 51 53
program              : 1 0
real_params          : 90 94 95
sentence             : 1 2 18 19 20 21 22
special_function     : 78
structure_array      : 111 112 114
structure_array_principal : 105
structure_matrix_first : 124 129
structure_matrix_principal : 106
structure_matrix_second : 125 127
structure_object_principal : 107
term                 : 60 61 62 64 65 66 67
types_structure      : 5 76
values               : 19 31 31 32 48 49 73 87 88 93 95 113 114 117 118 126 127 128 129 131
values_array_indexed : 110 118
variable_assignment  : 71
while_statement      : 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    sentence                       shift and go to state 2
    program                        shift and go to state 39
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 40


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 41


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> control_structures .

    ECHO            reduce using rule 6 (sentence -> control_structures .)
    PRINT           reduce using rule 6 (sentence -> control_structures .)
    FUNCTION        reduce using rule 6 (sentence -> control_structures .)
    VARIABLE        reduce using rule 6 (sentence -> control_structures .)
    INCREASE        reduce using rule 6 (sentence -> control_structures .)
    DECREMENT       reduce using rule 6 (sentence -> control_structures .)
    IF              reduce using rule 6 (sentence -> control_structures .)
    WHILE           reduce using rule 6 (sentence -> control_structures .)
    CONST           reduce using rule 6 (sentence -> control_structures .)
    DEFINE          reduce using rule 6 (sentence -> control_structures .)
    ARRAY           reduce using rule 6 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> control_structures .)
    NEW             reduce using rule 6 (sentence -> control_structures .)
    $end            reduce using rule 6 (sentence -> control_structures .)
    RETURN          reduce using rule 6 (sentence -> control_structures .)
    BREAK           reduce using rule 6 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> control_structures .)


state 7

    (7) sentence -> function_declaration .

    ECHO            reduce using rule 7 (sentence -> function_declaration .)
    PRINT           reduce using rule 7 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> function_declaration .)
    INCREASE        reduce using rule 7 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> function_declaration .)
    IF              reduce using rule 7 (sentence -> function_declaration .)
    WHILE           reduce using rule 7 (sentence -> function_declaration .)
    CONST           reduce using rule 7 (sentence -> function_declaration .)
    DEFINE          reduce using rule 7 (sentence -> function_declaration .)
    ARRAY           reduce using rule 7 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> function_declaration .)
    NEW             reduce using rule 7 (sentence -> function_declaration .)
    $end            reduce using rule 7 (sentence -> function_declaration .)
    RETURN          reduce using rule 7 (sentence -> function_declaration .)
    BREAK           reduce using rule 7 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> function_declaration .)


state 8

    (44) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> ECHO . printable_values
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 42
    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LOGIC_NOT       shift and go to state 55

    printable_values               shift and go to state 43
    values                         shift and go to state 44
    conditional                    shift and go to state 46
    boolean                        shift and go to state 50
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 9

    (45) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (47) print_statement -> PRINT . printable_values
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 59
    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LOGIC_NOT       shift and go to state 55

    printable_values               shift and go to state 60
    values                         shift and go to state 44
    conditional                    shift and go to state 46
    boolean                        shift and go to state 50
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 10

    (71) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 71 (assignment -> variable_assignment .)


state 11

    (72) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 72 (assignment -> constant_assignment .)


state 12

    (105) types_structure -> structure_array_principal .

    ECHO            reduce using rule 105 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 105 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 105 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 105 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 105 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 105 (types_structure -> structure_array_principal .)
    IF              reduce using rule 105 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 105 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 105 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 105 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 105 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 105 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 105 (types_structure -> structure_array_principal .)
    $end            reduce using rule 105 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 105 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 105 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 105 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 105 (types_structure -> structure_array_principal .)


state 13

    (106) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 106 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 106 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 106 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 106 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 106 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 106 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 106 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 106 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 106 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 106 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 106 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 106 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 106 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 106 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 106 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 106 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 106 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 106 (types_structure -> structure_matrix_principal .)


state 14

    (107) types_structure -> structure_object_principal .

    ECHO            reduce using rule 107 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 107 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 107 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 107 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 107 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 107 (types_structure -> structure_object_principal .)
    IF              reduce using rule 107 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 107 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 107 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 107 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 107 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 107 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 107 (types_structure -> structure_object_principal .)
    $end            reduce using rule 107 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 107 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 107 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 107 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 107 (types_structure -> structure_object_principal .)


state 15

    (8) control_structures -> if_statement .

    ECHO            reduce using rule 8 (control_structures -> if_statement .)
    PRINT           reduce using rule 8 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 8 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 8 (control_structures -> if_statement .)
    INCREASE        reduce using rule 8 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 8 (control_structures -> if_statement .)
    IF              reduce using rule 8 (control_structures -> if_statement .)
    WHILE           reduce using rule 8 (control_structures -> if_statement .)
    CONST           reduce using rule 8 (control_structures -> if_statement .)
    DEFINE          reduce using rule 8 (control_structures -> if_statement .)
    ARRAY           reduce using rule 8 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 8 (control_structures -> if_statement .)
    NEW             reduce using rule 8 (control_structures -> if_statement .)
    $end            reduce using rule 8 (control_structures -> if_statement .)
    RETURN          reduce using rule 8 (control_structures -> if_statement .)
    BREAK           reduce using rule 8 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 8 (control_structures -> if_statement .)


state 16

    (9) control_structures -> while_statement .

    ECHO            reduce using rule 9 (control_structures -> while_statement .)
    PRINT           reduce using rule 9 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 9 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 9 (control_structures -> while_statement .)
    INCREASE        reduce using rule 9 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 9 (control_structures -> while_statement .)
    IF              reduce using rule 9 (control_structures -> while_statement .)
    WHILE           reduce using rule 9 (control_structures -> while_statement .)
    CONST           reduce using rule 9 (control_structures -> while_statement .)
    DEFINE          reduce using rule 9 (control_structures -> while_statement .)
    ARRAY           reduce using rule 9 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 9 (control_structures -> while_statement .)
    NEW             reduce using rule 9 (control_structures -> while_statement .)
    $end            reduce using rule 9 (control_structures -> while_statement .)
    RETURN          reduce using rule 9 (control_structures -> while_statement .)
    BREAK           reduce using rule 9 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 9 (control_structures -> while_statement .)


state 17

    (97) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 61


state 18

    (73) variable_assignment -> VARIABLE . assignment_operator values
    (74) variable_assignment -> VARIABLE . assignment_operator expression
    (75) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (76) variable_assignment -> VARIABLE . assignment_operator types_structure
    (77) variable_assignment -> VARIABLE . assignment_operator input
    (78) variable_assignment -> VARIABLE . assignment_operator special_function
    (79) variable_assignment -> VARIABLE . INCREASE
    (80) variable_assignment -> VARIABLE . DECREMENT
    (130) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON
    (83) assignment_operator -> . EQUALS
    (84) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 63
    DECREMENT       shift and go to state 64
    LEFT_BRACKET    shift and go to state 65
    MINUS           shift and go to state 67
    EQUALS          shift and go to state 66
    PLUS_EQUALS     shift and go to state 68

    assignment_operator            shift and go to state 62

state 19

    (81) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 69


state 20

    (82) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 70


state 21

    (85) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 85 (constant_assignment -> const_syntax .)


state 22

    (86) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 86 (constant_assignment -> define_syntax .)


state 23

    (108) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 108 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 108 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 108 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 108 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 108 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 108 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 108 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 108 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 108 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 108 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 108 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 108 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 108 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 108 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 108 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 108 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 108 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 108 (structure_array_principal -> indexed_array .)


state 24

    (109) structure_array_principal -> associative_array .

    ECHO            reduce using rule 109 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 109 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 109 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 109 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 109 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 109 (structure_array_principal -> associative_array .)
    IF              reduce using rule 109 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 109 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 109 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 109 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 109 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 109 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 109 (structure_array_principal -> associative_array .)
    $end            reduce using rule 109 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 109 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 109 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 109 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 109 (structure_array_principal -> associative_array .)


state 25

    (119) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 119 (structure_matrix_principal -> matrix_firstform .)


state 26

    (120) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 120 (structure_matrix_principal -> matrix_secondform .)


state 27

    (121) structure_matrix_principal -> access_element_matrix .

    ECHO            reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    PRINT           reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    FUNCTION        reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    VARIABLE        reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    INCREASE        reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    DECREMENT       reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    IF              reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    WHILE           reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    CONST           reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    DEFINE          reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    ARRAY           reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    LEFT_BRACKET    reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    NEW             reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    $end            reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    SEMICOLON       reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    RETURN          reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    BREAK           reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)
    RIGHT_BRACE     reduce using rule 121 (structure_matrix_principal -> access_element_matrix .)


state 28

    (122) structure_matrix_principal -> modify_element_matrix .

    ECHO            reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    PRINT           reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    FUNCTION        reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    VARIABLE        reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    INCREASE        reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    DECREMENT       reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    IF              reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    WHILE           reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    CONST           reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    DEFINE          reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    ARRAY           reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    LEFT_BRACKET    reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    NEW             reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    $end            reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    SEMICOLON       reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    RETURN          reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    BREAK           reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)
    RIGHT_BRACE     reduce using rule 122 (structure_matrix_principal -> modify_element_matrix .)


state 29

    (123) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 123 (structure_matrix_principal -> add_element_matrix .)


state 30

    (133) structure_object_principal -> object_creation .

    ECHO            reduce using rule 133 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 133 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 133 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 133 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 133 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 133 (structure_object_principal -> object_creation .)
    IF              reduce using rule 133 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 133 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 133 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 133 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 133 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 133 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 133 (structure_object_principal -> object_creation .)
    $end            reduce using rule 133 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 133 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 133 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 133 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 133 (structure_object_principal -> object_creation .)


state 31

    (134) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 134 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 134 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 134 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 134 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 134 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 134 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 134 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 134 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 134 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 134 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 134 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 134 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 134 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 134 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 134 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 134 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 134 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 134 (structure_object_principal -> access_method_object .)


state 32

    (11) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 71


state 33

    (10) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 72


state 34

    (87) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 73


state 35

    (88) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 74


state 36

    (110) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 75
    LEFT_BRACKET    shift and go to state 76


state 37

    (125) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (126) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (127) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 77

    structure_matrix_second        shift and go to state 78

state 38

    (135) object_creation -> NEW . class_name SEMICOLON
    (136) class_name -> . IDENTIFIER

    IDENTIFIER      shift and go to state 80

    class_name                     shift and go to state 79

state 39

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 40

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 41

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 42

    (44) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (29) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (70) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    printable_values               shift and go to state 82
    conditional                    shift and go to state 83
    expression                     shift and go to state 84
    values                         shift and go to state 44
    boolean_expression             shift and go to state 51
    term                           shift and go to state 57
    boolean                        shift and go to state 50
    comparation                    shift and go to state 54
    factor                         shift and go to state 58

state 43

    (46) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 46 (print_statement -> ECHO printable_values .)


state 44

    (48) printable_values -> values .
    (49) printable_values -> values . COMMA printable_values
    (31) comparation -> values . comparator_operator values
    (32) comparation -> values . comparator_operator expression
    (34) comparator_operator -> . EQUALS_EQUALS
    (35) comparator_operator -> . IDENTICAL
    (36) comparator_operator -> . NOT_EQUALS
    (37) comparator_operator -> . NOT_IDENTICAL
    (38) comparator_operator -> . SMALL_THAN
    (39) comparator_operator -> . GREATER_THAN
    (40) comparator_operator -> . SMALL_EQUALS_TO
    (41) comparator_operator -> . GREATER_EQUALS_TO
    (42) comparator_operator -> . SPACECRAFT
    (43) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 48 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 48 (printable_values -> values .)
    COMMA           shift and go to state 85
    EQUALS_EQUALS   shift and go to state 87
    IDENTICAL       shift and go to state 88
    NOT_EQUALS      shift and go to state 89
    NOT_IDENTICAL   shift and go to state 90
    SMALL_THAN      shift and go to state 91
    GREATER_THAN    shift and go to state 92
    SMALL_EQUALS_TO shift and go to state 93
    GREATER_EQUALS_TO shift and go to state 94
    SPACECRAFT      shift and go to state 95
    NULL_FUSION     shift and go to state 96

    comparator_operator            shift and go to state 86

state 45

    (50) printable_values -> VARIABLE .
    (51) printable_values -> VARIABLE . COMMA printable_values
    (69) factor -> VARIABLE .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 50 (printable_values -> VARIABLE .)
    SEMICOLON       reduce using rule 50 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 50 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 97
    MULTIPLY        reduce using rule 69 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 69 (factor -> VARIABLE .)
    MODULE          reduce using rule 69 (factor -> VARIABLE .)
    POW             reduce using rule 69 (factor -> VARIABLE .)
    PLUS            reduce using rule 69 (factor -> VARIABLE .)
    MINUS           reduce using rule 69 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 69 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 69 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 69 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 69 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 69 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 69 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 69 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 69 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 69 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 69 (factor -> VARIABLE .)

  ! RIGHT_PAREN     [ reduce using rule 69 (factor -> VARIABLE .) ]


state 46

    (52) printable_values -> conditional .
    (53) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 52 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 52 (printable_values -> conditional .)
    COMMA           shift and go to state 98


state 47

    (54) values -> INTEGER .
    (68) factor -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 54 (values -> INTEGER .)
    COMMA           reduce using rule 54 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 54 (values -> INTEGER .)
    IDENTICAL       reduce using rule 54 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 54 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 54 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 54 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 54 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 54 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 54 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 54 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 54 (values -> INTEGER .)
    SEMICOLON       reduce using rule 54 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 54 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 54 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 54 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 54 (values -> INTEGER .)
    MULTIPLY        reduce using rule 68 (factor -> INTEGER .)
    DIVIDE          reduce using rule 68 (factor -> INTEGER .)
    MODULE          reduce using rule 68 (factor -> INTEGER .)
    POW             reduce using rule 68 (factor -> INTEGER .)
    PLUS            reduce using rule 68 (factor -> INTEGER .)
    MINUS           reduce using rule 68 (factor -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 68 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 68 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 68 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 68 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 68 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 68 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 68 (factor -> INTEGER .) ]


state 48

    (55) values -> STRING .

    COMMA           reduce using rule 55 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 55 (values -> STRING .)
    IDENTICAL       reduce using rule 55 (values -> STRING .)
    NOT_EQUALS      reduce using rule 55 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 55 (values -> STRING .)
    SMALL_THAN      reduce using rule 55 (values -> STRING .)
    GREATER_THAN    reduce using rule 55 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 55 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 55 (values -> STRING .)
    SPACECRAFT      reduce using rule 55 (values -> STRING .)
    NULL_FUSION     reduce using rule 55 (values -> STRING .)
    SEMICOLON       reduce using rule 55 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 55 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 55 (values -> STRING .)
    LOGIC_AND       reduce using rule 55 (values -> STRING .)
    LOGIC_OR        reduce using rule 55 (values -> STRING .)
    LOGIC_XOR       reduce using rule 55 (values -> STRING .)


state 49

    (56) values -> FLOAT .

    COMMA           reduce using rule 56 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 56 (values -> FLOAT .)
    IDENTICAL       reduce using rule 56 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 56 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 56 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 56 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 56 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 56 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 56 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 56 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 56 (values -> FLOAT .)
    SEMICOLON       reduce using rule 56 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 56 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 56 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 56 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 56 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 56 (values -> FLOAT .)


state 50

    (57) values -> boolean .

    COMMA           reduce using rule 57 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 57 (values -> boolean .)
    IDENTICAL       reduce using rule 57 (values -> boolean .)
    NOT_EQUALS      reduce using rule 57 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 57 (values -> boolean .)
    SMALL_THAN      reduce using rule 57 (values -> boolean .)
    GREATER_THAN    reduce using rule 57 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 57 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 57 (values -> boolean .)
    SPACECRAFT      reduce using rule 57 (values -> boolean .)
    NULL_FUSION     reduce using rule 57 (values -> boolean .)
    SEMICOLON       reduce using rule 57 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 57 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 57 (values -> boolean .)
    LOGIC_AND       reduce using rule 57 (values -> boolean .)
    LOGIC_OR        reduce using rule 57 (values -> boolean .)
    LOGIC_XOR       reduce using rule 57 (values -> boolean .)


state 51

    (23) conditional -> boolean_expression .
    (24) conditional -> boolean_expression . logic_operator boolean_expression
    (25) logic_operator -> . LOGIC_AND
    (26) logic_operator -> . LOGIC_OR
    (27) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 23 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 23 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 23 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 100
    LOGIC_OR        shift and go to state 101
    LOGIC_XOR       shift and go to state 102

  ! LOGIC_AND       [ reduce using rule 23 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 23 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 23 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 99

state 52

    (58) boolean -> TRUE .

    COMMA           reduce using rule 58 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 58 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 58 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 58 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 58 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 58 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 58 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 58 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 58 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 58 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 58 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 58 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 58 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 58 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 58 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 58 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 58 (boolean -> TRUE .)


state 53

    (59) boolean -> FALSE .

    COMMA           reduce using rule 59 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 59 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 59 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 59 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 59 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 59 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 59 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 59 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 59 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 59 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 59 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 59 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 59 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 59 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 59 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 59 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 59 (boolean -> FALSE .)


state 54

    (28) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 28 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 28 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 28 (boolean_expression -> comparation .)
    COMMA           reduce using rule 28 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 28 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 28 (boolean_expression -> comparation .)


state 55

    (30) boolean_expression -> LOGIC_NOT . conditional
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105

    conditional                    shift and go to state 103
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    values                         shift and go to state 104
    expression                     shift and go to state 56
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 56

    (33) comparation -> expression . comparator_operator expression
    (34) comparator_operator -> . EQUALS_EQUALS
    (35) comparator_operator -> . IDENTICAL
    (36) comparator_operator -> . NOT_EQUALS
    (37) comparator_operator -> . NOT_IDENTICAL
    (38) comparator_operator -> . SMALL_THAN
    (39) comparator_operator -> . GREATER_THAN
    (40) comparator_operator -> . SMALL_EQUALS_TO
    (41) comparator_operator -> . GREATER_EQUALS_TO
    (42) comparator_operator -> . SPACECRAFT
    (43) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 87
    IDENTICAL       shift and go to state 88
    NOT_EQUALS      shift and go to state 89
    NOT_IDENTICAL   shift and go to state 90
    SMALL_THAN      shift and go to state 91
    GREATER_THAN    shift and go to state 92
    SMALL_EQUALS_TO shift and go to state 93
    GREATER_EQUALS_TO shift and go to state 94
    SPACECRAFT      shift and go to state 95
    NULL_FUSION     shift and go to state 96

    comparator_operator            shift and go to state 106

state 57

    (60) expression -> term .
    (61) expression -> term . PLUS expression
    (62) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 60 (expression -> term .)
    IDENTICAL       reduce using rule 60 (expression -> term .)
    NOT_EQUALS      reduce using rule 60 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 60 (expression -> term .)
    SMALL_THAN      reduce using rule 60 (expression -> term .)
    GREATER_THAN    reduce using rule 60 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 60 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 60 (expression -> term .)
    SPACECRAFT      reduce using rule 60 (expression -> term .)
    NULL_FUSION     reduce using rule 60 (expression -> term .)
    RIGHT_PAREN     reduce using rule 60 (expression -> term .)
    SEMICOLON       reduce using rule 60 (expression -> term .)
    LOGIC_AND       reduce using rule 60 (expression -> term .)
    LOGIC_OR        reduce using rule 60 (expression -> term .)
    LOGIC_XOR       reduce using rule 60 (expression -> term .)
    COMMA           reduce using rule 60 (expression -> term .)
    PLUS            shift and go to state 107
    MINUS           shift and go to state 108


state 58

    (63) term -> factor .
    (64) term -> factor . MULTIPLY term
    (65) term -> factor . DIVIDE term
    (66) term -> factor . MODULE term
    (67) term -> factor . POW term

    PLUS            reduce using rule 63 (term -> factor .)
    MINUS           reduce using rule 63 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 63 (term -> factor .)
    IDENTICAL       reduce using rule 63 (term -> factor .)
    NOT_EQUALS      reduce using rule 63 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 63 (term -> factor .)
    SMALL_THAN      reduce using rule 63 (term -> factor .)
    GREATER_THAN    reduce using rule 63 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 63 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 63 (term -> factor .)
    SPACECRAFT      reduce using rule 63 (term -> factor .)
    NULL_FUSION     reduce using rule 63 (term -> factor .)
    RIGHT_PAREN     reduce using rule 63 (term -> factor .)
    SEMICOLON       reduce using rule 63 (term -> factor .)
    LOGIC_AND       reduce using rule 63 (term -> factor .)
    LOGIC_OR        reduce using rule 63 (term -> factor .)
    LOGIC_XOR       reduce using rule 63 (term -> factor .)
    COMMA           reduce using rule 63 (term -> factor .)
    MULTIPLY        shift and go to state 109
    DIVIDE          shift and go to state 110
    MODULE          shift and go to state 111
    POW             shift and go to state 112


state 59

    (45) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (29) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (70) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    printable_values               shift and go to state 113
    conditional                    shift and go to state 83
    expression                     shift and go to state 84
    values                         shift and go to state 44
    boolean_expression             shift and go to state 51
    term                           shift and go to state 57
    boolean                        shift and go to state 50
    comparation                    shift and go to state 54
    factor                         shift and go to state 58

state 60

    (47) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 47 (print_statement -> PRINT printable_values .)


state 61

    (97) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 114


state 62

    (73) variable_assignment -> VARIABLE assignment_operator . values
    (74) variable_assignment -> VARIABLE assignment_operator . expression
    (75) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (76) variable_assignment -> VARIABLE assignment_operator . types_structure
    (77) variable_assignment -> VARIABLE assignment_operator . input
    (78) variable_assignment -> VARIABLE assignment_operator . special_function
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (89) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (103) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (104) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (98) special_function -> . arrow_function
    (99) special_function -> . anonymous_functions
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (100) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (101) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    IDENTIFIER      shift and go to state 122
    FEGTS           shift and go to state 124
    READLINE        shift and go to state 125
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    FN              shift and go to state 128
    FUNCTION        shift and go to state 129
    VARIABLE        shift and go to state 115
    LEFT_PAREN      shift and go to state 123
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    values                         shift and go to state 116
    expression                     shift and go to state 117
    function_invocation            shift and go to state 118
    types_structure                shift and go to state 119
    input                          shift and go to state 120
    special_function               shift and go to state 121
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    arrow_function                 shift and go to state 126
    anonymous_functions            shift and go to state 127
    factor                         shift and go to state 58
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 63

    (79) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 79 (variable_assignment -> VARIABLE INCREASE .)


state 64

    (80) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 80 (variable_assignment -> VARIABLE DECREMENT .)


state 65

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 130
    RIGHT_BRACKET   shift and go to state 131


state 66

    (83) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 83 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 83 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 83 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 83 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 83 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 83 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 83 (assignment_operator -> EQUALS .)
    FN              reduce using rule 83 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 83 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 83 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 83 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 83 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 83 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 83 (assignment_operator -> EQUALS .)


state 67

    (137) access_method_object -> VARIABLE MINUS . GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    GREATER_THAN    shift and go to state 132


state 68

    (84) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 84 (assignment_operator -> PLUS_EQUALS .)


state 69

    (81) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 81 (variable_assignment -> INCREASE VARIABLE .)


state 70

    (82) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 82 (variable_assignment -> DECREMENT VARIABLE .)


state 71

    (11) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105

    conditional                    shift and go to state 133
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    values                         shift and go to state 104
    expression                     shift and go to state 56
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 72

    (10) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105

    conditional                    shift and go to state 134
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    values                         shift and go to state 104
    expression                     shift and go to state 56
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 73

    (87) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 135


state 74

    (88) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 136


state 75

    (110) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (111) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (124) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (117) values_array_indexed -> . values
    (118) values_array_indexed -> . values COMMA values_array_indexed
    (113) structure_array -> . key EQUALS GREATER_THAN values
    (114) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (128) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (129) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (115) key -> . INTEGER
    (116) key -> . STRING
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    ARRAY           shift and go to state 137
    INTEGER         shift and go to state 143
    STRING          shift and go to state 144
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values_array_indexed           shift and go to state 138
    structure_array                shift and go to state 139
    structure_matrix_first         shift and go to state 140
    values                         shift and go to state 141
    key                            shift and go to state 142
    boolean                        shift and go to state 50

state 76

    (112) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (113) structure_array -> . key EQUALS GREATER_THAN values
    (114) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (115) key -> . INTEGER
    (116) key -> . STRING

    INTEGER         shift and go to state 146
    STRING          shift and go to state 147

    structure_array                shift and go to state 145
    key                            shift and go to state 142

state 77

    (126) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (127) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 148
    boolean                        shift and go to state 50

state 78

    (125) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 150


state 79

    (135) object_creation -> NEW class_name . SEMICOLON

    SEMICOLON       shift and go to state 151


state 80

    (136) class_name -> IDENTIFIER .

    SEMICOLON       reduce using rule 136 (class_name -> IDENTIFIER .)


state 81

    (29) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (70) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 153
    VARIABLE        shift and go to state 105
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    conditional                    shift and go to state 152
    expression                     shift and go to state 84
    boolean_expression             shift and go to state 51
    term                           shift and go to state 57
    comparation                    shift and go to state 54
    factor                         shift and go to state 58
    values                         shift and go to state 104
    boolean                        shift and go to state 50

state 82

    (44) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 154


state 83

    (29) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (52) printable_values -> conditional .
    (53) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 155
    COMMA           shift and go to state 98

  ! RIGHT_PAREN     [ reduce using rule 52 (printable_values -> conditional .) ]


state 84

    (70) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (33) comparation -> expression . comparator_operator expression
    (34) comparator_operator -> . EQUALS_EQUALS
    (35) comparator_operator -> . IDENTICAL
    (36) comparator_operator -> . NOT_EQUALS
    (37) comparator_operator -> . NOT_IDENTICAL
    (38) comparator_operator -> . SMALL_THAN
    (39) comparator_operator -> . GREATER_THAN
    (40) comparator_operator -> . SMALL_EQUALS_TO
    (41) comparator_operator -> . GREATER_EQUALS_TO
    (42) comparator_operator -> . SPACECRAFT
    (43) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 156
    EQUALS_EQUALS   shift and go to state 87
    IDENTICAL       shift and go to state 88
    NOT_EQUALS      shift and go to state 89
    NOT_IDENTICAL   shift and go to state 90
    SMALL_THAN      shift and go to state 91
    GREATER_THAN    shift and go to state 92
    SMALL_EQUALS_TO shift and go to state 93
    GREATER_EQUALS_TO shift and go to state 94
    SPACECRAFT      shift and go to state 95
    NULL_FUSION     shift and go to state 96

    comparator_operator            shift and go to state 106

state 85

    (49) printable_values -> values COMMA . printable_values
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55

    values                         shift and go to state 44
    printable_values               shift and go to state 157
    conditional                    shift and go to state 46
    boolean                        shift and go to state 50
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 86

    (31) comparation -> values comparator_operator . values
    (32) comparation -> values comparator_operator . expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    values                         shift and go to state 158
    expression                     shift and go to state 159
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 87

    (34) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 34 (comparator_operator -> EQUALS_EQUALS .)


state 88

    (35) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 35 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 35 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 35 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 35 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 35 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 35 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 35 (comparator_operator -> IDENTICAL .)


state 89

    (36) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 36 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 36 (comparator_operator -> NOT_EQUALS .)


state 90

    (37) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 37 (comparator_operator -> NOT_IDENTICAL .)


state 91

    (38) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 38 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 38 (comparator_operator -> SMALL_THAN .)


state 92

    (39) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 39 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 39 (comparator_operator -> GREATER_THAN .)


state 93

    (40) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 40 (comparator_operator -> SMALL_EQUALS_TO .)


state 94

    (41) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 41 (comparator_operator -> GREATER_EQUALS_TO .)


state 95

    (42) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 42 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 42 (comparator_operator -> SPACECRAFT .)


state 96

    (43) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 43 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 43 (comparator_operator -> NULL_FUSION .)


state 97

    (51) printable_values -> VARIABLE COMMA . printable_values
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55

    printable_values               shift and go to state 160
    values                         shift and go to state 44
    conditional                    shift and go to state 46
    boolean                        shift and go to state 50
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 98

    (53) printable_values -> conditional COMMA . printable_values
    (48) printable_values -> . values
    (49) printable_values -> . values COMMA printable_values
    (50) printable_values -> . VARIABLE
    (51) printable_values -> . VARIABLE COMMA printable_values
    (52) printable_values -> . conditional
    (53) printable_values -> . conditional COMMA printable_values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 45
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55

    conditional                    shift and go to state 46
    printable_values               shift and go to state 161
    values                         shift and go to state 44
    boolean                        shift and go to state 50
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    expression                     shift and go to state 56
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 99

    (24) conditional -> boolean_expression logic_operator . boolean_expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105

    boolean_expression             shift and go to state 162
    comparation                    shift and go to state 54
    values                         shift and go to state 104
    expression                     shift and go to state 56
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 100

    (25) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 25 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 25 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 25 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 25 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 25 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 25 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 25 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 25 (logic_operator -> LOGIC_AND .)


state 101

    (26) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 26 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 26 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 26 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 26 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 26 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 26 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 26 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 26 (logic_operator -> LOGIC_OR .)


state 102

    (27) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 27 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 27 (logic_operator -> LOGIC_XOR .)


state 103

    (30) boolean_expression -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 30 (boolean_expression -> LOGIC_NOT conditional .)


state 104

    (31) comparation -> values . comparator_operator values
    (32) comparation -> values . comparator_operator expression
    (34) comparator_operator -> . EQUALS_EQUALS
    (35) comparator_operator -> . IDENTICAL
    (36) comparator_operator -> . NOT_EQUALS
    (37) comparator_operator -> . NOT_IDENTICAL
    (38) comparator_operator -> . SMALL_THAN
    (39) comparator_operator -> . GREATER_THAN
    (40) comparator_operator -> . SMALL_EQUALS_TO
    (41) comparator_operator -> . GREATER_EQUALS_TO
    (42) comparator_operator -> . SPACECRAFT
    (43) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 87
    IDENTICAL       shift and go to state 88
    NOT_EQUALS      shift and go to state 89
    NOT_IDENTICAL   shift and go to state 90
    SMALL_THAN      shift and go to state 91
    GREATER_THAN    shift and go to state 92
    SMALL_EQUALS_TO shift and go to state 93
    GREATER_EQUALS_TO shift and go to state 94
    SPACECRAFT      shift and go to state 95
    NULL_FUSION     shift and go to state 96

    comparator_operator            shift and go to state 86

state 105

    (69) factor -> VARIABLE .

    MULTIPLY        reduce using rule 69 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 69 (factor -> VARIABLE .)
    MODULE          reduce using rule 69 (factor -> VARIABLE .)
    POW             reduce using rule 69 (factor -> VARIABLE .)
    PLUS            reduce using rule 69 (factor -> VARIABLE .)
    MINUS           reduce using rule 69 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 69 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 69 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 69 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 69 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 69 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 69 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 69 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 69 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 69 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 69 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 69 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 69 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 69 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 69 (factor -> VARIABLE .)
    COMMA           reduce using rule 69 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 69 (factor -> VARIABLE .)


state 106

    (33) comparation -> expression comparator_operator . expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    expression                     shift and go to state 163
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 107

    (61) expression -> term PLUS . expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    term                           shift and go to state 57
    expression                     shift and go to state 165
    factor                         shift and go to state 58

state 108

    (62) expression -> term MINUS . expression
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    term                           shift and go to state 57
    expression                     shift and go to state 166
    factor                         shift and go to state 58

state 109

    (64) term -> factor MULTIPLY . term
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    factor                         shift and go to state 58
    term                           shift and go to state 167

state 110

    (65) term -> factor DIVIDE . term
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    factor                         shift and go to state 58
    term                           shift and go to state 168

state 111

    (66) term -> factor MODULE . term
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    factor                         shift and go to state 58
    term                           shift and go to state 169

state 112

    (67) term -> factor POW . term
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    factor                         shift and go to state 58
    term                           shift and go to state 170

state 113

    (45) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 171


state 114

    (97) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (90) params -> . real_params
    (91) params -> . empty
    (92) real_params -> . VARIABLE
    (93) real_params -> . values
    (94) real_params -> . real_params COMMA VARIABLE
    (95) real_params -> . real_params COMMA values
    (96) empty -> .
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    VARIABLE        shift and go to state 175
    RIGHT_PAREN     reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    params                         shift and go to state 172
    real_params                    shift and go to state 173
    empty                          shift and go to state 174
    values                         shift and go to state 176
    boolean                        shift and go to state 50

state 115

    (69) factor -> VARIABLE .
    (130) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (137) access_method_object -> VARIABLE . MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

  ! shift/reduce conflict for MINUS resolved as shift
    MULTIPLY        reduce using rule 69 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 69 (factor -> VARIABLE .)
    MODULE          reduce using rule 69 (factor -> VARIABLE .)
    POW             reduce using rule 69 (factor -> VARIABLE .)
    PLUS            reduce using rule 69 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 69 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 65
    MINUS           shift and go to state 67

  ! MINUS           [ reduce using rule 69 (factor -> VARIABLE .) ]


state 116

    (73) variable_assignment -> VARIABLE assignment_operator values .

    SEMICOLON       reduce using rule 73 (variable_assignment -> VARIABLE assignment_operator values .)


state 117

    (74) variable_assignment -> VARIABLE assignment_operator expression .

    SEMICOLON       reduce using rule 74 (variable_assignment -> VARIABLE assignment_operator expression .)


state 118

    (75) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 75 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 119

    (76) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 76 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 120

    (77) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 77 (variable_assignment -> VARIABLE assignment_operator input .)


state 121

    (78) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 78 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 122

    (89) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 177


state 123

    (70) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 164
    VARIABLE        shift and go to state 105
    LEFT_PAREN      shift and go to state 123

    expression                     shift and go to state 178
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 124

    (103) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 179


state 125

    (104) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 180


state 126

    (98) special_function -> arrow_function .

    SEMICOLON       reduce using rule 98 (special_function -> arrow_function .)


state 127

    (99) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 99 (special_function -> anonymous_functions .)


state 128

    (100) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock

    LEFT_PAREN      shift and go to state 181


state 129

    (101) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 182


state 130

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 183


state 131

    (132) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 184


state 132

    (137) access_method_object -> VARIABLE MINUS GREATER_THAN . IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 185


state 133

    (11) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 186


state 134

    (10) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 187


state 135

    (87) const_syntax -> CONST IDENTIFIER EQUALS . values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 188
    boolean                        shift and go to state 50

state 136

    (88) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 189


state 137

    (128) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (129) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 190


state 138

    (110) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 191


state 139

    (111) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 192


state 140

    (124) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 193


state 141

    (117) values_array_indexed -> values .
    (118) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 117 (values_array_indexed -> values .)
    COMMA           shift and go to state 194


state 142

    (113) structure_array -> key . EQUALS GREATER_THAN values
    (114) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 195


state 143

    (54) values -> INTEGER .
    (115) key -> INTEGER .

    COMMA           reduce using rule 54 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 54 (values -> INTEGER .)
    EQUALS          reduce using rule 115 (key -> INTEGER .)


state 144

    (55) values -> STRING .
    (116) key -> STRING .

    COMMA           reduce using rule 55 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 55 (values -> STRING .)
    EQUALS          reduce using rule 116 (key -> STRING .)


state 145

    (112) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 196


state 146

    (115) key -> INTEGER .

    EQUALS          reduce using rule 115 (key -> INTEGER .)


state 147

    (116) key -> STRING .

    EQUALS          reduce using rule 116 (key -> STRING .)


state 148

    (126) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (127) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 197


state 149

    (54) values -> INTEGER .

    RIGHT_BRACKET   reduce using rule 54 (values -> INTEGER .)
    COMMA           reduce using rule 54 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 54 (values -> INTEGER .)
    SEMICOLON       reduce using rule 54 (values -> INTEGER .)


state 150

    (125) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 198


state 151

    (135) object_creation -> NEW class_name SEMICOLON .

    ECHO            reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    PRINT           reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    FUNCTION        reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    VARIABLE        reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    INCREASE        reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    DECREMENT       reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    IF              reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    WHILE           reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    CONST           reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    DEFINE          reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    ARRAY           reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    LEFT_BRACKET    reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    NEW             reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    $end            reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    SEMICOLON       reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    RETURN          reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    BREAK           reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)
    RIGHT_BRACE     reduce using rule 135 (object_creation -> NEW class_name SEMICOLON .)


state 152

    (29) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 155


state 153

    (68) factor -> INTEGER .
    (54) values -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 54 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 54 (values -> INTEGER .)
    MULTIPLY        reduce using rule 68 (factor -> INTEGER .)
    DIVIDE          reduce using rule 68 (factor -> INTEGER .)
    MODULE          reduce using rule 68 (factor -> INTEGER .)
    POW             reduce using rule 68 (factor -> INTEGER .)
    PLUS            reduce using rule 68 (factor -> INTEGER .)
    MINUS           reduce using rule 68 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 68 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 54 (values -> INTEGER .)
    IDENTICAL       reduce using rule 54 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 54 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 54 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 54 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 54 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 54 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 54 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 54 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 54 (values -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 68 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 68 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 68 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 68 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 68 (factor -> INTEGER .) ]


state 154

    (44) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 44 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 155

    (29) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 29 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 156

    (70) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 70 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 157

    (49) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 49 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 49 (printable_values -> values COMMA printable_values .)


state 158

    (31) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 31 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 31 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 31 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 31 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 31 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 31 (comparation -> values comparator_operator values .)


state 159

    (32) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 32 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 32 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 32 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 32 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 32 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 32 (comparation -> values comparator_operator expression .)


state 160

    (51) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 51 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 51 (printable_values -> VARIABLE COMMA printable_values .)


state 161

    (53) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 53 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 53 (printable_values -> conditional COMMA printable_values .)


state 162

    (24) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 24 (conditional -> boolean_expression logic_operator boolean_expression .)


state 163

    (33) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 33 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 33 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 33 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 33 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 33 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 33 (comparation -> expression comparator_operator expression .)


state 164

    (68) factor -> INTEGER .

    MULTIPLY        reduce using rule 68 (factor -> INTEGER .)
    DIVIDE          reduce using rule 68 (factor -> INTEGER .)
    MODULE          reduce using rule 68 (factor -> INTEGER .)
    POW             reduce using rule 68 (factor -> INTEGER .)
    PLUS            reduce using rule 68 (factor -> INTEGER .)
    MINUS           reduce using rule 68 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 68 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 68 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 68 (factor -> INTEGER .)
    COMMA           reduce using rule 68 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 68 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 68 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 68 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 68 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 68 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 68 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 68 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 68 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 68 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 68 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 68 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 68 (factor -> INTEGER .)


state 165

    (61) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 61 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 61 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 61 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 61 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 61 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 61 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 61 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 61 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 61 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 61 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 61 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 61 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 61 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 61 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 61 (expression -> term PLUS expression .)
    COMMA           reduce using rule 61 (expression -> term PLUS expression .)


state 166

    (62) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 62 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 62 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 62 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 62 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 62 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 62 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 62 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 62 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 62 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 62 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 62 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 62 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 62 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 62 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 62 (expression -> term MINUS expression .)
    COMMA           reduce using rule 62 (expression -> term MINUS expression .)


state 167

    (64) term -> factor MULTIPLY term .

    PLUS            reduce using rule 64 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 64 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 64 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 64 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 64 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 64 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 64 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 64 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 64 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 64 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 64 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 64 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 64 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 64 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 64 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 64 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 64 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 64 (term -> factor MULTIPLY term .)


state 168

    (65) term -> factor DIVIDE term .

    PLUS            reduce using rule 65 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 65 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 65 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 65 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 65 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 65 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 65 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 65 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 65 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 65 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 65 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 65 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 65 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 65 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 65 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 65 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 65 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 65 (term -> factor DIVIDE term .)


state 169

    (66) term -> factor MODULE term .

    PLUS            reduce using rule 66 (term -> factor MODULE term .)
    MINUS           reduce using rule 66 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 66 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 66 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 66 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 66 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 66 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 66 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 66 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 66 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 66 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 66 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 66 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 66 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 66 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 66 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 66 (term -> factor MODULE term .)
    COMMA           reduce using rule 66 (term -> factor MODULE term .)


state 170

    (67) term -> factor POW term .

    PLUS            reduce using rule 67 (term -> factor POW term .)
    MINUS           reduce using rule 67 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 67 (term -> factor POW term .)
    IDENTICAL       reduce using rule 67 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 67 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 67 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 67 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 67 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 67 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 67 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 67 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 67 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 67 (term -> factor POW term .)
    SEMICOLON       reduce using rule 67 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 67 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 67 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 67 (term -> factor POW term .)
    COMMA           reduce using rule 67 (term -> factor POW term .)


state 171

    (45) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 45 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 172

    (97) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 199


state 173

    (90) params -> real_params .
    (94) real_params -> real_params . COMMA VARIABLE
    (95) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 90 (params -> real_params .)
    COMMA           shift and go to state 200


state 174

    (91) params -> empty .

    RIGHT_PAREN     reduce using rule 91 (params -> empty .)


state 175

    (92) real_params -> VARIABLE .

    COMMA           reduce using rule 92 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 92 (real_params -> VARIABLE .)


state 176

    (93) real_params -> values .

    COMMA           reduce using rule 93 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 93 (real_params -> values .)


state 177

    (89) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (90) params -> . real_params
    (91) params -> . empty
    (92) real_params -> . VARIABLE
    (93) real_params -> . values
    (94) real_params -> . real_params COMMA VARIABLE
    (95) real_params -> . real_params COMMA values
    (96) empty -> .
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    VARIABLE        shift and go to state 175
    RIGHT_PAREN     reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    params                         shift and go to state 201
    real_params                    shift and go to state 173
    empty                          shift and go to state 174
    values                         shift and go to state 176
    boolean                        shift and go to state 50

state 178

    (70) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 156


state 179

    (103) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 202


state 180

    (104) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 203


state 181

    (100) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (90) params -> . real_params
    (91) params -> . empty
    (92) real_params -> . VARIABLE
    (93) real_params -> . values
    (94) real_params -> . real_params COMMA VARIABLE
    (95) real_params -> . real_params COMMA values
    (96) empty -> .
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    VARIABLE        shift and go to state 175
    RIGHT_PAREN     reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    params                         shift and go to state 204
    real_params                    shift and go to state 173
    empty                          shift and go to state 174
    values                         shift and go to state 176
    boolean                        shift and go to state 50

state 182

    (101) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (90) params -> . real_params
    (91) params -> . empty
    (92) real_params -> . VARIABLE
    (93) real_params -> . values
    (94) real_params -> . real_params COMMA VARIABLE
    (95) real_params -> . real_params COMMA values
    (96) empty -> .
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    VARIABLE        shift and go to state 175
    RIGHT_PAREN     reduce using rule 96 (empty -> .)
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    params                         shift and go to state 205
    real_params                    shift and go to state 173
    empty                          shift and go to state 174
    values                         shift and go to state 176
    boolean                        shift and go to state 50

state 183

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    LEFT_BRACKET    shift and go to state 206


state 184

    (132) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 208

    indexed_array                  shift and go to state 207

state 185

    (137) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER . LEFT_PAREN RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 209


state 186

    (11) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 210


state 187

    (10) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 211


state 188

    (87) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 87 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 189

    (88) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 212
    boolean                        shift and go to state 50

state 190

    (128) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (129) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 213
    boolean                        shift and go to state 50

state 191

    (110) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 110 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 192

    (111) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 111 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 193

    (124) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 214


state 194

    (118) values_array_indexed -> values COMMA . values_array_indexed
    (117) values_array_indexed -> . values
    (118) values_array_indexed -> . values COMMA values_array_indexed
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 141
    values_array_indexed           shift and go to state 215
    boolean                        shift and go to state 50

state 195

    (113) structure_array -> key EQUALS . GREATER_THAN values
    (114) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 216


state 196

    (112) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 112 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 197

    (126) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (127) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 126 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 217


state 198

    (125) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 125 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 199

    (97) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (102) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 219

    codeblock                      shift and go to state 218

state 200

    (94) real_params -> real_params COMMA . VARIABLE
    (95) real_params -> real_params COMMA . values
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    VARIABLE        shift and go to state 220
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 221
    boolean                        shift and go to state 50

state 201

    (89) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 222


state 202

    (103) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 223


state 203

    (104) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 224


state 204

    (100) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock

    RIGHT_PAREN     shift and go to state 225


state 205

    (101) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 226


state 206

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET EQUALS values SEMICOLON

    INTEGER         shift and go to state 227


state 207

    (132) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 132 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 208

    (110) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 228


state 209

    (137) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 229


state 210

    (11) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (18) body_statement -> . sentence
    (19) body_statement -> . sentence RETURN values SEMICOLON
    (20) body_statement -> . sentence RETURN SEMICOLON
    (21) body_statement -> . sentence BREAK SEMICOLON
    (22) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    body_statement                 shift and go to state 230
    sentence                       shift and go to state 231
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 211

    (10) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) body_statement -> . sentence
    (19) body_statement -> . sentence RETURN values SEMICOLON
    (20) body_statement -> . sentence RETURN SEMICOLON
    (21) body_statement -> . sentence BREAK SEMICOLON
    (22) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    body_statement                 shift and go to state 232
    sentence                       shift and go to state 231
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 212

    (88) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 233


state 213

    (128) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (129) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 234


state 214

    (124) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 124 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 215

    (118) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 118 (values_array_indexed -> values COMMA values_array_indexed .)


state 216

    (113) structure_array -> key EQUALS GREATER_THAN . values
    (114) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 235
    boolean                        shift and go to state 50

state 217

    (127) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (126) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (127) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 77

    structure_matrix_second        shift and go to state 236

state 218

    (97) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 97 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 219

    (102) codeblock -> LEFT_BRACE . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 237


state 220

    (94) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 94 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 94 (real_params -> real_params COMMA VARIABLE .)


state 221

    (95) real_params -> real_params COMMA values .

    COMMA           reduce using rule 95 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 95 (real_params -> real_params COMMA values .)


state 222

    (89) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 238


state 223

    (103) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 103 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 224

    (104) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 104 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 225

    (100) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock

    EQUALS          shift and go to state 239


state 226

    (101) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (102) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 219

    codeblock                      shift and go to state 240

state 227

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET EQUALS values SEMICOLON

    RIGHT_BRACKET   shift and go to state 241


state 228

    (110) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (117) values_array_indexed -> . values
    (118) values_array_indexed -> . values COMMA values_array_indexed
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values_array_indexed           shift and go to state 138
    values                         shift and go to state 141
    boolean                        shift and go to state 50

state 229

    (137) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 242


state 230

    (11) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 243


state 231

    (18) body_statement -> sentence .
    (19) body_statement -> sentence . RETURN values SEMICOLON
    (20) body_statement -> sentence . RETURN SEMICOLON
    (21) body_statement -> sentence . BREAK SEMICOLON
    (22) body_statement -> sentence . body_statement
    (18) body_statement -> . sentence
    (19) body_statement -> . sentence RETURN values SEMICOLON
    (20) body_statement -> . sentence RETURN SEMICOLON
    (21) body_statement -> . sentence BREAK SEMICOLON
    (22) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    RIGHT_BRACE     reduce using rule 18 (body_statement -> sentence .)
    RETURN          shift and go to state 244
    BREAK           shift and go to state 245
    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    sentence                       shift and go to state 231
    body_statement                 shift and go to state 246
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 232

    (10) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 247


state 233

    (88) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 88 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 234

    (128) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (129) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 128 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 248


state 235

    (113) structure_array -> key EQUALS GREATER_THAN values .
    (114) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 113 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 113 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 249


state 236

    (127) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 127 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 237

    (102) codeblock -> LEFT_BRACE RIGHT_BRACE .

    ECHO            reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    PRINT           reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    FUNCTION        reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    VARIABLE        reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    INCREASE        reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DECREMENT       reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    IF              reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    WHILE           reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    CONST           reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    DEFINE          reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    ARRAY           reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    NEW             reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    $end            reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    RETURN          reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    BREAK           reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)
    SEMICOLON       reduce using rule 102 (codeblock -> LEFT_BRACE RIGHT_BRACE .)


state 238

    (89) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    SEMICOLON       reduce using rule 89 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 239

    (100) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock

    GREATER_THAN    shift and go to state 250


state 240

    (101) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 101 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 241

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . SEMICOLON
    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET . EQUALS values SEMICOLON

    SEMICOLON       shift and go to state 251
    EQUALS          shift and go to state 252


state 242

    (137) access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 137 (access_method_object -> VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON .)


state 243

    (11) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (14) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (17) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 11 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 255
    ELSE            shift and go to state 256

    elseif_statement               shift and go to state 253
    else_statement                 shift and go to state 254

state 244

    (19) body_statement -> sentence RETURN . values SEMICOLON
    (20) body_statement -> sentence RETURN . SEMICOLON
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    SEMICOLON       shift and go to state 258
    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 257
    boolean                        shift and go to state 50

state 245

    (21) body_statement -> sentence BREAK . SEMICOLON

    SEMICOLON       shift and go to state 259


state 246

    (22) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence body_statement .)


state 247

    (10) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 10 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 248

    (129) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (128) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (129) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 137

    structure_matrix_first         shift and go to state 260

state 249

    (114) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (113) structure_array -> . key EQUALS GREATER_THAN values
    (114) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (115) key -> . INTEGER
    (116) key -> . STRING

    INTEGER         shift and go to state 146
    STRING          shift and go to state 147

    key                            shift and go to state 142
    structure_array                shift and go to state 261

state 250

    (100) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (102) codeblock -> . LEFT_BRACE RIGHT_BRACE

    LEFT_BRACE      shift and go to state 219

    codeblock                      shift and go to state 262

state 251

    (130) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 130 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON .)


state 252

    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS . values SEMICOLON
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE

    INTEGER         shift and go to state 149
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53

    values                         shift and go to state 263
    boolean                        shift and go to state 50

state 253

    (12) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 12 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 254

    (13) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 13 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 255

    (14) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 264


state 256

    (17) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 265


state 257

    (19) body_statement -> sentence RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 266


state 258

    (20) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 20 (body_statement -> sentence RETURN SEMICOLON .)


state 259

    (21) body_statement -> sentence BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence BREAK SEMICOLON .)


state 260

    (129) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 129 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 261

    (114) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 114 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 114 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 262

    (100) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 100 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 263

    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 267


state 264

    (14) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (23) conditional -> . boolean_expression
    (24) conditional -> . boolean_expression logic_operator boolean_expression
    (28) boolean_expression -> . comparation
    (29) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (30) boolean_expression -> . LOGIC_NOT conditional
    (31) comparation -> . values comparator_operator values
    (32) comparation -> . values comparator_operator expression
    (33) comparation -> . expression comparator_operator expression
    (54) values -> . INTEGER
    (55) values -> . STRING
    (56) values -> . FLOAT
    (57) values -> . boolean
    (60) expression -> . term
    (61) expression -> . term PLUS expression
    (62) expression -> . term MINUS expression
    (58) boolean -> . TRUE
    (59) boolean -> . FALSE
    (63) term -> . factor
    (64) term -> . factor MULTIPLY term
    (65) term -> . factor DIVIDE term
    (66) term -> . factor MODULE term
    (67) term -> . factor POW term
    (68) factor -> . INTEGER
    (69) factor -> . VARIABLE
    (70) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    LOGIC_NOT       shift and go to state 55
    INTEGER         shift and go to state 47
    STRING          shift and go to state 48
    FLOAT           shift and go to state 49
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    VARIABLE        shift and go to state 105

    conditional                    shift and go to state 268
    boolean_expression             shift and go to state 51
    comparation                    shift and go to state 54
    values                         shift and go to state 104
    expression                     shift and go to state 56
    boolean                        shift and go to state 50
    term                           shift and go to state 57
    factor                         shift and go to state 58

state 265

    (17) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (18) body_statement -> . sentence
    (19) body_statement -> . sentence RETURN values SEMICOLON
    (20) body_statement -> . sentence RETURN SEMICOLON
    (21) body_statement -> . sentence BREAK SEMICOLON
    (22) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    body_statement                 shift and go to state 269
    sentence                       shift and go to state 231
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 266

    (19) body_statement -> sentence RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 19 (body_statement -> sentence RETURN values SEMICOLON .)


state 267

    (131) modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .

    ECHO            reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    PRINT           reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    INCREASE        reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DECREMENT       reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    IF              reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    WHILE           reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    CONST           reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    ARRAY           reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    LEFT_BRACKET    reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    NEW             reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    $end            reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    SEMICOLON       reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RETURN          reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    BREAK           reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 131 (modify_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON .)


state 268

    (14) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 270


state 269

    (17) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 271


state 270

    (14) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 272


state 271

    (17) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 272

    (14) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (18) body_statement -> . sentence
    (19) body_statement -> . sentence RETURN values SEMICOLON
    (20) body_statement -> . sentence RETURN SEMICOLON
    (21) body_statement -> . sentence BREAK SEMICOLON
    (22) body_statement -> . sentence body_statement
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . control_structures
    (7) sentence -> . function_declaration
    (44) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (45) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (46) print_statement -> . ECHO printable_values
    (47) print_statement -> . PRINT printable_values
    (71) assignment -> . variable_assignment
    (72) assignment -> . constant_assignment
    (105) types_structure -> . structure_array_principal
    (106) types_structure -> . structure_matrix_principal
    (107) types_structure -> . structure_object_principal
    (8) control_structures -> . if_statement
    (9) control_structures -> . while_statement
    (97) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (73) variable_assignment -> . VARIABLE assignment_operator values
    (74) variable_assignment -> . VARIABLE assignment_operator expression
    (75) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (76) variable_assignment -> . VARIABLE assignment_operator types_structure
    (77) variable_assignment -> . VARIABLE assignment_operator input
    (78) variable_assignment -> . VARIABLE assignment_operator special_function
    (79) variable_assignment -> . VARIABLE INCREASE
    (80) variable_assignment -> . VARIABLE DECREMENT
    (81) variable_assignment -> . INCREASE VARIABLE
    (82) variable_assignment -> . DECREMENT VARIABLE
    (85) constant_assignment -> . const_syntax
    (86) constant_assignment -> . define_syntax
    (108) structure_array_principal -> . indexed_array
    (109) structure_array_principal -> . associative_array
    (119) structure_matrix_principal -> . matrix_firstform
    (120) structure_matrix_principal -> . matrix_secondform
    (121) structure_matrix_principal -> . access_element_matrix
    (122) structure_matrix_principal -> . modify_element_matrix
    (123) structure_matrix_principal -> . add_element_matrix
    (133) structure_object_principal -> . object_creation
    (134) structure_object_principal -> . access_method_object
    (11) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (12) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (13) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (10) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (87) const_syntax -> . CONST IDENTIFIER EQUALS values
    (88) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (110) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (111) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (112) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (124) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (125) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (130) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET SEMICOLON
    (131) modify_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET EQUALS values SEMICOLON
    (132) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (135) object_creation -> . NEW class_name SEMICOLON
    (137) access_method_object -> . VARIABLE MINUS GREATER_THAN IDENTIFIER LEFT_PAREN RIGHT_PAREN SEMICOLON

    ECHO            shift and go to state 8
    PRINT           shift and go to state 9
    FUNCTION        shift and go to state 17
    VARIABLE        shift and go to state 18
    INCREASE        shift and go to state 19
    DECREMENT       shift and go to state 20
    IF              shift and go to state 32
    WHILE           shift and go to state 33
    CONST           shift and go to state 34
    DEFINE          shift and go to state 35
    ARRAY           shift and go to state 36
    LEFT_BRACKET    shift and go to state 37
    NEW             shift and go to state 38

    body_statement                 shift and go to state 273
    sentence                       shift and go to state 231
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    control_structures             shift and go to state 6
    function_declaration           shift and go to state 7
    variable_assignment            shift and go to state 10
    constant_assignment            shift and go to state 11
    structure_array_principal      shift and go to state 12
    structure_matrix_principal     shift and go to state 13
    structure_object_principal     shift and go to state 14
    if_statement                   shift and go to state 15
    while_statement                shift and go to state 16
    const_syntax                   shift and go to state 21
    define_syntax                  shift and go to state 22
    indexed_array                  shift and go to state 23
    associative_array              shift and go to state 24
    matrix_firstform               shift and go to state 25
    matrix_secondform              shift and go to state 26
    access_element_matrix          shift and go to state 27
    modify_element_matrix          shift and go to state 28
    add_element_matrix             shift and go to state 29
    object_creation                shift and go to state 30
    access_method_object           shift and go to state 31

state 273

    (14) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 274


state 274

    (14) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (14) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (17) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 255
    ELSE            shift and go to state 256

    elseif_statement               shift and go to state 275
    else_statement                 shift and go to state 276

state 275

    (15) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 276

    (16) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOGIC_AND in state 51 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 51 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 51 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: reduce/reduce conflict in state 45 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 45
WARNING: reduce/reduce conflict in state 47 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 47
WARNING: reduce/reduce conflict in state 153 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 153
