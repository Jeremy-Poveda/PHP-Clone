Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> sentence program
Rule 2     program -> sentence
Rule 3     sentence -> print_statement SEMICOLON
Rule 4     sentence -> assignment SEMICOLON
Rule 5     sentence -> types_structure
Rule 6     sentence -> class_declaration
Rule 7     sentence -> interface_declaration
Rule 8     sentence -> control_structures
Rule 9     sentence -> function_declaration
Rule 10    control_structures -> if_statement
Rule 11    control_structures -> while_statement
Rule 12    control_structures -> for_statement
Rule 13    while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 14    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 15    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 16    if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 17    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 18    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
Rule 19    elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
Rule 20    else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE
Rule 21    body_statement -> sentence
Rule 22    body_statement -> sentence RETURN values SEMICOLON
Rule 23    body_statement -> sentence RETURN SEMICOLON
Rule 24    body_statement -> sentence BREAK SEMICOLON
Rule 25    body_statement -> sentence body_statement
Rule 26    body_statement -> RETURN values SEMICOLON
Rule 27    body_statement -> BREAK SEMICOLON
Rule 28    for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
Rule 29    increment_statement -> VARIABLE INCREASE
Rule 30    increment_statement -> VARIABLE DECREMENT
Rule 31    increment_statement -> INCREASE VARIABLE
Rule 32    increment_statement -> DECREMENT VARIABLE
Rule 33    increment_statement -> VARIABLE PLUS_EQUALS INTEGER
Rule 34    increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values
Rule 35    condition_for -> VARIABLE comparator_operator expression_for
Rule 36    expression_for -> VARIABLE
Rule 37    expression_for -> number_values
Rule 38    expression_for -> expression_for operator_aritmetic expression_for
Rule 39    expression_for -> LEFT_PAREN expression_for RIGHT_PAREN
Rule 40    expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
Rule 41    expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
Rule 42    number_values -> INTEGER
Rule 43    number_values -> FLOAT
Rule 44    operator_aritmetic -> PLUS
Rule 45    operator_aritmetic -> MINUS
Rule 46    operator_aritmetic -> MULTIPLY
Rule 47    operator_aritmetic -> DIVIDE
Rule 48    operator_aritmetic -> MODULE
Rule 49    operator_aritmetic -> POW
Rule 50    conditional -> boolean_expression
Rule 51    conditional -> boolean_expression logic_operator boolean_expression
Rule 52    logic_operator -> LOGIC_AND
Rule 53    logic_operator -> LOGIC_OR
Rule 54    logic_operator -> LOGIC_XOR
Rule 55    boolean_expression -> comparation
Rule 56    boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN
Rule 57    boolean_expression -> logic_not_sentence
Rule 58    boolean_expression -> logic_expression
Rule 59    logic_expression -> true_boolean_types logic_operator false_boolean_types
Rule 60    logic_expression -> false_boolean_types logic_operator true_boolean_types
Rule 61    true_boolean_types -> TRUE
Rule 62    true_boolean_types -> STRING
Rule 63    true_boolean_types -> INTEGER
Rule 64    true_boolean_types -> FLOAT
Rule 65    true_boolean_types -> VARIABLE
Rule 66    true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 67    false_boolean_types -> FALSE
Rule 68    false_boolean_types -> STRING
Rule 69    false_boolean_types -> INTEGER
Rule 70    false_boolean_types -> VARIABLE
Rule 71    false_boolean_types -> FLOAT
Rule 72    false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN
Rule 73    false_boolean_types -> NULL
Rule 74    logic_not_sentence -> LOGIC_NOT conditional
Rule 75    logic_not_sentence -> LOGIC_NOT VARIABLE
Rule 76    comparation -> values comparator_operator values
Rule 77    comparation -> values comparator_operator expression
Rule 78    comparation -> expression comparator_operator expression
Rule 79    comparation -> VARIABLE EQUALS_EQUALS values
Rule 80    comparation -> access_array_element EQUALS_EQUALS values
Rule 81    comparation -> access_array_element EQUALS_EQUALS VARIABLE
Rule 82    comparation -> VARIABLE EQUALS_EQUALS access_array_element
Rule 83    comparation -> VARIABLE EQUALS_EQUALS VARIABLE
Rule 84    comparation -> access_array_element EQUALS_EQUALS access_array_element
Rule 85    comparation -> access_element_matrix EQUALS_EQUALS VARIABLE
Rule 86    comparation -> VARIABLE EQUALS_EQUALS access_element_matrix
Rule 87    comparator_operator -> EQUALS_EQUALS
Rule 88    comparator_operator -> IDENTICAL
Rule 89    comparator_operator -> NOT_EQUALS
Rule 90    comparator_operator -> NOT_IDENTICAL
Rule 91    comparator_operator -> SMALL_THAN
Rule 92    comparator_operator -> GREATER_THAN
Rule 93    comparator_operator -> SMALL_EQUALS_TO
Rule 94    comparator_operator -> GREATER_EQUALS_TO
Rule 95    comparator_operator -> SPACECRAFT
Rule 96    comparator_operator -> NULL_FUSION
Rule 97    print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN
Rule 98    print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN
Rule 99    print_statement -> ECHO printable_values
Rule 100   print_statement -> PRINT printable_values
Rule 101   printable_values -> values
Rule 102   printable_values -> values COMMA printable_values
Rule 103   printable_values -> VARIABLE
Rule 104   printable_values -> VARIABLE COMMA printable_values
Rule 105   printable_values -> STRING STRING_CONCATENATION STRING
Rule 106   printable_values -> VARIABLE STRING_CONCATENATION STRING
Rule 107   printable_values -> conditional
Rule 108   printable_values -> conditional COMMA printable_values
Rule 109   printable_values -> structure_object_principal
Rule 110   printable_values -> structure_object_principal COMMA printable_values
Rule 111   printable_values -> function_invocation
Rule 112   printable_values -> function_invocation COMMA printable_values
Rule 113   printable_values -> string_special_function
Rule 114   printable_values -> string_special_function COMMA printable_values
Rule 115   values -> INTEGER
Rule 116   values -> STRING
Rule 117   values -> FLOAT
Rule 118   values -> boolean
Rule 119   boolean -> TRUE
Rule 120   boolean -> FALSE
Rule 121   expression -> term
Rule 122   expression -> term PLUS expression
Rule 123   expression -> term MINUS expression
Rule 124   term -> factor
Rule 125   term -> factor MULTIPLY term
Rule 126   term -> factor DIVIDE term
Rule 127   term -> factor MODULE term
Rule 128   term -> factor POW term
Rule 129   factor -> INTEGER
Rule 130   factor -> VARIABLE
Rule 131   factor -> LEFT_PAREN expression RIGHT_PAREN
Rule 132   assignment -> variable_assignment
Rule 133   assignment -> constant_assignment
Rule 134   variable_assignment -> VARIABLE assignment_operator values
Rule 135   variable_assignment -> VARIABLE assignment_operator expression
Rule 136   variable_assignment -> VARIABLE assignment_operator function_invocation
Rule 137   variable_assignment -> VARIABLE assignment_operator string_special_function
Rule 138   variable_assignment -> VARIABLE assignment_operator types_structure
Rule 139   variable_assignment -> VARIABLE assignment_operator input
Rule 140   variable_assignment -> VARIABLE assignment_operator special_function
Rule 141   variable_assignment -> VARIABLE assignment_operator conditional
Rule 142   variable_assignment -> VARIABLE INCREASE
Rule 143   variable_assignment -> VARIABLE DECREMENT
Rule 144   variable_assignment -> INCREASE VARIABLE
Rule 145   variable_assignment -> DECREMENT VARIABLE
Rule 146   assignment_operator -> EQUALS
Rule 147   assignment_operator -> PLUS_EQUALS
Rule 148   constant_assignment -> const_syntax
Rule 149   constant_assignment -> define_syntax
Rule 150   const_syntax -> CONST IDENTIFIER EQUALS values
Rule 151   define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
Rule 152   function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 153   function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN
Rule 154   params -> real_params
Rule 155   params -> empty
Rule 156   real_params -> VARIABLE
Rule 157   real_params -> values
Rule 158   real_params -> real_params COMMA VARIABLE
Rule 159   real_params -> real_params COMMA values
Rule 160   empty -> <empty>
Rule 161   function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
Rule 162   special_function -> arrow_function
Rule 163   special_function -> anonymous_functions
Rule 164   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
Rule 165   arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
Rule 166   anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
Rule 167   codeblock -> LEFT_BRACE body_statement RIGHT_BRACE
Rule 168   input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN
Rule 169   input -> READLINE LEFT_PAREN STRING RIGHT_PAREN
Rule 170   string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN
Rule 171   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
Rule 172   string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
Rule 173   string_param -> STRING
Rule 174   string_param -> VARIABLE
Rule 175   int_param -> INTEGER
Rule 176   int_param -> VARIABLE
Rule 177   types_structure -> structure_array_principal
Rule 178   types_structure -> structure_matrix_principal
Rule 179   types_structure -> structure_object_principal
Rule 180   structure_array_principal -> indexed_array
Rule 181   structure_array_principal -> associative_array
Rule 182   structure_array_principal -> access_array_stucture
Rule 183   structure_array_principal -> access_array_element
Rule 184   indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
Rule 185   associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN
Rule 186   associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
Rule 187   structure_array -> key EQUALS GREATER_THAN values
Rule 188   structure_array -> key EQUALS GREATER_THAN values COMMA structure_array
Rule 189   key -> INTEGER
Rule 190   key -> STRING
Rule 191   values_array_indexed -> values
Rule 192   values_array_indexed -> values COMMA values_array_indexed
Rule 193   values_array_indexed -> object_creation
Rule 194   values_array_indexed -> object_creation COMMA values_array_indexed
Rule 195   values_array_indexed -> indexed_array
Rule 196   values_array_indexed -> indexed_array COMMA values_array_indexed
Rule 197   access_array_stucture -> access_array_element SEMICOLON
Rule 198   access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 199   access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 200   structure_matrix_principal -> matrix_firstform
Rule 201   structure_matrix_principal -> matrix_secondform
Rule 202   structure_matrix_principal -> access_element_matrix SEMICOLON
Rule 203   structure_matrix_principal -> modify_element_matrix SEMICOLON
Rule 204   structure_matrix_principal -> add_element_matrix
Rule 205   matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
Rule 206   matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
Rule 207   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET
Rule 208   structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second
Rule 209   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN
Rule 210   structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
Rule 211   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 212   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 213   access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 214   access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
Rule 215   modify_element_matrix -> access_element_matrix EQUALS values
Rule 216   modify_element_matrix -> access_element_matrix EQUALS VARIABLE
Rule 217   add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
Rule 218   structure_object_principal -> object_creation
Rule 219   structure_object_principal -> access_method_object
Rule 220   object_creation -> NEW IDENTIFIER
Rule 221   object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
Rule 222   access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation
Rule 223   access_method_object -> VARIABLE MINUS GREATER_THAN accessType
Rule 224   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values
Rule 225   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 226   access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 227   access_method_object -> access_array_element MINUS GREATER_THAN function_invocation
Rule 228   access_method_object -> access_array_element MINUS GREATER_THAN accessType
Rule 229   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values
Rule 230   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
Rule 231   access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
Rule 232   accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
Rule 233   accessType -> IDENTIFIER
Rule 234   class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
Rule 235   interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
Rule 236   interface_body -> interface_body interface_method
Rule 237   interface_body -> <empty>
Rule 238   interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
Rule 239   class_extends_opt -> EXTENDS IDENTIFIER
Rule 240   class_extends_opt -> <empty>
Rule 241   class_implements_opt -> IMPLEMENTS interface_list
Rule 242   class_implements_opt -> <empty>
Rule 243   interface_list -> IDENTIFIER
Rule 244   interface_list -> interface_list COMMA IDENTIFIER
Rule 245   class_body -> class_body class_member
Rule 246   class_body -> <empty>
Rule 247   class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 248   class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
Rule 249   class_member -> class_attribute
Rule 250   class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON
Rule 251   class_attribute -> visibility_opt VARIABLE SEMICOLON
Rule 252   class_attribute -> visibility_opt constant_assignment SEMICOLON
Rule 253   visibility_opt -> PUBLIC
Rule 254   visibility_opt -> PRIVATE
Rule 255   visibility_opt -> PROTECTED
Rule 256   visibility_opt -> <empty>
Rule 257   method_body -> classStatement
Rule 258   method_body -> classStatement return_form
Rule 259   method_body -> return_form
Rule 260   method_body -> classStatement BREAK SEMICOLON
Rule 261   method_body -> classStatement method_body
Rule 262   return_form -> RETURN values SEMICOLON
Rule 263   return_form -> RETURN access_method_object SEMICOLON
Rule 264   return_form -> RETURN SEMICOLON
Rule 265   classStatement -> sentence
Rule 266   classStatement -> access_method_object SEMICOLON

Terminals, with rules where they appear

ARRAY                : 66 72 184 185 186 205 209 210
BREAK                : 24 27 260
CLASS                : 234
COLON                : 
COMMA                : 102 104 108 110 112 114 151 158 159 171 172 172 188 192 194 196 208 210 244
COMMENT              : 
CONST                : 150
DECREMENT            : 30 32 143 145
DEFINE               : 151
DIVIDE               : 47 126
ECHO                 : 97 99
ELSE                 : 20
ELSEIF               : 17 18 19
EQUALS               : 28 34 146 150 164 165 187 188 215 216 217 224 225 226 229 230 231 250
EQUALS_EQUALS        : 79 80 81 82 83 84 85 86 87
EXTENDS              : 239
FALSE                : 67 120
FEGTS                : 168
FLOAT                : 43 64 71 117
FN                   : 164 165
FOR                  : 28
FUNCTION             : 161 166 238 247 248
GREATER_EQUALS_TO    : 94
GREATER_THAN         : 92 164 165 187 188 222 223 224 225 226 227 228 229 230 231
IDENTICAL            : 88
IDENTIFIER           : 40 41 150 152 161 220 221 232 233 234 235 238 239 243 244 247 248
IF                   : 14 15 16
IMPLEMENTS           : 241
INCREASE             : 29 31 142 144
INTEGER              : 33 42 63 69 115 129 175 189 198 211 211 213 214 232
INTERFACE            : 235
LEFT_BRACE           : 13 14 15 16 17 18 19 20 28 167 234 235 247 248
LEFT_BRACKET         : 186 198 199 206 207 208 211 211 212 212 213 213 214 214 217 232
LEFT_PAREN           : 13 14 15 16 17 18 19 28 39 40 41 56 66 72 97 98 131 151 152 153 161 164 165 166 168 169 170 171 172 184 185 205 209 210 221 238 247 248
LOGIC_AND            : 52
LOGIC_NOT            : 74 75
LOGIC_OR             : 53
LOGIC_XOR            : 54
MINUS                : 45 123 222 223 224 225 226 227 228 229 230 231
MODULE               : 48 127
MULTIPLY             : 46 125
NEW                  : 220 221
NOT_EQUALS           : 89
NOT_IDENTICAL        : 90
NULL                 : 73
NULL_FUSION          : 96
PLUS                 : 44 122
PLUS_EQUALS          : 33 147
POW                  : 49 128
PRINT                : 98 100
PRIVATE              : 254
PROTECTED            : 255
PUBLIC               : 253
READLINE             : 169
RETURN               : 22 23 26 262 263 264
RIGHT_BRACE          : 13 14 15 16 17 18 19 20 28 167 234 235 247 248
RIGHT_BRACKET        : 186 198 199 206 207 208 211 211 212 212 213 213 214 214 217 232
RIGHT_PAREN          : 13 14 15 16 17 18 19 28 39 40 41 56 66 72 97 98 131 151 152 153 161 164 165 166 168 169 170 171 172 184 185 205 209 210 221 238 247 248
SEMICOLON            : 3 4 22 23 24 26 27 28 28 197 202 203 205 206 238 250 251 252 260 262 263 264 266
SMALL_EQUALS_TO      : 93
SMALL_THAN           : 91
SPACECRAFT           : 95
STATIC               : 247
STDIN                : 168
STRING               : 62 68 105 105 106 116 151 169 173 190
STRING_CONCATENATION : 105 106
STRLEN               : 170
SUBSTR               : 171 172
TRUE                 : 61 119
VARIABLE             : 28 29 30 31 32 33 34 34 35 36 40 65 70 75 79 81 82 83 83 85 86 103 104 106 130 134 135 136 137 138 139 140 141 142 143 144 145 153 156 158 174 176 198 199 199 211 212 212 212 213 213 214 214 216 217 222 223 224 225 225 226 230 250 251
WHILE                : 13
error                : 

Nonterminals, with rules where they appear

accessType           : 223 224 225 226 228 229 230 231
access_array_element : 41 80 81 82 84 84 183 197 226 227 228 229 230 231 231
access_array_stucture : 182
access_element_matrix : 85 86 202 215 216
access_method_object : 219 263 266
add_element_matrix   : 204
anonymous_functions  : 163
arrow_function       : 162
assignment           : 4
assignment_operator  : 134 135 136 137 138 139 140 141
associative_array    : 181
body_statement       : 13 14 15 16 17 18 19 20 25 28 167
boolean              : 118
boolean_expression   : 50 51 51
classStatement       : 257 258 260 261
class_attribute      : 249
class_body           : 234 245
class_declaration    : 6
class_extends_opt    : 234 235
class_implements_opt : 234
class_member         : 245
codeblock            : 161 164 166
comparation          : 55
comparator_operator  : 35 76 77 78
condition_for        : 28
conditional          : 13 14 15 16 17 18 19 56 74 107 108 141
const_syntax         : 148
constant_assignment  : 133 252
control_structures   : 8
define_syntax        : 149
else_statement       : 16 19
elseif_statement     : 15 18
empty                : 155
expression           : 77 78 78 122 123 131 135
expression_for       : 28 35 38 38 39
factor               : 124 125 126 127 128
false_boolean_types  : 59 60
for_statement        : 12
function_declaration : 9
function_invocation  : 111 112 136 222 227
if_statement         : 10
increment_statement  : 28
indexed_array        : 180 195 196 217
input                : 139
int_param            : 171 172 172
interface_body       : 235 236
interface_declaration : 7
interface_list       : 241 244
interface_method     : 236
key                  : 187 188
logic_expression     : 58
logic_not_sentence   : 57
logic_operator       : 51 59 60
matrix_firstform     : 200
matrix_secondform    : 201
method_body          : 247 248 261
modify_element_matrix : 203
number_values        : 34 37
object_creation      : 193 194 218
operator_aritmetic   : 34 38
params               : 152 153 161 164 165 166 221 238 247 248
print_statement      : 3 165
printable_values     : 97 98 99 100 102 104 108 110 112 114
program              : 1 0
real_params          : 154 158 159
return_form          : 258 259
sentence             : 1 2 21 22 23 24 25 265
special_function     : 140
string_param         : 170 171 172
string_special_function : 113 114 137
structure_array      : 185 186 188
structure_array_principal : 177
structure_matrix_first : 205 210
structure_matrix_principal : 178
structure_matrix_second : 206 208
structure_object_principal : 109 110 179
term                 : 121 122 123 125 126 127 128
true_boolean_types   : 59 60
types_structure      : 5 138
values               : 22 26 66 76 76 77 79 80 101 102 134 150 151 157 159 187 188 191 192 207 208 209 210 215 224 229 250 262
values_array_indexed : 184 192 194 196
variable_assignment  : 132
visibility_opt       : 238 247 248 250 251 252
while_statement      : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    program                        shift and go to state 1
    sentence                       shift and go to state 2
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 1

    (0) S' -> program .



state 2

    (1) program -> sentence . program
    (2) program -> sentence .
    (1) program -> . sentence program
    (2) program -> . sentence
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    $end            reduce using rule 2 (program -> sentence .)
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 2
    program                        shift and go to state 47
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 3

    (3) sentence -> print_statement . SEMICOLON

    SEMICOLON       shift and go to state 48


state 4

    (4) sentence -> assignment . SEMICOLON

    SEMICOLON       shift and go to state 49


state 5

    (5) sentence -> types_structure .

    ECHO            reduce using rule 5 (sentence -> types_structure .)
    PRINT           reduce using rule 5 (sentence -> types_structure .)
    CLASS           reduce using rule 5 (sentence -> types_structure .)
    INTERFACE       reduce using rule 5 (sentence -> types_structure .)
    FUNCTION        reduce using rule 5 (sentence -> types_structure .)
    VARIABLE        reduce using rule 5 (sentence -> types_structure .)
    INCREASE        reduce using rule 5 (sentence -> types_structure .)
    DECREMENT       reduce using rule 5 (sentence -> types_structure .)
    IF              reduce using rule 5 (sentence -> types_structure .)
    WHILE           reduce using rule 5 (sentence -> types_structure .)
    FOR             reduce using rule 5 (sentence -> types_structure .)
    CONST           reduce using rule 5 (sentence -> types_structure .)
    DEFINE          reduce using rule 5 (sentence -> types_structure .)
    ARRAY           reduce using rule 5 (sentence -> types_structure .)
    LEFT_BRACKET    reduce using rule 5 (sentence -> types_structure .)
    NEW             reduce using rule 5 (sentence -> types_structure .)
    $end            reduce using rule 5 (sentence -> types_structure .)
    RETURN          reduce using rule 5 (sentence -> types_structure .)
    BREAK           reduce using rule 5 (sentence -> types_structure .)
    RIGHT_BRACE     reduce using rule 5 (sentence -> types_structure .)


state 6

    (6) sentence -> class_declaration .

    ECHO            reduce using rule 6 (sentence -> class_declaration .)
    PRINT           reduce using rule 6 (sentence -> class_declaration .)
    CLASS           reduce using rule 6 (sentence -> class_declaration .)
    INTERFACE       reduce using rule 6 (sentence -> class_declaration .)
    FUNCTION        reduce using rule 6 (sentence -> class_declaration .)
    VARIABLE        reduce using rule 6 (sentence -> class_declaration .)
    INCREASE        reduce using rule 6 (sentence -> class_declaration .)
    DECREMENT       reduce using rule 6 (sentence -> class_declaration .)
    IF              reduce using rule 6 (sentence -> class_declaration .)
    WHILE           reduce using rule 6 (sentence -> class_declaration .)
    FOR             reduce using rule 6 (sentence -> class_declaration .)
    CONST           reduce using rule 6 (sentence -> class_declaration .)
    DEFINE          reduce using rule 6 (sentence -> class_declaration .)
    ARRAY           reduce using rule 6 (sentence -> class_declaration .)
    LEFT_BRACKET    reduce using rule 6 (sentence -> class_declaration .)
    NEW             reduce using rule 6 (sentence -> class_declaration .)
    $end            reduce using rule 6 (sentence -> class_declaration .)
    RETURN          reduce using rule 6 (sentence -> class_declaration .)
    BREAK           reduce using rule 6 (sentence -> class_declaration .)
    RIGHT_BRACE     reduce using rule 6 (sentence -> class_declaration .)


state 7

    (7) sentence -> interface_declaration .

    ECHO            reduce using rule 7 (sentence -> interface_declaration .)
    PRINT           reduce using rule 7 (sentence -> interface_declaration .)
    CLASS           reduce using rule 7 (sentence -> interface_declaration .)
    INTERFACE       reduce using rule 7 (sentence -> interface_declaration .)
    FUNCTION        reduce using rule 7 (sentence -> interface_declaration .)
    VARIABLE        reduce using rule 7 (sentence -> interface_declaration .)
    INCREASE        reduce using rule 7 (sentence -> interface_declaration .)
    DECREMENT       reduce using rule 7 (sentence -> interface_declaration .)
    IF              reduce using rule 7 (sentence -> interface_declaration .)
    WHILE           reduce using rule 7 (sentence -> interface_declaration .)
    FOR             reduce using rule 7 (sentence -> interface_declaration .)
    CONST           reduce using rule 7 (sentence -> interface_declaration .)
    DEFINE          reduce using rule 7 (sentence -> interface_declaration .)
    ARRAY           reduce using rule 7 (sentence -> interface_declaration .)
    LEFT_BRACKET    reduce using rule 7 (sentence -> interface_declaration .)
    NEW             reduce using rule 7 (sentence -> interface_declaration .)
    $end            reduce using rule 7 (sentence -> interface_declaration .)
    RETURN          reduce using rule 7 (sentence -> interface_declaration .)
    BREAK           reduce using rule 7 (sentence -> interface_declaration .)
    RIGHT_BRACE     reduce using rule 7 (sentence -> interface_declaration .)


state 8

    (8) sentence -> control_structures .

    ECHO            reduce using rule 8 (sentence -> control_structures .)
    PRINT           reduce using rule 8 (sentence -> control_structures .)
    CLASS           reduce using rule 8 (sentence -> control_structures .)
    INTERFACE       reduce using rule 8 (sentence -> control_structures .)
    FUNCTION        reduce using rule 8 (sentence -> control_structures .)
    VARIABLE        reduce using rule 8 (sentence -> control_structures .)
    INCREASE        reduce using rule 8 (sentence -> control_structures .)
    DECREMENT       reduce using rule 8 (sentence -> control_structures .)
    IF              reduce using rule 8 (sentence -> control_structures .)
    WHILE           reduce using rule 8 (sentence -> control_structures .)
    FOR             reduce using rule 8 (sentence -> control_structures .)
    CONST           reduce using rule 8 (sentence -> control_structures .)
    DEFINE          reduce using rule 8 (sentence -> control_structures .)
    ARRAY           reduce using rule 8 (sentence -> control_structures .)
    LEFT_BRACKET    reduce using rule 8 (sentence -> control_structures .)
    NEW             reduce using rule 8 (sentence -> control_structures .)
    $end            reduce using rule 8 (sentence -> control_structures .)
    RETURN          reduce using rule 8 (sentence -> control_structures .)
    BREAK           reduce using rule 8 (sentence -> control_structures .)
    RIGHT_BRACE     reduce using rule 8 (sentence -> control_structures .)


state 9

    (9) sentence -> function_declaration .

    ECHO            reduce using rule 9 (sentence -> function_declaration .)
    PRINT           reduce using rule 9 (sentence -> function_declaration .)
    CLASS           reduce using rule 9 (sentence -> function_declaration .)
    INTERFACE       reduce using rule 9 (sentence -> function_declaration .)
    FUNCTION        reduce using rule 9 (sentence -> function_declaration .)
    VARIABLE        reduce using rule 9 (sentence -> function_declaration .)
    INCREASE        reduce using rule 9 (sentence -> function_declaration .)
    DECREMENT       reduce using rule 9 (sentence -> function_declaration .)
    IF              reduce using rule 9 (sentence -> function_declaration .)
    WHILE           reduce using rule 9 (sentence -> function_declaration .)
    FOR             reduce using rule 9 (sentence -> function_declaration .)
    CONST           reduce using rule 9 (sentence -> function_declaration .)
    DEFINE          reduce using rule 9 (sentence -> function_declaration .)
    ARRAY           reduce using rule 9 (sentence -> function_declaration .)
    LEFT_BRACKET    reduce using rule 9 (sentence -> function_declaration .)
    NEW             reduce using rule 9 (sentence -> function_declaration .)
    $end            reduce using rule 9 (sentence -> function_declaration .)
    RETURN          reduce using rule 9 (sentence -> function_declaration .)
    BREAK           reduce using rule 9 (sentence -> function_declaration .)
    RIGHT_BRACE     reduce using rule 9 (sentence -> function_declaration .)


state 10

    (97) print_statement -> ECHO . LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> ECHO . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 50
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 51
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 11

    (98) print_statement -> PRINT . LEFT_PAREN printable_values RIGHT_PAREN
    (100) print_statement -> PRINT . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 81
    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 82
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 12

    (132) assignment -> variable_assignment .

    SEMICOLON       reduce using rule 132 (assignment -> variable_assignment .)


state 13

    (133) assignment -> constant_assignment .

    SEMICOLON       reduce using rule 133 (assignment -> constant_assignment .)


state 14

    (177) types_structure -> structure_array_principal .

    ECHO            reduce using rule 177 (types_structure -> structure_array_principal .)
    PRINT           reduce using rule 177 (types_structure -> structure_array_principal .)
    CLASS           reduce using rule 177 (types_structure -> structure_array_principal .)
    INTERFACE       reduce using rule 177 (types_structure -> structure_array_principal .)
    FUNCTION        reduce using rule 177 (types_structure -> structure_array_principal .)
    VARIABLE        reduce using rule 177 (types_structure -> structure_array_principal .)
    INCREASE        reduce using rule 177 (types_structure -> structure_array_principal .)
    DECREMENT       reduce using rule 177 (types_structure -> structure_array_principal .)
    IF              reduce using rule 177 (types_structure -> structure_array_principal .)
    WHILE           reduce using rule 177 (types_structure -> structure_array_principal .)
    FOR             reduce using rule 177 (types_structure -> structure_array_principal .)
    CONST           reduce using rule 177 (types_structure -> structure_array_principal .)
    DEFINE          reduce using rule 177 (types_structure -> structure_array_principal .)
    ARRAY           reduce using rule 177 (types_structure -> structure_array_principal .)
    LEFT_BRACKET    reduce using rule 177 (types_structure -> structure_array_principal .)
    NEW             reduce using rule 177 (types_structure -> structure_array_principal .)
    $end            reduce using rule 177 (types_structure -> structure_array_principal .)
    SEMICOLON       reduce using rule 177 (types_structure -> structure_array_principal .)
    RETURN          reduce using rule 177 (types_structure -> structure_array_principal .)
    BREAK           reduce using rule 177 (types_structure -> structure_array_principal .)
    RIGHT_BRACE     reduce using rule 177 (types_structure -> structure_array_principal .)


state 15

    (178) types_structure -> structure_matrix_principal .

    ECHO            reduce using rule 178 (types_structure -> structure_matrix_principal .)
    PRINT           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    CLASS           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    INTERFACE       reduce using rule 178 (types_structure -> structure_matrix_principal .)
    FUNCTION        reduce using rule 178 (types_structure -> structure_matrix_principal .)
    VARIABLE        reduce using rule 178 (types_structure -> structure_matrix_principal .)
    INCREASE        reduce using rule 178 (types_structure -> structure_matrix_principal .)
    DECREMENT       reduce using rule 178 (types_structure -> structure_matrix_principal .)
    IF              reduce using rule 178 (types_structure -> structure_matrix_principal .)
    WHILE           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    FOR             reduce using rule 178 (types_structure -> structure_matrix_principal .)
    CONST           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    DEFINE          reduce using rule 178 (types_structure -> structure_matrix_principal .)
    ARRAY           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    LEFT_BRACKET    reduce using rule 178 (types_structure -> structure_matrix_principal .)
    NEW             reduce using rule 178 (types_structure -> structure_matrix_principal .)
    $end            reduce using rule 178 (types_structure -> structure_matrix_principal .)
    SEMICOLON       reduce using rule 178 (types_structure -> structure_matrix_principal .)
    RETURN          reduce using rule 178 (types_structure -> structure_matrix_principal .)
    BREAK           reduce using rule 178 (types_structure -> structure_matrix_principal .)
    RIGHT_BRACE     reduce using rule 178 (types_structure -> structure_matrix_principal .)


state 16

    (179) types_structure -> structure_object_principal .

    ECHO            reduce using rule 179 (types_structure -> structure_object_principal .)
    PRINT           reduce using rule 179 (types_structure -> structure_object_principal .)
    CLASS           reduce using rule 179 (types_structure -> structure_object_principal .)
    INTERFACE       reduce using rule 179 (types_structure -> structure_object_principal .)
    FUNCTION        reduce using rule 179 (types_structure -> structure_object_principal .)
    VARIABLE        reduce using rule 179 (types_structure -> structure_object_principal .)
    INCREASE        reduce using rule 179 (types_structure -> structure_object_principal .)
    DECREMENT       reduce using rule 179 (types_structure -> structure_object_principal .)
    IF              reduce using rule 179 (types_structure -> structure_object_principal .)
    WHILE           reduce using rule 179 (types_structure -> structure_object_principal .)
    FOR             reduce using rule 179 (types_structure -> structure_object_principal .)
    CONST           reduce using rule 179 (types_structure -> structure_object_principal .)
    DEFINE          reduce using rule 179 (types_structure -> structure_object_principal .)
    ARRAY           reduce using rule 179 (types_structure -> structure_object_principal .)
    LEFT_BRACKET    reduce using rule 179 (types_structure -> structure_object_principal .)
    NEW             reduce using rule 179 (types_structure -> structure_object_principal .)
    $end            reduce using rule 179 (types_structure -> structure_object_principal .)
    SEMICOLON       reduce using rule 179 (types_structure -> structure_object_principal .)
    RETURN          reduce using rule 179 (types_structure -> structure_object_principal .)
    BREAK           reduce using rule 179 (types_structure -> structure_object_principal .)
    RIGHT_BRACE     reduce using rule 179 (types_structure -> structure_object_principal .)


state 17

    (234) class_declaration -> CLASS . IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 83


state 18

    (235) interface_declaration -> INTERFACE . IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 84


state 19

    (10) control_structures -> if_statement .

    ECHO            reduce using rule 10 (control_structures -> if_statement .)
    PRINT           reduce using rule 10 (control_structures -> if_statement .)
    CLASS           reduce using rule 10 (control_structures -> if_statement .)
    INTERFACE       reduce using rule 10 (control_structures -> if_statement .)
    FUNCTION        reduce using rule 10 (control_structures -> if_statement .)
    VARIABLE        reduce using rule 10 (control_structures -> if_statement .)
    INCREASE        reduce using rule 10 (control_structures -> if_statement .)
    DECREMENT       reduce using rule 10 (control_structures -> if_statement .)
    IF              reduce using rule 10 (control_structures -> if_statement .)
    WHILE           reduce using rule 10 (control_structures -> if_statement .)
    FOR             reduce using rule 10 (control_structures -> if_statement .)
    CONST           reduce using rule 10 (control_structures -> if_statement .)
    DEFINE          reduce using rule 10 (control_structures -> if_statement .)
    ARRAY           reduce using rule 10 (control_structures -> if_statement .)
    LEFT_BRACKET    reduce using rule 10 (control_structures -> if_statement .)
    NEW             reduce using rule 10 (control_structures -> if_statement .)
    $end            reduce using rule 10 (control_structures -> if_statement .)
    RETURN          reduce using rule 10 (control_structures -> if_statement .)
    BREAK           reduce using rule 10 (control_structures -> if_statement .)
    RIGHT_BRACE     reduce using rule 10 (control_structures -> if_statement .)


state 20

    (11) control_structures -> while_statement .

    ECHO            reduce using rule 11 (control_structures -> while_statement .)
    PRINT           reduce using rule 11 (control_structures -> while_statement .)
    CLASS           reduce using rule 11 (control_structures -> while_statement .)
    INTERFACE       reduce using rule 11 (control_structures -> while_statement .)
    FUNCTION        reduce using rule 11 (control_structures -> while_statement .)
    VARIABLE        reduce using rule 11 (control_structures -> while_statement .)
    INCREASE        reduce using rule 11 (control_structures -> while_statement .)
    DECREMENT       reduce using rule 11 (control_structures -> while_statement .)
    IF              reduce using rule 11 (control_structures -> while_statement .)
    WHILE           reduce using rule 11 (control_structures -> while_statement .)
    FOR             reduce using rule 11 (control_structures -> while_statement .)
    CONST           reduce using rule 11 (control_structures -> while_statement .)
    DEFINE          reduce using rule 11 (control_structures -> while_statement .)
    ARRAY           reduce using rule 11 (control_structures -> while_statement .)
    LEFT_BRACKET    reduce using rule 11 (control_structures -> while_statement .)
    NEW             reduce using rule 11 (control_structures -> while_statement .)
    $end            reduce using rule 11 (control_structures -> while_statement .)
    RETURN          reduce using rule 11 (control_structures -> while_statement .)
    BREAK           reduce using rule 11 (control_structures -> while_statement .)
    RIGHT_BRACE     reduce using rule 11 (control_structures -> while_statement .)


state 21

    (12) control_structures -> for_statement .

    ECHO            reduce using rule 12 (control_structures -> for_statement .)
    PRINT           reduce using rule 12 (control_structures -> for_statement .)
    CLASS           reduce using rule 12 (control_structures -> for_statement .)
    INTERFACE       reduce using rule 12 (control_structures -> for_statement .)
    FUNCTION        reduce using rule 12 (control_structures -> for_statement .)
    VARIABLE        reduce using rule 12 (control_structures -> for_statement .)
    INCREASE        reduce using rule 12 (control_structures -> for_statement .)
    DECREMENT       reduce using rule 12 (control_structures -> for_statement .)
    IF              reduce using rule 12 (control_structures -> for_statement .)
    WHILE           reduce using rule 12 (control_structures -> for_statement .)
    FOR             reduce using rule 12 (control_structures -> for_statement .)
    CONST           reduce using rule 12 (control_structures -> for_statement .)
    DEFINE          reduce using rule 12 (control_structures -> for_statement .)
    ARRAY           reduce using rule 12 (control_structures -> for_statement .)
    LEFT_BRACKET    reduce using rule 12 (control_structures -> for_statement .)
    NEW             reduce using rule 12 (control_structures -> for_statement .)
    $end            reduce using rule 12 (control_structures -> for_statement .)
    RETURN          reduce using rule 12 (control_structures -> for_statement .)
    BREAK           reduce using rule 12 (control_structures -> for_statement .)
    RIGHT_BRACE     reduce using rule 12 (control_structures -> for_statement .)


state 22

    (161) function_declaration -> FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock

    IDENTIFIER      shift and go to state 85


state 23

    (134) variable_assignment -> VARIABLE . assignment_operator values
    (135) variable_assignment -> VARIABLE . assignment_operator expression
    (136) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (137) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (138) variable_assignment -> VARIABLE . assignment_operator types_structure
    (139) variable_assignment -> VARIABLE . assignment_operator input
    (140) variable_assignment -> VARIABLE . assignment_operator special_function
    (141) variable_assignment -> VARIABLE . assignment_operator conditional
    (142) variable_assignment -> VARIABLE . INCREASE
    (143) variable_assignment -> VARIABLE . DECREMENT
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (146) assignment_operator -> . EQUALS
    (147) assignment_operator -> . PLUS_EQUALS

    INCREASE        shift and go to state 87
    DECREMENT       shift and go to state 88
    LEFT_BRACKET    shift and go to state 89
    MINUS           shift and go to state 91
    EQUALS          shift and go to state 90
    PLUS_EQUALS     shift and go to state 92

    assignment_operator            shift and go to state 86

state 24

    (144) variable_assignment -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 93


state 25

    (145) variable_assignment -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 94


state 26

    (148) constant_assignment -> const_syntax .

    SEMICOLON       reduce using rule 148 (constant_assignment -> const_syntax .)


state 27

    (149) constant_assignment -> define_syntax .

    SEMICOLON       reduce using rule 149 (constant_assignment -> define_syntax .)


state 28

    (180) structure_array_principal -> indexed_array .

    ECHO            reduce using rule 180 (structure_array_principal -> indexed_array .)
    PRINT           reduce using rule 180 (structure_array_principal -> indexed_array .)
    CLASS           reduce using rule 180 (structure_array_principal -> indexed_array .)
    INTERFACE       reduce using rule 180 (structure_array_principal -> indexed_array .)
    FUNCTION        reduce using rule 180 (structure_array_principal -> indexed_array .)
    VARIABLE        reduce using rule 180 (structure_array_principal -> indexed_array .)
    INCREASE        reduce using rule 180 (structure_array_principal -> indexed_array .)
    DECREMENT       reduce using rule 180 (structure_array_principal -> indexed_array .)
    IF              reduce using rule 180 (structure_array_principal -> indexed_array .)
    WHILE           reduce using rule 180 (structure_array_principal -> indexed_array .)
    FOR             reduce using rule 180 (structure_array_principal -> indexed_array .)
    CONST           reduce using rule 180 (structure_array_principal -> indexed_array .)
    DEFINE          reduce using rule 180 (structure_array_principal -> indexed_array .)
    ARRAY           reduce using rule 180 (structure_array_principal -> indexed_array .)
    LEFT_BRACKET    reduce using rule 180 (structure_array_principal -> indexed_array .)
    NEW             reduce using rule 180 (structure_array_principal -> indexed_array .)
    $end            reduce using rule 180 (structure_array_principal -> indexed_array .)
    SEMICOLON       reduce using rule 180 (structure_array_principal -> indexed_array .)
    RETURN          reduce using rule 180 (structure_array_principal -> indexed_array .)
    BREAK           reduce using rule 180 (structure_array_principal -> indexed_array .)
    RIGHT_BRACE     reduce using rule 180 (structure_array_principal -> indexed_array .)


state 29

    (181) structure_array_principal -> associative_array .

    ECHO            reduce using rule 181 (structure_array_principal -> associative_array .)
    PRINT           reduce using rule 181 (structure_array_principal -> associative_array .)
    CLASS           reduce using rule 181 (structure_array_principal -> associative_array .)
    INTERFACE       reduce using rule 181 (structure_array_principal -> associative_array .)
    FUNCTION        reduce using rule 181 (structure_array_principal -> associative_array .)
    VARIABLE        reduce using rule 181 (structure_array_principal -> associative_array .)
    INCREASE        reduce using rule 181 (structure_array_principal -> associative_array .)
    DECREMENT       reduce using rule 181 (structure_array_principal -> associative_array .)
    IF              reduce using rule 181 (structure_array_principal -> associative_array .)
    WHILE           reduce using rule 181 (structure_array_principal -> associative_array .)
    FOR             reduce using rule 181 (structure_array_principal -> associative_array .)
    CONST           reduce using rule 181 (structure_array_principal -> associative_array .)
    DEFINE          reduce using rule 181 (structure_array_principal -> associative_array .)
    ARRAY           reduce using rule 181 (structure_array_principal -> associative_array .)
    LEFT_BRACKET    reduce using rule 181 (structure_array_principal -> associative_array .)
    NEW             reduce using rule 181 (structure_array_principal -> associative_array .)
    $end            reduce using rule 181 (structure_array_principal -> associative_array .)
    SEMICOLON       reduce using rule 181 (structure_array_principal -> associative_array .)
    RETURN          reduce using rule 181 (structure_array_principal -> associative_array .)
    BREAK           reduce using rule 181 (structure_array_principal -> associative_array .)
    RIGHT_BRACE     reduce using rule 181 (structure_array_principal -> associative_array .)


state 30

    (182) structure_array_principal -> access_array_stucture .

    ECHO            reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    PRINT           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    CLASS           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    INTERFACE       reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    FUNCTION        reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    VARIABLE        reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    INCREASE        reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    DECREMENT       reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    IF              reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    WHILE           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    FOR             reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    CONST           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    DEFINE          reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    ARRAY           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    LEFT_BRACKET    reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    NEW             reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    $end            reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    SEMICOLON       reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    RETURN          reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    BREAK           reduce using rule 182 (structure_array_principal -> access_array_stucture .)
    RIGHT_BRACE     reduce using rule 182 (structure_array_principal -> access_array_stucture .)


state 31

    (183) structure_array_principal -> access_array_element .
    (197) access_array_stucture -> access_array_element . SEMICOLON
    (227) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (229) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    ECHO            reduce using rule 183 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 183 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 183 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 183 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 183 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 183 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 183 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 183 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 183 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 183 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 183 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 183 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 183 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 183 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 183 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 183 (structure_array_principal -> access_array_element .)
    $end            reduce using rule 183 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 183 (structure_array_principal -> access_array_element .)
    BREAK           reduce using rule 183 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 183 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 95
    MINUS           shift and go to state 96


state 32

    (200) structure_matrix_principal -> matrix_firstform .

    ECHO            reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    PRINT           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    CLASS           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    INTERFACE       reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    FUNCTION        reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    VARIABLE        reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    INCREASE        reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    DECREMENT       reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    IF              reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    WHILE           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    FOR             reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    CONST           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    DEFINE          reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    ARRAY           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    LEFT_BRACKET    reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    NEW             reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    $end            reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    SEMICOLON       reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    RETURN          reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    BREAK           reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)
    RIGHT_BRACE     reduce using rule 200 (structure_matrix_principal -> matrix_firstform .)


state 33

    (201) structure_matrix_principal -> matrix_secondform .

    ECHO            reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    PRINT           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    CLASS           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    INTERFACE       reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    FUNCTION        reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    VARIABLE        reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    INCREASE        reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    DECREMENT       reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    IF              reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    WHILE           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    FOR             reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    CONST           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    DEFINE          reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    ARRAY           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    LEFT_BRACKET    reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    NEW             reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    $end            reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    SEMICOLON       reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    RETURN          reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    BREAK           reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)
    RIGHT_BRACE     reduce using rule 201 (structure_matrix_principal -> matrix_secondform .)


state 34

    (202) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (215) modify_element_matrix -> access_element_matrix . EQUALS values
    (216) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE

    SEMICOLON       shift and go to state 97
    EQUALS          shift and go to state 98


state 35

    (203) structure_matrix_principal -> modify_element_matrix . SEMICOLON

    SEMICOLON       shift and go to state 99


state 36

    (204) structure_matrix_principal -> add_element_matrix .

    ECHO            reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    PRINT           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    CLASS           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    INTERFACE       reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    FUNCTION        reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    VARIABLE        reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    INCREASE        reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    DECREMENT       reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    IF              reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    WHILE           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    FOR             reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    CONST           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    DEFINE          reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    ARRAY           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    LEFT_BRACKET    reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    NEW             reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    $end            reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    SEMICOLON       reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    RETURN          reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    BREAK           reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)
    RIGHT_BRACE     reduce using rule 204 (structure_matrix_principal -> add_element_matrix .)


state 37

    (218) structure_object_principal -> object_creation .

    ECHO            reduce using rule 218 (structure_object_principal -> object_creation .)
    PRINT           reduce using rule 218 (structure_object_principal -> object_creation .)
    CLASS           reduce using rule 218 (structure_object_principal -> object_creation .)
    INTERFACE       reduce using rule 218 (structure_object_principal -> object_creation .)
    FUNCTION        reduce using rule 218 (structure_object_principal -> object_creation .)
    VARIABLE        reduce using rule 218 (structure_object_principal -> object_creation .)
    INCREASE        reduce using rule 218 (structure_object_principal -> object_creation .)
    DECREMENT       reduce using rule 218 (structure_object_principal -> object_creation .)
    IF              reduce using rule 218 (structure_object_principal -> object_creation .)
    WHILE           reduce using rule 218 (structure_object_principal -> object_creation .)
    FOR             reduce using rule 218 (structure_object_principal -> object_creation .)
    CONST           reduce using rule 218 (structure_object_principal -> object_creation .)
    DEFINE          reduce using rule 218 (structure_object_principal -> object_creation .)
    ARRAY           reduce using rule 218 (structure_object_principal -> object_creation .)
    LEFT_BRACKET    reduce using rule 218 (structure_object_principal -> object_creation .)
    NEW             reduce using rule 218 (structure_object_principal -> object_creation .)
    $end            reduce using rule 218 (structure_object_principal -> object_creation .)
    COMMA           reduce using rule 218 (structure_object_principal -> object_creation .)
    SEMICOLON       reduce using rule 218 (structure_object_principal -> object_creation .)
    RIGHT_PAREN     reduce using rule 218 (structure_object_principal -> object_creation .)
    RETURN          reduce using rule 218 (structure_object_principal -> object_creation .)
    BREAK           reduce using rule 218 (structure_object_principal -> object_creation .)
    RIGHT_BRACE     reduce using rule 218 (structure_object_principal -> object_creation .)


state 38

    (219) structure_object_principal -> access_method_object .

    ECHO            reduce using rule 219 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 219 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 219 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 219 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 219 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 219 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 219 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 219 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 219 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 219 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 219 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 219 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 219 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 219 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 219 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 219 (structure_object_principal -> access_method_object .)
    $end            reduce using rule 219 (structure_object_principal -> access_method_object .)
    COMMA           reduce using rule 219 (structure_object_principal -> access_method_object .)
    SEMICOLON       reduce using rule 219 (structure_object_principal -> access_method_object .)
    RIGHT_PAREN     reduce using rule 219 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 219 (structure_object_principal -> access_method_object .)
    BREAK           reduce using rule 219 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 219 (structure_object_principal -> access_method_object .)


state 39

    (14) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 100


state 40

    (13) while_statement -> WHILE . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 101


state 41

    (28) for_statement -> FOR . LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_PAREN      shift and go to state 102


state 42

    (150) const_syntax -> CONST . IDENTIFIER EQUALS values

    IDENTIFIER      shift and go to state 103


state 43

    (151) define_syntax -> DEFINE . LEFT_PAREN STRING COMMA values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 104


state 44

    (184) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (205) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 105
    LEFT_BRACKET    shift and go to state 106


state 45

    (206) matrix_secondform -> LEFT_BRACKET . structure_matrix_second RIGHT_BRACKET SEMICOLON
    (207) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (208) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 107

    structure_matrix_second        shift and go to state 108

state 46

    (220) object_creation -> NEW . IDENTIFIER
    (221) object_creation -> NEW . IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    IDENTIFIER      shift and go to state 109


state 47

    (1) program -> sentence program .

    $end            reduce using rule 1 (program -> sentence program .)


state 48

    (3) sentence -> print_statement SEMICOLON .

    ECHO            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    PRINT           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CLASS           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INTERFACE       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FUNCTION        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    VARIABLE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    INCREASE        reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DECREMENT       reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    IF              reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    WHILE           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    FOR             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    CONST           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    DEFINE          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    ARRAY           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    LEFT_BRACKET    reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    NEW             reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    $end            reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RETURN          reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    BREAK           reduce using rule 3 (sentence -> print_statement SEMICOLON .)
    RIGHT_BRACE     reduce using rule 3 (sentence -> print_statement SEMICOLON .)


state 49

    (4) sentence -> assignment SEMICOLON .

    ECHO            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    PRINT           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CLASS           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INTERFACE       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FUNCTION        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    VARIABLE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    INCREASE        reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DECREMENT       reduce using rule 4 (sentence -> assignment SEMICOLON .)
    IF              reduce using rule 4 (sentence -> assignment SEMICOLON .)
    WHILE           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    FOR             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    CONST           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    DEFINE          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    ARRAY           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    LEFT_BRACKET    reduce using rule 4 (sentence -> assignment SEMICOLON .)
    NEW             reduce using rule 4 (sentence -> assignment SEMICOLON .)
    $end            reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RETURN          reduce using rule 4 (sentence -> assignment SEMICOLON .)
    BREAK           reduce using rule 4 (sentence -> assignment SEMICOLON .)
    RIGHT_BRACE     reduce using rule 4 (sentence -> assignment SEMICOLON .)


state 50

    (97) print_statement -> ECHO LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (131) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 114
    STRING          shift and go to state 54
    INTEGER         shift and go to state 115
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    LEFT_PAREN      shift and go to state 110
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 111
    conditional                    shift and go to state 112
    expression                     shift and go to state 113
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    boolean                        shift and go to state 61
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    access_array_element           shift and go to state 71
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76

state 51

    (99) print_statement -> ECHO printable_values .

    SEMICOLON       reduce using rule 99 (print_statement -> ECHO printable_values .)


state 52

    (101) printable_values -> values .
    (102) printable_values -> values . COMMA printable_values
    (76) comparation -> values . comparator_operator values
    (77) comparation -> values . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 101 (printable_values -> values .)
    RIGHT_PAREN     reduce using rule 101 (printable_values -> values .)
    COMMA           shift and go to state 116
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 117

state 53

    (103) printable_values -> VARIABLE .
    (104) printable_values -> VARIABLE . COMMA printable_values
    (106) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (153) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .
    (130) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    SEMICOLON       reduce using rule 103 (printable_values -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    LEFT_PAREN      shift and go to state 130
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]


state 54

    (105) printable_values -> STRING . STRING_CONCATENATION STRING
    (116) values -> STRING .
    (62) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    STRING_CONCATENATION shift and go to state 133
    COMMA           reduce using rule 116 (values -> STRING .)
    EQUALS_EQUALS   reduce using rule 116 (values -> STRING .)
    IDENTICAL       reduce using rule 116 (values -> STRING .)
    NOT_EQUALS      reduce using rule 116 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 116 (values -> STRING .)
    SMALL_THAN      reduce using rule 116 (values -> STRING .)
    GREATER_THAN    reduce using rule 116 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> STRING .)
    SPACECRAFT      reduce using rule 116 (values -> STRING .)
    NULL_FUSION     reduce using rule 116 (values -> STRING .)
    SEMICOLON       reduce using rule 116 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 116 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]


state 55

    (107) printable_values -> conditional .
    (108) printable_values -> conditional . COMMA printable_values

    SEMICOLON       reduce using rule 107 (printable_values -> conditional .)
    RIGHT_PAREN     reduce using rule 107 (printable_values -> conditional .)
    COMMA           shift and go to state 134


state 56

    (109) printable_values -> structure_object_principal .
    (110) printable_values -> structure_object_principal . COMMA printable_values

    SEMICOLON       reduce using rule 109 (printable_values -> structure_object_principal .)
    RIGHT_PAREN     reduce using rule 109 (printable_values -> structure_object_principal .)
    COMMA           shift and go to state 135


state 57

    (111) printable_values -> function_invocation .
    (112) printable_values -> function_invocation . COMMA printable_values

    SEMICOLON       reduce using rule 111 (printable_values -> function_invocation .)
    RIGHT_PAREN     reduce using rule 111 (printable_values -> function_invocation .)
    COMMA           shift and go to state 136


state 58

    (113) printable_values -> string_special_function .
    (114) printable_values -> string_special_function . COMMA printable_values

    SEMICOLON       reduce using rule 113 (printable_values -> string_special_function .)
    RIGHT_PAREN     reduce using rule 113 (printable_values -> string_special_function .)
    COMMA           shift and go to state 137


state 59

    (115) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .
    (129) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 115 (values -> INTEGER .)
    COMMA           reduce using rule 115 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 115 (values -> INTEGER .)
    IDENTICAL       reduce using rule 115 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 115 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 115 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 115 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 115 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 115 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 115 (values -> INTEGER .)
    SEMICOLON       reduce using rule 115 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 115 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 129 (factor -> INTEGER .)
    DIVIDE          reduce using rule 129 (factor -> INTEGER .)
    MODULE          reduce using rule 129 (factor -> INTEGER .)
    POW             reduce using rule 129 (factor -> INTEGER .)
    PLUS            reduce using rule 129 (factor -> INTEGER .)
    MINUS           reduce using rule 129 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 129 (factor -> INTEGER .) ]


state 60

    (117) values -> FLOAT .
    (64) true_boolean_types -> FLOAT .
    (71) false_boolean_types -> FLOAT .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 64 (true_boolean_types -> FLOAT .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 117 (values -> FLOAT .)
    EQUALS_EQUALS   reduce using rule 117 (values -> FLOAT .)
    IDENTICAL       reduce using rule 117 (values -> FLOAT .)
    NOT_EQUALS      reduce using rule 117 (values -> FLOAT .)
    NOT_IDENTICAL   reduce using rule 117 (values -> FLOAT .)
    SMALL_THAN      reduce using rule 117 (values -> FLOAT .)
    GREATER_THAN    reduce using rule 117 (values -> FLOAT .)
    SMALL_EQUALS_TO reduce using rule 117 (values -> FLOAT .)
    GREATER_EQUALS_TO reduce using rule 117 (values -> FLOAT .)
    SPACECRAFT      reduce using rule 117 (values -> FLOAT .)
    NULL_FUSION     reduce using rule 117 (values -> FLOAT .)
    SEMICOLON       reduce using rule 117 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 117 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)

  ! LOGIC_AND       [ reduce using rule 71 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_OR        [ reduce using rule 71 (false_boolean_types -> FLOAT .) ]
  ! LOGIC_XOR       [ reduce using rule 71 (false_boolean_types -> FLOAT .) ]


state 61

    (118) values -> boolean .

    COMMA           reduce using rule 118 (values -> boolean .)
    EQUALS_EQUALS   reduce using rule 118 (values -> boolean .)
    IDENTICAL       reduce using rule 118 (values -> boolean .)
    NOT_EQUALS      reduce using rule 118 (values -> boolean .)
    NOT_IDENTICAL   reduce using rule 118 (values -> boolean .)
    SMALL_THAN      reduce using rule 118 (values -> boolean .)
    GREATER_THAN    reduce using rule 118 (values -> boolean .)
    SMALL_EQUALS_TO reduce using rule 118 (values -> boolean .)
    GREATER_EQUALS_TO reduce using rule 118 (values -> boolean .)
    SPACECRAFT      reduce using rule 118 (values -> boolean .)
    NULL_FUSION     reduce using rule 118 (values -> boolean .)
    SEMICOLON       reduce using rule 118 (values -> boolean .)
    RIGHT_PAREN     reduce using rule 118 (values -> boolean .)
    RIGHT_BRACKET   reduce using rule 118 (values -> boolean .)
    LOGIC_AND       reduce using rule 118 (values -> boolean .)
    LOGIC_OR        reduce using rule 118 (values -> boolean .)
    LOGIC_XOR       reduce using rule 118 (values -> boolean .)
    ECHO            reduce using rule 118 (values -> boolean .)
    PRINT           reduce using rule 118 (values -> boolean .)
    CLASS           reduce using rule 118 (values -> boolean .)
    INTERFACE       reduce using rule 118 (values -> boolean .)
    FUNCTION        reduce using rule 118 (values -> boolean .)
    VARIABLE        reduce using rule 118 (values -> boolean .)
    INCREASE        reduce using rule 118 (values -> boolean .)
    DECREMENT       reduce using rule 118 (values -> boolean .)
    IF              reduce using rule 118 (values -> boolean .)
    WHILE           reduce using rule 118 (values -> boolean .)
    FOR             reduce using rule 118 (values -> boolean .)
    CONST           reduce using rule 118 (values -> boolean .)
    DEFINE          reduce using rule 118 (values -> boolean .)
    ARRAY           reduce using rule 118 (values -> boolean .)
    LEFT_BRACKET    reduce using rule 118 (values -> boolean .)
    NEW             reduce using rule 118 (values -> boolean .)
    $end            reduce using rule 118 (values -> boolean .)
    RETURN          reduce using rule 118 (values -> boolean .)
    BREAK           reduce using rule 118 (values -> boolean .)
    RIGHT_BRACE     reduce using rule 118 (values -> boolean .)


state 62

    (50) conditional -> boolean_expression .
    (51) conditional -> boolean_expression . logic_operator boolean_expression
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

  ! shift/reduce conflict for LOGIC_AND resolved as shift
  ! shift/reduce conflict for LOGIC_OR resolved as shift
  ! shift/reduce conflict for LOGIC_XOR resolved as shift
    COMMA           reduce using rule 50 (conditional -> boolean_expression .)
    SEMICOLON       reduce using rule 50 (conditional -> boolean_expression .)
    RIGHT_PAREN     reduce using rule 50 (conditional -> boolean_expression .)
    LOGIC_AND       shift and go to state 139
    LOGIC_OR        shift and go to state 140
    LOGIC_XOR       shift and go to state 141

  ! LOGIC_AND       [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_OR        [ reduce using rule 50 (conditional -> boolean_expression .) ]
  ! LOGIC_XOR       [ reduce using rule 50 (conditional -> boolean_expression .) ]

    logic_operator                 shift and go to state 138

state 63

    (152) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 142


state 64

    (170) string_special_function -> STRLEN . LEFT_PAREN string_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 143


state 65

    (171) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> SUBSTR . LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN

    LEFT_PAREN      shift and go to state 144


state 66

    (119) boolean -> TRUE .
    (61) true_boolean_types -> TRUE .

    COMMA           reduce using rule 119 (boolean -> TRUE .)
    EQUALS_EQUALS   reduce using rule 119 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 119 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 119 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 119 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 119 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 119 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 119 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 119 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 119 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 119 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 119 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 119 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)


state 67

    (120) boolean -> FALSE .
    (67) false_boolean_types -> FALSE .

    COMMA           reduce using rule 120 (boolean -> FALSE .)
    EQUALS_EQUALS   reduce using rule 120 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 120 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 120 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 120 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 120 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 120 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 120 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 120 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 120 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 120 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 120 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 120 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)


state 68

    (55) boolean_expression -> comparation .

    LOGIC_AND       reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_OR        reduce using rule 55 (boolean_expression -> comparation .)
    LOGIC_XOR       reduce using rule 55 (boolean_expression -> comparation .)
    COMMA           reduce using rule 55 (boolean_expression -> comparation .)
    SEMICOLON       reduce using rule 55 (boolean_expression -> comparation .)
    RIGHT_PAREN     reduce using rule 55 (boolean_expression -> comparation .)


state 69

    (57) boolean_expression -> logic_not_sentence .

    LOGIC_AND       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_OR        reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    LOGIC_XOR       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    COMMA           reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    SEMICOLON       reduce using rule 57 (boolean_expression -> logic_not_sentence .)
    RIGHT_PAREN     reduce using rule 57 (boolean_expression -> logic_not_sentence .)


state 70

    (58) boolean_expression -> logic_expression .

    LOGIC_AND       reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_OR        reduce using rule 58 (boolean_expression -> logic_expression .)
    LOGIC_XOR       reduce using rule 58 (boolean_expression -> logic_expression .)
    COMMA           reduce using rule 58 (boolean_expression -> logic_expression .)
    SEMICOLON       reduce using rule 58 (boolean_expression -> logic_expression .)
    RIGHT_PAREN     reduce using rule 58 (boolean_expression -> logic_expression .)


state 71

    (227) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (229) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (80) comparation -> access_array_element . EQUALS_EQUALS values
    (81) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (84) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    MINUS           shift and go to state 96
    EQUALS_EQUALS   shift and go to state 145


state 72

    (78) comparation -> expression . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 146

state 73

    (85) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    EQUALS_EQUALS   shift and go to state 147


state 74

    (74) logic_not_sentence -> LOGIC_NOT . conditional
    (75) logic_not_sentence -> LOGIC_NOT . VARIABLE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 149
    LEFT_PAREN      shift and go to state 110
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    conditional                    shift and go to state 148
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 150
    expression                     shift and go to state 72
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 75

    (59) logic_expression -> true_boolean_types . logic_operator false_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 139
    LOGIC_OR        shift and go to state 140
    LOGIC_XOR       shift and go to state 141

    logic_operator                 shift and go to state 155

state 76

    (60) logic_expression -> false_boolean_types . logic_operator true_boolean_types
    (52) logic_operator -> . LOGIC_AND
    (53) logic_operator -> . LOGIC_OR
    (54) logic_operator -> . LOGIC_XOR

    LOGIC_AND       shift and go to state 139
    LOGIC_OR        shift and go to state 140
    LOGIC_XOR       shift and go to state 141

    logic_operator                 shift and go to state 156

state 77

    (121) expression -> term .
    (122) expression -> term . PLUS expression
    (123) expression -> term . MINUS expression

    EQUALS_EQUALS   reduce using rule 121 (expression -> term .)
    IDENTICAL       reduce using rule 121 (expression -> term .)
    NOT_EQUALS      reduce using rule 121 (expression -> term .)
    NOT_IDENTICAL   reduce using rule 121 (expression -> term .)
    SMALL_THAN      reduce using rule 121 (expression -> term .)
    GREATER_THAN    reduce using rule 121 (expression -> term .)
    SMALL_EQUALS_TO reduce using rule 121 (expression -> term .)
    GREATER_EQUALS_TO reduce using rule 121 (expression -> term .)
    SPACECRAFT      reduce using rule 121 (expression -> term .)
    NULL_FUSION     reduce using rule 121 (expression -> term .)
    RIGHT_PAREN     reduce using rule 121 (expression -> term .)
    SEMICOLON       reduce using rule 121 (expression -> term .)
    LOGIC_AND       reduce using rule 121 (expression -> term .)
    LOGIC_OR        reduce using rule 121 (expression -> term .)
    LOGIC_XOR       reduce using rule 121 (expression -> term .)
    COMMA           reduce using rule 121 (expression -> term .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158


state 78

    (66) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (72) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 159


state 79

    (73) false_boolean_types -> NULL .

    LOGIC_AND       reduce using rule 73 (false_boolean_types -> NULL .)
    LOGIC_OR        reduce using rule 73 (false_boolean_types -> NULL .)
    LOGIC_XOR       reduce using rule 73 (false_boolean_types -> NULL .)
    COMMA           reduce using rule 73 (false_boolean_types -> NULL .)
    SEMICOLON       reduce using rule 73 (false_boolean_types -> NULL .)
    RIGHT_PAREN     reduce using rule 73 (false_boolean_types -> NULL .)


state 80

    (124) term -> factor .
    (125) term -> factor . MULTIPLY term
    (126) term -> factor . DIVIDE term
    (127) term -> factor . MODULE term
    (128) term -> factor . POW term

    PLUS            reduce using rule 124 (term -> factor .)
    MINUS           reduce using rule 124 (term -> factor .)
    EQUALS_EQUALS   reduce using rule 124 (term -> factor .)
    IDENTICAL       reduce using rule 124 (term -> factor .)
    NOT_EQUALS      reduce using rule 124 (term -> factor .)
    NOT_IDENTICAL   reduce using rule 124 (term -> factor .)
    SMALL_THAN      reduce using rule 124 (term -> factor .)
    GREATER_THAN    reduce using rule 124 (term -> factor .)
    SMALL_EQUALS_TO reduce using rule 124 (term -> factor .)
    GREATER_EQUALS_TO reduce using rule 124 (term -> factor .)
    SPACECRAFT      reduce using rule 124 (term -> factor .)
    NULL_FUSION     reduce using rule 124 (term -> factor .)
    RIGHT_PAREN     reduce using rule 124 (term -> factor .)
    SEMICOLON       reduce using rule 124 (term -> factor .)
    LOGIC_AND       reduce using rule 124 (term -> factor .)
    LOGIC_OR        reduce using rule 124 (term -> factor .)
    LOGIC_XOR       reduce using rule 124 (term -> factor .)
    COMMA           reduce using rule 124 (term -> factor .)
    MULTIPLY        shift and go to state 160
    DIVIDE          shift and go to state 161
    MODULE          shift and go to state 162
    POW             shift and go to state 163


state 81

    (98) print_statement -> PRINT LEFT_PAREN . printable_values RIGHT_PAREN
    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (131) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL

    VARIABLE        shift and go to state 114
    STRING          shift and go to state 54
    INTEGER         shift and go to state 115
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    LEFT_PAREN      shift and go to state 110
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 164
    conditional                    shift and go to state 112
    expression                     shift and go to state 113
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    boolean                        shift and go to state 61
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    access_array_element           shift and go to state 71
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76

state 82

    (100) print_statement -> PRINT printable_values .

    SEMICOLON       reduce using rule 100 (print_statement -> PRINT printable_values .)


state 83

    (234) class_declaration -> CLASS IDENTIFIER . class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (239) class_extends_opt -> . EXTENDS IDENTIFIER
    (240) class_extends_opt -> .

    EXTENDS         shift and go to state 166
    IMPLEMENTS      reduce using rule 240 (class_extends_opt -> .)
    LEFT_BRACE      reduce using rule 240 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 165

state 84

    (235) interface_declaration -> INTERFACE IDENTIFIER . class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (239) class_extends_opt -> . EXTENDS IDENTIFIER
    (240) class_extends_opt -> .

    EXTENDS         shift and go to state 166
    LEFT_BRACE      reduce using rule 240 (class_extends_opt -> .)

    class_extends_opt              shift and go to state 167

state 85

    (161) function_declaration -> FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 168


state 86

    (134) variable_assignment -> VARIABLE assignment_operator . values
    (135) variable_assignment -> VARIABLE assignment_operator . expression
    (136) variable_assignment -> VARIABLE assignment_operator . function_invocation
    (137) variable_assignment -> VARIABLE assignment_operator . string_special_function
    (138) variable_assignment -> VARIABLE assignment_operator . types_structure
    (139) variable_assignment -> VARIABLE assignment_operator . input
    (140) variable_assignment -> VARIABLE assignment_operator . special_function
    (141) variable_assignment -> VARIABLE assignment_operator . conditional
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (168) input -> . FEGTS LEFT_PAREN STDIN RIGHT_PAREN
    (169) input -> . READLINE LEFT_PAREN STRING RIGHT_PAREN
    (162) special_function -> . arrow_function
    (163) special_function -> . anonymous_functions
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (164) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (165) arrow_function -> . FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (166) anonymous_functions -> . FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL

    INTEGER         shift and go to state 115
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    VARIABLE        shift and go to state 169
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    FEGTS           shift and go to state 178
    READLINE        shift and go to state 179
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    FN              shift and go to state 184
    FUNCTION        shift and go to state 185
    LEFT_PAREN      shift and go to state 110
    ARRAY           shift and go to state 186
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    NULL            shift and go to state 79

    values                         shift and go to state 170
    expression                     shift and go to state 171
    function_invocation            shift and go to state 172
    string_special_function        shift and go to state 173
    types_structure                shift and go to state 174
    input                          shift and go to state 175
    special_function               shift and go to state 176
    conditional                    shift and go to state 177
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    arrow_function                 shift and go to state 180
    anonymous_functions            shift and go to state 181
    boolean_expression             shift and go to state 62
    factor                         shift and go to state 80
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 182
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 183
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76

state 87

    (142) variable_assignment -> VARIABLE INCREASE .

    SEMICOLON       reduce using rule 142 (variable_assignment -> VARIABLE INCREASE .)


state 88

    (143) variable_assignment -> VARIABLE DECREMENT .

    SEMICOLON       reduce using rule 143 (variable_assignment -> VARIABLE DECREMENT .)


state 89

    (198) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) add_element_matrix -> VARIABLE LEFT_BRACKET . RIGHT_BRACKET EQUALS indexed_array

    INTEGER         shift and go to state 188
    VARIABLE        shift and go to state 187
    RIGHT_BRACKET   shift and go to state 189


state 90

    (146) assignment_operator -> EQUALS .

    INTEGER         reduce using rule 146 (assignment_operator -> EQUALS .)
    STRING          reduce using rule 146 (assignment_operator -> EQUALS .)
    FLOAT           reduce using rule 146 (assignment_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 146 (assignment_operator -> EQUALS .)
    VARIABLE        reduce using rule 146 (assignment_operator -> EQUALS .)
    STRLEN          reduce using rule 146 (assignment_operator -> EQUALS .)
    SUBSTR          reduce using rule 146 (assignment_operator -> EQUALS .)
    FEGTS           reduce using rule 146 (assignment_operator -> EQUALS .)
    READLINE        reduce using rule 146 (assignment_operator -> EQUALS .)
    TRUE            reduce using rule 146 (assignment_operator -> EQUALS .)
    FALSE           reduce using rule 146 (assignment_operator -> EQUALS .)
    FN              reduce using rule 146 (assignment_operator -> EQUALS .)
    FUNCTION        reduce using rule 146 (assignment_operator -> EQUALS .)
    LEFT_PAREN      reduce using rule 146 (assignment_operator -> EQUALS .)
    ARRAY           reduce using rule 146 (assignment_operator -> EQUALS .)
    LEFT_BRACKET    reduce using rule 146 (assignment_operator -> EQUALS .)
    NEW             reduce using rule 146 (assignment_operator -> EQUALS .)
    LOGIC_NOT       reduce using rule 146 (assignment_operator -> EQUALS .)
    NULL            reduce using rule 146 (assignment_operator -> EQUALS .)


state 91

    (222) access_method_object -> VARIABLE MINUS . GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType
    (224) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 190


state 92

    (147) assignment_operator -> PLUS_EQUALS .

    INTEGER         reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    STRING          reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    FLOAT           reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    IDENTIFIER      reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    VARIABLE        reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    STRLEN          reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    SUBSTR          reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    FEGTS           reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    READLINE        reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    TRUE            reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    FALSE           reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    FN              reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    FUNCTION        reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    LEFT_PAREN      reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    ARRAY           reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    LEFT_BRACKET    reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    NEW             reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    LOGIC_NOT       reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)
    NULL            reduce using rule 147 (assignment_operator -> PLUS_EQUALS .)


state 93

    (144) variable_assignment -> INCREASE VARIABLE .

    SEMICOLON       reduce using rule 144 (variable_assignment -> INCREASE VARIABLE .)


state 94

    (145) variable_assignment -> DECREMENT VARIABLE .

    SEMICOLON       reduce using rule 145 (variable_assignment -> DECREMENT VARIABLE .)


state 95

    (197) access_array_stucture -> access_array_element SEMICOLON .

    ECHO            reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    PRINT           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    CLASS           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    INTERFACE       reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    FUNCTION        reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    VARIABLE        reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    INCREASE        reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    DECREMENT       reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    IF              reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    WHILE           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    FOR             reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    CONST           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    DEFINE          reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    ARRAY           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    LEFT_BRACKET    reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    NEW             reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    $end            reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    SEMICOLON       reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    RETURN          reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    BREAK           reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)
    RIGHT_BRACE     reduce using rule 197 (access_array_stucture -> access_array_element SEMICOLON .)


state 96

    (227) access_method_object -> access_array_element MINUS . GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element MINUS . GREATER_THAN accessType
    (229) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element MINUS . GREATER_THAN accessType EQUALS access_array_element

    GREATER_THAN    shift and go to state 191


state 97

    (202) structure_matrix_principal -> access_element_matrix SEMICOLON .

    ECHO            reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    PRINT           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CLASS           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    IF              reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    WHILE           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    FOR             reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    CONST           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    NEW             reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    $end            reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RETURN          reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    BREAK           reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 202 (structure_matrix_principal -> access_element_matrix SEMICOLON .)


state 98

    (215) modify_element_matrix -> access_element_matrix EQUALS . values
    (216) modify_element_matrix -> access_element_matrix EQUALS . VARIABLE
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 193
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 192
    boolean                        shift and go to state 61

state 99

    (203) structure_matrix_principal -> modify_element_matrix SEMICOLON .

    ECHO            reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    PRINT           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CLASS           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INTERFACE       reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FUNCTION        reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    VARIABLE        reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    INCREASE        reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DECREMENT       reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    IF              reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    WHILE           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    FOR             reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    CONST           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    DEFINE          reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    ARRAY           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    LEFT_BRACKET    reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    NEW             reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    $end            reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    SEMICOLON       reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RETURN          reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    BREAK           reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)
    RIGHT_BRACE     reduce using rule 203 (structure_matrix_principal -> modify_element_matrix SEMICOLON .)


state 100

    (14) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    conditional                    shift and go to state 199
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 150
    expression                     shift and go to state 72
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 101

    (13) while_statement -> WHILE LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    conditional                    shift and go to state 201
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 150
    expression                     shift and go to state 72
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 102

    (28) for_statement -> FOR LEFT_PAREN . VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    VARIABLE        shift and go to state 202


state 103

    (150) const_syntax -> CONST IDENTIFIER . EQUALS values

    EQUALS          shift and go to state 203


state 104

    (151) define_syntax -> DEFINE LEFT_PAREN . STRING COMMA values RIGHT_PAREN

    STRING          shift and go to state 204


state 105

    (184) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (185) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (205) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (187) structure_array -> . key EQUALS GREATER_THAN values
    (188) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (209) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (210) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (189) key -> . INTEGER
    (190) key -> . STRING
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    ARRAY           shift and go to state 205
    INTEGER         shift and go to state 213
    STRING          shift and go to state 214
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    structure_array                shift and go to state 207
    structure_matrix_first         shift and go to state 208
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    key                            shift and go to state 212
    boolean                        shift and go to state 61

state 106

    (186) associative_array -> ARRAY LEFT_BRACKET . structure_array RIGHT_BRACKET
    (187) structure_array -> . key EQUALS GREATER_THAN values
    (188) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (189) key -> . INTEGER
    (190) key -> . STRING

    INTEGER         shift and go to state 216
    STRING          shift and go to state 217

    structure_array                shift and go to state 215
    key                            shift and go to state 212

state 107

    (207) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET
    (208) structure_matrix_second -> LEFT_BRACKET . values RIGHT_BRACKET COMMA structure_matrix_second
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 218
    boolean                        shift and go to state 61

state 108

    (206) matrix_secondform -> LEFT_BRACKET structure_matrix_second . RIGHT_BRACKET SEMICOLON

    RIGHT_BRACKET   shift and go to state 219


state 109

    (220) object_creation -> NEW IDENTIFIER .
    (221) object_creation -> NEW IDENTIFIER . LEFT_PAREN params RIGHT_PAREN

    ECHO            reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    PRINT           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    CLASS           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    INTERFACE       reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    FUNCTION        reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    VARIABLE        reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    INCREASE        reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    DECREMENT       reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    IF              reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    WHILE           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    FOR             reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    CONST           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    DEFINE          reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    ARRAY           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    LEFT_BRACKET    reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    NEW             reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    $end            reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    COMMA           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    SEMICOLON       reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    RETURN          reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    BREAK           reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 220 (object_creation -> NEW IDENTIFIER .)
    LEFT_PAREN      shift and go to state 220


state 110

    (56) boolean_expression -> LEFT_PAREN . conditional RIGHT_PAREN
    (131) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 222
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 223
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    conditional                    shift and go to state 221
    expression                     shift and go to state 113
    boolean_expression             shift and go to state 62
    term                           shift and go to state 77
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    factor                         shift and go to state 80
    values                         shift and go to state 150
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61

state 111

    (97) print_statement -> ECHO LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 224


state 112

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN
    (107) printable_values -> conditional .
    (108) printable_values -> conditional . COMMA printable_values

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 225
    COMMA           shift and go to state 134

  ! RIGHT_PAREN     [ reduce using rule 107 (printable_values -> conditional .) ]


state 113

    (131) factor -> LEFT_PAREN expression . RIGHT_PAREN
    (78) comparation -> expression . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    RIGHT_PAREN     shift and go to state 226
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 146

state 114

    (103) printable_values -> VARIABLE .
    (104) printable_values -> VARIABLE . COMMA printable_values
    (106) printable_values -> VARIABLE . STRING_CONCATENATION STRING
    (153) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (130) factor -> VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 103 (printable_values -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 103 (printable_values -> VARIABLE .)
    COMMA           shift and go to state 128
    STRING_CONCATENATION shift and go to state 129
    LEFT_PAREN      shift and go to state 130
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 131
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 132
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! RIGHT_PAREN     [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]


state 115

    (115) values -> INTEGER .
    (129) factor -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 115 (values -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 115 (values -> INTEGER .)
    IDENTICAL       reduce using rule 115 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 115 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 115 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 115 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 115 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 115 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 115 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 115 (values -> INTEGER .)
    SEMICOLON       reduce using rule 115 (values -> INTEGER .)
    MULTIPLY        reduce using rule 129 (factor -> INTEGER .)
    DIVIDE          reduce using rule 129 (factor -> INTEGER .)
    MODULE          reduce using rule 129 (factor -> INTEGER .)
    POW             reduce using rule 129 (factor -> INTEGER .)
    PLUS            reduce using rule 129 (factor -> INTEGER .)
    MINUS           reduce using rule 129 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! RIGHT_PAREN     [ reduce using rule 129 (factor -> INTEGER .) ]
  ! EQUALS_EQUALS   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]


state 116

    (102) printable_values -> values COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    values                         shift and go to state 52
    printable_values               shift and go to state 227
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 117

    (76) comparation -> values comparator_operator . values
    (77) comparation -> values comparator_operator . expression
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 230
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    values                         shift and go to state 228
    expression                     shift and go to state 229
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 118

    (87) comparator_operator -> EQUALS_EQUALS .

    INTEGER         reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    STRING          reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    FLOAT           reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    TRUE            reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    FALSE           reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    VARIABLE        reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    LEFT_PAREN      reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)
    IDENTIFIER      reduce using rule 87 (comparator_operator -> EQUALS_EQUALS .)


state 119

    (88) comparator_operator -> IDENTICAL .

    INTEGER         reduce using rule 88 (comparator_operator -> IDENTICAL .)
    STRING          reduce using rule 88 (comparator_operator -> IDENTICAL .)
    FLOAT           reduce using rule 88 (comparator_operator -> IDENTICAL .)
    TRUE            reduce using rule 88 (comparator_operator -> IDENTICAL .)
    FALSE           reduce using rule 88 (comparator_operator -> IDENTICAL .)
    VARIABLE        reduce using rule 88 (comparator_operator -> IDENTICAL .)
    LEFT_PAREN      reduce using rule 88 (comparator_operator -> IDENTICAL .)
    IDENTIFIER      reduce using rule 88 (comparator_operator -> IDENTICAL .)


state 120

    (89) comparator_operator -> NOT_EQUALS .

    INTEGER         reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    STRING          reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    FLOAT           reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    TRUE            reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    FALSE           reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    VARIABLE        reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    LEFT_PAREN      reduce using rule 89 (comparator_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 89 (comparator_operator -> NOT_EQUALS .)


state 121

    (90) comparator_operator -> NOT_IDENTICAL .

    INTEGER         reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    STRING          reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    FLOAT           reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    TRUE            reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    FALSE           reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    VARIABLE        reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    LEFT_PAREN      reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)
    IDENTIFIER      reduce using rule 90 (comparator_operator -> NOT_IDENTICAL .)


state 122

    (91) comparator_operator -> SMALL_THAN .

    INTEGER         reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    STRING          reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    FLOAT           reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    TRUE            reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    FALSE           reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    VARIABLE        reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    LEFT_PAREN      reduce using rule 91 (comparator_operator -> SMALL_THAN .)
    IDENTIFIER      reduce using rule 91 (comparator_operator -> SMALL_THAN .)


state 123

    (92) comparator_operator -> GREATER_THAN .

    INTEGER         reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    STRING          reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    FLOAT           reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    TRUE            reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    FALSE           reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    VARIABLE        reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    LEFT_PAREN      reduce using rule 92 (comparator_operator -> GREATER_THAN .)
    IDENTIFIER      reduce using rule 92 (comparator_operator -> GREATER_THAN .)


state 124

    (93) comparator_operator -> SMALL_EQUALS_TO .

    INTEGER         reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    STRING          reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    FLOAT           reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    TRUE            reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    FALSE           reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    VARIABLE        reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)
    IDENTIFIER      reduce using rule 93 (comparator_operator -> SMALL_EQUALS_TO .)


state 125

    (94) comparator_operator -> GREATER_EQUALS_TO .

    INTEGER         reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    STRING          reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    FLOAT           reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    TRUE            reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    FALSE           reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    VARIABLE        reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    LEFT_PAREN      reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)
    IDENTIFIER      reduce using rule 94 (comparator_operator -> GREATER_EQUALS_TO .)


state 126

    (95) comparator_operator -> SPACECRAFT .

    INTEGER         reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    STRING          reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    FLOAT           reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    TRUE            reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    FALSE           reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    VARIABLE        reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    LEFT_PAREN      reduce using rule 95 (comparator_operator -> SPACECRAFT .)
    IDENTIFIER      reduce using rule 95 (comparator_operator -> SPACECRAFT .)


state 127

    (96) comparator_operator -> NULL_FUSION .

    INTEGER         reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    STRING          reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    FLOAT           reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    TRUE            reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    FALSE           reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    VARIABLE        reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    LEFT_PAREN      reduce using rule 96 (comparator_operator -> NULL_FUSION .)
    IDENTIFIER      reduce using rule 96 (comparator_operator -> NULL_FUSION .)


state 128

    (104) printable_values -> VARIABLE COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    printable_values               shift and go to state 233
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 129

    (106) printable_values -> VARIABLE STRING_CONCATENATION . STRING

    STRING          shift and go to state 234


state 130

    (153) function_invocation -> VARIABLE LEFT_PAREN . params RIGHT_PAREN
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 236
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 131

    (79) comparation -> VARIABLE EQUALS_EQUALS . values
    (82) comparation -> VARIABLE EQUALS_EQUALS . access_array_element
    (83) comparation -> VARIABLE EQUALS_EQUALS . VARIABLE
    (86) comparation -> VARIABLE EQUALS_EQUALS . access_element_matrix
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 240
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 241
    access_array_element           shift and go to state 242
    access_element_matrix          shift and go to state 243
    boolean                        shift and go to state 61

state 132

    (198) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 188
    VARIABLE        shift and go to state 187


state 133

    (105) printable_values -> STRING STRING_CONCATENATION . STRING

    STRING          shift and go to state 244


state 134

    (108) printable_values -> conditional COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    conditional                    shift and go to state 55
    printable_values               shift and go to state 245
    values                         shift and go to state 52
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 135

    (110) printable_values -> structure_object_principal COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    structure_object_principal     shift and go to state 56
    printable_values               shift and go to state 246
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    function_invocation            shift and go to state 57
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 136

    (112) printable_values -> function_invocation COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    function_invocation            shift and go to state 57
    printable_values               shift and go to state 247
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    string_special_function        shift and go to state 58
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 137

    (114) printable_values -> string_special_function COMMA . printable_values
    (101) printable_values -> . values
    (102) printable_values -> . values COMMA printable_values
    (103) printable_values -> . VARIABLE
    (104) printable_values -> . VARIABLE COMMA printable_values
    (105) printable_values -> . STRING STRING_CONCATENATION STRING
    (106) printable_values -> . VARIABLE STRING_CONCATENATION STRING
    (107) printable_values -> . conditional
    (108) printable_values -> . conditional COMMA printable_values
    (109) printable_values -> . structure_object_principal
    (110) printable_values -> . structure_object_principal COMMA printable_values
    (111) printable_values -> . function_invocation
    (112) printable_values -> . function_invocation COMMA printable_values
    (113) printable_values -> . string_special_function
    (114) printable_values -> . string_special_function COMMA printable_values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (170) string_special_function -> . STRLEN LEFT_PAREN string_param RIGHT_PAREN
    (171) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> . SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    VARIABLE        shift and go to state 53
    STRING          shift and go to state 54
    INTEGER         shift and go to state 59
    FLOAT           shift and go to state 60
    IDENTIFIER      shift and go to state 63
    STRLEN          shift and go to state 64
    SUBSTR          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LEFT_PAREN      shift and go to state 110
    NEW             shift and go to state 46
    LOGIC_NOT       shift and go to state 74
    ARRAY           shift and go to state 78
    NULL            shift and go to state 79

    string_special_function        shift and go to state 58
    printable_values               shift and go to state 248
    values                         shift and go to state 52
    conditional                    shift and go to state 55
    structure_object_principal     shift and go to state 56
    function_invocation            shift and go to state 57
    boolean                        shift and go to state 61
    boolean_expression             shift and go to state 62
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    access_array_element           shift and go to state 71
    expression                     shift and go to state 72
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 138

    (51) conditional -> boolean_expression logic_operator . boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    boolean_expression             shift and go to state 249
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 150
    expression                     shift and go to state 72
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 139

    (52) logic_operator -> LOGIC_AND .

    LEFT_PAREN      reduce using rule 52 (logic_operator -> LOGIC_AND .)
    VARIABLE        reduce using rule 52 (logic_operator -> LOGIC_AND .)
    LOGIC_NOT       reduce using rule 52 (logic_operator -> LOGIC_AND .)
    INTEGER         reduce using rule 52 (logic_operator -> LOGIC_AND .)
    STRING          reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FLOAT           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    TRUE            reduce using rule 52 (logic_operator -> LOGIC_AND .)
    ARRAY           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    FALSE           reduce using rule 52 (logic_operator -> LOGIC_AND .)
    NULL            reduce using rule 52 (logic_operator -> LOGIC_AND .)


state 140

    (53) logic_operator -> LOGIC_OR .

    LEFT_PAREN      reduce using rule 53 (logic_operator -> LOGIC_OR .)
    VARIABLE        reduce using rule 53 (logic_operator -> LOGIC_OR .)
    LOGIC_NOT       reduce using rule 53 (logic_operator -> LOGIC_OR .)
    INTEGER         reduce using rule 53 (logic_operator -> LOGIC_OR .)
    STRING          reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FLOAT           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    TRUE            reduce using rule 53 (logic_operator -> LOGIC_OR .)
    ARRAY           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    FALSE           reduce using rule 53 (logic_operator -> LOGIC_OR .)
    NULL            reduce using rule 53 (logic_operator -> LOGIC_OR .)


state 141

    (54) logic_operator -> LOGIC_XOR .

    LEFT_PAREN      reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    VARIABLE        reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    LOGIC_NOT       reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    INTEGER         reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    STRING          reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FLOAT           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    TRUE            reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    ARRAY           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    FALSE           reduce using rule 54 (logic_operator -> LOGIC_XOR .)
    NULL            reduce using rule 54 (logic_operator -> LOGIC_XOR .)


state 142

    (152) function_invocation -> IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 250
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 143

    (170) string_special_function -> STRLEN LEFT_PAREN . string_param RIGHT_PAREN
    (173) string_param -> . STRING
    (174) string_param -> . VARIABLE

    STRING          shift and go to state 252
    VARIABLE        shift and go to state 253

    string_param                   shift and go to state 251

state 144

    (171) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param RIGHT_PAREN
    (172) string_special_function -> SUBSTR LEFT_PAREN . string_param COMMA int_param COMMA int_param RIGHT_PAREN
    (173) string_param -> . STRING
    (174) string_param -> . VARIABLE

    STRING          shift and go to state 252
    VARIABLE        shift and go to state 253

    string_param                   shift and go to state 254

state 145

    (80) comparation -> access_array_element EQUALS_EQUALS . values
    (81) comparation -> access_array_element EQUALS_EQUALS . VARIABLE
    (84) comparation -> access_array_element EQUALS_EQUALS . access_array_element
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 257
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    access_array_element           shift and go to state 255
    values                         shift and go to state 256
    boolean                        shift and go to state 61

state 146

    (78) comparation -> expression comparator_operator . expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    expression                     shift and go to state 258
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 147

    (85) comparation -> access_element_matrix EQUALS_EQUALS . VARIABLE

    VARIABLE        shift and go to state 260


state 148

    (74) logic_not_sentence -> LOGIC_NOT conditional .

    LOGIC_AND       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_OR        reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)
    LOGIC_XOR       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)
    COMMA           reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)
    SEMICOLON       reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)
    RIGHT_PAREN     reduce using rule 74 (logic_not_sentence -> LOGIC_NOT conditional .)


state 149

    (75) logic_not_sentence -> LOGIC_NOT VARIABLE .
    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .
    (130) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    COMMA           reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    SEMICOLON       reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    RIGHT_PAREN     reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .)
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    MINUS           reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 75 (logic_not_sentence -> LOGIC_NOT VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]


state 150

    (76) comparation -> values . comparator_operator values
    (77) comparation -> values . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 117

state 151

    (80) comparation -> access_array_element . EQUALS_EQUALS values
    (81) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (84) comparation -> access_array_element . EQUALS_EQUALS access_array_element

    EQUALS_EQUALS   shift and go to state 145


state 152

    (116) values -> STRING .
    (62) true_boolean_types -> STRING .
    (68) false_boolean_types -> STRING .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 62 (true_boolean_types -> STRING .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 62 (true_boolean_types -> STRING .)
    EQUALS_EQUALS   reduce using rule 116 (values -> STRING .)
    IDENTICAL       reduce using rule 116 (values -> STRING .)
    NOT_EQUALS      reduce using rule 116 (values -> STRING .)
    NOT_IDENTICAL   reduce using rule 116 (values -> STRING .)
    SMALL_THAN      reduce using rule 116 (values -> STRING .)
    GREATER_THAN    reduce using rule 116 (values -> STRING .)
    SMALL_EQUALS_TO reduce using rule 116 (values -> STRING .)
    GREATER_EQUALS_TO reduce using rule 116 (values -> STRING .)
    SPACECRAFT      reduce using rule 116 (values -> STRING .)
    NULL_FUSION     reduce using rule 116 (values -> STRING .)
    SEMICOLON       reduce using rule 116 (values -> STRING .)
    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)

  ! LOGIC_AND       [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_OR        [ reduce using rule 68 (false_boolean_types -> STRING .) ]
  ! LOGIC_XOR       [ reduce using rule 68 (false_boolean_types -> STRING .) ]


state 153

    (61) true_boolean_types -> TRUE .
    (119) boolean -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    EQUALS_EQUALS   reduce using rule 119 (boolean -> TRUE .)
    IDENTICAL       reduce using rule 119 (boolean -> TRUE .)
    NOT_EQUALS      reduce using rule 119 (boolean -> TRUE .)
    NOT_IDENTICAL   reduce using rule 119 (boolean -> TRUE .)
    SMALL_THAN      reduce using rule 119 (boolean -> TRUE .)
    GREATER_THAN    reduce using rule 119 (boolean -> TRUE .)
    SMALL_EQUALS_TO reduce using rule 119 (boolean -> TRUE .)
    GREATER_EQUALS_TO reduce using rule 119 (boolean -> TRUE .)
    SPACECRAFT      reduce using rule 119 (boolean -> TRUE .)
    NULL_FUSION     reduce using rule 119 (boolean -> TRUE .)


state 154

    (67) false_boolean_types -> FALSE .
    (120) boolean -> FALSE .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)
    EQUALS_EQUALS   reduce using rule 120 (boolean -> FALSE .)
    IDENTICAL       reduce using rule 120 (boolean -> FALSE .)
    NOT_EQUALS      reduce using rule 120 (boolean -> FALSE .)
    NOT_IDENTICAL   reduce using rule 120 (boolean -> FALSE .)
    SMALL_THAN      reduce using rule 120 (boolean -> FALSE .)
    GREATER_THAN    reduce using rule 120 (boolean -> FALSE .)
    SMALL_EQUALS_TO reduce using rule 120 (boolean -> FALSE .)
    GREATER_EQUALS_TO reduce using rule 120 (boolean -> FALSE .)
    SPACECRAFT      reduce using rule 120 (boolean -> FALSE .)
    NULL_FUSION     reduce using rule 120 (boolean -> FALSE .)


state 155

    (59) logic_expression -> true_boolean_types logic_operator . false_boolean_types
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL

    FALSE           shift and go to state 262
    STRING          shift and go to state 263
    INTEGER         shift and go to state 264
    VARIABLE        shift and go to state 265
    FLOAT           shift and go to state 266
    ARRAY           shift and go to state 267
    NULL            shift and go to state 79

    false_boolean_types            shift and go to state 261

state 156

    (60) logic_expression -> false_boolean_types logic_operator . true_boolean_types
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN

    TRUE            shift and go to state 269
    STRING          shift and go to state 270
    INTEGER         shift and go to state 271
    FLOAT           shift and go to state 272
    VARIABLE        shift and go to state 273
    ARRAY           shift and go to state 274

    true_boolean_types             shift and go to state 268

state 157

    (122) expression -> term PLUS . expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    term                           shift and go to state 77
    expression                     shift and go to state 275
    factor                         shift and go to state 80

state 158

    (123) expression -> term MINUS . expression
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    term                           shift and go to state 77
    expression                     shift and go to state 276
    factor                         shift and go to state 80

state 159

    (66) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (72) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 278
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 277
    boolean                        shift and go to state 61

state 160

    (125) term -> factor MULTIPLY . term
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    factor                         shift and go to state 80
    term                           shift and go to state 279

state 161

    (126) term -> factor DIVIDE . term
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    factor                         shift and go to state 80
    term                           shift and go to state 280

state 162

    (127) term -> factor MODULE . term
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    factor                         shift and go to state 80
    term                           shift and go to state 281

state 163

    (128) term -> factor POW . term
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    factor                         shift and go to state 80
    term                           shift and go to state 282

state 164

    (98) print_statement -> PRINT LEFT_PAREN printable_values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 283


state 165

    (234) class_declaration -> CLASS IDENTIFIER class_extends_opt . class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (241) class_implements_opt -> . IMPLEMENTS interface_list
    (242) class_implements_opt -> .

    IMPLEMENTS      shift and go to state 285
    LEFT_BRACE      reduce using rule 242 (class_implements_opt -> .)

    class_implements_opt           shift and go to state 284

state 166

    (239) class_extends_opt -> EXTENDS . IDENTIFIER

    IDENTIFIER      shift and go to state 286


state 167

    (235) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt . LEFT_BRACE interface_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 287


state 168

    (161) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN codeblock
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 288
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 169

    (153) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN
    (130) factor -> VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
    LEFT_PAREN      shift and go to state 130
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 130 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 89
    MINUS           shift and go to state 91
    EQUALS_EQUALS   shift and go to state 131
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)

  ! MINUS           [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]


state 170

    (134) variable_assignment -> VARIABLE assignment_operator values .
    (76) comparation -> values . comparator_operator values
    (77) comparation -> values . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 134 (variable_assignment -> VARIABLE assignment_operator values .)
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 117

state 171

    (135) variable_assignment -> VARIABLE assignment_operator expression .
    (78) comparation -> expression . comparator_operator expression
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    SEMICOLON       reduce using rule 135 (variable_assignment -> VARIABLE assignment_operator expression .)
    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 146

state 172

    (136) variable_assignment -> VARIABLE assignment_operator function_invocation .

    SEMICOLON       reduce using rule 136 (variable_assignment -> VARIABLE assignment_operator function_invocation .)


state 173

    (137) variable_assignment -> VARIABLE assignment_operator string_special_function .

    SEMICOLON       reduce using rule 137 (variable_assignment -> VARIABLE assignment_operator string_special_function .)


state 174

    (138) variable_assignment -> VARIABLE assignment_operator types_structure .

    SEMICOLON       reduce using rule 138 (variable_assignment -> VARIABLE assignment_operator types_structure .)


state 175

    (139) variable_assignment -> VARIABLE assignment_operator input .

    SEMICOLON       reduce using rule 139 (variable_assignment -> VARIABLE assignment_operator input .)


state 176

    (140) variable_assignment -> VARIABLE assignment_operator special_function .

    SEMICOLON       reduce using rule 140 (variable_assignment -> VARIABLE assignment_operator special_function .)


state 177

    (141) variable_assignment -> VARIABLE assignment_operator conditional .

    SEMICOLON       reduce using rule 141 (variable_assignment -> VARIABLE assignment_operator conditional .)


state 178

    (168) input -> FEGTS . LEFT_PAREN STDIN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 289


state 179

    (169) input -> READLINE . LEFT_PAREN STRING RIGHT_PAREN

    LEFT_PAREN      shift and go to state 290


state 180

    (162) special_function -> arrow_function .

    SEMICOLON       reduce using rule 162 (special_function -> arrow_function .)


state 181

    (163) special_function -> anonymous_functions .

    SEMICOLON       reduce using rule 163 (special_function -> anonymous_functions .)


state 182

    (183) structure_array_principal -> access_array_element .
    (197) access_array_stucture -> access_array_element . SEMICOLON
    (227) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (229) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (80) comparation -> access_array_element . EQUALS_EQUALS values
    (81) comparation -> access_array_element . EQUALS_EQUALS VARIABLE
    (84) comparation -> access_array_element . EQUALS_EQUALS access_array_element

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 95
    MINUS           shift and go to state 96
    EQUALS_EQUALS   shift and go to state 145

  ! SEMICOLON       [ reduce using rule 183 (structure_array_principal -> access_array_element .) ]


state 183

    (202) structure_matrix_principal -> access_element_matrix . SEMICOLON
    (215) modify_element_matrix -> access_element_matrix . EQUALS values
    (216) modify_element_matrix -> access_element_matrix . EQUALS VARIABLE
    (85) comparation -> access_element_matrix . EQUALS_EQUALS VARIABLE

    SEMICOLON       shift and go to state 97
    EQUALS          shift and go to state 98
    EQUALS_EQUALS   shift and go to state 147


state 184

    (164) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (165) arrow_function -> FN . LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement

    LEFT_PAREN      shift and go to state 291


state 185

    (166) anonymous_functions -> FUNCTION . LEFT_PAREN params RIGHT_PAREN codeblock

    LEFT_PAREN      shift and go to state 292


state 186

    (184) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> ARRAY . LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> ARRAY . LEFT_BRACKET structure_array RIGHT_BRACKET
    (205) matrix_firstform -> ARRAY . LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (66) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (72) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 293
    LEFT_BRACKET    shift and go to state 106


state 187

    (199) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 294


state 188

    (198) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 295


state 189

    (217) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET . EQUALS indexed_array

    EQUALS          shift and go to state 296


state 190

    (222) access_method_object -> VARIABLE MINUS GREATER_THAN . function_invocation
    (223) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType
    (224) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS values
    (225) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE MINUS GREATER_THAN . accessType EQUALS access_array_element
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (232) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (233) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 300
    VARIABLE        shift and go to state 297

    function_invocation            shift and go to state 298
    accessType                     shift and go to state 299

state 191

    (227) access_method_object -> access_array_element MINUS GREATER_THAN . function_invocation
    (228) access_method_object -> access_array_element MINUS GREATER_THAN . accessType
    (229) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS values
    (230) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element MINUS GREATER_THAN . accessType EQUALS access_array_element
    (152) function_invocation -> . IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (153) function_invocation -> . VARIABLE LEFT_PAREN params RIGHT_PAREN
    (232) accessType -> . IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET
    (233) accessType -> . IDENTIFIER

    IDENTIFIER      shift and go to state 300
    VARIABLE        shift and go to state 297

    function_invocation            shift and go to state 301
    accessType                     shift and go to state 302

state 192

    (215) modify_element_matrix -> access_element_matrix EQUALS values .

    SEMICOLON       reduce using rule 215 (modify_element_matrix -> access_element_matrix EQUALS values .)


state 193

    (216) modify_element_matrix -> access_element_matrix EQUALS VARIABLE .

    SEMICOLON       reduce using rule 216 (modify_element_matrix -> access_element_matrix EQUALS VARIABLE .)


state 194

    (115) values -> INTEGER .

    SEMICOLON       reduce using rule 115 (values -> INTEGER .)
    RIGHT_BRACKET   reduce using rule 115 (values -> INTEGER .)
    COMMA           reduce using rule 115 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 115 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 115 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 115 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 115 (values -> INTEGER .)
    ECHO            reduce using rule 115 (values -> INTEGER .)
    PRINT           reduce using rule 115 (values -> INTEGER .)
    CLASS           reduce using rule 115 (values -> INTEGER .)
    INTERFACE       reduce using rule 115 (values -> INTEGER .)
    FUNCTION        reduce using rule 115 (values -> INTEGER .)
    VARIABLE        reduce using rule 115 (values -> INTEGER .)
    INCREASE        reduce using rule 115 (values -> INTEGER .)
    DECREMENT       reduce using rule 115 (values -> INTEGER .)
    IF              reduce using rule 115 (values -> INTEGER .)
    WHILE           reduce using rule 115 (values -> INTEGER .)
    FOR             reduce using rule 115 (values -> INTEGER .)
    CONST           reduce using rule 115 (values -> INTEGER .)
    DEFINE          reduce using rule 115 (values -> INTEGER .)
    ARRAY           reduce using rule 115 (values -> INTEGER .)
    LEFT_BRACKET    reduce using rule 115 (values -> INTEGER .)
    NEW             reduce using rule 115 (values -> INTEGER .)
    $end            reduce using rule 115 (values -> INTEGER .)
    RETURN          reduce using rule 115 (values -> INTEGER .)
    BREAK           reduce using rule 115 (values -> INTEGER .)
    RIGHT_BRACE     reduce using rule 115 (values -> INTEGER .)


state 195

    (116) values -> STRING .

    SEMICOLON       reduce using rule 116 (values -> STRING .)
    RIGHT_BRACKET   reduce using rule 116 (values -> STRING .)
    LOGIC_AND       reduce using rule 116 (values -> STRING .)
    LOGIC_OR        reduce using rule 116 (values -> STRING .)
    LOGIC_XOR       reduce using rule 116 (values -> STRING .)
    COMMA           reduce using rule 116 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 116 (values -> STRING .)
    ECHO            reduce using rule 116 (values -> STRING .)
    PRINT           reduce using rule 116 (values -> STRING .)
    CLASS           reduce using rule 116 (values -> STRING .)
    INTERFACE       reduce using rule 116 (values -> STRING .)
    FUNCTION        reduce using rule 116 (values -> STRING .)
    VARIABLE        reduce using rule 116 (values -> STRING .)
    INCREASE        reduce using rule 116 (values -> STRING .)
    DECREMENT       reduce using rule 116 (values -> STRING .)
    IF              reduce using rule 116 (values -> STRING .)
    WHILE           reduce using rule 116 (values -> STRING .)
    FOR             reduce using rule 116 (values -> STRING .)
    CONST           reduce using rule 116 (values -> STRING .)
    DEFINE          reduce using rule 116 (values -> STRING .)
    ARRAY           reduce using rule 116 (values -> STRING .)
    LEFT_BRACKET    reduce using rule 116 (values -> STRING .)
    NEW             reduce using rule 116 (values -> STRING .)
    $end            reduce using rule 116 (values -> STRING .)
    RETURN          reduce using rule 116 (values -> STRING .)
    BREAK           reduce using rule 116 (values -> STRING .)
    RIGHT_BRACE     reduce using rule 116 (values -> STRING .)


state 196

    (117) values -> FLOAT .

    SEMICOLON       reduce using rule 117 (values -> FLOAT .)
    COMMA           reduce using rule 117 (values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 117 (values -> FLOAT .)
    RIGHT_BRACKET   reduce using rule 117 (values -> FLOAT .)
    LOGIC_AND       reduce using rule 117 (values -> FLOAT .)
    LOGIC_OR        reduce using rule 117 (values -> FLOAT .)
    LOGIC_XOR       reduce using rule 117 (values -> FLOAT .)
    ECHO            reduce using rule 117 (values -> FLOAT .)
    PRINT           reduce using rule 117 (values -> FLOAT .)
    CLASS           reduce using rule 117 (values -> FLOAT .)
    INTERFACE       reduce using rule 117 (values -> FLOAT .)
    FUNCTION        reduce using rule 117 (values -> FLOAT .)
    VARIABLE        reduce using rule 117 (values -> FLOAT .)
    INCREASE        reduce using rule 117 (values -> FLOAT .)
    DECREMENT       reduce using rule 117 (values -> FLOAT .)
    IF              reduce using rule 117 (values -> FLOAT .)
    WHILE           reduce using rule 117 (values -> FLOAT .)
    FOR             reduce using rule 117 (values -> FLOAT .)
    CONST           reduce using rule 117 (values -> FLOAT .)
    DEFINE          reduce using rule 117 (values -> FLOAT .)
    ARRAY           reduce using rule 117 (values -> FLOAT .)
    LEFT_BRACKET    reduce using rule 117 (values -> FLOAT .)
    NEW             reduce using rule 117 (values -> FLOAT .)
    $end            reduce using rule 117 (values -> FLOAT .)
    RETURN          reduce using rule 117 (values -> FLOAT .)
    BREAK           reduce using rule 117 (values -> FLOAT .)
    RIGHT_BRACE     reduce using rule 117 (values -> FLOAT .)


state 197

    (119) boolean -> TRUE .

    SEMICOLON       reduce using rule 119 (boolean -> TRUE .)
    COMMA           reduce using rule 119 (boolean -> TRUE .)
    RIGHT_PAREN     reduce using rule 119 (boolean -> TRUE .)
    RIGHT_BRACKET   reduce using rule 119 (boolean -> TRUE .)
    LOGIC_AND       reduce using rule 119 (boolean -> TRUE .)
    LOGIC_OR        reduce using rule 119 (boolean -> TRUE .)
    LOGIC_XOR       reduce using rule 119 (boolean -> TRUE .)
    ECHO            reduce using rule 119 (boolean -> TRUE .)
    PRINT           reduce using rule 119 (boolean -> TRUE .)
    CLASS           reduce using rule 119 (boolean -> TRUE .)
    INTERFACE       reduce using rule 119 (boolean -> TRUE .)
    FUNCTION        reduce using rule 119 (boolean -> TRUE .)
    VARIABLE        reduce using rule 119 (boolean -> TRUE .)
    INCREASE        reduce using rule 119 (boolean -> TRUE .)
    DECREMENT       reduce using rule 119 (boolean -> TRUE .)
    IF              reduce using rule 119 (boolean -> TRUE .)
    WHILE           reduce using rule 119 (boolean -> TRUE .)
    FOR             reduce using rule 119 (boolean -> TRUE .)
    CONST           reduce using rule 119 (boolean -> TRUE .)
    DEFINE          reduce using rule 119 (boolean -> TRUE .)
    ARRAY           reduce using rule 119 (boolean -> TRUE .)
    LEFT_BRACKET    reduce using rule 119 (boolean -> TRUE .)
    NEW             reduce using rule 119 (boolean -> TRUE .)
    $end            reduce using rule 119 (boolean -> TRUE .)
    RETURN          reduce using rule 119 (boolean -> TRUE .)
    BREAK           reduce using rule 119 (boolean -> TRUE .)
    RIGHT_BRACE     reduce using rule 119 (boolean -> TRUE .)


state 198

    (120) boolean -> FALSE .

    SEMICOLON       reduce using rule 120 (boolean -> FALSE .)
    COMMA           reduce using rule 120 (boolean -> FALSE .)
    RIGHT_PAREN     reduce using rule 120 (boolean -> FALSE .)
    RIGHT_BRACKET   reduce using rule 120 (boolean -> FALSE .)
    LOGIC_AND       reduce using rule 120 (boolean -> FALSE .)
    LOGIC_OR        reduce using rule 120 (boolean -> FALSE .)
    LOGIC_XOR       reduce using rule 120 (boolean -> FALSE .)
    ECHO            reduce using rule 120 (boolean -> FALSE .)
    PRINT           reduce using rule 120 (boolean -> FALSE .)
    CLASS           reduce using rule 120 (boolean -> FALSE .)
    INTERFACE       reduce using rule 120 (boolean -> FALSE .)
    FUNCTION        reduce using rule 120 (boolean -> FALSE .)
    VARIABLE        reduce using rule 120 (boolean -> FALSE .)
    INCREASE        reduce using rule 120 (boolean -> FALSE .)
    DECREMENT       reduce using rule 120 (boolean -> FALSE .)
    IF              reduce using rule 120 (boolean -> FALSE .)
    WHILE           reduce using rule 120 (boolean -> FALSE .)
    FOR             reduce using rule 120 (boolean -> FALSE .)
    CONST           reduce using rule 120 (boolean -> FALSE .)
    DEFINE          reduce using rule 120 (boolean -> FALSE .)
    ARRAY           reduce using rule 120 (boolean -> FALSE .)
    LEFT_BRACKET    reduce using rule 120 (boolean -> FALSE .)
    NEW             reduce using rule 120 (boolean -> FALSE .)
    $end            reduce using rule 120 (boolean -> FALSE .)
    RETURN          reduce using rule 120 (boolean -> FALSE .)
    BREAK           reduce using rule 120 (boolean -> FALSE .)
    RIGHT_BRACE     reduce using rule 120 (boolean -> FALSE .)


state 199

    (14) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 303


state 200

    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .
    (130) factor -> VARIABLE .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
    EQUALS_EQUALS   shift and go to state 131
    LEFT_BRACKET    shift and go to state 132
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    MINUS           reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)

  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]


state 201

    (13) while_statement -> WHILE LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 304


state 202

    (28) for_statement -> FOR LEFT_PAREN VARIABLE . EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    EQUALS          shift and go to state 305


state 203

    (150) const_syntax -> CONST IDENTIFIER EQUALS . values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 306
    boolean                        shift and go to state 61

state 204

    (151) define_syntax -> DEFINE LEFT_PAREN STRING . COMMA values RIGHT_PAREN

    COMMA           shift and go to state 307


state 205

    (209) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (184) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 308


state 206

    (184) indexed_array -> ARRAY LEFT_PAREN values_array_indexed . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 309


state 207

    (185) associative_array -> ARRAY LEFT_PAREN structure_array . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 310


state 208

    (205) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 311


state 209

    (191) values_array_indexed -> values .
    (192) values_array_indexed -> values . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 191 (values_array_indexed -> values .)
    COMMA           shift and go to state 312


state 210

    (193) values_array_indexed -> object_creation .
    (194) values_array_indexed -> object_creation . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 193 (values_array_indexed -> object_creation .)
    COMMA           shift and go to state 313


state 211

    (195) values_array_indexed -> indexed_array .
    (196) values_array_indexed -> indexed_array . COMMA values_array_indexed

    RIGHT_PAREN     reduce using rule 195 (values_array_indexed -> indexed_array .)
    COMMA           shift and go to state 314


state 212

    (187) structure_array -> key . EQUALS GREATER_THAN values
    (188) structure_array -> key . EQUALS GREATER_THAN values COMMA structure_array

    EQUALS          shift and go to state 315


state 213

    (115) values -> INTEGER .
    (189) key -> INTEGER .

    COMMA           reduce using rule 115 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 115 (values -> INTEGER .)
    EQUALS          reduce using rule 189 (key -> INTEGER .)


state 214

    (116) values -> STRING .
    (190) key -> STRING .

    COMMA           reduce using rule 116 (values -> STRING .)
    RIGHT_PAREN     reduce using rule 116 (values -> STRING .)
    EQUALS          reduce using rule 190 (key -> STRING .)


state 215

    (186) associative_array -> ARRAY LEFT_BRACKET structure_array . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 316


state 216

    (189) key -> INTEGER .

    EQUALS          reduce using rule 189 (key -> INTEGER .)


state 217

    (190) key -> STRING .

    EQUALS          reduce using rule 190 (key -> STRING .)


state 218

    (207) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET
    (208) structure_matrix_second -> LEFT_BRACKET values . RIGHT_BRACKET COMMA structure_matrix_second

    RIGHT_BRACKET   shift and go to state 317


state 219

    (206) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET . SEMICOLON

    SEMICOLON       shift and go to state 318


state 220

    (221) object_creation -> NEW IDENTIFIER LEFT_PAREN . params RIGHT_PAREN
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 319
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 221

    (56) boolean_expression -> LEFT_PAREN conditional . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 225


state 222

    (79) comparation -> VARIABLE . EQUALS_EQUALS values
    (82) comparation -> VARIABLE . EQUALS_EQUALS access_array_element
    (83) comparation -> VARIABLE . EQUALS_EQUALS VARIABLE
    (86) comparation -> VARIABLE . EQUALS_EQUALS access_element_matrix
    (130) factor -> VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (65) true_boolean_types -> VARIABLE .
    (70) false_boolean_types -> VARIABLE .

  ! shift/reduce conflict for EQUALS_EQUALS resolved as shift
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 65 (true_boolean_types -> VARIABLE .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 65 (true_boolean_types -> VARIABLE .)
    EQUALS_EQUALS   shift and go to state 131
    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    MINUS           reduce using rule 130 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)
    LEFT_BRACKET    shift and go to state 132
    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)

  ! EQUALS_EQUALS   [ reduce using rule 130 (factor -> VARIABLE .) ]
  ! LOGIC_AND       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_OR        [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]
  ! LOGIC_XOR       [ reduce using rule 70 (false_boolean_types -> VARIABLE .) ]


state 223

    (129) factor -> INTEGER .
    (115) values -> INTEGER .
    (63) true_boolean_types -> INTEGER .
    (69) false_boolean_types -> INTEGER .

  ! reduce/reduce conflict for EQUALS_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_EQUALS resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NOT_IDENTICAL resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SMALL_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for GREATER_EQUALS_TO resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SPACECRAFT resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for NULL_FUSION resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_AND resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 63 (true_boolean_types -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 63 (true_boolean_types -> INTEGER .)
    MULTIPLY        reduce using rule 129 (factor -> INTEGER .)
    DIVIDE          reduce using rule 129 (factor -> INTEGER .)
    MODULE          reduce using rule 129 (factor -> INTEGER .)
    POW             reduce using rule 129 (factor -> INTEGER .)
    PLUS            reduce using rule 129 (factor -> INTEGER .)
    MINUS           reduce using rule 129 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 129 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 115 (values -> INTEGER .)
    IDENTICAL       reduce using rule 115 (values -> INTEGER .)
    NOT_EQUALS      reduce using rule 115 (values -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 115 (values -> INTEGER .)
    SMALL_THAN      reduce using rule 115 (values -> INTEGER .)
    GREATER_THAN    reduce using rule 115 (values -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 115 (values -> INTEGER .)
    SPACECRAFT      reduce using rule 115 (values -> INTEGER .)
    NULL_FUSION     reduce using rule 115 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)

  ! EQUALS_EQUALS   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! IDENTICAL       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_EQUALS      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NOT_IDENTICAL   [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_THAN      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_THAN    [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SMALL_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! GREATER_EQUALS_TO [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SPACECRAFT      [ reduce using rule 129 (factor -> INTEGER .) ]
  ! NULL_FUSION     [ reduce using rule 129 (factor -> INTEGER .) ]
  ! LOGIC_AND       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 69 (false_boolean_types -> INTEGER .) ]


state 224

    (97) print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 97 (print_statement -> ECHO LEFT_PAREN printable_values RIGHT_PAREN .)


state 225

    (56) boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .

    LOGIC_AND       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    COMMA           reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    SEMICOLON       reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 56 (boolean_expression -> LEFT_PAREN conditional RIGHT_PAREN .)


state 226

    (131) factor -> LEFT_PAREN expression RIGHT_PAREN .

    MULTIPLY        reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    DIVIDE          reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MODULE          reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    POW             reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    PLUS            reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    MINUS           reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    EQUALS_EQUALS   reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    IDENTICAL       reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_EQUALS      reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NOT_IDENTICAL   reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_THAN      reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_THAN    reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SMALL_EQUALS_TO reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    GREATER_EQUALS_TO reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SPACECRAFT      reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    NULL_FUSION     reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    SEMICOLON       reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_AND       reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)
    COMMA           reduce using rule 131 (factor -> LEFT_PAREN expression RIGHT_PAREN .)


state 227

    (102) printable_values -> values COMMA printable_values .

    SEMICOLON       reduce using rule 102 (printable_values -> values COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 102 (printable_values -> values COMMA printable_values .)


state 228

    (76) comparation -> values comparator_operator values .

    LOGIC_AND       reduce using rule 76 (comparation -> values comparator_operator values .)
    LOGIC_OR        reduce using rule 76 (comparation -> values comparator_operator values .)
    LOGIC_XOR       reduce using rule 76 (comparation -> values comparator_operator values .)
    COMMA           reduce using rule 76 (comparation -> values comparator_operator values .)
    SEMICOLON       reduce using rule 76 (comparation -> values comparator_operator values .)
    RIGHT_PAREN     reduce using rule 76 (comparation -> values comparator_operator values .)


state 229

    (77) comparation -> values comparator_operator expression .

    LOGIC_AND       reduce using rule 77 (comparation -> values comparator_operator expression .)
    LOGIC_OR        reduce using rule 77 (comparation -> values comparator_operator expression .)
    LOGIC_XOR       reduce using rule 77 (comparation -> values comparator_operator expression .)
    COMMA           reduce using rule 77 (comparation -> values comparator_operator expression .)
    SEMICOLON       reduce using rule 77 (comparation -> values comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 77 (comparation -> values comparator_operator expression .)


state 230

    (115) values -> INTEGER .
    (129) factor -> INTEGER .

  ! reduce/reduce conflict for LOGIC_AND resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_OR resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for LOGIC_XOR resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for COMMA resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 115 (values -> INTEGER .)
  ! reduce/reduce conflict for RIGHT_PAREN resolved using rule 115 (values -> INTEGER .)
    LOGIC_AND       reduce using rule 115 (values -> INTEGER .)
    LOGIC_OR        reduce using rule 115 (values -> INTEGER .)
    LOGIC_XOR       reduce using rule 115 (values -> INTEGER .)
    COMMA           reduce using rule 115 (values -> INTEGER .)
    SEMICOLON       reduce using rule 115 (values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 115 (values -> INTEGER .)
    MULTIPLY        reduce using rule 129 (factor -> INTEGER .)
    DIVIDE          reduce using rule 129 (factor -> INTEGER .)
    MODULE          reduce using rule 129 (factor -> INTEGER .)
    POW             reduce using rule 129 (factor -> INTEGER .)
    PLUS            reduce using rule 129 (factor -> INTEGER .)
    MINUS           reduce using rule 129 (factor -> INTEGER .)

  ! LOGIC_AND       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! LOGIC_OR        [ reduce using rule 129 (factor -> INTEGER .) ]
  ! LOGIC_XOR       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! COMMA           [ reduce using rule 129 (factor -> INTEGER .) ]
  ! SEMICOLON       [ reduce using rule 129 (factor -> INTEGER .) ]
  ! RIGHT_PAREN     [ reduce using rule 129 (factor -> INTEGER .) ]


state 231

    (130) factor -> VARIABLE .

    MULTIPLY        reduce using rule 130 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 130 (factor -> VARIABLE .)
    MODULE          reduce using rule 130 (factor -> VARIABLE .)
    POW             reduce using rule 130 (factor -> VARIABLE .)
    PLUS            reduce using rule 130 (factor -> VARIABLE .)
    MINUS           reduce using rule 130 (factor -> VARIABLE .)
    LOGIC_AND       reduce using rule 130 (factor -> VARIABLE .)
    LOGIC_OR        reduce using rule 130 (factor -> VARIABLE .)
    LOGIC_XOR       reduce using rule 130 (factor -> VARIABLE .)
    COMMA           reduce using rule 130 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 130 (factor -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 130 (factor -> VARIABLE .)
    EQUALS_EQUALS   reduce using rule 130 (factor -> VARIABLE .)
    IDENTICAL       reduce using rule 130 (factor -> VARIABLE .)
    NOT_EQUALS      reduce using rule 130 (factor -> VARIABLE .)
    NOT_IDENTICAL   reduce using rule 130 (factor -> VARIABLE .)
    SMALL_THAN      reduce using rule 130 (factor -> VARIABLE .)
    GREATER_THAN    reduce using rule 130 (factor -> VARIABLE .)
    SMALL_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    GREATER_EQUALS_TO reduce using rule 130 (factor -> VARIABLE .)
    SPACECRAFT      reduce using rule 130 (factor -> VARIABLE .)
    NULL_FUSION     reduce using rule 130 (factor -> VARIABLE .)


state 232

    (131) factor -> LEFT_PAREN . expression RIGHT_PAREN
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    INTEGER         shift and go to state 259
    VARIABLE        shift and go to state 231
    LEFT_PAREN      shift and go to state 232

    expression                     shift and go to state 320
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 233

    (104) printable_values -> VARIABLE COMMA printable_values .

    SEMICOLON       reduce using rule 104 (printable_values -> VARIABLE COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 104 (printable_values -> VARIABLE COMMA printable_values .)


state 234

    (106) printable_values -> VARIABLE STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 106 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 106 (printable_values -> VARIABLE STRING_CONCATENATION STRING .)


state 235

    (156) real_params -> VARIABLE .

    COMMA           reduce using rule 156 (real_params -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 156 (real_params -> VARIABLE .)


state 236

    (153) function_invocation -> VARIABLE LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 321


state 237

    (154) params -> real_params .
    (158) real_params -> real_params . COMMA VARIABLE
    (159) real_params -> real_params . COMMA values

    RIGHT_PAREN     reduce using rule 154 (params -> real_params .)
    COMMA           shift and go to state 322


state 238

    (155) params -> empty .

    RIGHT_PAREN     reduce using rule 155 (params -> empty .)


state 239

    (157) real_params -> values .

    COMMA           reduce using rule 157 (real_params -> values .)
    RIGHT_PAREN     reduce using rule 157 (real_params -> values .)


state 240

    (83) comparation -> VARIABLE EQUALS_EQUALS VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 83 (comparation -> VARIABLE EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 132


state 241

    (79) comparation -> VARIABLE EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)
    COMMA           reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 79 (comparation -> VARIABLE EQUALS_EQUALS values .)


state 242

    (82) comparation -> VARIABLE EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 82 (comparation -> VARIABLE EQUALS_EQUALS access_array_element .)


state 243

    (86) comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .

    LOGIC_AND       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_OR        reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    LOGIC_XOR       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    COMMA           reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    SEMICOLON       reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)
    RIGHT_PAREN     reduce using rule 86 (comparation -> VARIABLE EQUALS_EQUALS access_element_matrix .)


state 244

    (105) printable_values -> STRING STRING_CONCATENATION STRING .

    SEMICOLON       reduce using rule 105 (printable_values -> STRING STRING_CONCATENATION STRING .)
    RIGHT_PAREN     reduce using rule 105 (printable_values -> STRING STRING_CONCATENATION STRING .)


state 245

    (108) printable_values -> conditional COMMA printable_values .

    SEMICOLON       reduce using rule 108 (printable_values -> conditional COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 108 (printable_values -> conditional COMMA printable_values .)


state 246

    (110) printable_values -> structure_object_principal COMMA printable_values .

    SEMICOLON       reduce using rule 110 (printable_values -> structure_object_principal COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 110 (printable_values -> structure_object_principal COMMA printable_values .)


state 247

    (112) printable_values -> function_invocation COMMA printable_values .

    SEMICOLON       reduce using rule 112 (printable_values -> function_invocation COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 112 (printable_values -> function_invocation COMMA printable_values .)


state 248

    (114) printable_values -> string_special_function COMMA printable_values .

    SEMICOLON       reduce using rule 114 (printable_values -> string_special_function COMMA printable_values .)
    RIGHT_PAREN     reduce using rule 114 (printable_values -> string_special_function COMMA printable_values .)


state 249

    (51) conditional -> boolean_expression logic_operator boolean_expression .

    COMMA           reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    SEMICOLON       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    RIGHT_PAREN     reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_AND       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_OR        reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)
    LOGIC_XOR       reduce using rule 51 (conditional -> boolean_expression logic_operator boolean_expression .)


state 250

    (152) function_invocation -> IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 323


state 251

    (170) string_special_function -> STRLEN LEFT_PAREN string_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 324


state 252

    (173) string_param -> STRING .

    RIGHT_PAREN     reduce using rule 173 (string_param -> STRING .)
    COMMA           reduce using rule 173 (string_param -> STRING .)


state 253

    (174) string_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 174 (string_param -> VARIABLE .)
    COMMA           reduce using rule 174 (string_param -> VARIABLE .)


state 254

    (171) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param RIGHT_PAREN
    (172) string_special_function -> SUBSTR LEFT_PAREN string_param . COMMA int_param COMMA int_param RIGHT_PAREN

    COMMA           shift and go to state 325


state 255

    (84) comparation -> access_array_element EQUALS_EQUALS access_array_element .

    LOGIC_AND       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_OR        reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    LOGIC_XOR       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    COMMA           reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    SEMICOLON       reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 84 (comparation -> access_array_element EQUALS_EQUALS access_array_element .)


state 256

    (80) comparation -> access_array_element EQUALS_EQUALS values .

    LOGIC_AND       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_OR        reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)
    LOGIC_XOR       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)
    COMMA           reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)
    SEMICOLON       reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)
    RIGHT_PAREN     reduce using rule 80 (comparation -> access_array_element EQUALS_EQUALS values .)


state 257

    (81) comparation -> access_array_element EQUALS_EQUALS VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    LOGIC_AND       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 81 (comparation -> access_array_element EQUALS_EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 326


state 258

    (78) comparation -> expression comparator_operator expression .

    LOGIC_AND       reduce using rule 78 (comparation -> expression comparator_operator expression .)
    LOGIC_OR        reduce using rule 78 (comparation -> expression comparator_operator expression .)
    LOGIC_XOR       reduce using rule 78 (comparation -> expression comparator_operator expression .)
    COMMA           reduce using rule 78 (comparation -> expression comparator_operator expression .)
    SEMICOLON       reduce using rule 78 (comparation -> expression comparator_operator expression .)
    RIGHT_PAREN     reduce using rule 78 (comparation -> expression comparator_operator expression .)


state 259

    (129) factor -> INTEGER .

    MULTIPLY        reduce using rule 129 (factor -> INTEGER .)
    DIVIDE          reduce using rule 129 (factor -> INTEGER .)
    MODULE          reduce using rule 129 (factor -> INTEGER .)
    POW             reduce using rule 129 (factor -> INTEGER .)
    PLUS            reduce using rule 129 (factor -> INTEGER .)
    MINUS           reduce using rule 129 (factor -> INTEGER .)
    LOGIC_AND       reduce using rule 129 (factor -> INTEGER .)
    LOGIC_OR        reduce using rule 129 (factor -> INTEGER .)
    LOGIC_XOR       reduce using rule 129 (factor -> INTEGER .)
    COMMA           reduce using rule 129 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 129 (factor -> INTEGER .)
    RIGHT_PAREN     reduce using rule 129 (factor -> INTEGER .)
    EQUALS_EQUALS   reduce using rule 129 (factor -> INTEGER .)
    IDENTICAL       reduce using rule 129 (factor -> INTEGER .)
    NOT_EQUALS      reduce using rule 129 (factor -> INTEGER .)
    NOT_IDENTICAL   reduce using rule 129 (factor -> INTEGER .)
    SMALL_THAN      reduce using rule 129 (factor -> INTEGER .)
    GREATER_THAN    reduce using rule 129 (factor -> INTEGER .)
    SMALL_EQUALS_TO reduce using rule 129 (factor -> INTEGER .)
    GREATER_EQUALS_TO reduce using rule 129 (factor -> INTEGER .)
    SPACECRAFT      reduce using rule 129 (factor -> INTEGER .)
    NULL_FUSION     reduce using rule 129 (factor -> INTEGER .)


state 260

    (85) comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .

    LOGIC_AND       reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_OR        reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    LOGIC_XOR       reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    COMMA           reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 85 (comparation -> access_element_matrix EQUALS_EQUALS VARIABLE .)


state 261

    (59) logic_expression -> true_boolean_types logic_operator false_boolean_types .

    LOGIC_AND       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_OR        reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    LOGIC_XOR       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    COMMA           reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    SEMICOLON       reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)
    RIGHT_PAREN     reduce using rule 59 (logic_expression -> true_boolean_types logic_operator false_boolean_types .)


state 262

    (67) false_boolean_types -> FALSE .

    LOGIC_AND       reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_OR        reduce using rule 67 (false_boolean_types -> FALSE .)
    LOGIC_XOR       reduce using rule 67 (false_boolean_types -> FALSE .)
    COMMA           reduce using rule 67 (false_boolean_types -> FALSE .)
    SEMICOLON       reduce using rule 67 (false_boolean_types -> FALSE .)
    RIGHT_PAREN     reduce using rule 67 (false_boolean_types -> FALSE .)


state 263

    (68) false_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 68 (false_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 68 (false_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 68 (false_boolean_types -> STRING .)
    COMMA           reduce using rule 68 (false_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 68 (false_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 68 (false_boolean_types -> STRING .)


state 264

    (69) false_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 69 (false_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 69 (false_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 69 (false_boolean_types -> INTEGER .)
    COMMA           reduce using rule 69 (false_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 69 (false_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 69 (false_boolean_types -> INTEGER .)


state 265

    (70) false_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 70 (false_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 70 (false_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 70 (false_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 70 (false_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 70 (false_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 70 (false_boolean_types -> VARIABLE .)


state 266

    (71) false_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 71 (false_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 71 (false_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 71 (false_boolean_types -> FLOAT .)
    COMMA           reduce using rule 71 (false_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 71 (false_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 71 (false_boolean_types -> FLOAT .)


state 267

    (72) false_boolean_types -> ARRAY . LEFT_PAREN RIGHT_PAREN

    LEFT_PAREN      shift and go to state 327


state 268

    (60) logic_expression -> false_boolean_types logic_operator true_boolean_types .

    LOGIC_AND       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_OR        reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    LOGIC_XOR       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    COMMA           reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    SEMICOLON       reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)
    RIGHT_PAREN     reduce using rule 60 (logic_expression -> false_boolean_types logic_operator true_boolean_types .)


state 269

    (61) true_boolean_types -> TRUE .

    LOGIC_AND       reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_OR        reduce using rule 61 (true_boolean_types -> TRUE .)
    LOGIC_XOR       reduce using rule 61 (true_boolean_types -> TRUE .)
    COMMA           reduce using rule 61 (true_boolean_types -> TRUE .)
    SEMICOLON       reduce using rule 61 (true_boolean_types -> TRUE .)
    RIGHT_PAREN     reduce using rule 61 (true_boolean_types -> TRUE .)


state 270

    (62) true_boolean_types -> STRING .

    LOGIC_AND       reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_OR        reduce using rule 62 (true_boolean_types -> STRING .)
    LOGIC_XOR       reduce using rule 62 (true_boolean_types -> STRING .)
    COMMA           reduce using rule 62 (true_boolean_types -> STRING .)
    SEMICOLON       reduce using rule 62 (true_boolean_types -> STRING .)
    RIGHT_PAREN     reduce using rule 62 (true_boolean_types -> STRING .)


state 271

    (63) true_boolean_types -> INTEGER .

    LOGIC_AND       reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_OR        reduce using rule 63 (true_boolean_types -> INTEGER .)
    LOGIC_XOR       reduce using rule 63 (true_boolean_types -> INTEGER .)
    COMMA           reduce using rule 63 (true_boolean_types -> INTEGER .)
    SEMICOLON       reduce using rule 63 (true_boolean_types -> INTEGER .)
    RIGHT_PAREN     reduce using rule 63 (true_boolean_types -> INTEGER .)


state 272

    (64) true_boolean_types -> FLOAT .

    LOGIC_AND       reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_OR        reduce using rule 64 (true_boolean_types -> FLOAT .)
    LOGIC_XOR       reduce using rule 64 (true_boolean_types -> FLOAT .)
    COMMA           reduce using rule 64 (true_boolean_types -> FLOAT .)
    SEMICOLON       reduce using rule 64 (true_boolean_types -> FLOAT .)
    RIGHT_PAREN     reduce using rule 64 (true_boolean_types -> FLOAT .)


state 273

    (65) true_boolean_types -> VARIABLE .

    LOGIC_AND       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_OR        reduce using rule 65 (true_boolean_types -> VARIABLE .)
    LOGIC_XOR       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    COMMA           reduce using rule 65 (true_boolean_types -> VARIABLE .)
    SEMICOLON       reduce using rule 65 (true_boolean_types -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 65 (true_boolean_types -> VARIABLE .)


state 274

    (66) true_boolean_types -> ARRAY . LEFT_PAREN values RIGHT_PAREN

    LEFT_PAREN      shift and go to state 328


state 275

    (122) expression -> term PLUS expression .

    EQUALS_EQUALS   reduce using rule 122 (expression -> term PLUS expression .)
    IDENTICAL       reduce using rule 122 (expression -> term PLUS expression .)
    NOT_EQUALS      reduce using rule 122 (expression -> term PLUS expression .)
    NOT_IDENTICAL   reduce using rule 122 (expression -> term PLUS expression .)
    SMALL_THAN      reduce using rule 122 (expression -> term PLUS expression .)
    GREATER_THAN    reduce using rule 122 (expression -> term PLUS expression .)
    SMALL_EQUALS_TO reduce using rule 122 (expression -> term PLUS expression .)
    GREATER_EQUALS_TO reduce using rule 122 (expression -> term PLUS expression .)
    SPACECRAFT      reduce using rule 122 (expression -> term PLUS expression .)
    NULL_FUSION     reduce using rule 122 (expression -> term PLUS expression .)
    RIGHT_PAREN     reduce using rule 122 (expression -> term PLUS expression .)
    SEMICOLON       reduce using rule 122 (expression -> term PLUS expression .)
    LOGIC_AND       reduce using rule 122 (expression -> term PLUS expression .)
    LOGIC_OR        reduce using rule 122 (expression -> term PLUS expression .)
    LOGIC_XOR       reduce using rule 122 (expression -> term PLUS expression .)
    COMMA           reduce using rule 122 (expression -> term PLUS expression .)


state 276

    (123) expression -> term MINUS expression .

    EQUALS_EQUALS   reduce using rule 123 (expression -> term MINUS expression .)
    IDENTICAL       reduce using rule 123 (expression -> term MINUS expression .)
    NOT_EQUALS      reduce using rule 123 (expression -> term MINUS expression .)
    NOT_IDENTICAL   reduce using rule 123 (expression -> term MINUS expression .)
    SMALL_THAN      reduce using rule 123 (expression -> term MINUS expression .)
    GREATER_THAN    reduce using rule 123 (expression -> term MINUS expression .)
    SMALL_EQUALS_TO reduce using rule 123 (expression -> term MINUS expression .)
    GREATER_EQUALS_TO reduce using rule 123 (expression -> term MINUS expression .)
    SPACECRAFT      reduce using rule 123 (expression -> term MINUS expression .)
    NULL_FUSION     reduce using rule 123 (expression -> term MINUS expression .)
    RIGHT_PAREN     reduce using rule 123 (expression -> term MINUS expression .)
    SEMICOLON       reduce using rule 123 (expression -> term MINUS expression .)
    LOGIC_AND       reduce using rule 123 (expression -> term MINUS expression .)
    LOGIC_OR        reduce using rule 123 (expression -> term MINUS expression .)
    LOGIC_XOR       reduce using rule 123 (expression -> term MINUS expression .)
    COMMA           reduce using rule 123 (expression -> term MINUS expression .)


state 277

    (66) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 329


state 278

    (72) false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .

    LOGIC_AND       reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    COMMA           reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    SEMICOLON       reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 72 (false_boolean_types -> ARRAY LEFT_PAREN RIGHT_PAREN .)


state 279

    (125) term -> factor MULTIPLY term .

    PLUS            reduce using rule 125 (term -> factor MULTIPLY term .)
    MINUS           reduce using rule 125 (term -> factor MULTIPLY term .)
    EQUALS_EQUALS   reduce using rule 125 (term -> factor MULTIPLY term .)
    IDENTICAL       reduce using rule 125 (term -> factor MULTIPLY term .)
    NOT_EQUALS      reduce using rule 125 (term -> factor MULTIPLY term .)
    NOT_IDENTICAL   reduce using rule 125 (term -> factor MULTIPLY term .)
    SMALL_THAN      reduce using rule 125 (term -> factor MULTIPLY term .)
    GREATER_THAN    reduce using rule 125 (term -> factor MULTIPLY term .)
    SMALL_EQUALS_TO reduce using rule 125 (term -> factor MULTIPLY term .)
    GREATER_EQUALS_TO reduce using rule 125 (term -> factor MULTIPLY term .)
    SPACECRAFT      reduce using rule 125 (term -> factor MULTIPLY term .)
    NULL_FUSION     reduce using rule 125 (term -> factor MULTIPLY term .)
    RIGHT_PAREN     reduce using rule 125 (term -> factor MULTIPLY term .)
    SEMICOLON       reduce using rule 125 (term -> factor MULTIPLY term .)
    LOGIC_AND       reduce using rule 125 (term -> factor MULTIPLY term .)
    LOGIC_OR        reduce using rule 125 (term -> factor MULTIPLY term .)
    LOGIC_XOR       reduce using rule 125 (term -> factor MULTIPLY term .)
    COMMA           reduce using rule 125 (term -> factor MULTIPLY term .)


state 280

    (126) term -> factor DIVIDE term .

    PLUS            reduce using rule 126 (term -> factor DIVIDE term .)
    MINUS           reduce using rule 126 (term -> factor DIVIDE term .)
    EQUALS_EQUALS   reduce using rule 126 (term -> factor DIVIDE term .)
    IDENTICAL       reduce using rule 126 (term -> factor DIVIDE term .)
    NOT_EQUALS      reduce using rule 126 (term -> factor DIVIDE term .)
    NOT_IDENTICAL   reduce using rule 126 (term -> factor DIVIDE term .)
    SMALL_THAN      reduce using rule 126 (term -> factor DIVIDE term .)
    GREATER_THAN    reduce using rule 126 (term -> factor DIVIDE term .)
    SMALL_EQUALS_TO reduce using rule 126 (term -> factor DIVIDE term .)
    GREATER_EQUALS_TO reduce using rule 126 (term -> factor DIVIDE term .)
    SPACECRAFT      reduce using rule 126 (term -> factor DIVIDE term .)
    NULL_FUSION     reduce using rule 126 (term -> factor DIVIDE term .)
    RIGHT_PAREN     reduce using rule 126 (term -> factor DIVIDE term .)
    SEMICOLON       reduce using rule 126 (term -> factor DIVIDE term .)
    LOGIC_AND       reduce using rule 126 (term -> factor DIVIDE term .)
    LOGIC_OR        reduce using rule 126 (term -> factor DIVIDE term .)
    LOGIC_XOR       reduce using rule 126 (term -> factor DIVIDE term .)
    COMMA           reduce using rule 126 (term -> factor DIVIDE term .)


state 281

    (127) term -> factor MODULE term .

    PLUS            reduce using rule 127 (term -> factor MODULE term .)
    MINUS           reduce using rule 127 (term -> factor MODULE term .)
    EQUALS_EQUALS   reduce using rule 127 (term -> factor MODULE term .)
    IDENTICAL       reduce using rule 127 (term -> factor MODULE term .)
    NOT_EQUALS      reduce using rule 127 (term -> factor MODULE term .)
    NOT_IDENTICAL   reduce using rule 127 (term -> factor MODULE term .)
    SMALL_THAN      reduce using rule 127 (term -> factor MODULE term .)
    GREATER_THAN    reduce using rule 127 (term -> factor MODULE term .)
    SMALL_EQUALS_TO reduce using rule 127 (term -> factor MODULE term .)
    GREATER_EQUALS_TO reduce using rule 127 (term -> factor MODULE term .)
    SPACECRAFT      reduce using rule 127 (term -> factor MODULE term .)
    NULL_FUSION     reduce using rule 127 (term -> factor MODULE term .)
    RIGHT_PAREN     reduce using rule 127 (term -> factor MODULE term .)
    SEMICOLON       reduce using rule 127 (term -> factor MODULE term .)
    LOGIC_AND       reduce using rule 127 (term -> factor MODULE term .)
    LOGIC_OR        reduce using rule 127 (term -> factor MODULE term .)
    LOGIC_XOR       reduce using rule 127 (term -> factor MODULE term .)
    COMMA           reduce using rule 127 (term -> factor MODULE term .)


state 282

    (128) term -> factor POW term .

    PLUS            reduce using rule 128 (term -> factor POW term .)
    MINUS           reduce using rule 128 (term -> factor POW term .)
    EQUALS_EQUALS   reduce using rule 128 (term -> factor POW term .)
    IDENTICAL       reduce using rule 128 (term -> factor POW term .)
    NOT_EQUALS      reduce using rule 128 (term -> factor POW term .)
    NOT_IDENTICAL   reduce using rule 128 (term -> factor POW term .)
    SMALL_THAN      reduce using rule 128 (term -> factor POW term .)
    GREATER_THAN    reduce using rule 128 (term -> factor POW term .)
    SMALL_EQUALS_TO reduce using rule 128 (term -> factor POW term .)
    GREATER_EQUALS_TO reduce using rule 128 (term -> factor POW term .)
    SPACECRAFT      reduce using rule 128 (term -> factor POW term .)
    NULL_FUSION     reduce using rule 128 (term -> factor POW term .)
    RIGHT_PAREN     reduce using rule 128 (term -> factor POW term .)
    SEMICOLON       reduce using rule 128 (term -> factor POW term .)
    LOGIC_AND       reduce using rule 128 (term -> factor POW term .)
    LOGIC_OR        reduce using rule 128 (term -> factor POW term .)
    LOGIC_XOR       reduce using rule 128 (term -> factor POW term .)
    COMMA           reduce using rule 128 (term -> factor POW term .)


state 283

    (98) print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .

    SEMICOLON       reduce using rule 98 (print_statement -> PRINT LEFT_PAREN printable_values RIGHT_PAREN .)


state 284

    (234) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt . LEFT_BRACE class_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 330


state 285

    (241) class_implements_opt -> IMPLEMENTS . interface_list
    (243) interface_list -> . IDENTIFIER
    (244) interface_list -> . interface_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 332

    interface_list                 shift and go to state 331

state 286

    (239) class_extends_opt -> EXTENDS IDENTIFIER .

    IMPLEMENTS      reduce using rule 239 (class_extends_opt -> EXTENDS IDENTIFIER .)
    LEFT_BRACE      reduce using rule 239 (class_extends_opt -> EXTENDS IDENTIFIER .)


state 287

    (235) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE . interface_body RIGHT_BRACE
    (236) interface_body -> . interface_body interface_method
    (237) interface_body -> .

    RIGHT_BRACE     reduce using rule 237 (interface_body -> .)
    PUBLIC          reduce using rule 237 (interface_body -> .)
    PRIVATE         reduce using rule 237 (interface_body -> .)
    PROTECTED       reduce using rule 237 (interface_body -> .)
    FUNCTION        reduce using rule 237 (interface_body -> .)

    interface_body                 shift and go to state 333

state 288

    (161) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 334


state 289

    (168) input -> FEGTS LEFT_PAREN . STDIN RIGHT_PAREN

    STDIN           shift and go to state 335


state 290

    (169) input -> READLINE LEFT_PAREN . STRING RIGHT_PAREN

    STRING          shift and go to state 336


state 291

    (164) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (165) arrow_function -> FN LEFT_PAREN . params RIGHT_PAREN EQUALS GREATER_THAN print_statement
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 337
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 292

    (166) anonymous_functions -> FUNCTION LEFT_PAREN . params RIGHT_PAREN codeblock
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 338
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 293

    (184) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (185) associative_array -> ARRAY LEFT_PAREN . structure_array RIGHT_PAREN
    (205) matrix_firstform -> ARRAY LEFT_PAREN . structure_matrix_first RIGHT_PAREN SEMICOLON
    (66) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (72) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (187) structure_array -> . key EQUALS GREATER_THAN values
    (188) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (209) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (210) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (189) key -> . INTEGER
    (190) key -> . STRING
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    RIGHT_PAREN     shift and go to state 278
    ARRAY           shift and go to state 205
    INTEGER         shift and go to state 213
    STRING          shift and go to state 214
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    structure_array                shift and go to state 207
    structure_matrix_first         shift and go to state 208
    values                         shift and go to state 339
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    key                            shift and go to state 212
    boolean                        shift and go to state 61

state 294

    (199) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .
    (212) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 340

  ! LEFT_BRACKET    [ reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .) ]


state 295

    (198) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .
    (211) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    SEMICOLON       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    shift and go to state 341

  ! LEFT_BRACKET    [ reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .) ]


state 296

    (217) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS . indexed_array
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    ARRAY           shift and go to state 343

    indexed_array                  shift and go to state 342

state 297

    (153) function_invocation -> VARIABLE . LEFT_PAREN params RIGHT_PAREN

    LEFT_PAREN      shift and go to state 130


state 298

    (222) access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 222 (access_method_object -> VARIABLE MINUS GREATER_THAN function_invocation .)


state 299

    (223) access_method_object -> VARIABLE MINUS GREATER_THAN accessType .
    (224) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS values
    (225) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (226) access_method_object -> VARIABLE MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    IF              reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    $end            reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 223 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 344


state 300

    (152) function_invocation -> IDENTIFIER . LEFT_PAREN params RIGHT_PAREN
    (232) accessType -> IDENTIFIER . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (233) accessType -> IDENTIFIER .

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    LEFT_PAREN      shift and go to state 142
    LEFT_BRACKET    shift and go to state 345
    EQUALS          reduce using rule 233 (accessType -> IDENTIFIER .)
    ECHO            reduce using rule 233 (accessType -> IDENTIFIER .)
    PRINT           reduce using rule 233 (accessType -> IDENTIFIER .)
    CLASS           reduce using rule 233 (accessType -> IDENTIFIER .)
    INTERFACE       reduce using rule 233 (accessType -> IDENTIFIER .)
    FUNCTION        reduce using rule 233 (accessType -> IDENTIFIER .)
    VARIABLE        reduce using rule 233 (accessType -> IDENTIFIER .)
    INCREASE        reduce using rule 233 (accessType -> IDENTIFIER .)
    DECREMENT       reduce using rule 233 (accessType -> IDENTIFIER .)
    IF              reduce using rule 233 (accessType -> IDENTIFIER .)
    WHILE           reduce using rule 233 (accessType -> IDENTIFIER .)
    FOR             reduce using rule 233 (accessType -> IDENTIFIER .)
    CONST           reduce using rule 233 (accessType -> IDENTIFIER .)
    DEFINE          reduce using rule 233 (accessType -> IDENTIFIER .)
    ARRAY           reduce using rule 233 (accessType -> IDENTIFIER .)
    NEW             reduce using rule 233 (accessType -> IDENTIFIER .)
    $end            reduce using rule 233 (accessType -> IDENTIFIER .)
    COMMA           reduce using rule 233 (accessType -> IDENTIFIER .)
    SEMICOLON       reduce using rule 233 (accessType -> IDENTIFIER .)
    RIGHT_PAREN     reduce using rule 233 (accessType -> IDENTIFIER .)
    RETURN          reduce using rule 233 (accessType -> IDENTIFIER .)
    BREAK           reduce using rule 233 (accessType -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 233 (accessType -> IDENTIFIER .)

  ! LEFT_BRACKET    [ reduce using rule 233 (accessType -> IDENTIFIER .) ]


state 301

    (227) access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .

    ECHO            reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    PRINT           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CLASS           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INTERFACE       reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FUNCTION        reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    VARIABLE        reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    INCREASE        reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DECREMENT       reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    IF              reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    WHILE           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    FOR             reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    CONST           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    DEFINE          reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    ARRAY           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    LEFT_BRACKET    reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    NEW             reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    $end            reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    COMMA           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    SEMICOLON       reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_PAREN     reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RETURN          reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    BREAK           reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)
    RIGHT_BRACE     reduce using rule 227 (access_method_object -> access_array_element MINUS GREATER_THAN function_invocation .)


state 302

    (228) access_method_object -> access_array_element MINUS GREATER_THAN accessType .
    (229) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS values
    (230) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS VARIABLE
    (231) access_method_object -> access_array_element MINUS GREATER_THAN accessType . EQUALS access_array_element

    ECHO            reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    PRINT           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CLASS           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INTERFACE       reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FUNCTION        reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    VARIABLE        reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    INCREASE        reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DECREMENT       reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    IF              reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    WHILE           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    FOR             reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    CONST           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    DEFINE          reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    ARRAY           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    LEFT_BRACKET    reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    NEW             reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    $end            reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    COMMA           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    SEMICOLON       reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_PAREN     reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RETURN          reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    BREAK           reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    RIGHT_BRACE     reduce using rule 228 (access_method_object -> access_array_element MINUS GREATER_THAN accessType .)
    EQUALS          shift and go to state 346


state 303

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 347


state 304

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 348


state 305

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS . expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 350
    LEFT_PAREN      shift and go to state 349
    IDENTIFIER      shift and go to state 353
    INTEGER         shift and go to state 354
    FLOAT           shift and go to state 355

    expression_for                 shift and go to state 351
    number_values                  shift and go to state 352

state 306

    (150) const_syntax -> CONST IDENTIFIER EQUALS values .

    SEMICOLON       reduce using rule 150 (const_syntax -> CONST IDENTIFIER EQUALS values .)


state 307

    (151) define_syntax -> DEFINE LEFT_PAREN STRING COMMA . values RIGHT_PAREN
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 356
    boolean                        shift and go to state 61

state 308

    (209) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (184) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198
    NEW             shift and go to state 46
    ARRAY           shift and go to state 343

    values                         shift and go to state 357
    values_array_indexed           shift and go to state 206
    boolean                        shift and go to state 61
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211

state 309

    (184) indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .

    ECHO            reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    PRINT           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CLASS           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INTERFACE       reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FUNCTION        reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    VARIABLE        reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    INCREASE        reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DECREMENT       reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    IF              reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    WHILE           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    FOR             reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    CONST           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    DEFINE          reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    ARRAY           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    NEW             reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    $end            reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    SEMICOLON       reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    COMMA           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RETURN          reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    BREAK           reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 184 (indexed_array -> ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN .)


state 310

    (185) associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .

    ECHO            reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    PRINT           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CLASS           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INTERFACE       reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FUNCTION        reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    VARIABLE        reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    INCREASE        reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DECREMENT       reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    IF              reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    WHILE           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    FOR             reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    CONST           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    DEFINE          reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    ARRAY           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    NEW             reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    $end            reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    SEMICOLON       reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RETURN          reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    BREAK           reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 185 (associative_array -> ARRAY LEFT_PAREN structure_array RIGHT_PAREN .)


state 311

    (205) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 358


state 312

    (192) values_array_indexed -> values COMMA . values_array_indexed
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 343
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 209
    values_array_indexed           shift and go to state 359
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 61

state 313

    (194) values_array_indexed -> object_creation COMMA . values_array_indexed
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 343
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    object_creation                shift and go to state 210
    values_array_indexed           shift and go to state 360
    values                         shift and go to state 209
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 61

state 314

    (196) values_array_indexed -> indexed_array COMMA . values_array_indexed
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 343
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    indexed_array                  shift and go to state 211
    values_array_indexed           shift and go to state 361
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    boolean                        shift and go to state 61

state 315

    (187) structure_array -> key EQUALS . GREATER_THAN values
    (188) structure_array -> key EQUALS . GREATER_THAN values COMMA structure_array

    GREATER_THAN    shift and go to state 362


state 316

    (186) associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .

    ECHO            reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    PRINT           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CLASS           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INTERFACE       reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FUNCTION        reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    VARIABLE        reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    INCREASE        reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DECREMENT       reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    IF              reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    WHILE           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    FOR             reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    CONST           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    DEFINE          reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    ARRAY           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    NEW             reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    $end            reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RETURN          reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    BREAK           reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 186 (associative_array -> ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET .)


state 317

    (207) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .
    (208) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET . COMMA structure_matrix_second

    RIGHT_BRACKET   reduce using rule 207 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET .)
    COMMA           shift and go to state 363


state 318

    (206) matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .

    ECHO            reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    PRINT           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CLASS           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INTERFACE       reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FUNCTION        reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    VARIABLE        reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    INCREASE        reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DECREMENT       reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    IF              reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    WHILE           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    FOR             reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    CONST           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    DEFINE          reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    ARRAY           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    LEFT_BRACKET    reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    NEW             reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    $end            reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RETURN          reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    BREAK           reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)
    RIGHT_BRACE     reduce using rule 206 (matrix_secondform -> LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON .)


state 319

    (221) object_creation -> NEW IDENTIFIER LEFT_PAREN params . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 364


state 320

    (131) factor -> LEFT_PAREN expression . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 226


state 321

    (153) function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 153 (function_invocation -> VARIABLE LEFT_PAREN params RIGHT_PAREN .)


state 322

    (158) real_params -> real_params COMMA . VARIABLE
    (159) real_params -> real_params COMMA . values
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 365
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 366
    boolean                        shift and go to state 61

state 323

    (152) function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    COMMA           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ECHO            reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 152 (function_invocation -> IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 324

    (170) string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .

    COMMA           reduce using rule 170 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 170 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 170 (string_special_function -> STRLEN LEFT_PAREN string_param RIGHT_PAREN .)


state 325

    (171) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param RIGHT_PAREN
    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA . int_param COMMA int_param RIGHT_PAREN
    (175) int_param -> . INTEGER
    (176) int_param -> . VARIABLE

    INTEGER         shift and go to state 368
    VARIABLE        shift and go to state 369

    int_param                      shift and go to state 367

state 326

    (198) access_array_element -> VARIABLE LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 371
    VARIABLE        shift and go to state 370


state 327

    (72) false_boolean_types -> ARRAY LEFT_PAREN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 278


state 328

    (66) true_boolean_types -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 277
    boolean                        shift and go to state 61

state 329

    (66) true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .

    LOGIC_AND       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_OR        reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    LOGIC_XOR       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    SEMICOLON       reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 66 (true_boolean_types -> ARRAY LEFT_PAREN values RIGHT_PAREN .)


state 330

    (234) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE . class_body RIGHT_BRACE
    (245) class_body -> . class_body class_member
    (246) class_body -> .

    RIGHT_BRACE     reduce using rule 246 (class_body -> .)
    PUBLIC          reduce using rule 246 (class_body -> .)
    PRIVATE         reduce using rule 246 (class_body -> .)
    PROTECTED       reduce using rule 246 (class_body -> .)
    STATIC          reduce using rule 246 (class_body -> .)
    FUNCTION        reduce using rule 246 (class_body -> .)
    VARIABLE        reduce using rule 246 (class_body -> .)
    CONST           reduce using rule 246 (class_body -> .)
    DEFINE          reduce using rule 246 (class_body -> .)

    class_body                     shift and go to state 372

state 331

    (241) class_implements_opt -> IMPLEMENTS interface_list .
    (244) interface_list -> interface_list . COMMA IDENTIFIER

    LEFT_BRACE      reduce using rule 241 (class_implements_opt -> IMPLEMENTS interface_list .)
    COMMA           shift and go to state 373


state 332

    (243) interface_list -> IDENTIFIER .

    COMMA           reduce using rule 243 (interface_list -> IDENTIFIER .)
    LEFT_BRACE      reduce using rule 243 (interface_list -> IDENTIFIER .)


state 333

    (235) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body . RIGHT_BRACE
    (236) interface_body -> interface_body . interface_method
    (238) interface_method -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON
    (253) visibility_opt -> . PUBLIC
    (254) visibility_opt -> . PRIVATE
    (255) visibility_opt -> . PROTECTED
    (256) visibility_opt -> .

    RIGHT_BRACE     shift and go to state 374
    PUBLIC          shift and go to state 377
    PRIVATE         shift and go to state 378
    PROTECTED       shift and go to state 379
    FUNCTION        reduce using rule 256 (visibility_opt -> .)

    interface_method               shift and go to state 375
    visibility_opt                 shift and go to state 376

state 334

    (161) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . codeblock
    (167) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 381

    codeblock                      shift and go to state 380

state 335

    (168) input -> FEGTS LEFT_PAREN STDIN . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 382


state 336

    (169) input -> READLINE LEFT_PAREN STRING . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 383


state 337

    (164) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN codeblock
    (165) arrow_function -> FN LEFT_PAREN params . RIGHT_PAREN EQUALS GREATER_THAN print_statement

    RIGHT_PAREN     shift and go to state 384


state 338

    (166) anonymous_functions -> FUNCTION LEFT_PAREN params . RIGHT_PAREN codeblock

    RIGHT_PAREN     shift and go to state 385


state 339

    (66) true_boolean_types -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (191) values_array_indexed -> values .
    (192) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 329
    COMMA           shift and go to state 312

  ! RIGHT_PAREN     [ reduce using rule 191 (values_array_indexed -> values .) ]


state 340

    (212) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET

    VARIABLE        shift and go to state 386
    INTEGER         shift and go to state 387


state 341

    (211) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET . VARIABLE RIGHT_BRACKET

    INTEGER         shift and go to state 389
    VARIABLE        shift and go to state 388


state 342

    (217) add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .

    ECHO            reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    PRINT           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CLASS           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INTERFACE       reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FUNCTION        reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    VARIABLE        reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    INCREASE        reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DECREMENT       reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    IF              reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    WHILE           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    FOR             reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    CONST           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    DEFINE          reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    ARRAY           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    LEFT_BRACKET    reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    NEW             reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    $end            reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    SEMICOLON       reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RETURN          reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    BREAK           reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)
    RIGHT_BRACE     reduce using rule 217 (add_element_matrix -> VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array .)


state 343

    (184) indexed_array -> ARRAY . LEFT_PAREN values_array_indexed RIGHT_PAREN

    LEFT_PAREN      shift and go to state 390


state 344

    (224) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . values
    (225) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (226) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS . access_array_element
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 391
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 392
    access_array_element           shift and go to state 393
    boolean                        shift and go to state 61

state 345

    (232) accessType -> IDENTIFIER LEFT_BRACKET . INTEGER RIGHT_BRACKET

    INTEGER         shift and go to state 394


state 346

    (229) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . values
    (230) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . VARIABLE
    (231) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS . access_array_element
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 397
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    access_array_element           shift and go to state 395
    values                         shift and go to state 396
    boolean                        shift and go to state 61

state 347

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 398
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 348

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 402
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 349

    (39) expression_for -> LEFT_PAREN . expression_for RIGHT_PAREN
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 350
    LEFT_PAREN      shift and go to state 349
    IDENTIFIER      shift and go to state 353
    INTEGER         shift and go to state 354
    FLOAT           shift and go to state 355

    expression_for                 shift and go to state 403
    number_values                  shift and go to state 352

state 350

    (36) expression_for -> VARIABLE .

    SEMICOLON       reduce using rule 36 (expression_for -> VARIABLE .)
    PLUS            reduce using rule 36 (expression_for -> VARIABLE .)
    MINUS           reduce using rule 36 (expression_for -> VARIABLE .)
    MULTIPLY        reduce using rule 36 (expression_for -> VARIABLE .)
    DIVIDE          reduce using rule 36 (expression_for -> VARIABLE .)
    MODULE          reduce using rule 36 (expression_for -> VARIABLE .)
    POW             reduce using rule 36 (expression_for -> VARIABLE .)
    RIGHT_PAREN     reduce using rule 36 (expression_for -> VARIABLE .)


state 351

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for . SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       shift and go to state 404
    PLUS            shift and go to state 406
    MINUS           shift and go to state 407
    MULTIPLY        shift and go to state 408
    DIVIDE          shift and go to state 409
    MODULE          shift and go to state 410
    POW             shift and go to state 411

    operator_aritmetic             shift and go to state 405

state 352

    (37) expression_for -> number_values .

    SEMICOLON       reduce using rule 37 (expression_for -> number_values .)
    PLUS            reduce using rule 37 (expression_for -> number_values .)
    MINUS           reduce using rule 37 (expression_for -> number_values .)
    MULTIPLY        reduce using rule 37 (expression_for -> number_values .)
    DIVIDE          reduce using rule 37 (expression_for -> number_values .)
    MODULE          reduce using rule 37 (expression_for -> number_values .)
    POW             reduce using rule 37 (expression_for -> number_values .)
    RIGHT_PAREN     reduce using rule 37 (expression_for -> number_values .)


state 353

    (40) expression_for -> IDENTIFIER . LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER . LEFT_PAREN access_array_element RIGHT_PAREN

    LEFT_PAREN      shift and go to state 412


state 354

    (42) number_values -> INTEGER .

    SEMICOLON       reduce using rule 42 (number_values -> INTEGER .)
    PLUS            reduce using rule 42 (number_values -> INTEGER .)
    MINUS           reduce using rule 42 (number_values -> INTEGER .)
    MULTIPLY        reduce using rule 42 (number_values -> INTEGER .)
    DIVIDE          reduce using rule 42 (number_values -> INTEGER .)
    MODULE          reduce using rule 42 (number_values -> INTEGER .)
    POW             reduce using rule 42 (number_values -> INTEGER .)
    RIGHT_PAREN     reduce using rule 42 (number_values -> INTEGER .)


state 355

    (43) number_values -> FLOAT .

    SEMICOLON       reduce using rule 43 (number_values -> FLOAT .)
    PLUS            reduce using rule 43 (number_values -> FLOAT .)
    MINUS           reduce using rule 43 (number_values -> FLOAT .)
    MULTIPLY        reduce using rule 43 (number_values -> FLOAT .)
    DIVIDE          reduce using rule 43 (number_values -> FLOAT .)
    MODULE          reduce using rule 43 (number_values -> FLOAT .)
    POW             reduce using rule 43 (number_values -> FLOAT .)
    RIGHT_PAREN     reduce using rule 43 (number_values -> FLOAT .)


state 356

    (151) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 413


state 357

    (209) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first
    (191) values_array_indexed -> values .
    (192) values_array_indexed -> values . COMMA values_array_indexed

  ! shift/reduce conflict for RIGHT_PAREN resolved as shift
    RIGHT_PAREN     shift and go to state 414
    COMMA           shift and go to state 312

  ! RIGHT_PAREN     [ reduce using rule 191 (values_array_indexed -> values .) ]


state 358

    (205) matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .

    ECHO            reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    PRINT           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CLASS           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INTERFACE       reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    VARIABLE        reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    INCREASE        reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DECREMENT       reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    IF              reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    WHILE           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    FOR             reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    CONST           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    DEFINE          reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    ARRAY           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    LEFT_BRACKET    reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    NEW             reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    $end            reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    SEMICOLON       reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RETURN          reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    BREAK           reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)
    RIGHT_BRACE     reduce using rule 205 (matrix_firstform -> ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON .)


state 359

    (192) values_array_indexed -> values COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 192 (values_array_indexed -> values COMMA values_array_indexed .)


state 360

    (194) values_array_indexed -> object_creation COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 194 (values_array_indexed -> object_creation COMMA values_array_indexed .)


state 361

    (196) values_array_indexed -> indexed_array COMMA values_array_indexed .

    RIGHT_PAREN     reduce using rule 196 (values_array_indexed -> indexed_array COMMA values_array_indexed .)


state 362

    (187) structure_array -> key EQUALS GREATER_THAN . values
    (188) structure_array -> key EQUALS GREATER_THAN . values COMMA structure_array
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 415
    boolean                        shift and go to state 61

state 363

    (208) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA . structure_matrix_second
    (207) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET
    (208) structure_matrix_second -> . LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second

    LEFT_BRACKET    shift and go to state 107

    structure_matrix_second        shift and go to state 416

state 364

    (221) object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .

    ECHO            reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    PRINT           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CLASS           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INTERFACE       reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FUNCTION        reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    VARIABLE        reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    INCREASE        reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DECREMENT       reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    IF              reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    WHILE           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    FOR             reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    CONST           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    DEFINE          reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    ARRAY           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    LEFT_BRACKET    reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    NEW             reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    $end            reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    COMMA           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    SEMICOLON       reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RETURN          reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    BREAK           reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)
    RIGHT_BRACE     reduce using rule 221 (object_creation -> NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN .)


state 365

    (158) real_params -> real_params COMMA VARIABLE .

    COMMA           reduce using rule 158 (real_params -> real_params COMMA VARIABLE .)
    RIGHT_PAREN     reduce using rule 158 (real_params -> real_params COMMA VARIABLE .)


state 366

    (159) real_params -> real_params COMMA values .

    COMMA           reduce using rule 159 (real_params -> real_params COMMA values .)
    RIGHT_PAREN     reduce using rule 159 (real_params -> real_params COMMA values .)


state 367

    (171) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . RIGHT_PAREN
    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param . COMMA int_param RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 418
    COMMA           shift and go to state 417


state 368

    (175) int_param -> INTEGER .

    RIGHT_PAREN     reduce using rule 175 (int_param -> INTEGER .)
    COMMA           reduce using rule 175 (int_param -> INTEGER .)


state 369

    (176) int_param -> VARIABLE .

    RIGHT_PAREN     reduce using rule 176 (int_param -> VARIABLE .)
    COMMA           reduce using rule 176 (int_param -> VARIABLE .)


state 370

    (199) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 419


state 371

    (198) access_array_element -> VARIABLE LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 420


state 372

    (234) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body . RIGHT_BRACE
    (245) class_body -> class_body . class_member
    (247) class_member -> . visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (248) class_member -> . visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (249) class_member -> . class_attribute
    (253) visibility_opt -> . PUBLIC
    (254) visibility_opt -> . PRIVATE
    (255) visibility_opt -> . PROTECTED
    (256) visibility_opt -> .
    (250) class_attribute -> . visibility_opt VARIABLE EQUALS values SEMICOLON
    (251) class_attribute -> . visibility_opt VARIABLE SEMICOLON
    (252) class_attribute -> . visibility_opt constant_assignment SEMICOLON

    RIGHT_BRACE     shift and go to state 421
    PUBLIC          shift and go to state 377
    PRIVATE         shift and go to state 378
    PROTECTED       shift and go to state 379
    STATIC          reduce using rule 256 (visibility_opt -> .)
    FUNCTION        reduce using rule 256 (visibility_opt -> .)
    VARIABLE        reduce using rule 256 (visibility_opt -> .)
    CONST           reduce using rule 256 (visibility_opt -> .)
    DEFINE          reduce using rule 256 (visibility_opt -> .)

    class_member                   shift and go to state 422
    visibility_opt                 shift and go to state 423
    class_attribute                shift and go to state 424

state 373

    (244) interface_list -> interface_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 425


state 374

    (235) interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .

    ECHO            reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    PRINT           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CLASS           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    INCREASE        reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    IF              reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    WHILE           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    FOR             reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    CONST           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    DEFINE          reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    ARRAY           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    NEW             reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    $end            reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RETURN          reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    BREAK           reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 235 (interface_declaration -> INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE .)


state 375

    (236) interface_body -> interface_body interface_method .

    RIGHT_BRACE     reduce using rule 236 (interface_body -> interface_body interface_method .)
    PUBLIC          reduce using rule 236 (interface_body -> interface_body interface_method .)
    PRIVATE         reduce using rule 236 (interface_body -> interface_body interface_method .)
    PROTECTED       reduce using rule 236 (interface_body -> interface_body interface_method .)
    FUNCTION        reduce using rule 236 (interface_body -> interface_body interface_method .)


state 376

    (238) interface_method -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    FUNCTION        shift and go to state 426


state 377

    (253) visibility_opt -> PUBLIC .

    FUNCTION        reduce using rule 253 (visibility_opt -> PUBLIC .)
    STATIC          reduce using rule 253 (visibility_opt -> PUBLIC .)
    VARIABLE        reduce using rule 253 (visibility_opt -> PUBLIC .)
    CONST           reduce using rule 253 (visibility_opt -> PUBLIC .)
    DEFINE          reduce using rule 253 (visibility_opt -> PUBLIC .)


state 378

    (254) visibility_opt -> PRIVATE .

    FUNCTION        reduce using rule 254 (visibility_opt -> PRIVATE .)
    STATIC          reduce using rule 254 (visibility_opt -> PRIVATE .)
    VARIABLE        reduce using rule 254 (visibility_opt -> PRIVATE .)
    CONST           reduce using rule 254 (visibility_opt -> PRIVATE .)
    DEFINE          reduce using rule 254 (visibility_opt -> PRIVATE .)


state 379

    (255) visibility_opt -> PROTECTED .

    FUNCTION        reduce using rule 255 (visibility_opt -> PROTECTED .)
    STATIC          reduce using rule 255 (visibility_opt -> PROTECTED .)
    VARIABLE        reduce using rule 255 (visibility_opt -> PROTECTED .)
    CONST           reduce using rule 255 (visibility_opt -> PROTECTED .)
    DEFINE          reduce using rule 255 (visibility_opt -> PROTECTED .)


state 380

    (161) function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .

    ECHO            reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    PRINT           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CLASS           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INTERFACE       reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FUNCTION        reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    VARIABLE        reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    INCREASE        reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DECREMENT       reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    IF              reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    WHILE           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    FOR             reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    CONST           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    DEFINE          reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    ARRAY           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    LEFT_BRACKET    reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    NEW             reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    $end            reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RETURN          reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    BREAK           reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)
    RIGHT_BRACE     reduce using rule 161 (function_declaration -> FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock .)


state 381

    (167) codeblock -> LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 427
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 382

    (168) input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .

    SEMICOLON       reduce using rule 168 (input -> FEGTS LEFT_PAREN STDIN RIGHT_PAREN .)


state 383

    (169) input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .

    SEMICOLON       reduce using rule 169 (input -> READLINE LEFT_PAREN STRING RIGHT_PAREN .)


state 384

    (164) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN codeblock
    (165) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN . EQUALS GREATER_THAN print_statement

    EQUALS          shift and go to state 428


state 385

    (166) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN . codeblock
    (167) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 381

    codeblock                      shift and go to state 429

state 386

    (212) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 430


state 387

    (213) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 431


state 388

    (214) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 432


state 389

    (211) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 433


state 390

    (184) indexed_array -> ARRAY LEFT_PAREN . values_array_indexed RIGHT_PAREN
    (191) values_array_indexed -> . values
    (192) values_array_indexed -> . values COMMA values_array_indexed
    (193) values_array_indexed -> . object_creation
    (194) values_array_indexed -> . object_creation COMMA values_array_indexed
    (195) values_array_indexed -> . indexed_array
    (196) values_array_indexed -> . indexed_array COMMA values_array_indexed
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    NEW             shift and go to state 46
    ARRAY           shift and go to state 343
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values_array_indexed           shift and go to state 206
    values                         shift and go to state 209
    object_creation                shift and go to state 210
    indexed_array                  shift and go to state 211
    boolean                        shift and go to state 61

state 391

    (225) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 326

  ! LEFT_BRACKET    [ reduce using rule 225 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 392

    (224) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 224 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS values .)


state 393

    (226) access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 226 (access_method_object -> VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 394

    (232) accessType -> IDENTIFIER LEFT_BRACKET INTEGER . RIGHT_BRACKET

    RIGHT_BRACKET   shift and go to state 434


state 395

    (231) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .

    ECHO            reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    PRINT           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CLASS           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INTERFACE       reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FUNCTION        reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    VARIABLE        reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    INCREASE        reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DECREMENT       reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    IF              reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    WHILE           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    FOR             reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    CONST           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    DEFINE          reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    ARRAY           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    LEFT_BRACKET    reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    NEW             reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    $end            reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    COMMA           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    SEMICOLON       reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_PAREN     reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RETURN          reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    BREAK           reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)
    RIGHT_BRACE     reduce using rule 231 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element .)


state 396

    (229) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .

    ECHO            reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    PRINT           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CLASS           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INTERFACE       reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FUNCTION        reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    VARIABLE        reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    INCREASE        reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DECREMENT       reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    IF              reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    WHILE           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    FOR             reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    CONST           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    DEFINE          reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    ARRAY           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    LEFT_BRACKET    reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    NEW             reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    $end            reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    COMMA           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    SEMICOLON       reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_PAREN     reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RETURN          reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    BREAK           reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)
    RIGHT_BRACE     reduce using rule 229 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS values .)


state 397

    (230) access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

  ! shift/reduce conflict for LEFT_BRACKET resolved as shift
    ECHO            reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    PRINT           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CLASS           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INTERFACE       reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FUNCTION        reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    VARIABLE        reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    INCREASE        reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DECREMENT       reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    IF              reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    WHILE           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    FOR             reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    CONST           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    DEFINE          reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    ARRAY           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    NEW             reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    $end            reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    COMMA           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    SEMICOLON       reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_PAREN     reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RETURN          reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    BREAK           reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    RIGHT_BRACE     reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .)
    LEFT_BRACKET    shift and go to state 326

  ! LEFT_BRACKET    [ reduce using rule 230 (access_method_object -> access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE .) ]


state 398

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 435


state 399

    (21) body_statement -> sentence .
    (22) body_statement -> sentence . RETURN values SEMICOLON
    (23) body_statement -> sentence . RETURN SEMICOLON
    (24) body_statement -> sentence . BREAK SEMICOLON
    (25) body_statement -> sentence . body_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RIGHT_BRACE     reduce using rule 21 (body_statement -> sentence .)
    RETURN          shift and go to state 436
    BREAK           shift and go to state 437
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    sentence                       shift and go to state 399
    body_statement                 shift and go to state 438
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 400

    (26) body_statement -> RETURN . values SEMICOLON
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 439
    boolean                        shift and go to state 61

state 401

    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 440


state 402

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 441


state 403

    (39) expression_for -> LEFT_PAREN expression_for . RIGHT_PAREN
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    RIGHT_PAREN     shift and go to state 442
    PLUS            shift and go to state 406
    MINUS           shift and go to state 407
    MULTIPLY        shift and go to state 408
    DIVIDE          shift and go to state 409
    MODULE          shift and go to state 410
    POW             shift and go to state 411

    operator_aritmetic             shift and go to state 405

state 404

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON . condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (35) condition_for -> . VARIABLE comparator_operator expression_for

    VARIABLE        shift and go to state 443

    condition_for                  shift and go to state 444

state 405

    (38) expression_for -> expression_for operator_aritmetic . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 350
    LEFT_PAREN      shift and go to state 349
    IDENTIFIER      shift and go to state 353
    INTEGER         shift and go to state 354
    FLOAT           shift and go to state 355

    expression_for                 shift and go to state 445
    number_values                  shift and go to state 352

state 406

    (44) operator_aritmetic -> PLUS .

    VARIABLE        reduce using rule 44 (operator_aritmetic -> PLUS .)
    LEFT_PAREN      reduce using rule 44 (operator_aritmetic -> PLUS .)
    IDENTIFIER      reduce using rule 44 (operator_aritmetic -> PLUS .)
    INTEGER         reduce using rule 44 (operator_aritmetic -> PLUS .)
    FLOAT           reduce using rule 44 (operator_aritmetic -> PLUS .)


state 407

    (45) operator_aritmetic -> MINUS .

    VARIABLE        reduce using rule 45 (operator_aritmetic -> MINUS .)
    LEFT_PAREN      reduce using rule 45 (operator_aritmetic -> MINUS .)
    IDENTIFIER      reduce using rule 45 (operator_aritmetic -> MINUS .)
    INTEGER         reduce using rule 45 (operator_aritmetic -> MINUS .)
    FLOAT           reduce using rule 45 (operator_aritmetic -> MINUS .)


state 408

    (46) operator_aritmetic -> MULTIPLY .

    VARIABLE        reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    LEFT_PAREN      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    IDENTIFIER      reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    INTEGER         reduce using rule 46 (operator_aritmetic -> MULTIPLY .)
    FLOAT           reduce using rule 46 (operator_aritmetic -> MULTIPLY .)


state 409

    (47) operator_aritmetic -> DIVIDE .

    VARIABLE        reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    LEFT_PAREN      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    IDENTIFIER      reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    INTEGER         reduce using rule 47 (operator_aritmetic -> DIVIDE .)
    FLOAT           reduce using rule 47 (operator_aritmetic -> DIVIDE .)


state 410

    (48) operator_aritmetic -> MODULE .

    VARIABLE        reduce using rule 48 (operator_aritmetic -> MODULE .)
    LEFT_PAREN      reduce using rule 48 (operator_aritmetic -> MODULE .)
    IDENTIFIER      reduce using rule 48 (operator_aritmetic -> MODULE .)
    INTEGER         reduce using rule 48 (operator_aritmetic -> MODULE .)
    FLOAT           reduce using rule 48 (operator_aritmetic -> MODULE .)


state 411

    (49) operator_aritmetic -> POW .

    VARIABLE        reduce using rule 49 (operator_aritmetic -> POW .)
    LEFT_PAREN      reduce using rule 49 (operator_aritmetic -> POW .)
    IDENTIFIER      reduce using rule 49 (operator_aritmetic -> POW .)
    INTEGER         reduce using rule 49 (operator_aritmetic -> POW .)
    FLOAT           reduce using rule 49 (operator_aritmetic -> POW .)


state 412

    (40) expression_for -> IDENTIFIER LEFT_PAREN . VARIABLE RIGHT_PAREN
    (41) expression_for -> IDENTIFIER LEFT_PAREN . access_array_element RIGHT_PAREN
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    VARIABLE        shift and go to state 446

    access_array_element           shift and go to state 447

state 413

    (151) define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .

    SEMICOLON       reduce using rule 151 (define_syntax -> DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN .)


state 414

    (209) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .
    (210) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN . COMMA structure_matrix_first

    RIGHT_PAREN     reduce using rule 209 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN .)
    COMMA           shift and go to state 448


state 415

    (187) structure_array -> key EQUALS GREATER_THAN values .
    (188) structure_array -> key EQUALS GREATER_THAN values . COMMA structure_array

    RIGHT_PAREN     reduce using rule 187 (structure_array -> key EQUALS GREATER_THAN values .)
    RIGHT_BRACKET   reduce using rule 187 (structure_array -> key EQUALS GREATER_THAN values .)
    COMMA           shift and go to state 449


state 416

    (208) structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .

    RIGHT_BRACKET   reduce using rule 208 (structure_matrix_second -> LEFT_BRACKET values RIGHT_BRACKET COMMA structure_matrix_second .)


state 417

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA . int_param RIGHT_PAREN
    (175) int_param -> . INTEGER
    (176) int_param -> . VARIABLE

    INTEGER         shift and go to state 368
    VARIABLE        shift and go to state 369

    int_param                      shift and go to state 450

state 418

    (171) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 171 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 171 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 171 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param RIGHT_PAREN .)


state 419

    (199) access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ECHO            reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    PRINT           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CLASS           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INTERFACE       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FUNCTION        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    VARIABLE        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    INCREASE        reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DECREMENT       reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    IF              reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    WHILE           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    FOR             reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    CONST           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    DEFINE          reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    ARRAY           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    NEW             reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    $end            reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RETURN          reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    BREAK           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    MINUS           reduce using rule 199 (access_array_element -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 420

    (198) access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .

    LOGIC_AND       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    MINUS           reduce using rule 198 (access_array_element -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 421

    (234) class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .

    ECHO            reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    PRINT           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CLASS           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INTERFACE       reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    INCREASE        reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DECREMENT       reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    IF              reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    WHILE           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    FOR             reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    CONST           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    DEFINE          reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    ARRAY           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    NEW             reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    $end            reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RETURN          reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    BREAK           reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 234 (class_declaration -> CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE .)


state 422

    (245) class_body -> class_body class_member .

    RIGHT_BRACE     reduce using rule 245 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 245 (class_body -> class_body class_member .)
    PRIVATE         reduce using rule 245 (class_body -> class_body class_member .)
    PROTECTED       reduce using rule 245 (class_body -> class_body class_member .)
    STATIC          reduce using rule 245 (class_body -> class_body class_member .)
    FUNCTION        reduce using rule 245 (class_body -> class_body class_member .)
    VARIABLE        reduce using rule 245 (class_body -> class_body class_member .)
    CONST           reduce using rule 245 (class_body -> class_body class_member .)
    DEFINE          reduce using rule 245 (class_body -> class_body class_member .)


state 423

    (247) class_member -> visibility_opt . STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (248) class_member -> visibility_opt . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (250) class_attribute -> visibility_opt . VARIABLE EQUALS values SEMICOLON
    (251) class_attribute -> visibility_opt . VARIABLE SEMICOLON
    (252) class_attribute -> visibility_opt . constant_assignment SEMICOLON
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN

    STATIC          shift and go to state 451
    FUNCTION        shift and go to state 452
    VARIABLE        shift and go to state 453
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43

    constant_assignment            shift and go to state 454
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27

state 424

    (249) class_member -> class_attribute .

    RIGHT_BRACE     reduce using rule 249 (class_member -> class_attribute .)
    PUBLIC          reduce using rule 249 (class_member -> class_attribute .)
    PRIVATE         reduce using rule 249 (class_member -> class_attribute .)
    PROTECTED       reduce using rule 249 (class_member -> class_attribute .)
    STATIC          reduce using rule 249 (class_member -> class_attribute .)
    FUNCTION        reduce using rule 249 (class_member -> class_attribute .)
    VARIABLE        reduce using rule 249 (class_member -> class_attribute .)
    CONST           reduce using rule 249 (class_member -> class_attribute .)
    DEFINE          reduce using rule 249 (class_member -> class_attribute .)


state 425

    (244) interface_list -> interface_list COMMA IDENTIFIER .

    COMMA           reduce using rule 244 (interface_list -> interface_list COMMA IDENTIFIER .)
    LEFT_BRACE      reduce using rule 244 (interface_list -> interface_list COMMA IDENTIFIER .)


state 426

    (238) interface_method -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON

    IDENTIFIER      shift and go to state 455


state 427

    (167) codeblock -> LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 456


state 428

    (164) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN codeblock
    (165) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS . GREATER_THAN print_statement

    GREATER_THAN    shift and go to state 457


state 429

    (166) anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .

    SEMICOLON       reduce using rule 166 (anonymous_functions -> FUNCTION LEFT_PAREN params RIGHT_PAREN codeblock .)


state 430

    (212) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 212 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 431

    (213) access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 213 (access_element_matrix -> VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 432

    (214) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .

    SEMICOLON       reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS          reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    COMMA           reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 214 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET .)


state 433

    (211) access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .

    SEMICOLON       reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS          reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    EQUALS_EQUALS   reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_AND       reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_OR        reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LOGIC_XOR       reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 211 (access_element_matrix -> VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 434

    (232) accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .

    EQUALS          reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ECHO            reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    PRINT           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CLASS           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INTERFACE       reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FUNCTION        reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    VARIABLE        reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    INCREASE        reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DECREMENT       reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    IF              reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    WHILE           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    FOR             reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    CONST           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    DEFINE          reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    ARRAY           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    LEFT_BRACKET    reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    NEW             reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    $end            reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    COMMA           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    SEMICOLON       reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_PAREN     reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RETURN          reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    BREAK           reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)
    RIGHT_BRACE     reduce using rule 232 (accessType -> IDENTIFIER LEFT_BRACKET INTEGER RIGHT_BRACKET .)


state 435

    (14) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 14 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 460
    ELSE            shift and go to state 461

    elseif_statement               shift and go to state 458
    else_statement                 shift and go to state 459

state 436

    (22) body_statement -> sentence RETURN . values SEMICOLON
    (23) body_statement -> sentence RETURN . SEMICOLON
    (26) body_statement -> RETURN . values SEMICOLON
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    SEMICOLON       shift and go to state 463
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 462
    boolean                        shift and go to state 61

state 437

    (24) body_statement -> sentence BREAK . SEMICOLON
    (27) body_statement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 464


state 438

    (25) body_statement -> sentence body_statement .

    RIGHT_BRACE     reduce using rule 25 (body_statement -> sentence body_statement .)


state 439

    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 465


state 440

    (27) body_statement -> BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 27 (body_statement -> BREAK SEMICOLON .)


state 441

    (13) while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 13 (while_statement -> WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 442

    (39) expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .

    SEMICOLON       reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    PLUS            reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MINUS           reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MULTIPLY        reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    DIVIDE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    MODULE          reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    POW             reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 39 (expression_for -> LEFT_PAREN expression_for RIGHT_PAREN .)


state 443

    (35) condition_for -> VARIABLE . comparator_operator expression_for
    (87) comparator_operator -> . EQUALS_EQUALS
    (88) comparator_operator -> . IDENTICAL
    (89) comparator_operator -> . NOT_EQUALS
    (90) comparator_operator -> . NOT_IDENTICAL
    (91) comparator_operator -> . SMALL_THAN
    (92) comparator_operator -> . GREATER_THAN
    (93) comparator_operator -> . SMALL_EQUALS_TO
    (94) comparator_operator -> . GREATER_EQUALS_TO
    (95) comparator_operator -> . SPACECRAFT
    (96) comparator_operator -> . NULL_FUSION

    EQUALS_EQUALS   shift and go to state 118
    IDENTICAL       shift and go to state 119
    NOT_EQUALS      shift and go to state 120
    NOT_IDENTICAL   shift and go to state 121
    SMALL_THAN      shift and go to state 122
    GREATER_THAN    shift and go to state 123
    SMALL_EQUALS_TO shift and go to state 124
    GREATER_EQUALS_TO shift and go to state 125
    SPACECRAFT      shift and go to state 126
    NULL_FUSION     shift and go to state 127

    comparator_operator            shift and go to state 466

state 444

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for . SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    SEMICOLON       shift and go to state 467


state 445

    (38) expression_for -> expression_for operator_aritmetic expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULE resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOLON       reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    RIGHT_PAREN     reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .)
    PLUS            shift and go to state 406
    MINUS           shift and go to state 407
    MULTIPLY        shift and go to state 408
    DIVIDE          shift and go to state 409
    MODULE          shift and go to state 410
    POW             shift and go to state 411

  ! PLUS            [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MINUS           [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MULTIPLY        [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! DIVIDE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! MODULE          [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]
  ! POW             [ reduce using rule 38 (expression_for -> expression_for operator_aritmetic expression_for .) ]

    operator_aritmetic             shift and go to state 405

state 446

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE . RIGHT_PAREN
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    RIGHT_PAREN     shift and go to state 468
    LEFT_BRACKET    shift and go to state 326


state 447

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 469


state 448

    (210) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA . structure_matrix_first
    (209) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (210) structure_matrix_first -> . ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    ARRAY           shift and go to state 470

    structure_matrix_first         shift and go to state 471

state 449

    (188) structure_array -> key EQUALS GREATER_THAN values COMMA . structure_array
    (187) structure_array -> . key EQUALS GREATER_THAN values
    (188) structure_array -> . key EQUALS GREATER_THAN values COMMA structure_array
    (189) key -> . INTEGER
    (190) key -> . STRING

    INTEGER         shift and go to state 216
    STRING          shift and go to state 217

    key                            shift and go to state 212
    structure_array                shift and go to state 472

state 450

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param . RIGHT_PAREN

    RIGHT_PAREN     shift and go to state 473


state 451

    (247) class_member -> visibility_opt STATIC . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    FUNCTION        shift and go to state 474


state 452

    (248) class_member -> visibility_opt FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 475


state 453

    (250) class_attribute -> visibility_opt VARIABLE . EQUALS values SEMICOLON
    (251) class_attribute -> visibility_opt VARIABLE . SEMICOLON

    EQUALS          shift and go to state 476
    SEMICOLON       shift and go to state 477


state 454

    (252) class_attribute -> visibility_opt constant_assignment . SEMICOLON

    SEMICOLON       shift and go to state 478


state 455

    (238) interface_method -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN SEMICOLON

    LEFT_PAREN      shift and go to state 479


state 456

    (167) codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)
    SEMICOLON       reduce using rule 167 (codeblock -> LEFT_BRACE body_statement RIGHT_BRACE .)


state 457

    (164) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . codeblock
    (165) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN . print_statement
    (167) codeblock -> . LEFT_BRACE body_statement RIGHT_BRACE
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values

    LEFT_BRACE      shift and go to state 381
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11

    codeblock                      shift and go to state 480
    print_statement                shift and go to state 481

state 458

    (15) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 15 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 459

    (16) if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 16 (if_statement -> IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 460

    (17) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF . LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_PAREN      shift and go to state 482


state 461

    (20) else_statement -> ELSE . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 483


state 462

    (22) body_statement -> sentence RETURN values . SEMICOLON
    (26) body_statement -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 484


state 463

    (23) body_statement -> sentence RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 23 (body_statement -> sentence RETURN SEMICOLON .)


state 464

    (24) body_statement -> sentence BREAK SEMICOLON .
    (27) body_statement -> BREAK SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 24 (body_statement -> sentence BREAK SEMICOLON .)
    RIGHT_BRACE     reduce using rule 24 (body_statement -> sentence BREAK SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 27 (body_statement -> BREAK SEMICOLON .) ]


state 465

    (26) body_statement -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 26 (body_statement -> RETURN values SEMICOLON .)


state 466

    (35) condition_for -> VARIABLE comparator_operator . expression_for
    (36) expression_for -> . VARIABLE
    (37) expression_for -> . number_values
    (38) expression_for -> . expression_for operator_aritmetic expression_for
    (39) expression_for -> . LEFT_PAREN expression_for RIGHT_PAREN
    (40) expression_for -> . IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN
    (41) expression_for -> . IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    VARIABLE        shift and go to state 350
    LEFT_PAREN      shift and go to state 349
    IDENTIFIER      shift and go to state 353
    INTEGER         shift and go to state 354
    FLOAT           shift and go to state 355

    expression_for                 shift and go to state 485
    number_values                  shift and go to state 352

state 467

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON . increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (29) increment_statement -> . VARIABLE INCREASE
    (30) increment_statement -> . VARIABLE DECREMENT
    (31) increment_statement -> . INCREASE VARIABLE
    (32) increment_statement -> . DECREMENT VARIABLE
    (33) increment_statement -> . VARIABLE PLUS_EQUALS INTEGER
    (34) increment_statement -> . VARIABLE EQUALS VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 486
    INCREASE        shift and go to state 488
    DECREMENT       shift and go to state 489

    increment_statement            shift and go to state 487

state 468

    (40) expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .

    SEMICOLON       reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    PLUS            reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MINUS           reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MULTIPLY        reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    DIVIDE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    MODULE          reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    POW             reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 40 (expression_for -> IDENTIFIER LEFT_PAREN VARIABLE RIGHT_PAREN .)


state 469

    (41) expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .

    SEMICOLON       reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    PLUS            reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MINUS           reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MULTIPLY        reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    DIVIDE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    MODULE          reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    POW             reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 41 (expression_for -> IDENTIFIER LEFT_PAREN access_array_element RIGHT_PAREN .)


state 470

    (209) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY . LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first

    LEFT_PAREN      shift and go to state 490


state 471

    (210) structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .

    RIGHT_PAREN     reduce using rule 210 (structure_matrix_first -> ARRAY LEFT_PAREN values RIGHT_PAREN COMMA structure_matrix_first .)


state 472

    (188) structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .

    RIGHT_PAREN     reduce using rule 188 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)
    RIGHT_BRACKET   reduce using rule 188 (structure_array -> key EQUALS GREATER_THAN values COMMA structure_array .)


state 473

    (172) string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .

    COMMA           reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    SEMICOLON       reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)
    RIGHT_PAREN     reduce using rule 172 (string_special_function -> SUBSTR LEFT_PAREN string_param COMMA int_param COMMA int_param RIGHT_PAREN .)


state 474

    (247) class_member -> visibility_opt STATIC FUNCTION . IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    IDENTIFIER      shift and go to state 491


state 475

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 492


state 476

    (250) class_attribute -> visibility_opt VARIABLE EQUALS . values SEMICOLON
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 493
    boolean                        shift and go to state 61

state 477

    (251) class_attribute -> visibility_opt VARIABLE SEMICOLON .

    RIGHT_BRACE     reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PUBLIC          reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PRIVATE         reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    PROTECTED       reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    STATIC          reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    FUNCTION        reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    VARIABLE        reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    CONST           reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)
    DEFINE          reduce using rule 251 (class_attribute -> visibility_opt VARIABLE SEMICOLON .)


state 478

    (252) class_attribute -> visibility_opt constant_assignment SEMICOLON .

    RIGHT_BRACE     reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PUBLIC          reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PRIVATE         reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    PROTECTED       reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    STATIC          reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    FUNCTION        reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    VARIABLE        reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    CONST           reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)
    DEFINE          reduce using rule 252 (class_attribute -> visibility_opt constant_assignment SEMICOLON .)


state 479

    (238) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN SEMICOLON
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 494
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 480

    (164) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .

    SEMICOLON       reduce using rule 164 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN codeblock .)


state 481

    (165) arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .

    SEMICOLON       reduce using rule 165 (arrow_function -> FN LEFT_PAREN params RIGHT_PAREN EQUALS GREATER_THAN print_statement .)


state 482

    (17) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN . conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (50) conditional -> . boolean_expression
    (51) conditional -> . boolean_expression logic_operator boolean_expression
    (55) boolean_expression -> . comparation
    (56) boolean_expression -> . LEFT_PAREN conditional RIGHT_PAREN
    (57) boolean_expression -> . logic_not_sentence
    (58) boolean_expression -> . logic_expression
    (76) comparation -> . values comparator_operator values
    (77) comparation -> . values comparator_operator expression
    (78) comparation -> . expression comparator_operator expression
    (79) comparation -> . VARIABLE EQUALS_EQUALS values
    (80) comparation -> . access_array_element EQUALS_EQUALS values
    (81) comparation -> . access_array_element EQUALS_EQUALS VARIABLE
    (82) comparation -> . VARIABLE EQUALS_EQUALS access_array_element
    (83) comparation -> . VARIABLE EQUALS_EQUALS VARIABLE
    (84) comparation -> . access_array_element EQUALS_EQUALS access_array_element
    (85) comparation -> . access_element_matrix EQUALS_EQUALS VARIABLE
    (86) comparation -> . VARIABLE EQUALS_EQUALS access_element_matrix
    (74) logic_not_sentence -> . LOGIC_NOT conditional
    (75) logic_not_sentence -> . LOGIC_NOT VARIABLE
    (59) logic_expression -> . true_boolean_types logic_operator false_boolean_types
    (60) logic_expression -> . false_boolean_types logic_operator true_boolean_types
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (121) expression -> . term
    (122) expression -> . term PLUS expression
    (123) expression -> . term MINUS expression
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (61) true_boolean_types -> . TRUE
    (62) true_boolean_types -> . STRING
    (63) true_boolean_types -> . INTEGER
    (64) true_boolean_types -> . FLOAT
    (65) true_boolean_types -> . VARIABLE
    (66) true_boolean_types -> . ARRAY LEFT_PAREN values RIGHT_PAREN
    (67) false_boolean_types -> . FALSE
    (68) false_boolean_types -> . STRING
    (69) false_boolean_types -> . INTEGER
    (70) false_boolean_types -> . VARIABLE
    (71) false_boolean_types -> . FLOAT
    (72) false_boolean_types -> . ARRAY LEFT_PAREN RIGHT_PAREN
    (73) false_boolean_types -> . NULL
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (124) term -> . factor
    (125) term -> . factor MULTIPLY term
    (126) term -> . factor DIVIDE term
    (127) term -> . factor MODULE term
    (128) term -> . factor POW term
    (129) factor -> . INTEGER
    (130) factor -> . VARIABLE
    (131) factor -> . LEFT_PAREN expression RIGHT_PAREN

    LEFT_PAREN      shift and go to state 110
    VARIABLE        shift and go to state 200
    LOGIC_NOT       shift and go to state 74
    INTEGER         shift and go to state 59
    STRING          shift and go to state 152
    FLOAT           shift and go to state 60
    TRUE            shift and go to state 153
    ARRAY           shift and go to state 78
    FALSE           shift and go to state 154
    NULL            shift and go to state 79

    conditional                    shift and go to state 495
    boolean_expression             shift and go to state 62
    comparation                    shift and go to state 68
    logic_not_sentence             shift and go to state 69
    logic_expression               shift and go to state 70
    values                         shift and go to state 150
    expression                     shift and go to state 72
    access_array_element           shift and go to state 151
    access_element_matrix          shift and go to state 73
    true_boolean_types             shift and go to state 75
    false_boolean_types            shift and go to state 76
    boolean                        shift and go to state 61
    term                           shift and go to state 77
    factor                         shift and go to state 80

state 483

    (20) else_statement -> ELSE LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 496
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 484

    (22) body_statement -> sentence RETURN values SEMICOLON .
    (26) body_statement -> RETURN values SEMICOLON .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)
    RIGHT_BRACE     reduce using rule 22 (body_statement -> sentence RETURN values SEMICOLON .)

  ! RIGHT_BRACE     [ reduce using rule 26 (body_statement -> RETURN values SEMICOLON .) ]


state 485

    (35) condition_for -> VARIABLE comparator_operator expression_for .
    (38) expression_for -> expression_for . operator_aritmetic expression_for
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    SEMICOLON       reduce using rule 35 (condition_for -> VARIABLE comparator_operator expression_for .)
    PLUS            shift and go to state 406
    MINUS           shift and go to state 407
    MULTIPLY        shift and go to state 408
    DIVIDE          shift and go to state 409
    MODULE          shift and go to state 410
    POW             shift and go to state 411

    operator_aritmetic             shift and go to state 405

state 486

    (29) increment_statement -> VARIABLE . INCREASE
    (30) increment_statement -> VARIABLE . DECREMENT
    (33) increment_statement -> VARIABLE . PLUS_EQUALS INTEGER
    (34) increment_statement -> VARIABLE . EQUALS VARIABLE operator_aritmetic number_values

    INCREASE        shift and go to state 497
    DECREMENT       shift and go to state 498
    PLUS_EQUALS     shift and go to state 499
    EQUALS          shift and go to state 500


state 487

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 501


state 488

    (31) increment_statement -> INCREASE . VARIABLE

    VARIABLE        shift and go to state 502


state 489

    (32) increment_statement -> DECREMENT . VARIABLE

    VARIABLE        shift and go to state 503


state 490

    (209) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY LEFT_PAREN . values RIGHT_PAREN COMMA structure_matrix_first
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 504
    boolean                        shift and go to state 61

state 491

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER . LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    LEFT_PAREN      shift and go to state 505


state 492

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 506
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 493

    (250) class_attribute -> visibility_opt VARIABLE EQUALS values . SEMICOLON

    SEMICOLON       shift and go to state 507


state 494

    (238) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN SEMICOLON

    RIGHT_PAREN     shift and go to state 508


state 495

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional . RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement

    RIGHT_PAREN     shift and go to state 509


state 496

    (20) else_statement -> ELSE LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 510


state 497

    (29) increment_statement -> VARIABLE INCREASE .

    RIGHT_PAREN     reduce using rule 29 (increment_statement -> VARIABLE INCREASE .)


state 498

    (30) increment_statement -> VARIABLE DECREMENT .

    RIGHT_PAREN     reduce using rule 30 (increment_statement -> VARIABLE DECREMENT .)


state 499

    (33) increment_statement -> VARIABLE PLUS_EQUALS . INTEGER

    INTEGER         shift and go to state 511


state 500

    (34) increment_statement -> VARIABLE EQUALS . VARIABLE operator_aritmetic number_values

    VARIABLE        shift and go to state 512


state 501

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE

    LEFT_BRACE      shift and go to state 513


state 502

    (31) increment_statement -> INCREASE VARIABLE .

    RIGHT_PAREN     reduce using rule 31 (increment_statement -> INCREASE VARIABLE .)


state 503

    (32) increment_statement -> DECREMENT VARIABLE .

    RIGHT_PAREN     reduce using rule 32 (increment_statement -> DECREMENT VARIABLE .)


state 504

    (209) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN
    (210) structure_matrix_first -> ARRAY LEFT_PAREN values . RIGHT_PAREN COMMA structure_matrix_first

    RIGHT_PAREN     shift and go to state 414


state 505

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN . params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE
    (154) params -> . real_params
    (155) params -> . empty
    (156) real_params -> . VARIABLE
    (157) real_params -> . values
    (158) real_params -> . real_params COMMA VARIABLE
    (159) real_params -> . real_params COMMA values
    (160) empty -> .
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE

    VARIABLE        shift and go to state 235
    RIGHT_PAREN     reduce using rule 160 (empty -> .)
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    params                         shift and go to state 514
    real_params                    shift and go to state 237
    empty                          shift and go to state 238
    values                         shift and go to state 239
    boolean                        shift and go to state 61

state 506

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 515


state 507

    (250) class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .

    RIGHT_BRACE     reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PUBLIC          reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PRIVATE         reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    PROTECTED       reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    STATIC          reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    FUNCTION        reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    VARIABLE        reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    CONST           reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)
    DEFINE          reduce using rule 250 (class_attribute -> visibility_opt VARIABLE EQUALS values SEMICOLON .)


state 508

    (238) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . SEMICOLON

    SEMICOLON       shift and go to state 516


state 509

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN . LEFT_BRACE body_statement RIGHT_BRACE else_statement

    LEFT_BRACE      shift and go to state 517


state 510

    (20) else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 20 (else_statement -> ELSE LEFT_BRACE body_statement RIGHT_BRACE .)


state 511

    (33) increment_statement -> VARIABLE PLUS_EQUALS INTEGER .

    RIGHT_PAREN     reduce using rule 33 (increment_statement -> VARIABLE PLUS_EQUALS INTEGER .)


state 512

    (34) increment_statement -> VARIABLE EQUALS VARIABLE . operator_aritmetic number_values
    (44) operator_aritmetic -> . PLUS
    (45) operator_aritmetic -> . MINUS
    (46) operator_aritmetic -> . MULTIPLY
    (47) operator_aritmetic -> . DIVIDE
    (48) operator_aritmetic -> . MODULE
    (49) operator_aritmetic -> . POW

    PLUS            shift and go to state 406
    MINUS           shift and go to state 407
    MULTIPLY        shift and go to state 408
    DIVIDE          shift and go to state 409
    MODULE          shift and go to state 410
    POW             shift and go to state 411

    operator_aritmetic             shift and go to state 518

state 513

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 519
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 514

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params . RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE

    RIGHT_PAREN     shift and go to state 520


state 515

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 521


state 516

    (238) interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .

    RIGHT_BRACE     reduce using rule 238 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PUBLIC          reduce using rule 238 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PRIVATE         reduce using rule 238 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    PROTECTED       reduce using rule 238 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)
    FUNCTION        reduce using rule 238 (interface_method -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN SEMICOLON .)


state 517

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE . body_statement RIGHT_BRACE else_statement
    (21) body_statement -> . sentence
    (22) body_statement -> . sentence RETURN values SEMICOLON
    (23) body_statement -> . sentence RETURN SEMICOLON
    (24) body_statement -> . sentence BREAK SEMICOLON
    (25) body_statement -> . sentence body_statement
    (26) body_statement -> . RETURN values SEMICOLON
    (27) body_statement -> . BREAK SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element

    RETURN          shift and go to state 400
    BREAK           shift and go to state 401
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    VARIABLE        shift and go to state 23
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    body_statement                 shift and go to state 522
    sentence                       shift and go to state 399
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    access_array_element           shift and go to state 31
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37
    access_method_object           shift and go to state 38

state 518

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic . number_values
    (42) number_values -> . INTEGER
    (43) number_values -> . FLOAT

    INTEGER         shift and go to state 354
    FLOAT           shift and go to state 355

    number_values                  shift and go to state 523

state 519

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 524


state 520

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN . LEFT_BRACE method_body RIGHT_BRACE

    LEFT_BRACE      shift and go to state 525


state 521

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (257) method_body -> . classStatement
    (258) method_body -> . classStatement return_form
    (259) method_body -> . return_form
    (260) method_body -> . classStatement BREAK SEMICOLON
    (261) method_body -> . classStatement method_body
    (265) classStatement -> . sentence
    (266) classStatement -> . access_method_object SEMICOLON
    (262) return_form -> . RETURN values SEMICOLON
    (263) return_form -> . RETURN access_method_object SEMICOLON
    (264) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 531
    VARIABLE        shift and go to state 532
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 526
    classStatement                 shift and go to state 527
    return_form                    shift and go to state 528
    sentence                       shift and go to state 529
    access_method_object           shift and go to state 530
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 533
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 522

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement . RIGHT_BRACE else_statement

    RIGHT_BRACE     shift and go to state 534


state 523

    (34) increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .

    RIGHT_PAREN     reduce using rule 34 (increment_statement -> VARIABLE EQUALS VARIABLE operator_aritmetic number_values .)


state 524

    (28) for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .

    ECHO            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (for_statement -> FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)


state 525

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE . method_body RIGHT_BRACE
    (257) method_body -> . classStatement
    (258) method_body -> . classStatement return_form
    (259) method_body -> . return_form
    (260) method_body -> . classStatement BREAK SEMICOLON
    (261) method_body -> . classStatement method_body
    (265) classStatement -> . sentence
    (266) classStatement -> . access_method_object SEMICOLON
    (262) return_form -> . RETURN values SEMICOLON
    (263) return_form -> . RETURN access_method_object SEMICOLON
    (264) return_form -> . RETURN SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RETURN          shift and go to state 531
    VARIABLE        shift and go to state 532
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    method_body                    shift and go to state 535
    classStatement                 shift and go to state 527
    return_form                    shift and go to state 528
    sentence                       shift and go to state 529
    access_method_object           shift and go to state 530
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 533
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 526

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 536


state 527

    (257) method_body -> classStatement .
    (258) method_body -> classStatement . return_form
    (260) method_body -> classStatement . BREAK SEMICOLON
    (261) method_body -> classStatement . method_body
    (262) return_form -> . RETURN values SEMICOLON
    (263) return_form -> . RETURN access_method_object SEMICOLON
    (264) return_form -> . RETURN SEMICOLON
    (257) method_body -> . classStatement
    (258) method_body -> . classStatement return_form
    (259) method_body -> . return_form
    (260) method_body -> . classStatement BREAK SEMICOLON
    (261) method_body -> . classStatement method_body
    (265) classStatement -> . sentence
    (266) classStatement -> . access_method_object SEMICOLON
    (3) sentence -> . print_statement SEMICOLON
    (4) sentence -> . assignment SEMICOLON
    (5) sentence -> . types_structure
    (6) sentence -> . class_declaration
    (7) sentence -> . interface_declaration
    (8) sentence -> . control_structures
    (9) sentence -> . function_declaration
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (97) print_statement -> . ECHO LEFT_PAREN printable_values RIGHT_PAREN
    (98) print_statement -> . PRINT LEFT_PAREN printable_values RIGHT_PAREN
    (99) print_statement -> . ECHO printable_values
    (100) print_statement -> . PRINT printable_values
    (132) assignment -> . variable_assignment
    (133) assignment -> . constant_assignment
    (177) types_structure -> . structure_array_principal
    (178) types_structure -> . structure_matrix_principal
    (179) types_structure -> . structure_object_principal
    (234) class_declaration -> . CLASS IDENTIFIER class_extends_opt class_implements_opt LEFT_BRACE class_body RIGHT_BRACE
    (235) interface_declaration -> . INTERFACE IDENTIFIER class_extends_opt LEFT_BRACE interface_body RIGHT_BRACE
    (10) control_structures -> . if_statement
    (11) control_structures -> . while_statement
    (12) control_structures -> . for_statement
    (161) function_declaration -> . FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN codeblock
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (134) variable_assignment -> . VARIABLE assignment_operator values
    (135) variable_assignment -> . VARIABLE assignment_operator expression
    (136) variable_assignment -> . VARIABLE assignment_operator function_invocation
    (137) variable_assignment -> . VARIABLE assignment_operator string_special_function
    (138) variable_assignment -> . VARIABLE assignment_operator types_structure
    (139) variable_assignment -> . VARIABLE assignment_operator input
    (140) variable_assignment -> . VARIABLE assignment_operator special_function
    (141) variable_assignment -> . VARIABLE assignment_operator conditional
    (142) variable_assignment -> . VARIABLE INCREASE
    (143) variable_assignment -> . VARIABLE DECREMENT
    (144) variable_assignment -> . INCREASE VARIABLE
    (145) variable_assignment -> . DECREMENT VARIABLE
    (148) constant_assignment -> . const_syntax
    (149) constant_assignment -> . define_syntax
    (180) structure_array_principal -> . indexed_array
    (181) structure_array_principal -> . associative_array
    (182) structure_array_principal -> . access_array_stucture
    (183) structure_array_principal -> . access_array_element
    (200) structure_matrix_principal -> . matrix_firstform
    (201) structure_matrix_principal -> . matrix_secondform
    (202) structure_matrix_principal -> . access_element_matrix SEMICOLON
    (203) structure_matrix_principal -> . modify_element_matrix SEMICOLON
    (204) structure_matrix_principal -> . add_element_matrix
    (218) structure_object_principal -> . object_creation
    (219) structure_object_principal -> . access_method_object
    (14) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (15) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (16) if_statement -> . IF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (13) while_statement -> . WHILE LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (28) for_statement -> . FOR LEFT_PAREN VARIABLE EQUALS expression_for SEMICOLON condition_for SEMICOLON increment_statement RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (150) const_syntax -> . CONST IDENTIFIER EQUALS values
    (151) define_syntax -> . DEFINE LEFT_PAREN STRING COMMA values RIGHT_PAREN
    (184) indexed_array -> . ARRAY LEFT_PAREN values_array_indexed RIGHT_PAREN
    (185) associative_array -> . ARRAY LEFT_PAREN structure_array RIGHT_PAREN
    (186) associative_array -> . ARRAY LEFT_BRACKET structure_array RIGHT_BRACKET
    (197) access_array_stucture -> . access_array_element SEMICOLON
    (205) matrix_firstform -> . ARRAY LEFT_PAREN structure_matrix_first RIGHT_PAREN SEMICOLON
    (206) matrix_secondform -> . LEFT_BRACKET structure_matrix_second RIGHT_BRACKET SEMICOLON
    (211) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (215) modify_element_matrix -> . access_element_matrix EQUALS values
    (216) modify_element_matrix -> . access_element_matrix EQUALS VARIABLE
    (217) add_element_matrix -> . VARIABLE LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (220) object_creation -> . NEW IDENTIFIER
    (221) object_creation -> . NEW IDENTIFIER LEFT_PAREN params RIGHT_PAREN

    RIGHT_BRACE     reduce using rule 257 (method_body -> classStatement .)
    BREAK           shift and go to state 538
    RETURN          shift and go to state 531
    VARIABLE        shift and go to state 532
    ECHO            shift and go to state 10
    PRINT           shift and go to state 11
    CLASS           shift and go to state 17
    INTERFACE       shift and go to state 18
    FUNCTION        shift and go to state 22
    INCREASE        shift and go to state 24
    DECREMENT       shift and go to state 25
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    FOR             shift and go to state 41
    CONST           shift and go to state 42
    DEFINE          shift and go to state 43
    ARRAY           shift and go to state 44
    LEFT_BRACKET    shift and go to state 45
    NEW             shift and go to state 46

    classStatement                 shift and go to state 527
    return_form                    shift and go to state 537
    method_body                    shift and go to state 539
    access_method_object           shift and go to state 530
    sentence                       shift and go to state 529
    print_statement                shift and go to state 3
    assignment                     shift and go to state 4
    types_structure                shift and go to state 5
    class_declaration              shift and go to state 6
    interface_declaration          shift and go to state 7
    control_structures             shift and go to state 8
    function_declaration           shift and go to state 9
    access_array_element           shift and go to state 533
    variable_assignment            shift and go to state 12
    constant_assignment            shift and go to state 13
    structure_array_principal      shift and go to state 14
    structure_matrix_principal     shift and go to state 15
    structure_object_principal     shift and go to state 16
    if_statement                   shift and go to state 19
    while_statement                shift and go to state 20
    for_statement                  shift and go to state 21
    const_syntax                   shift and go to state 26
    define_syntax                  shift and go to state 27
    indexed_array                  shift and go to state 28
    associative_array              shift and go to state 29
    access_array_stucture          shift and go to state 30
    matrix_firstform               shift and go to state 32
    matrix_secondform              shift and go to state 33
    access_element_matrix          shift and go to state 34
    modify_element_matrix          shift and go to state 35
    add_element_matrix             shift and go to state 36
    object_creation                shift and go to state 37

state 528

    (259) method_body -> return_form .

    RIGHT_BRACE     reduce using rule 259 (method_body -> return_form .)


state 529

    (265) classStatement -> sentence .

    BREAK           reduce using rule 265 (classStatement -> sentence .)
    RETURN          reduce using rule 265 (classStatement -> sentence .)
    VARIABLE        reduce using rule 265 (classStatement -> sentence .)
    ECHO            reduce using rule 265 (classStatement -> sentence .)
    PRINT           reduce using rule 265 (classStatement -> sentence .)
    CLASS           reduce using rule 265 (classStatement -> sentence .)
    INTERFACE       reduce using rule 265 (classStatement -> sentence .)
    FUNCTION        reduce using rule 265 (classStatement -> sentence .)
    INCREASE        reduce using rule 265 (classStatement -> sentence .)
    DECREMENT       reduce using rule 265 (classStatement -> sentence .)
    IF              reduce using rule 265 (classStatement -> sentence .)
    WHILE           reduce using rule 265 (classStatement -> sentence .)
    FOR             reduce using rule 265 (classStatement -> sentence .)
    CONST           reduce using rule 265 (classStatement -> sentence .)
    DEFINE          reduce using rule 265 (classStatement -> sentence .)
    ARRAY           reduce using rule 265 (classStatement -> sentence .)
    LEFT_BRACKET    reduce using rule 265 (classStatement -> sentence .)
    NEW             reduce using rule 265 (classStatement -> sentence .)
    RIGHT_BRACE     reduce using rule 265 (classStatement -> sentence .)


state 530

    (266) classStatement -> access_method_object . SEMICOLON
    (219) structure_object_principal -> access_method_object .

    SEMICOLON       shift and go to state 540
    BREAK           reduce using rule 219 (structure_object_principal -> access_method_object .)
    RETURN          reduce using rule 219 (structure_object_principal -> access_method_object .)
    VARIABLE        reduce using rule 219 (structure_object_principal -> access_method_object .)
    ECHO            reduce using rule 219 (structure_object_principal -> access_method_object .)
    PRINT           reduce using rule 219 (structure_object_principal -> access_method_object .)
    CLASS           reduce using rule 219 (structure_object_principal -> access_method_object .)
    INTERFACE       reduce using rule 219 (structure_object_principal -> access_method_object .)
    FUNCTION        reduce using rule 219 (structure_object_principal -> access_method_object .)
    INCREASE        reduce using rule 219 (structure_object_principal -> access_method_object .)
    DECREMENT       reduce using rule 219 (structure_object_principal -> access_method_object .)
    IF              reduce using rule 219 (structure_object_principal -> access_method_object .)
    WHILE           reduce using rule 219 (structure_object_principal -> access_method_object .)
    FOR             reduce using rule 219 (structure_object_principal -> access_method_object .)
    CONST           reduce using rule 219 (structure_object_principal -> access_method_object .)
    DEFINE          reduce using rule 219 (structure_object_principal -> access_method_object .)
    ARRAY           reduce using rule 219 (structure_object_principal -> access_method_object .)
    LEFT_BRACKET    reduce using rule 219 (structure_object_principal -> access_method_object .)
    NEW             reduce using rule 219 (structure_object_principal -> access_method_object .)
    RIGHT_BRACE     reduce using rule 219 (structure_object_principal -> access_method_object .)


state 531

    (262) return_form -> RETURN . values SEMICOLON
    (263) return_form -> RETURN . access_method_object SEMICOLON
    (264) return_form -> RETURN . SEMICOLON
    (115) values -> . INTEGER
    (116) values -> . STRING
    (117) values -> . FLOAT
    (118) values -> . boolean
    (222) access_method_object -> . VARIABLE MINUS GREATER_THAN function_invocation
    (223) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType
    (224) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> . VARIABLE MINUS GREATER_THAN accessType EQUALS access_array_element
    (227) access_method_object -> . access_array_element MINUS GREATER_THAN function_invocation
    (228) access_method_object -> . access_array_element MINUS GREATER_THAN accessType
    (229) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> . access_array_element MINUS GREATER_THAN accessType EQUALS access_array_element
    (119) boolean -> . TRUE
    (120) boolean -> . FALSE
    (198) access_array_element -> . VARIABLE LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> . VARIABLE LEFT_BRACKET VARIABLE RIGHT_BRACKET

    SEMICOLON       shift and go to state 542
    INTEGER         shift and go to state 194
    STRING          shift and go to state 195
    FLOAT           shift and go to state 196
    VARIABLE        shift and go to state 544
    TRUE            shift and go to state 197
    FALSE           shift and go to state 198

    values                         shift and go to state 541
    access_method_object           shift and go to state 543
    boolean                        shift and go to state 61
    access_array_element           shift and go to state 545

state 532

    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (134) variable_assignment -> VARIABLE . assignment_operator values
    (135) variable_assignment -> VARIABLE . assignment_operator expression
    (136) variable_assignment -> VARIABLE . assignment_operator function_invocation
    (137) variable_assignment -> VARIABLE . assignment_operator string_special_function
    (138) variable_assignment -> VARIABLE . assignment_operator types_structure
    (139) variable_assignment -> VARIABLE . assignment_operator input
    (140) variable_assignment -> VARIABLE . assignment_operator special_function
    (141) variable_assignment -> VARIABLE . assignment_operator conditional
    (142) variable_assignment -> VARIABLE . INCREASE
    (143) variable_assignment -> VARIABLE . DECREMENT
    (211) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (212) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (213) access_element_matrix -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET LEFT_BRACKET INTEGER RIGHT_BRACKET
    (214) access_element_matrix -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET LEFT_BRACKET VARIABLE RIGHT_BRACKET
    (217) add_element_matrix -> VARIABLE . LEFT_BRACKET RIGHT_BRACKET EQUALS indexed_array
    (146) assignment_operator -> . EQUALS
    (147) assignment_operator -> . PLUS_EQUALS

    MINUS           shift and go to state 91
    LEFT_BRACKET    shift and go to state 89
    INCREASE        shift and go to state 87
    DECREMENT       shift and go to state 88
    EQUALS          shift and go to state 90
    PLUS_EQUALS     shift and go to state 92

    assignment_operator            shift and go to state 86

state 533

    (227) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (229) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element
    (183) structure_array_principal -> access_array_element .
    (197) access_array_stucture -> access_array_element . SEMICOLON

    MINUS           shift and go to state 96
    BREAK           reduce using rule 183 (structure_array_principal -> access_array_element .)
    RETURN          reduce using rule 183 (structure_array_principal -> access_array_element .)
    VARIABLE        reduce using rule 183 (structure_array_principal -> access_array_element .)
    ECHO            reduce using rule 183 (structure_array_principal -> access_array_element .)
    PRINT           reduce using rule 183 (structure_array_principal -> access_array_element .)
    CLASS           reduce using rule 183 (structure_array_principal -> access_array_element .)
    INTERFACE       reduce using rule 183 (structure_array_principal -> access_array_element .)
    FUNCTION        reduce using rule 183 (structure_array_principal -> access_array_element .)
    INCREASE        reduce using rule 183 (structure_array_principal -> access_array_element .)
    DECREMENT       reduce using rule 183 (structure_array_principal -> access_array_element .)
    IF              reduce using rule 183 (structure_array_principal -> access_array_element .)
    WHILE           reduce using rule 183 (structure_array_principal -> access_array_element .)
    FOR             reduce using rule 183 (structure_array_principal -> access_array_element .)
    CONST           reduce using rule 183 (structure_array_principal -> access_array_element .)
    DEFINE          reduce using rule 183 (structure_array_principal -> access_array_element .)
    ARRAY           reduce using rule 183 (structure_array_principal -> access_array_element .)
    LEFT_BRACKET    reduce using rule 183 (structure_array_principal -> access_array_element .)
    NEW             reduce using rule 183 (structure_array_principal -> access_array_element .)
    RIGHT_BRACE     reduce using rule 183 (structure_array_principal -> access_array_element .)
    SEMICOLON       shift and go to state 95


state 534

    (17) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .
    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . elseif_statement
    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE . else_statement
    (17) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE
    (18) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement
    (19) elseif_statement -> . ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement
    (20) else_statement -> . ELSE LEFT_BRACE body_statement RIGHT_BRACE

    ECHO            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    PRINT           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CLASS           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INTERFACE       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FUNCTION        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    VARIABLE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    INCREASE        reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DECREMENT       reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    IF              reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    WHILE           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    FOR             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    CONST           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    DEFINE          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ARRAY           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    LEFT_BRACKET    reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    NEW             reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    $end            reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RETURN          reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    BREAK           reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 17 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE .)
    ELSEIF          shift and go to state 460
    ELSE            shift and go to state 461

    elseif_statement               shift and go to state 546
    else_statement                 shift and go to state 547

state 535

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 548


state 536

    (248) class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 248 (class_member -> visibility_opt FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 537

    (258) method_body -> classStatement return_form .
    (259) method_body -> return_form .

  ! reduce/reduce conflict for RIGHT_BRACE resolved using rule 258 (method_body -> classStatement return_form .)
    RIGHT_BRACE     reduce using rule 258 (method_body -> classStatement return_form .)

  ! RIGHT_BRACE     [ reduce using rule 259 (method_body -> return_form .) ]


state 538

    (260) method_body -> classStatement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 549


state 539

    (261) method_body -> classStatement method_body .

    RIGHT_BRACE     reduce using rule 261 (method_body -> classStatement method_body .)


state 540

    (266) classStatement -> access_method_object SEMICOLON .

    BREAK           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    RETURN          reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    VARIABLE        reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    ECHO            reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    PRINT           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    CLASS           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    INTERFACE       reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    FUNCTION        reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    INCREASE        reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    DECREMENT       reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    IF              reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    WHILE           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    FOR             reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    CONST           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    DEFINE          reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    ARRAY           reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    LEFT_BRACKET    reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    NEW             reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)
    RIGHT_BRACE     reduce using rule 266 (classStatement -> access_method_object SEMICOLON .)


state 541

    (262) return_form -> RETURN values . SEMICOLON

    SEMICOLON       shift and go to state 550


state 542

    (264) return_form -> RETURN SEMICOLON .

    RIGHT_BRACE     reduce using rule 264 (return_form -> RETURN SEMICOLON .)


state 543

    (263) return_form -> RETURN access_method_object . SEMICOLON

    SEMICOLON       shift and go to state 551


state 544

    (222) access_method_object -> VARIABLE . MINUS GREATER_THAN function_invocation
    (223) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType
    (224) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS values
    (225) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (226) access_method_object -> VARIABLE . MINUS GREATER_THAN accessType EQUALS access_array_element
    (198) access_array_element -> VARIABLE . LEFT_BRACKET INTEGER RIGHT_BRACKET
    (199) access_array_element -> VARIABLE . LEFT_BRACKET VARIABLE RIGHT_BRACKET

    MINUS           shift and go to state 91
    LEFT_BRACKET    shift and go to state 326


state 545

    (227) access_method_object -> access_array_element . MINUS GREATER_THAN function_invocation
    (228) access_method_object -> access_array_element . MINUS GREATER_THAN accessType
    (229) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS values
    (230) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS VARIABLE
    (231) access_method_object -> access_array_element . MINUS GREATER_THAN accessType EQUALS access_array_element

    MINUS           shift and go to state 96


state 546

    (18) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .

    ECHO            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    PRINT           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CLASS           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INTERFACE       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FUNCTION        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    VARIABLE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    INCREASE        reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DECREMENT       reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    IF              reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    WHILE           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    FOR             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    CONST           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    DEFINE          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    ARRAY           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    LEFT_BRACKET    reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    NEW             reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    $end            reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RETURN          reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    BREAK           reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)
    RIGHT_BRACE     reduce using rule 18 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE elseif_statement .)


state 547

    (19) elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .

    ECHO            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    PRINT           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CLASS           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INTERFACE       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FUNCTION        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    VARIABLE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    INCREASE        reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DECREMENT       reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    IF              reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    WHILE           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    FOR             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    CONST           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    DEFINE          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    ARRAY           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    LEFT_BRACKET    reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    NEW             reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    $end            reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RETURN          reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    BREAK           reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)
    RIGHT_BRACE     reduce using rule 19 (elseif_statement -> ELSEIF LEFT_PAREN conditional RIGHT_PAREN LEFT_BRACE body_statement RIGHT_BRACE else_statement .)


state 548

    (247) class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .

    RIGHT_BRACE     reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PUBLIC          reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PRIVATE         reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    PROTECTED       reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    STATIC          reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    FUNCTION        reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    VARIABLE        reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    CONST           reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)
    DEFINE          reduce using rule 247 (class_member -> visibility_opt STATIC FUNCTION IDENTIFIER LEFT_PAREN params RIGHT_PAREN LEFT_BRACE method_body RIGHT_BRACE .)


state 549

    (260) method_body -> classStatement BREAK SEMICOLON .

    RIGHT_BRACE     reduce using rule 260 (method_body -> classStatement BREAK SEMICOLON .)


state 550

    (262) return_form -> RETURN values SEMICOLON .

    RIGHT_BRACE     reduce using rule 262 (return_form -> RETURN values SEMICOLON .)


state 551

    (263) return_form -> RETURN access_method_object SEMICOLON .

    RIGHT_BRACE     reduce using rule 263 (return_form -> RETURN access_method_object SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 53 resolved as shift
WARNING: shift/reduce conflict for LOGIC_AND in state 62 resolved as shift
WARNING: shift/reduce conflict for LOGIC_OR in state 62 resolved as shift
WARNING: shift/reduce conflict for LOGIC_XOR in state 62 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 149 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 169 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 169 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 182 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 200 resolved as shift
WARNING: shift/reduce conflict for EQUALS_EQUALS in state 222 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 294 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 295 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 300 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 339 resolved as shift
WARNING: shift/reduce conflict for RIGHT_PAREN in state 357 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 391 resolved as shift
WARNING: shift/reduce conflict for LEFT_BRACKET in state 397 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 445 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 445 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 445 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 445 resolved as shift
WARNING: shift/reduce conflict for MODULE in state 445 resolved as shift
WARNING: shift/reduce conflict for POW in state 445 resolved as shift
WARNING: reduce/reduce conflict in state 53 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 53
WARNING: reduce/reduce conflict in state 54 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 54
WARNING: reduce/reduce conflict in state 59 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 59
WARNING: reduce/reduce conflict in state 59 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (true_boolean_types -> FLOAT)
WARNING: rejected rule (false_boolean_types -> FLOAT) in state 60
WARNING: reduce/reduce conflict in state 114 resolved using rule (printable_values -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 114
WARNING: reduce/reduce conflict in state 114 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 114
WARNING: reduce/reduce conflict in state 115 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 115
WARNING: reduce/reduce conflict in state 115 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 115
WARNING: reduce/reduce conflict in state 149 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (logic_not_sentence -> LOGIC_NOT VARIABLE) in state 149
WARNING: reduce/reduce conflict in state 149 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 149
WARNING: reduce/reduce conflict in state 152 resolved using rule (true_boolean_types -> STRING)
WARNING: rejected rule (false_boolean_types -> STRING) in state 152
WARNING: reduce/reduce conflict in state 169 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 169
WARNING: reduce/reduce conflict in state 200 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 200
WARNING: reduce/reduce conflict in state 222 resolved using rule (true_boolean_types -> VARIABLE)
WARNING: rejected rule (false_boolean_types -> VARIABLE) in state 222
WARNING: reduce/reduce conflict in state 223 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 223
WARNING: reduce/reduce conflict in state 223 resolved using rule (true_boolean_types -> INTEGER)
WARNING: rejected rule (false_boolean_types -> INTEGER) in state 223
WARNING: reduce/reduce conflict in state 230 resolved using rule (values -> INTEGER)
WARNING: rejected rule (factor -> INTEGER) in state 230
WARNING: reduce/reduce conflict in state 464 resolved using rule (body_statement -> sentence BREAK SEMICOLON)
WARNING: rejected rule (body_statement -> BREAK SEMICOLON) in state 464
WARNING: reduce/reduce conflict in state 484 resolved using rule (body_statement -> sentence RETURN values SEMICOLON)
WARNING: rejected rule (body_statement -> RETURN values SEMICOLON) in state 484
WARNING: reduce/reduce conflict in state 537 resolved using rule (method_body -> classStatement return_form)
WARNING: rejected rule (method_body -> return_form) in state 537
